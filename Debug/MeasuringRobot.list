
MeasuringRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800f07c  0800f07c  0001f07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f21c  0800f21c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f21c  0800f21c  0001f21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f224  0800f224  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f224  0800f224  0001f224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f228  0800f228  0001f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800f22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f0  2000009c  0800f2c8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000538c  0800f2c8  0002538c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f38b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005990  00000000  00000000  0004f457  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002298  00000000  00000000  00054de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002020  00000000  00000000  00057080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000094f5  00000000  00000000  000590a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ea41  00000000  00000000  00062595  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb662  00000000  00000000  00080fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099a4  00000000  00000000  0016c6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f064 	.word	0x0800f064

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	0800f064 	.word	0x0800f064

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c4:	f001 f998 	bl	80018f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c8:	f000 f85c 	bl	8000684 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005cc:	f000 fa20 	bl	8000a10 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 80005d0:	f000 f8f4 	bl	80007bc <MX_DFSDM1_Init>
	MX_DFSDM2_Init();
 80005d4:	f000 f92a 	bl	800082c <MX_DFSDM2_Init>
	MX_FSMC_Init();
 80005d8:	f000 fc4e 	bl	8000e78 <MX_FSMC_Init>
	MX_I2S2_Init();
 80005dc:	f000 f990 	bl	8000900 <MX_I2S2_Init>
	MX_SDIO_SD_Init();
 80005e0:	f000 f9bc 	bl	800095c <MX_SDIO_SD_Init>
	MX_UART7_Init();
 80005e4:	f000 f9ea 	bl	80009bc <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart7,lidar_tx_buffer,6,50);
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	2206      	movs	r2, #6
 80005ec:	4917      	ldr	r1, [pc, #92]	; (800064c <main+0x8c>)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0x90>)
 80005f0:	f005 ffd1 	bl	8006596 <HAL_UART_Transmit>
	lidar_tx_buffer[1] = 0x04;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x8c>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	705a      	strb	r2, [r3, #1]
	lidar_tx_buffer[2] = 0x04;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0x8c>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	709a      	strb	r2, [r3, #2]
	//U

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000600:	f00a fb18 	bl	800ac34 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PollLidar */
	PollLidarHandle = osThreadNew(StartPollLidarTask, NULL,
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <main+0x94>)
 8000606:	2100      	movs	r1, #0
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0x98>)
 800060a:	f00a fb7d 	bl	800ad08 <osThreadNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <main+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
			&PollLidar_attributes);

	/* creation of UpdateLCD */
	UpdateLCDHandle = osThreadNew(StartUpdateLCDTask, NULL,
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <main+0xa0>)
 8000616:	2100      	movs	r1, #0
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0xa4>)
 800061a:	f00a fb75 	bl	800ad08 <osThreadNew>
 800061e:	4602      	mov	r2, r0
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <main+0xa8>)
 8000622:	601a      	str	r2, [r3, #0]
			&UpdateLCD_attributes);

	/* creation of ControlMotors */
	ControlMotorsHandle = osThreadNew(StartMotorControlTask, NULL,
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <main+0xac>)
 8000626:	2100      	movs	r1, #0
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <main+0xb0>)
 800062a:	f00a fb6d 	bl	800ad08 <osThreadNew>
 800062e:	4602      	mov	r2, r0
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0xb4>)
 8000632:	601a      	str	r2, [r3, #0]
			&ControlMotors_attributes);

	/* creation of ChangeMetric */
	ChangeMetricHandle = osThreadNew(StartChangeMetricTask, NULL,
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <main+0xb8>)
 8000636:	2100      	movs	r1, #0
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <main+0xbc>)
 800063a:	f00a fb65 	bl	800ad08 <osThreadNew>
 800063e:	4602      	mov	r2, r0
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <main+0xc0>)
 8000642:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000644:	f00a fb2a 	bl	800ac9c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000648:	e7fe      	b.n	8000648 <main+0x88>
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	20004a54 	.word	0x20004a54
 8000654:	0800f0dc 	.word	0x0800f0dc
 8000658:	08000f3d 	.word	0x08000f3d
 800065c:	20004ad0 	.word	0x20004ad0
 8000660:	0800f100 	.word	0x0800f100
 8000664:	08000f89 	.word	0x08000f89
 8000668:	20004a94 	.word	0x20004a94
 800066c:	0800f124 	.word	0x0800f124
 8000670:	08000f99 	.word	0x08000f99
 8000674:	20004c34 	.word	0x20004c34
 8000678:	0800f148 	.word	0x0800f148
 800067c:	08000fa3 	.word	0x08000fa3
 8000680:	20004a50 	.word	0x20004a50

08000684 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b0aa      	sub	sp, #168	; 0xa8
 8000688:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800068a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00d fdf9 	bl	800e28a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000698:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2258      	movs	r2, #88	; 0x58
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00d fdea 	bl	800e28a <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <SystemClock_Config+0x130>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <SystemClock_Config+0x130>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <SystemClock_Config+0x130>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <SystemClock_Config+0x134>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <SystemClock_Config+0x134>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <SystemClock_Config+0x134>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80006ee:	2303      	movs	r3, #3
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80006f2:	2300      	movs	r3, #0
 80006f4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLM = 15;
 8000710:	230f      	movs	r3, #15
 8000712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000722:	2305      	movs	r3, #5
 8000724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800072e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fcb2 	bl	800509c <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xbe>
		Error_Handler();
 800073e:	f000 fc4b 	bl	8000fd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	663b      	str	r3, [r7, #96]	; 0x60
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000746:	2300      	movs	r3, #0
 8000748:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000756:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f003 fec3 	bl	80044e8 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xe8>
		Error_Handler();
 8000768:	f000 fc36 	bl	8000fd8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1
 800076c:	f240 1361 	movw	r3, #353	; 0x161
 8000770:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_DFSDM1 | RCC_PERIPHCLK_SDIO | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000776:	230c      	movs	r3, #12
 8000778:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000782:	2300      	movs	r3, #0
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000786:	2300      	movs	r3, #0
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 800078a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000790:	2300      	movs	r3, #0
 8000792:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f8a1 	bl	80048e4 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x128>
		Error_Handler();
 80007a8:	f000 fc16 	bl	8000fd8 <Error_Handler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	37a8      	adds	r7, #168	; 0xa8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007c2:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MX_DFSDM1_Init+0x6c>)
 80007c4:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type =
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_DFSDM1_Init+0x68>)
 80007fe:	2201      	movs	r2, #1
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_DFSDM1_Init+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_DFSDM1_Init+0x68>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_DFSDM1_Init+0x68>)
 8000810:	f001 f9b8 	bl	8001b84 <HAL_DFSDM_ChannelInit>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_DFSDM1_Init+0x62>
		Error_Handler();
 800081a:	f000 fbdd 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20004a18 	.word	0x20004a18
 8000828:	40016020 	.word	0x40016020

0800082c <MX_DFSDM2_Init>:
/**
 * @brief DFSDM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM2_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM2_Init 0 */

	/* USER CODE BEGIN DFSDM2_Init 1 */

	/* USER CODE END DFSDM2_Init 1 */
	hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000832:	4a30      	ldr	r2, [pc, #192]	; (80008f4 <MX_DFSDM2_Init+0xc8>)
 8000834:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000838:	2201      	movs	r2, #1
 800083a:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel1.Init.OutputClock.Selection =
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel1.Init.SerialInterface.Type =
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 800085c:	2202      	movs	r2, #2
 800085e:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel1.Init.SerialInterface.SpiClock =
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 800086e:	2201      	movs	r2, #1
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel1.Init.Offset = 0;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 800087a:	2200      	movs	r2, #0
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK) {
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_DFSDM2_Init+0xc4>)
 8000880:	f001 f980 	bl	8001b84 <HAL_DFSDM_ChannelInit>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DFSDM2_Init+0x62>
		Error_Handler();
 800088a:	f000 fba5 	bl	8000fd8 <Error_Handler>
	}
	hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 8000890:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <MX_DFSDM2_Init+0xd0>)
 8000892:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 8000896:	2201      	movs	r2, #1
 8000898:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel7.Init.OutputClock.Selection =
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel7.Init.SerialInterface.Type =
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel7.Init.SerialInterface.SpiClock =
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel7.Init.Offset = 0;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK) {
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_DFSDM2_Init+0xcc>)
 80008de:	f001 f951 	bl	8001b84 <HAL_DFSDM_ChannelInit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DFSDM2_Init+0xc0>
		Error_Handler();
 80008e8:	f000 fb76 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM2_Init 2 */

	/* USER CODE END DFSDM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20004b24 	.word	0x20004b24
 80008f4:	40016420 	.word	0x40016420
 80008f8:	20004a98 	.word	0x20004a98
 80008fc:	400164e0 	.word	0x400164e0

08000900 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_I2S2_Init+0x54>)
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <MX_I2S2_Init+0x58>)
 8000908:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2S2_Init+0x54>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_I2S2_Init+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2S2_Init+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_I2S2_Init+0x54>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_I2S2_Init+0x54>)
 8000928:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800092c:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2S2_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2S2_Init+0x54>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2S2_Init+0x54>)
 800093c:	2201      	movs	r2, #1
 800093e:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2S2_Init+0x54>)
 8000942:	f003 f90f 	bl	8003b64 <HAL_I2S_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2S2_Init+0x50>
		Error_Handler();
 800094c:	f000 fb44 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20004bec 	.word	0x20004bec
 8000958:	40003800 	.word	0x40003800

0800095c <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_SDIO_SD_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800098c:	f004 fdc8 	bl	8005520 <HAL_SD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SDIO_SD_Init+0x3e>
		Error_Handler();
 8000996:	f000 fb1f 	bl	8000fd8 <Error_Handler>
	}
	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 80009a0:	f004 fff2 	bl	8005988 <HAL_SD_ConfigWideBusOperation>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SDIO_SD_Init+0x52>
		Error_Handler();
 80009aa:	f000 fb15 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20004b5c 	.word	0x20004b5c
 80009b8:	40012c00 	.word	0x40012c00

080009bc <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_UART7_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_UART7_Init+0x4c>)
 80009f4:	f005 fd82 	bl	80064fc <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_UART7_Init+0x46>
		Error_Handler();
 80009fe:	f000 faeb 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20004a54 	.word	0x20004a54
 8000a0c:	40007800 	.word	0x40007800

08000a10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	4bb1      	ldr	r3, [pc, #708]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4ab0      	ldr	r2, [pc, #704]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4bae      	ldr	r3, [pc, #696]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	4baa      	ldr	r3, [pc, #680]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4aa9      	ldr	r2, [pc, #676]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4ba7      	ldr	r3, [pc, #668]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4ba3      	ldr	r3, [pc, #652]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4aa2      	ldr	r2, [pc, #648]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4ba0      	ldr	r3, [pc, #640]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b9c      	ldr	r3, [pc, #624]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a9b      	ldr	r2, [pc, #620]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b99      	ldr	r3, [pc, #612]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b95      	ldr	r3, [pc, #596]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a94      	ldr	r2, [pc, #592]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b92      	ldr	r3, [pc, #584]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b8e      	ldr	r3, [pc, #568]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a8d      	ldr	r2, [pc, #564]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b8b      	ldr	r3, [pc, #556]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b87      	ldr	r3, [pc, #540]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a86      	ldr	r2, [pc, #536]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b84      	ldr	r3, [pc, #528]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b80      	ldr	r3, [pc, #512]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a7f      	ldr	r2, [pc, #508]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b7d      	ldr	r3, [pc, #500]	; (8000cf0 <MX_GPIO_Init+0x2e0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000b06:	2200      	movs	r2, #0
 8000b08:	2178      	movs	r1, #120	; 0x78
 8000b0a:	487a      	ldr	r0, [pc, #488]	; (8000cf4 <MX_GPIO_Init+0x2e4>)
 8000b0c:	f001 fb20 	bl	8002150 <HAL_GPIO_WritePin>
			LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin | LEFT_MOTOR_2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RIGHT_MOTOR_I_Pin | RIGHT_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f242 0120 	movw	r1, #8224	; 0x2020
 8000b16:	4878      	ldr	r0, [pc, #480]	; (8000cf8 <MX_GPIO_Init+0x2e8>)
 8000b18:	f001 fb1a 	bl	8002150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LEFT_MOTOR_SPEED_GPIO_Port, LEFT_MOTOR_SPEED_Pin,
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b22:	4876      	ldr	r0, [pc, #472]	; (8000cfc <MX_GPIO_Init+0x2ec>)
 8000b24:	f001 fb14 	bl	8002150 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RIGHT_MOTOR_IA4_GPIO_Port, RIGHT_MOTOR_IA4_Pin,
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4874      	ldr	r0, [pc, #464]	; (8000d00 <MX_GPIO_Init+0x2f0>)
 8000b2e:	f001 fb0f 	bl	8002150 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000b32:	2200      	movs	r2, #0
 8000b34:	f24e 0141 	movw	r1, #57409	; 0xe041
 8000b38:	4872      	ldr	r0, [pc, #456]	; (8000d04 <MX_GPIO_Init+0x2f4>)
 8000b3a:	f001 fb09 	bl	8002150 <HAL_GPIO_WritePin>
			RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin | WIFI_WKUP_Pin
					| LEFT_MOTOR_I_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13,
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000b44:	4870      	ldr	r0, [pc, #448]	; (8000d08 <MX_GPIO_Init+0x2f8>)
 8000b46:	f001 fb03 	bl	8002150 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : QSPI_BK1_IO2_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000b5a:	2309      	movs	r3, #9
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4863      	ldr	r0, [pc, #396]	; (8000cf4 <MX_GPIO_Init+0x2e4>)
 8000b66:	f001 f961 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin LEFT_MOTOR_2_Pin */
	GPIO_InitStruct.Pin = LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin
 8000b6a:	2378      	movs	r3, #120	; 0x78
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
			| LEFT_MOTOR_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	485c      	ldr	r0, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x2e4>)
 8000b82:	f001 f953 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_I_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_I_Pin | RIGHT_Pin;
 8000b86:	f242 0320 	movw	r3, #8224	; 0x2020
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <MX_GPIO_Init+0x2e8>)
 8000ba0:	f001 f944 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin | QSPI_BK1_IO1_Pin;
 8000ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	484e      	ldr	r0, [pc, #312]	; (8000cfc <MX_GPIO_Init+0x2ec>)
 8000bc2:	f001 f933 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : LEFT_MOTOR_SPEED_Pin */
	GPIO_InitStruct.Pin = LEFT_MOTOR_SPEED_Pin;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LEFT_MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4847      	ldr	r0, [pc, #284]	; (8000cfc <MX_GPIO_Init+0x2ec>)
 8000be0:	f001 f924 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin */
	GPIO_InitStruct.Pin = ARD_A0_Pin | ARD_A5_Pin;
 8000be4:	2311      	movs	r3, #17
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f001 f918 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : CTP_INT_Pin */
	GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c00:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <MX_GPIO_Init+0x2fc>)
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483a      	ldr	r0, [pc, #232]	; (8000cf8 <MX_GPIO_Init+0x2e8>)
 8000c10:	f001 f90c 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : METRIC_CHANGE_Pin */
	GPIO_InitStruct.Pin = METRIC_CHANGE_Pin;
 8000c14:	2301      	movs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <MX_GPIO_Init+0x2fc>)
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(METRIC_CHANGE_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4836      	ldr	r0, [pc, #216]	; (8000d00 <MX_GPIO_Init+0x2f0>)
 8000c28:	f001 f900 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : RIGHT_MOTOR_IA4_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_IA4_Pin;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(RIGHT_MOTOR_IA4_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <MX_GPIO_Init+0x2f0>)
 8000c44:	f001 f8f2 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A3_Pin */
	GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <MX_GPIO_Init+0x2f0>)
 8000c5c:	f001 f8e6 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_SPEED_Pin PB13 LCD_TE_Pin WIFI_WKUP_Pin
	 LEFT_MOTOR_I_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin
 8000c60:	f24e 0341 	movw	r3, #57409	; 0xe041
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
			| WIFI_WKUP_Pin | LEFT_MOTOR_I_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <MX_GPIO_Init+0x2f4>)
 8000c7a:	f001 f8d7 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A4_Pin */
	GPIO_InitStruct.Pin = ARD_A4_Pin;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481c      	ldr	r0, [pc, #112]	; (8000d04 <MX_GPIO_Init+0x2f4>)
 8000c92:	f001 f8cb 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_CLK_Pin */
	GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000c96:	2304      	movs	r3, #4
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000ca6:	2309      	movs	r3, #9
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <MX_GPIO_Init+0x2f4>)
 8000cb2:	f001 f8bb 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_Detect_Pin */
	GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_GPIO_Init+0x2fc>)
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0x2ec>)
 8000ccc:	f001 f8ae 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8000cd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	e010      	b.n	8000d10 <MX_GPIO_Init+0x300>
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40021400 	.word	0x40021400
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	4853      	ldr	r0, [pc, #332]	; (8000e60 <MX_GPIO_Init+0x450>)
 8000d12:	f001 f88b 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D13_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	484b      	ldr	r0, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x450>)
 8000d34:	f001 f87a 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_IO3_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4843      	ldr	r0, [pc, #268]	; (8000e64 <MX_GPIO_Init+0x454>)
 8000d56:	f001 f869 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	483c      	ldr	r0, [pc, #240]	; (8000e68 <MX_GPIO_Init+0x458>)
 8000d76:	f001 f859 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin | CODEC_INT_Pin;
 8000d7a:	f248 0380 	movw	r3, #32896	; 0x8080
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <MX_GPIO_Init+0x45c>)
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4836      	ldr	r0, [pc, #216]	; (8000e68 <MX_GPIO_Init+0x458>)
 8000d90:	f001 f84c 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13;
 8000d94:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	482e      	ldr	r0, [pc, #184]	; (8000e68 <MX_GPIO_Init+0x458>)
 8000dae:	f001 f83d 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2CFMP1_SCL_Pin I2CFMP_SDA_Pin */
	GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin | I2CFMP_SDA_Pin;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <MX_GPIO_Init+0x460>)
 8000dce:	f001 f82d 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D10_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000de4:	2301      	movs	r3, #1
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_GPIO_Init+0x464>)
 8000df0:	f001 f81c 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 8000df4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e06:	2308      	movs	r3, #8
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x458>)
 8000e12:	f001 f80b 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D12_Pin | ARD_D11_Pin;
 8000e16:	2330      	movs	r3, #48	; 0x30
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e26:	2306      	movs	r3, #6
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0x450>)
 8000e32:	f000 fffb 	bl	8001e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_GPIO_Init+0x450>)
 8000e54:	f000 ffea 	bl	8001e2c <HAL_GPIO_Init>

}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020000 	.word	0x40020000

08000e78 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000e92:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e96:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000e9a:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <MX_FSMC_Init+0xc0>)
 8000e9c:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8000efc:	230f      	movs	r3, #15
 8000efe:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 8000f00:	23ff      	movs	r3, #255	; 0xff
 8000f02:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 8000f04:	230f      	movs	r3, #15
 8000f06:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8000f0c:	2311      	movs	r3, #17
 8000f0e:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000f1c:	f005 f86c 	bl	8005ff8 <HAL_SRAM_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_FSMC_Init+0xb2>
		Error_Handler();
 8000f26:	f000 f857 	bl	8000fd8 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20004ad4 	.word	0x20004ad4
 8000f38:	a0000104 	.word	0xa0000104

08000f3c <StartPollLidarTask>:
 * @brief  Function implementing the PollLidar thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPollLidarTask */
void StartPollLidarTask(void *argument) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000f44:	f00c fe5a 	bl	800dbfc <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	TickType_t lastWakeTime = xTaskGetTickCount();
 8000f48:	f00b faf2 	bl	800c530 <xTaskGetTickCount>
 8000f4c:	60f8      	str	r0, [r7, #12]

	for (;;) {
		//delay for 50ms
		vTaskDelayUntil(&xTaskGetTickCount, LIDAR_RATE);
 8000f4e:	2132      	movs	r1, #50	; 0x32
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <StartPollLidarTask+0x3c>)
 8000f52:	f00b f931 	bl	800c1b8 <vTaskDelayUntil>

		// send 5A 04 04 00 to tell lidar sensor to send data
		HAL_UART_Transmit(&huart7,lidar_tx_buffer,4,50);
 8000f56:	2332      	movs	r3, #50	; 0x32
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <StartPollLidarTask+0x40>)
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <StartPollLidarTask+0x44>)
 8000f5e:	f005 fb1a 	bl	8006596 <HAL_UART_Transmit>

		//get 9 bytes of data and place into buffer
		HAL_UART_Receive(&huart7,lidar_rx_buffer,9,50);
 8000f62:	2332      	movs	r3, #50	; 0x32
 8000f64:	2209      	movs	r2, #9
 8000f66:	4907      	ldr	r1, [pc, #28]	; (8000f84 <StartPollLidarTask+0x48>)
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <StartPollLidarTask+0x44>)
 8000f6a:	f005 fbad 	bl	80066c8 <HAL_UART_Receive>

		printf(lidar_rx_buffer);
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <StartPollLidarTask+0x48>)
 8000f70:	f00d fa3c 	bl	800e3ec <iprintf>
	for (;;) {
 8000f74:	e7eb      	b.n	8000f4e <StartPollLidarTask+0x12>
 8000f76:	bf00      	nop
 8000f78:	0800c531 	.word	0x0800c531
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20004a54 	.word	0x20004a54
 8000f84:	20004be0 	.word	0x20004be0

08000f88 <StartUpdateLCDTask>:
 * @brief Function implementing the UpdateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCDTask */
void StartUpdateLCDTask(void *argument) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUpdateLCDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f009 ff5f 	bl	800ae54 <osDelay>
 8000f96:	e7fb      	b.n	8000f90 <StartUpdateLCDTask+0x8>

08000f98 <StartMotorControlTask>:
 * @brief Function implementing the ControlMotors thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorControlTask */
void StartMotorControlTask(void *argument) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorControlTask */
	/* Infinite loop */
	for (;;) {
 8000fa0:	e7fe      	b.n	8000fa0 <StartMotorControlTask+0x8>

08000fa2 <StartChangeMetricTask>:
 * @brief Function implementing the ChangeMetric thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChangeMetricTask */
void StartChangeMetricTask(void *argument) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartChangeMetricTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f009 ff52 	bl	800ae54 <osDelay>
 8000fb0:	e7fb      	b.n	8000faa <StartChangeMetricTask+0x8>
	...

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fc6:	f000 fcb9 	bl	800193c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40001000 	.word	0x40001000

08000fd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a77      	ldr	r2, [pc, #476]	; (8001234 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00e      	beq.n	8001078 <HAL_DFSDM_ChannelMspInit+0x40>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a76      	ldr	r2, [pc, #472]	; (8001238 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d009      	beq.n	8001078 <HAL_DFSDM_ChannelMspInit+0x40>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a74      	ldr	r2, [pc, #464]	; (800123c <HAL_DFSDM_ChannelMspInit+0x204>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d004      	beq.n	8001078 <HAL_DFSDM_ChannelMspInit+0x40>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a73      	ldr	r2, [pc, #460]	; (8001240 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d154      	bne.n	8001122 <HAL_DFSDM_ChannelMspInit+0xea>
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d150      	bne.n	8001122 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001088:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 800108a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108e:	6453      	str	r3, [r2, #68]	; 0x44
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a61      	ldr	r2, [pc, #388]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4856      	ldr	r0, [pc, #344]	; (800124c <HAL_DFSDM_ChannelMspInit+0x214>)
 80010f2:	f000 fe9b 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80010f6:	2340      	movs	r3, #64	; 0x40
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001106:	2306      	movs	r3, #6
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	484f      	ldr	r0, [pc, #316]	; (8001250 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001112:	f000 fe8b 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001116:	4b4b      	ldr	r3, [pc, #300]	; (8001244 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800111e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001120:	e084      	b.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a43      	ldr	r2, [pc, #268]	; (8001234 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d07f      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a41      	ldr	r2, [pc, #260]	; (8001238 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d07a      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_DFSDM_ChannelMspInit+0x204>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d075      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3e      	ldr	r2, [pc, #248]	; (8001240 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d070      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800114a:	4b42      	ldr	r3, [pc, #264]	; (8001254 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d16c      	bne.n	800122c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a34      	ldr	r2, [pc, #208]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a26      	ldr	r2, [pc, #152]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_DFSDM_ChannelMspInit+0x210>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	481b      	ldr	r0, [pc, #108]	; (800124c <HAL_DFSDM_ChannelMspInit+0x214>)
 80011de:	f000 fe25 	bl	8001e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80011e2:	2304      	movs	r3, #4
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80011f2:	2303      	movs	r3, #3
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4814      	ldr	r0, [pc, #80]	; (8001250 <HAL_DFSDM_ChannelMspInit+0x218>)
 80011fe:	f000 fe15 	bl	8001e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001212:	2306      	movs	r3, #6
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	480e      	ldr	r0, [pc, #56]	; (8001258 <HAL_DFSDM_ChannelMspInit+0x220>)
 800121e:	f000 fe05 	bl	8001e2c <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3738      	adds	r7, #56	; 0x38
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40016000 	.word	0x40016000
 8001238:	40016020 	.word	0x40016020
 800123c:	40016040 	.word	0x40016040
 8001240:	40016060 	.word	0x40016060
 8001244:	200000b8 	.word	0x200000b8
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020c00 	.word	0x40020c00
 8001254:	200000bc 	.word	0x200000bc
 8001258:	40020400 	.word	0x40020400

0800125c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_I2S_MspInit+0x15c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f040 8097 	bne.w	80013ae <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_I2S_MspInit+0x160>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_I2S_MspInit+0x160>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <HAL_I2S_MspInit+0x160>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a45      	ldr	r2, [pc, #276]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a30      	ldr	r2, [pc, #192]	; (80013bc <HAL_I2S_MspInit+0x160>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HAL_I2S_MspInit+0x160>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800130c:	2304      	movs	r3, #4
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800131c:	2306      	movs	r3, #6
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4826      	ldr	r0, [pc, #152]	; (80013c0 <HAL_I2S_MspInit+0x164>)
 8001328:	f000 fd80 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800132c:	2308      	movs	r3, #8
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133c:	2305      	movs	r3, #5
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <HAL_I2S_MspInit+0x164>)
 8001348:	f000 fd70 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800134c:	2308      	movs	r3, #8
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4817      	ldr	r0, [pc, #92]	; (80013c4 <HAL_I2S_MspInit+0x168>)
 8001368:	f000 fd60 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 800136c:	2308      	movs	r3, #8
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137c:	2305      	movs	r3, #5
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4810      	ldr	r0, [pc, #64]	; (80013c8 <HAL_I2S_MspInit+0x16c>)
 8001388:	f000 fd50 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800138c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139e:	2305      	movs	r3, #5
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <HAL_I2S_MspInit+0x170>)
 80013aa:	f000 fd3f 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3730      	adds	r7, #48	; 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40003800 	.word	0x40003800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40020400 	.word	0x40020400

080013d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_SD_MspInit+0xc0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d14a      	bne.n	8001488 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_SD_MspInit+0xc4>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_SD_MspInit+0xc4>)
 80013fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_SD_MspInit+0xc4>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_SD_MspInit+0xc4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001456:	230c      	movs	r3, #12
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_SD_MspInit+0xc8>)
 8001462:	f000 fce3 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001466:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800146a:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001478:	230c      	movs	r3, #12
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_SD_MspInit+0xcc>)
 8001484:	f000 fcd2 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020800 	.word	0x40020800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_UART_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = LIDAR_IN_Pin|LIDAR_OUT_Pin;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800150a:	2308      	movs	r3, #8
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0x8c>)
 8001516:	f000 fc89 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40007800 	.word	0x40007800
 8001528:	40023800 	.word	0x40023800
 800152c:	40021400 	.word	0x40021400

08001530 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_FSMC_MspInit+0xc8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d150      	bne.n	80015ee <HAL_FSMC_MspInit+0xbe>
    return;
  }
  FSMC_Initialized = 1;
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_FSMC_MspInit+0xc8>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_FSMC_MspInit+0xcc>)
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_FSMC_MspInit+0xcc>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6393      	str	r3, [r2, #56]	; 0x38
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_FSMC_MspInit+0xcc>)
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800156e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001572:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001580:	230c      	movs	r3, #12
 8001582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	481d      	ldr	r0, [pc, #116]	; (8001600 <HAL_FSMC_MspInit+0xd0>)
 800158a:	f000 fc4f 	bl	8001e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 800158e:	233f      	movs	r3, #63	; 0x3f
 8001590:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800159e:	230c      	movs	r3, #12
 80015a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <HAL_FSMC_MspInit+0xd4>)
 80015a8:	f000 fc40 	bl	8001e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80015ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015b0:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015be:	230c      	movs	r3, #12
 80015c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4810      	ldr	r0, [pc, #64]	; (8001608 <HAL_FSMC_MspInit+0xd8>)
 80015c8:	f000 fc30 	bl	8001e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80015cc:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80015d0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_FSMC_MspInit+0xdc>)
 80015e8:	f000 fc20 	bl	8001e2c <HAL_GPIO_Init>
 80015ec:	e000      	b.n	80015f0 <HAL_FSMC_MspInit+0xc0>
    return;
 80015ee:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000c0 	.word	0x200000c0
 80015fc:	40023800 	.word	0x40023800
 8001600:	40021400 	.word	0x40021400
 8001604:	40021800 	.word	0x40021800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020c00 	.word	0x40020c00

08001610 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001618:	f7ff ff8a 	bl	8001530 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	2036      	movs	r0, #54	; 0x36
 800163a:	f000 fa79 	bl	8001b30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163e:	2036      	movs	r0, #54	; 0x36
 8001640:	f000 fa92 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_InitTick+0xa0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_InitTick+0xa0>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_InitTick+0xa0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f908 	bl	8004880 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001670:	f003 f8de 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8001674:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_InitTick+0xa4>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3b01      	subs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_InitTick+0xa8>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_InitTick+0xac>)
 8001688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_InitTick+0xa8>)
 800168c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001690:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_InitTick+0xa8>)
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_InitTick+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_InitTick+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_InitTick+0xa8>)
 80016a6:	f004 fceb 	bl	8006080 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <HAL_InitTick+0xa8>)
 80016b2:	f004 fd1a 	bl	80060ea <HAL_TIM_Base_Start_IT>
 80016b6:	4603      	mov	r3, r0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	20004c38 	.word	0x20004c38
 80016d0:	40001000 	.word	0x40001000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <TIM6_DAC_IRQHandler+0x10>)
 800170e:	f004 fd10 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20004c38 	.word	0x20004c38

0800171c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <OTG_FS_IRQHandler+0x10>)
 8001722:	f000 ffbd 	bl	80026a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200050c4 	.word	0x200050c4

08001730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
	}

return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
	}
	return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f00c fce0 	bl	800e200 <__errno>
 8001840:	4602      	mov	r2, r0
 8001842:	230c      	movs	r3, #12
 8001844:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20050000 	.word	0x20050000
 800186c:	00000400 	.word	0x00000400
 8001870:	200000c4 	.word	0x200000c4
 8001874:	20005390 	.word	0x20005390

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <SystemInit+0x28>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <SystemInit+0x28>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SystemInit+0x28>)
 800188e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001892:	609a      	str	r2, [r3, #8]
#endif
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80018a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
  ldr  r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80018c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffd3 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f00c fc9b 	bl	800e20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe fe73 	bl	80005c0 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80018e0:	0800f22c 	.word	0x0800f22c
  ldr  r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e8:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 80018ec:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 80018f0:	2000538c 	.word	0x2000538c

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f8fa 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fe7c 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fb5c 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000010 	.word	0x20000010
 8001960:	20004c78 	.word	0x20004c78

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20004c78 	.word	0x20004c78

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_Delay+0x40>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000010 	.word	0x20000010

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4c 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff61 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb1 	bl	8001ab4 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff80 	bl	8001a60 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff54 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0cf      	b.n	8001d36 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DFSDM_ChannelInit+0x3a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_DFSDM_ChannelInit+0x1c0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <HAL_DFSDM_ChannelInit+0x3a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_DFSDM_ChannelInit+0x1c4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_DFSDM_ChannelInit+0x3a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a64      	ldr	r2, [pc, #400]	; (8001d4c <HAL_DFSDM_ChannelInit+0x1c8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d106      	bne.n	8001bcc <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_DFSDM_ChannelInit+0x1cc>)
 8001bc0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_DFSDM_ChannelInit+0x1d0>)
 8001bc4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e005      	b.n	8001bd8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8001bcc:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_DFSDM_ChannelInit+0x1d4>)
 8001bce:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <HAL_DFSDM_ChannelInit+0x1d8>)
 8001bd2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_DFSDM_ChannelInit+0x1dc>)
 8001bd6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f8c1 	bl	8001d64 <DFSDM_GetChannelFromInstance>
 8001be2:	4603      	mov	r3, r0
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0a0      	b.n	8001d36 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fa1f 	bl	8001038 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d125      	bne.n	8001c58 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d108      	bne.n	8001c4c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001c66:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001c76:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001c7c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 020f 	bic.w	r2, r2, #15
 8001c94:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001cbc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 0207 	and.w	r2, r2, #7
 8001ce8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d14:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f81e 	bl	8001d64 <DFSDM_GetChannelFromInstance>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40016000 	.word	0x40016000
 8001d44:	40016020 	.word	0x40016020
 8001d48:	40016040 	.word	0x40016040
 8001d4c:	40016060 	.word	0x40016060
 8001d50:	200000c8 	.word	0x200000c8
 8001d54:	200000cc 	.word	0x200000cc
 8001d58:	200000dc 	.word	0x200000dc
 8001d5c:	200000e0 	.word	0x200000e0
 8001d60:	40016400 	.word	0x40016400

08001d64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <DFSDM_GetChannelFromInstance+0x9c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <DFSDM_GetChannelFromInstance+0x18>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <DFSDM_GetChannelFromInstance+0xa0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d102      	bne.n	8001d82 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e037      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <DFSDM_GetChannelFromInstance+0xa4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <DFSDM_GetChannelFromInstance+0x2e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <DFSDM_GetChannelFromInstance+0xa8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8001d92:	2301      	movs	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e02c      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <DFSDM_GetChannelFromInstance+0xac>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d003      	beq.n	8001da8 <DFSDM_GetChannelFromInstance+0x44>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <DFSDM_GetChannelFromInstance+0xb0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d102      	bne.n	8001dae <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8001da8:	2302      	movs	r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e021      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <DFSDM_GetChannelFromInstance+0xb4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <DFSDM_GetChannelFromInstance+0x5a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <DFSDM_GetChannelFromInstance+0xb8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d102      	bne.n	8001dc4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e016      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <DFSDM_GetChannelFromInstance+0xbc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e00f      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <DFSDM_GetChannelFromInstance+0xc0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d102      	bne.n	8001de0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8001dda:	2305      	movs	r3, #5
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e008      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <DFSDM_GetChannelFromInstance+0xc4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8001de8:	2306      	movs	r3, #6
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e001      	b.n	8001df2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8001dee:	2307      	movs	r3, #7
 8001df0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40016000 	.word	0x40016000
 8001e04:	40016400 	.word	0x40016400
 8001e08:	40016020 	.word	0x40016020
 8001e0c:	40016420 	.word	0x40016420
 8001e10:	40016040 	.word	0x40016040
 8001e14:	40016440 	.word	0x40016440
 8001e18:	40016060 	.word	0x40016060
 8001e1c:	40016460 	.word	0x40016460
 8001e20:	40016480 	.word	0x40016480
 8001e24:	400164a0 	.word	0x400164a0
 8001e28:	400164c0 	.word	0x400164c0

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e165      	b.n	8002114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8154 	bne.w	800210e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d00b      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7a:	2b11      	cmp	r3, #17
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0xfc>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80ae 	beq.w	800210e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x304>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x308>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_GPIO_Init+0x310>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x314>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x20a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x318>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x206>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x31c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x202>
 800202a:	2306      	movs	r3, #6
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800202e:	2307      	movs	r3, #7
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_GPIO_Init+0x300>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_GPIO_Init+0x320>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208a:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_GPIO_Init+0x320>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_GPIO_Init+0x320>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_GPIO_Init+0x320>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_GPIO_Init+0x320>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_GPIO_Init+0x320>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_GPIO_Init+0x320>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_GPIO_Init+0x320>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f ae96 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3724      	adds	r7, #36	; 0x24
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af0a      	add	r7, sp, #40	; 0x28
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e054      	b.n	800223e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f00b fd78 	bl	800dca4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 fcfe 	bl	8007bd4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f005 fc78 	bl	8007af0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f005 fcf5 	bl	8007bf6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	687e      	ldr	r6, [r7, #4]
 8002214:	466d      	mov	r5, sp
 8002216:	f106 0410 	add.w	r4, r6, #16
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002226:	e885 0003 	stmia.w	r5, {r0, r1}
 800222a:	1d33      	adds	r3, r6, #4
 800222c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f005 fe08 	bl	8007e44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002246 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af04      	add	r7, sp, #16
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4603      	mov	r3, r0
 8002256:	70fb      	strb	r3, [r7, #3]
 8002258:	460b      	mov	r3, r1
 800225a:	70bb      	strb	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_HCD_HC_Init+0x28>
 800226a:	2302      	movs	r3, #2
 800226c:	e07f      	b.n	800236e <HAL_HCD_HC_Init+0x128>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	333d      	adds	r3, #61	; 0x3d
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	787a      	ldrb	r2, [r7, #1]
 800229c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	3340      	adds	r3, #64	; 0x40
 80022ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022b0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	3339      	adds	r3, #57	; 0x39
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	333f      	adds	r3, #63	; 0x3f
 80022d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	78bb      	ldrb	r3, [r7, #2]
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	b2d8      	uxtb	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	333a      	adds	r3, #58	; 0x3a
 80022f4:	4602      	mov	r2, r0
 80022f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0a      	bge.n	8002316 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	333b      	adds	r3, #59	; 0x3b
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e009      	b.n	800232a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	333b      	adds	r3, #59	; 0x3b
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	333c      	adds	r3, #60	; 0x3c
 800233a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800233e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	787c      	ldrb	r4, [r7, #1]
 8002346:	78ba      	ldrb	r2, [r7, #2]
 8002348:	78f9      	ldrb	r1, [r7, #3]
 800234a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4623      	mov	r3, r4
 800235c:	f005 feee 	bl	800813c <USB_HC_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}

08002376 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_HCD_HC_Halt+0x1e>
 8002390:	2302      	movs	r3, #2
 8002392:	e00f      	b.n	80023b4 <HAL_HCD_HC_Halt+0x3e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f006 f92a 	bl	80085fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	70fb      	strb	r3, [r7, #3]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70bb      	strb	r3, [r7, #2]
 80023d2:	4613      	mov	r3, r2
 80023d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	333b      	adds	r3, #59	; 0x3b
 80023e6:	78ba      	ldrb	r2, [r7, #2]
 80023e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	333f      	adds	r3, #63	; 0x3f
 80023fa:	787a      	ldrb	r2, [r7, #1]
 80023fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023fe:	7c3b      	ldrb	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d114      	bne.n	800242e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3342      	adds	r3, #66	; 0x42
 8002414:	2203      	movs	r2, #3
 8002416:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	333d      	adds	r3, #61	; 0x3d
 8002428:	7f3a      	ldrb	r2, [r7, #28]
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e009      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3342      	adds	r3, #66	; 0x42
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002442:	787b      	ldrb	r3, [r7, #1]
 8002444:	2b03      	cmp	r3, #3
 8002446:	f200 80d6 	bhi.w	80025f6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <HAL_HCD_HC_SubmitRequest+0x94>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002461 	.word	0x08002461
 8002454:	080025e1 	.word	0x080025e1
 8002458:	080024cd 	.word	0x080024cd
 800245c:	08002557 	.word	0x08002557
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002460:	7c3b      	ldrb	r3, [r7, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 80c9 	bne.w	80025fa <HAL_HCD_HC_SubmitRequest+0x23e>
 8002468:	78bb      	ldrb	r3, [r7, #2]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 80c5 	bne.w	80025fa <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002470:	8b3b      	ldrh	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3351      	adds	r3, #81	; 0x51
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3351      	adds	r3, #81	; 0x51
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3342      	adds	r3, #66	; 0x42
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024b4:	e0a1      	b.n	80025fa <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
      break;
 80024ca:	e096      	b.n	80025fa <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024cc:	78bb      	ldrb	r3, [r7, #2]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d120      	bne.n	8002514 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	3351      	adds	r3, #81	; 0x51
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3342      	adds	r3, #66	; 0x42
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024fc:	e07e      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3342      	adds	r3, #66	; 0x42
 800250e:	2202      	movs	r2, #2
 8002510:	701a      	strb	r2, [r3, #0]
      break;
 8002512:	e073      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3350      	adds	r3, #80	; 0x50
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3342      	adds	r3, #66	; 0x42
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
      break;
 800253e:	e05d      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3342      	adds	r3, #66	; 0x42
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]
      break;
 8002554:	e052      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	3351      	adds	r3, #81	; 0x51
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	3342      	adds	r3, #66	; 0x42
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002586:	e039      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	3342      	adds	r3, #66	; 0x42
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
      break;
 800259c:	e02e      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	3350      	adds	r3, #80	; 0x50
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3342      	adds	r3, #66	; 0x42
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
      break;
 80025c8:	e018      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3342      	adds	r3, #66	; 0x42
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
      break;
 80025de:	e00d      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e002      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80025fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3344      	adds	r3, #68	; 0x44
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	8b39      	ldrh	r1, [r7, #24]
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4403      	add	r3, r0
 8002620:	3348      	adds	r3, #72	; 0x48
 8002622:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	335c      	adds	r3, #92	; 0x5c
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	334c      	adds	r3, #76	; 0x4c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	3339      	adds	r3, #57	; 0x39
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	335d      	adds	r3, #93	; 0x5d
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	3338      	adds	r3, #56	; 0x38
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	18d1      	adds	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	f005 fe5e 	bl	8008350 <USB_HC_StartXfer>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop

080026a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 fb81 	bl	8007dbe <USB_GetMode>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 80ef 	bne.w	80028a2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f005 fb65 	bl	8007d98 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80e5 	beq.w	80028a0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f005 fb5c 	bl	8007d98 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ea:	d104      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fb4c 	bl	8007d98 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270a:	d104      	bne.n	8002716 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002714:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fb3c 	bl	8007d98 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800272a:	d104      	bne.n	8002736 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002734:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fb2c 	bl	8007d98 <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d103      	bne.n	8002752 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f005 fb1e 	bl	8007d98 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002766:	d115      	bne.n	8002794 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002770:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f00b fb0c 	bl	800dda0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fc0e 	bl	8007fb0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fafd 	bl	8007d98 <USB_ReadInterrupts>
 800279e:	4603      	mov	r3, r0
 80027a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d102      	bne.n	80027b0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f001 f966 	bl	8003a7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 faef 	bl	8007d98 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d106      	bne.n	80027d2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f00b facf 	bl	800dd68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2208      	movs	r2, #8
 80027d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 fade 	bl	8007d98 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027e6:	d138      	bne.n	800285a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f005 fef5 	bl	80085dc <USB_HC_ReadInterrupt>
 80027f2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e025      	b.n	8002846 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002824:	d106      	bne.n	8002834 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8cf 	bl	80029d0 <HCD_HC_IN_IRQHandler>
 8002832:	e005      	b.n	8002840 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fcfd 	bl	800323a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	d3d4      	bcc.n	80027fa <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fa9a 	bl	8007d98 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d101      	bne.n	8002872 <HAL_HCD_IRQHandler+0x1d2>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_HCD_IRQHandler+0x1d4>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0210 	bic.w	r2, r2, #16
 8002886:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 f84b 	bl	8003924 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0210 	orr.w	r2, r2, #16
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e000      	b.n	80028a2 <HAL_HCD_IRQHandler+0x202>
      return;
 80028a0:	bf00      	nop
    }
  }
}
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_HCD_Start+0x16>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e013      	b.n	80028e6 <HAL_HCD_Start+0x3e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 f971 	bl	8007bb2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 fbce 	bl	8008078 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_HCD_Stop+0x16>
 8002900:	2302      	movs	r3, #2
 8002902:	e00d      	b.n	8002920 <HAL_HCD_Stop+0x32>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f005 ffaf 	bl	8008874 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f005 fb75 	bl	8008024 <USB_ResetPort>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	781b      	ldrb	r3, [r3, #0]
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	334c      	adds	r3, #76	; 0x4c
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 fbb7 	bl	8008118 <USB_GetCurrentFrame>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f005 fb92 	bl	80080ea <USB_GetHostSpeed>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d119      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2304      	movs	r3, #4
 8002a10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	0151      	lsls	r1, r2, #5
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	440a      	add	r2, r1
 8002a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	60d3      	str	r3, [r2, #12]
 8002a32:	e0ce      	b.n	8002bd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d12c      	bne.n	8002aa6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	335d      	adds	r3, #93	; 0x5d
 8002a70:	2207      	movs	r2, #7
 8002a72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fdad 	bl	80085fe <USB_HC_Halt>
 8002aa4:	e095      	b.n	8002bd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d109      	bne.n	8002ad0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2320      	movs	r3, #32
 8002acc:	6093      	str	r3, [r2, #8]
 8002ace:	e080      	b.n	8002bd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d134      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	0151      	lsls	r1, r2, #5
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	440a      	add	r2, r1
 8002afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	335d      	adds	r3, #93	; 0x5d
 8002b16:	2205      	movs	r2, #5
 8002b18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	461a      	mov	r2, r3
 8002b28:	2310      	movs	r3, #16
 8002b2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 fd58 	bl	80085fe <USB_HC_Halt>
 8002b4e:	e040      	b.n	8002bd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d134      	bne.n	8002bd2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f005 fd33 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	335d      	adds	r3, #93	; 0x5d
 8002bba:	2208      	movs	r2, #8
 8002bbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d122      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	0151      	lsls	r1, r2, #5
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	440a      	add	r2, r1
 8002c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f005 fcf2 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c2e:	e300      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 80fd 	bne.w	8002e42 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3348      	adds	r3, #72	; 0x48
 8002c60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0159      	lsls	r1, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c74:	1ad1      	subs	r1, r2, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4403      	add	r3, r0
 8002c84:	334c      	adds	r3, #76	; 0x4c
 8002c86:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	335d      	adds	r3, #93	; 0x5d
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3358      	adds	r3, #88	; 0x58
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	333f      	adds	r3, #63	; 0x3f
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333f      	adds	r3, #63	; 0x3f
 8002ce8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d121      	bne.n	8002d32 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f005 fc70 	bl	80085fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	e070      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d12a      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	b2d8      	uxtb	r0, r3
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4601      	mov	r1, r0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f00b f810 	bl	800ddbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d9c:	e03a      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	333f      	adds	r3, #63	; 0x3f
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d12f      	bne.n	8002e14 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3350      	adds	r3, #80	; 0x50
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	3350      	adds	r3, #80	; 0x50
 8002df0:	4602      	mov	r2, r0
 8002df2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f00a ffd4 	bl	800ddbc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3350      	adds	r3, #80	; 0x50
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2d8      	uxtb	r0, r3
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	3350      	adds	r3, #80	; 0x50
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	701a      	strb	r2, [r3, #0]
}
 8002e40:	e1f7      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	f040 811a 	bne.w	800308e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e74:	f023 0302 	bic.w	r3, r3, #2
 8002e78:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	335d      	adds	r3, #93	; 0x5d
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10a      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e0d9      	b.n	800305a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	335d      	adds	r3, #93	; 0x5d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10a      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	2205      	movs	r2, #5
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e0c3      	b.n	800305a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	335d      	adds	r3, #93	; 0x5d
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d00a      	beq.n	8002efe <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	335d      	adds	r3, #93	; 0x5d
 8002ef8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d156      	bne.n	8002fac <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3358      	adds	r3, #88	; 0x58
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4403      	add	r3, r0
 8002f20:	3358      	adds	r3, #88	; 0x58
 8002f22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3358      	adds	r3, #88	; 0x58
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d914      	bls.n	8002f64 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	3358      	adds	r3, #88	; 0x58
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335c      	adds	r3, #92	; 0x5c
 8002f5e:	2204      	movs	r2, #4
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e009      	b.n	8002f78 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	335c      	adds	r3, #92	; 0x5c
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e056      	b.n	800305a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	335d      	adds	r3, #93	; 0x5d
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d123      	bne.n	800300a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	335c      	adds	r3, #92	; 0x5c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ff4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e027      	b.n	800305a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	335d      	adds	r3, #93	; 0x5d
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b07      	cmp	r3, #7
 800301e:	d11c      	bne.n	800305a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	3358      	adds	r3, #88	; 0x58
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4403      	add	r3, r0
 8003042:	3358      	adds	r3, #88	; 0x58
 8003044:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	2204      	movs	r2, #4
 8003058:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2302      	movs	r3, #2
 800306a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4601      	mov	r1, r0
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f00a fe98 	bl	800ddbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800308c:	e0d1      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d13e      	bne.n	8003122 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3358      	adds	r3, #88	; 0x58
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4403      	add	r3, r0
 80030e6:	3358      	adds	r3, #88	; 0x58
 80030e8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	335d      	adds	r3, #93	; 0x5d
 80030fa:	2206      	movs	r2, #6
 80030fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f005 fa78 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	461a      	mov	r2, r3
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	6093      	str	r3, [r2, #8]
}
 8003120:	e087      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	d17c      	bne.n	8003232 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	333f      	adds	r3, #63	; 0x3f
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d122      	bne.n	8003194 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3358      	adds	r3, #88	; 0x58
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	0151      	lsls	r1, r2, #5
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	440a      	add	r2, r1
 8003178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fa36 	bl	80085fe <USB_HC_Halt>
 8003192:	e045      	b.n	8003220 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	333f      	adds	r3, #63	; 0x3f
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	333f      	adds	r3, #63	; 0x3f
 80031ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d12f      	bne.n	8003220 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	3358      	adds	r3, #88	; 0x58
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	335d      	adds	r3, #93	; 0x5d
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	440a      	add	r2, r1
 8003206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f005 f9ef 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	2310      	movs	r3, #16
 8003230:	6093      	str	r3, [r2, #8]
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d119      	bne.n	800329e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2304      	movs	r3, #4
 800327a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	0151      	lsls	r1, r2, #5
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	440a      	add	r2, r1
 8003292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800329c:	e33e      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d141      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	461a      	mov	r2, r3
 80032c2:	2320      	movs	r3, #32
 80032c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	333d      	adds	r3, #61	; 0x3d
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 831f 	bne.w	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	333d      	adds	r3, #61	; 0x3d
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	335c      	adds	r3, #92	; 0x5c
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f005 f964 	bl	80085fe <USB_HC_Halt>
}
 8003336:	e2f1      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d13f      	bne.n	80033ce <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	335d      	adds	r3, #93	; 0x5d
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	333d      	adds	r3, #61	; 0x3d
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	3358      	adds	r3, #88	; 0x58
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 f922 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	461a      	mov	r2, r3
 80033c8:	2340      	movs	r3, #64	; 0x40
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	e2a6      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e4:	d122      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f005 f8f4 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	461a      	mov	r2, r3
 8003424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003428:	6093      	str	r3, [r2, #8]
}
 800342a:	e277      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d135      	bne.n	80034ae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	3358      	adds	r3, #88	; 0x58
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	0151      	lsls	r1, r2, #5
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	440a      	add	r2, r1
 800346c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f005 f8bc 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	461a      	mov	r2, r3
 8003494:	2301      	movs	r3, #1
 8003496:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	335d      	adds	r3, #93	; 0x5d
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
}
 80034ac:	e236      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d12b      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	2308      	movs	r3, #8
 80034d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f005 f87c 	bl	80085fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	335d      	adds	r3, #93	; 0x5d
 8003516:	2205      	movs	r2, #5
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	e1ff      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b10      	cmp	r3, #16
 8003530:	d155      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	3358      	adds	r3, #88	; 0x58
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	335d      	adds	r3, #93	; 0x5d
 8003556:	2203      	movs	r2, #3
 8003558:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	333d      	adds	r3, #61	; 0x3d
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d114      	bne.n	800359a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	; 0x3c
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	333d      	adds	r3, #61	; 0x3d
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 f81a 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d6:	461a      	mov	r2, r3
 80035d8:	2310      	movs	r3, #16
 80035da:	6093      	str	r3, [r2, #8]
}
 80035dc:	e19e      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d12b      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	0151      	lsls	r1, r2, #5
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	440a      	add	r2, r1
 800360a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800360e:	f043 0302 	orr.w	r3, r3, #2
 8003612:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f004 ffed 	bl	80085fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	335d      	adds	r3, #93	; 0x5d
 8003634:	2206      	movs	r2, #6
 8003636:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	6093      	str	r3, [r2, #8]
}
 800364a:	e167      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d135      	bne.n	80036d0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	0151      	lsls	r1, r2, #5
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	440a      	add	r2, r1
 800367a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f004 ffb5 	bl	80085fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	461a      	mov	r2, r3
 80036a2:	2310      	movs	r3, #16
 80036a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	461a      	mov	r2, r3
 80036b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	335d      	adds	r3, #93	; 0x5d
 80036ca:	2208      	movs	r2, #8
 80036cc:	701a      	strb	r2, [r3, #0]
}
 80036ce:	e125      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f040 811a 	bne.w	800391c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f023 0302 	bic.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	335d      	adds	r3, #93	; 0x5d
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d137      	bne.n	800378e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	335c      	adds	r3, #92	; 0x5c
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	333f      	adds	r3, #63	; 0x3f
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d00b      	beq.n	8003760 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	333f      	adds	r3, #63	; 0x3f
 8003758:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	f040 80c5 	bne.w	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3351      	adds	r3, #81	; 0x51
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2d8      	uxtb	r0, r3
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	3351      	adds	r3, #81	; 0x51
 8003788:	4602      	mov	r2, r0
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e0ad      	b.n	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	335d      	adds	r3, #93	; 0x5d
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d10a      	bne.n	80037ba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	335c      	adds	r3, #92	; 0x5c
 80037b4:	2202      	movs	r2, #2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e097      	b.n	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	335d      	adds	r3, #93	; 0x5d
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d10a      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	335c      	adds	r3, #92	; 0x5c
 80037e0:	2202      	movs	r2, #2
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e081      	b.n	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	335d      	adds	r3, #93	; 0x5d
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d10a      	bne.n	8003812 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	2205      	movs	r2, #5
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e06b      	b.n	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	335d      	adds	r3, #93	; 0x5d
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d00a      	beq.n	800383e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	335d      	adds	r3, #93	; 0x5d
 8003838:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800383a:	2b08      	cmp	r3, #8
 800383c:	d155      	bne.n	80038ea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	3358      	adds	r3, #88	; 0x58
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c59      	adds	r1, r3, #1
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4403      	add	r3, r0
 8003860:	3358      	adds	r3, #88	; 0x58
 8003862:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3358      	adds	r3, #88	; 0x58
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d914      	bls.n	80038a4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	440b      	add	r3, r1
 8003888:	3358      	adds	r3, #88	; 0x58
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	335c      	adds	r3, #92	; 0x5c
 800389e:	2204      	movs	r2, #4
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e009      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	335c      	adds	r3, #92	; 0x5c
 80038b4:	2202      	movs	r2, #2
 80038b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	2302      	movs	r3, #2
 80038fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	b2d8      	uxtb	r0, r3
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	335c      	adds	r3, #92	; 0x5c
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4601      	mov	r1, r0
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f00a fa50 	bl	800ddbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	0c5b      	lsrs	r3, r3, #17
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d003      	beq.n	8003968 <HCD_RXQLVL_IRQHandler+0x44>
 8003960:	2b05      	cmp	r3, #5
 8003962:	f000 8082 	beq.w	8003a6a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003966:	e083      	b.n	8003a70 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d07f      	beq.n	8003a6e <HCD_RXQLVL_IRQHandler+0x14a>
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	3344      	adds	r3, #68	; 0x44
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d074      	beq.n	8003a6e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3344      	adds	r3, #68	; 0x44
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	b292      	uxth	r2, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	f004 f9d1 	bl	8007d46 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	3344      	adds	r3, #68	; 0x44
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	18d1      	adds	r1, r2, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4403      	add	r3, r0
 80039c8:	3344      	adds	r3, #68	; 0x44
 80039ca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	; 0x4c
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	18d1      	adds	r1, r2, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4403      	add	r3, r0
 80039f0:	334c      	adds	r3, #76	; 0x4c
 80039f2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HCD_RXQLVL_IRQHandler+0x154>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d031      	beq.n	8003a6e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a20:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a28:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	3350      	adds	r3, #80	; 0x50
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2d8      	uxtb	r0, r3
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	3350      	adds	r3, #80	; 0x50
 8003a64:	4602      	mov	r2, r0
 8003a66:	701a      	strb	r2, [r3, #0]
      break;
 8003a68:	e001      	b.n	8003a6e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a6e:	bf00      	nop
  }
}
 8003a70:	bf00      	nop
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	1ff80000 	.word	0x1ff80000

08003a7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003aa8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d10b      	bne.n	8003acc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f00a f960 	bl	800dd84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d132      	bne.n	8003b3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d126      	bne.n	8003b36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d113      	bne.n	8003b18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afa:	d106      	bne.n	8003b0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2102      	movs	r1, #2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fa54 	bl	8007fb0 <USB_InitFSLSPClkSel>
 8003b08:	e011      	b.n	8003b2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 fa4d 	bl	8007fb0 <USB_InitFSLSPClkSel>
 8003b16:	e00a      	b.n	8003b2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b26:	461a      	mov	r2, r3
 8003b28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f00a f956 	bl	800dde0 <HAL_HCD_PortEnabled_Callback>
 8003b34:	e002      	b.n	8003b3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f00a f960 	bl	800ddfc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d103      	bne.n	8003b4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e154      	b.n	8003e20 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a98      	ldr	r2, [pc, #608]	; (8003df0 <HAL_I2S_Init+0x28c>)
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd fb63 	bl	800125c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bac:	f023 030f 	bic.w	r3, r3, #15
 8003bb0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d06f      	beq.n	8003ca2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bca:	2310      	movs	r3, #16
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d802      	bhi.n	8003be2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a83      	ldr	r2, [pc, #524]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_I2S_Init+0x92>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a81      	ldr	r2, [pc, #516]	; (8003df8 <HAL_I2S_Init+0x294>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d104      	bne.n	8003c00 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f001 f900 	bl	8004dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	e003      	b.n	8003c08 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003c00:	2002      	movs	r0, #2
 8003c02:	f001 f8fb 	bl	8004dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8003c06:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c10:	d125      	bne.n	8003c5e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	3305      	adds	r3, #5
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e01f      	b.n	8003c7c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	3305      	adds	r3, #5
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e00e      	b.n	8003c7c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	3305      	adds	r3, #5
 8003c7a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	; (8003dfc <HAL_I2S_Init+0x298>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e003      	b.n	8003caa <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d902      	bls.n	8003cb6 <HAL_I2S_Init+0x152>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d907      	bls.n	8003cc6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0ac      	b.n	8003e20 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ce4:	f023 030f 	bic.w	r3, r3, #15
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6851      	ldr	r1, [r2, #4]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6992      	ldr	r2, [r2, #24]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d08:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b30      	cmp	r3, #48	; 0x30
 8003d10:	d003      	beq.n	8003d1a <HAL_I2S_Init+0x1b6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2bb0      	cmp	r3, #176	; 0xb0
 8003d18:	d107      	bne.n	8003d2a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d28:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d16e      	bne.n	8003e10 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_I2S_Init+0x29c>)
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_I2S_Init+0x1e2>
 8003d42:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <HAL_I2S_Init+0x2a0>)
 8003d44:	e001      	b.n	8003d4a <HAL_I2S_Init+0x1e6>
 8003d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4928      	ldr	r1, [pc, #160]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003d52:	428a      	cmp	r2, r1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2S_Init+0x1f6>
 8003d56:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_I2S_Init+0x2a0>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2S_Init+0x1fa>
 8003d5a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d5e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_I2S_Init+0x212>
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_I2S_Init+0x2a0>)
 8003d74:	e001      	b.n	8003d7a <HAL_I2S_Init+0x216>
 8003d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_I2S_Init+0x228>
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_I2S_Init+0x2a0>)
 8003d8a:	e001      	b.n	8003d90 <HAL_I2S_Init+0x22c>
 8003d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9c:	d003      	beq.n	8003da6 <HAL_I2S_Init+0x242>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e001      	b.n	8003db2 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	b299      	uxth	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003dc8:	4303      	orrs	r3, r0
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dde:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <HAL_I2S_Init+0x290>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_I2S_Init+0x2a4>
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_I2S_Init+0x2a0>)
 8003dec:	e00e      	b.n	8003e0c <HAL_I2S_Init+0x2a8>
 8003dee:	bf00      	nop
 8003df0:	08003f1f 	.word	0x08003f1f
 8003df4:	40003800 	.word	0x40003800
 8003df8:	40003c00 	.word	0x40003c00
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	08004035 	.word	0x08004035
 8003e04:	40003400 	.word	0x40003400
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	897a      	ldrh	r2, [r7, #10]
 8003e0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c9a      	adds	r2, r3, #2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ea8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffb8 	bl	8003e28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff93 	bl	8003e3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d13a      	bne.n	8003fb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d109      	bne.n	8003f58 <I2S_IRQHandler+0x3a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d102      	bne.n	8003f58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffb4 	bl	8003ec0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d126      	bne.n	8003fb0 <I2S_IRQHandler+0x92>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d11f      	bne.n	8003fb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff50 	bl	8003e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d136      	bne.n	800402a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d109      	bne.n	8003fda <I2S_IRQHandler+0xbc>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d102      	bne.n	8003fda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff45 	bl	8003e64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d122      	bne.n	800402a <I2S_IRQHandler+0x10c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d11b      	bne.n	800402a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f043 0204 	orr.w	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff13 	bl	8003e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4aa2      	ldr	r2, [pc, #648]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800404e:	4ba2      	ldr	r3, [pc, #648]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004050:	e001      	b.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a9b      	ldr	r2, [pc, #620]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800406c:	4b9a      	ldr	r3, [pc, #616]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800406e:	e001      	b.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d004      	beq.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 8099 	bne.w	80041be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d107      	bne.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f925 	bl	80042f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9c8 	bl	8004450 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d13a      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d035      	beq.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040de:	4b7e      	ldr	r3, [pc, #504]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040e0:	e001      	b.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4979      	ldr	r1, [pc, #484]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ee:	428b      	cmp	r3, r1
 80040f0:	d101      	bne.n	80040f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040f4:	e001      	b.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800410e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fe88 	bl	8003e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	f040 80be 	bne.w	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80b8 	beq.w	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004166:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a59      	ldr	r2, [pc, #356]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004172:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004174:	e001      	b.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4954      	ldr	r1, [pc, #336]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004182:	428b      	cmp	r3, r1
 8004184:	d101      	bne.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004188:	e001      	b.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800418a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800418e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004192:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe4a 	bl	8003e50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041bc:	e084      	b.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d107      	bne.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8be 	bl	8004354 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8fd 	bl	80043ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d12f      	bne.n	800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02a      	beq.n	800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004214:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004222:	e001      	b.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4929      	ldr	r1, [pc, #164]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004230:	428b      	cmp	r3, r1
 8004232:	d101      	bne.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004236:	e001      	b.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004240:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f043 0202 	orr.w	r2, r3, #2
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fdfa 	bl	8003e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d131      	bne.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02c      	beq.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800427c:	e001      	b.n	8004282 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800427e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4912      	ldr	r1, [pc, #72]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800428a:	428b      	cmp	r3, r1
 800428c:	d101      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004290:	e001      	b.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800429a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fdc5 	bl	8003e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042c6:	e000      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042c8:	bf00      	nop
}
 80042ca:	bf00      	nop
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40003800 	.word	0x40003800
 80042d8:	40003400 	.word	0x40003400

080042dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c99      	adds	r1, r3, #2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6251      	str	r1, [r2, #36]	; 0x24
 8004302:	881a      	ldrh	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d113      	bne.n	800434a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004330:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffc9 	bl	80042dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c99      	adds	r1, r3, #2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6251      	str	r1, [r2, #36]	; 0x24
 8004366:	8819      	ldrh	r1, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <I2SEx_TxISR_I2SExt+0x90>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <I2SEx_TxISR_I2SExt+0x22>
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004374:	e001      	b.n	800437a <I2SEx_TxISR_I2SExt+0x26>
 8004376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437a:	460a      	mov	r2, r1
 800437c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d121      	bne.n	80043da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <I2SEx_TxISR_I2SExt+0x90>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <I2SEx_TxISR_I2SExt+0x50>
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <I2SEx_TxISR_I2SExt+0x94>)
 80043a2:	e001      	b.n	80043a8 <I2SEx_TxISR_I2SExt+0x54>
 80043a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	490d      	ldr	r1, [pc, #52]	; (80043e4 <I2SEx_TxISR_I2SExt+0x90>)
 80043b0:	428b      	cmp	r3, r1
 80043b2:	d101      	bne.n	80043b8 <I2SEx_TxISR_I2SExt+0x64>
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <I2SEx_TxISR_I2SExt+0x94>)
 80043b6:	e001      	b.n	80043bc <I2SEx_TxISR_I2SExt+0x68>
 80043b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff81 	bl	80042dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40003800 	.word	0x40003800
 80043e8:	40003400 	.word	0x40003400

080043ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68d8      	ldr	r0, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	1c99      	adds	r1, r3, #2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004404:	b282      	uxth	r2, r0
 8004406:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d113      	bne.n	8004448 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800442e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ff4a 	bl	80042dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a20      	ldr	r2, [pc, #128]	; (80044e0 <I2SEx_RxISR_I2SExt+0x90>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <I2SEx_RxISR_I2SExt+0x16>
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004464:	e001      	b.n	800446a <I2SEx_RxISR_I2SExt+0x1a>
 8004466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446a:	68d8      	ldr	r0, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	1c99      	adds	r1, r3, #2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004476:	b282      	uxth	r2, r0
 8004478:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <I2SEx_RxISR_I2SExt+0x50>
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <I2SEx_RxISR_I2SExt+0x94>)
 800449e:	e001      	b.n	80044a4 <I2SEx_RxISR_I2SExt+0x54>
 80044a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	490d      	ldr	r1, [pc, #52]	; (80044e0 <I2SEx_RxISR_I2SExt+0x90>)
 80044ac:	428b      	cmp	r3, r1
 80044ae:	d101      	bne.n	80044b4 <I2SEx_RxISR_I2SExt+0x64>
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <I2SEx_RxISR_I2SExt+0x94>)
 80044b2:	e001      	b.n	80044b8 <I2SEx_RxISR_I2SExt+0x68>
 80044b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff03 	bl	80042dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40003800 	.word	0x40003800
 80044e4:	40003400 	.word	0x40003400

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fd f9c4 	bl	8001964 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd f9c0 	bl	8001964 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4601      	mov	r1, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
 8004682:	fa21 f303 	lsr.w	r3, r1, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc ffc8 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0800f16c 	.word	0x0800f16c
 80046ac:	20000008 	.word	0x20000008
 80046b0:	2000000c 	.word	0x2000000c

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	2300      	movs	r3, #0
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ca:	4b50      	ldr	r3, [pc, #320]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d007      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x32>
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d008      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x38>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 808d 	bne.w	80047fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCC_GetSysClockFreq+0x15c>)
 80046e2:	60bb      	str	r3, [r7, #8]
       break;
 80046e4:	e08c      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e6:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <HAL_RCC_GetSysClockFreq+0x160>)
 80046e8:	60bb      	str	r3, [r7, #8]
      break;
 80046ea:	e089      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f6:	4b45      	ldr	r3, [pc, #276]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d023      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	4b42      	ldr	r3, [pc, #264]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	f04f 0400 	mov.w	r4, #0
 800470c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	ea03 0501 	and.w	r5, r3, r1
 8004718:	ea04 0602 	and.w	r6, r4, r2
 800471c:	4a3d      	ldr	r2, [pc, #244]	; (8004814 <HAL_RCC_GetSysClockFreq+0x160>)
 800471e:	fb02 f106 	mul.w	r1, r2, r6
 8004722:	2200      	movs	r2, #0
 8004724:	fb02 f205 	mul.w	r2, r2, r5
 8004728:	440a      	add	r2, r1
 800472a:	493a      	ldr	r1, [pc, #232]	; (8004814 <HAL_RCC_GetSysClockFreq+0x160>)
 800472c:	fba5 0101 	umull	r0, r1, r5, r1
 8004730:	1853      	adds	r3, r2, r1
 8004732:	4619      	mov	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f04f 0400 	mov.w	r4, #0
 800473a:	461a      	mov	r2, r3
 800473c:	4623      	mov	r3, r4
 800473e:	f7fb fdbf 	bl	80002c0 <__aeabi_uldivmod>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e049      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	ea03 0501 	and.w	r5, r3, r1
 8004760:	ea04 0602 	and.w	r6, r4, r2
 8004764:	4629      	mov	r1, r5
 8004766:	4632      	mov	r2, r6
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	0154      	lsls	r4, r2, #5
 8004772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004776:	014b      	lsls	r3, r1, #5
 8004778:	4619      	mov	r1, r3
 800477a:	4622      	mov	r2, r4
 800477c:	1b49      	subs	r1, r1, r5
 800477e:	eb62 0206 	sbc.w	r2, r2, r6
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	0194      	lsls	r4, r2, #6
 800478c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004790:	018b      	lsls	r3, r1, #6
 8004792:	1a5b      	subs	r3, r3, r1
 8004794:	eb64 0402 	sbc.w	r4, r4, r2
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	00e2      	lsls	r2, r4, #3
 80047a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047a6:	00d9      	lsls	r1, r3, #3
 80047a8:	460b      	mov	r3, r1
 80047aa:	4614      	mov	r4, r2
 80047ac:	195b      	adds	r3, r3, r5
 80047ae:	eb44 0406 	adc.w	r4, r4, r6
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	02a2      	lsls	r2, r4, #10
 80047bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047c0:	0299      	lsls	r1, r3, #10
 80047c2:	460b      	mov	r3, r1
 80047c4:	4614      	mov	r4, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	4621      	mov	r1, r4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	461a      	mov	r2, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	f7fb fd74 	bl	80002c0 <__aeabi_uldivmod>
 80047d8:	4603      	mov	r3, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_GetSysClockFreq+0x158>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	3301      	adds	r3, #1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	60bb      	str	r3, [r7, #8]
      break;
 80047f8:	e002      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetSysClockFreq+0x15c>)
 80047fc:	60bb      	str	r3, [r7, #8]
      break;
 80047fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004800:	68bb      	ldr	r3, [r7, #8]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400
 8004814:	017d7840 	.word	0x017d7840

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4601      	mov	r1, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	0800f17c 	.word	0x0800f17c

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800485c:	f7ff ffdc 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004860:	4601      	mov	r1, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0b5b      	lsrs	r3, r3, #13
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4a03      	ldr	r2, [pc, #12]	; (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	0800f17c 	.word	0x0800f17c

08004880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	220f      	movs	r2, #15
 800488e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_RCC_GetClockConfig+0x60>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 020f 	and.w	r2, r3, #15
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004908:	4b7a      	ldr	r3, [pc, #488]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800490a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4977      	ldr	r1, [pc, #476]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004926:	2301      	movs	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004936:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	496b      	ldr	r1, [pc, #428]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004954:	2301      	movs	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d022      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004964:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	4960      	ldr	r1, [pc, #384]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004982:	2301      	movs	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004990:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004996:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	3b01      	subs	r3, #1
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	4954      	ldr	r1, [pc, #336]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d022      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80049b6:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c4:	494b      	ldr	r1, [pc, #300]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80049e2:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	493f      	ldr	r1, [pc, #252]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808a 	beq.w	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a38      	ldr	r2, [pc, #224]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a26:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a32:	f7fc ff97 	bl	8001964 <HAL_GetTick>
 8004a36:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fc ff93 	bl	8001964 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1d1      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a58:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a60:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02f      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a76:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a80:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d114      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fc ff61 	bl	8001964 <HAL_GetTick>
 8004aa2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fc ff5d 	bl	8001964 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e199      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ee      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad4:	d114      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	4902      	ldr	r1, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
 8004af0:	e00c      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40007000 	.word	0x40007000
 8004afc:	42470e40 	.word	0x42470e40
 8004b00:	4b89      	ldr	r3, [pc, #548]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a88      	ldr	r2, [pc, #544]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b0a:	6093      	str	r3, [r2, #8]
 8004b0c:	4b86      	ldr	r3, [pc, #536]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	4983      	ldr	r1, [pc, #524]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004b30:	4b7e      	ldr	r3, [pc, #504]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004b32:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004b40:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4976      	ldr	r1, [pc, #472]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d011      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b62:	4b71      	ldr	r3, [pc, #452]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	496d      	ldr	r1, [pc, #436]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b80:	d101      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004b92:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	4961      	ldr	r1, [pc, #388]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	f040 80c6 	bne.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bb8:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fed1 	bl	8001964 <HAL_GetTick>
 8004bc2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc6:	f7fc fecd 	bl	8001964 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e10b      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd8:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004be4:	4a53      	ldr	r2, [pc, #332]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d019      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c28:	d00e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d115      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d110      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4931      	ldr	r1, [pc, #196]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d026      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d122      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c92:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	491b      	ldr	r1, [pc, #108]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004cc0:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc6:	f023 021f 	bic.w	r2, r3, #31
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4915      	ldr	r1, [pc, #84]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	490a      	ldr	r1, [pc, #40]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fc fe2a 	bl	8001964 <HAL_GetTick>
 8004d10:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d12:	e011      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d14:	f7fc fe26 	bl	8001964 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d90a      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e064      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	424711e0 	.word	0x424711e0
 8004d30:	42470068 	.word	0x42470068
 8004d34:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0e7      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	4926      	ldr	r1, [pc, #152]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d72:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d78:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	491d      	ldr	r1, [pc, #116]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	4915      	ldr	r1, [pc, #84]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	490c      	ldr	r1, [pc, #48]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dde:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4904      	ldr	r1, [pc, #16]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	f000 8098 	beq.w	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004e20:	e12d      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004e22:	4b9a      	ldr	r3, [pc, #616]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004e2c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e34:	d00c      	beq.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3a:	d802      	bhi.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004e40:	e082      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e46:	d047      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004e48:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004e4c:	d06f      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8004e4e:	e07b      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e50:	4b8f      	ldr	r3, [pc, #572]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e52:	617b      	str	r3, [r7, #20]
          break;
 8004e54:	e07b      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004e56:	4b8d      	ldr	r3, [pc, #564]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e64:	d109      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e66:	4b89      	ldr	r3, [pc, #548]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e70:	4a87      	ldr	r2, [pc, #540]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e019      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e7a:	4b84      	ldr	r3, [pc, #528]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e88:	4b80      	ldr	r3, [pc, #512]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e92:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	e008      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e9c:	4b7b      	ldr	r3, [pc, #492]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea6:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eae:	4b77      	ldr	r3, [pc, #476]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	099b      	lsrs	r3, r3, #6
 8004eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ec2:	4b72      	ldr	r3, [pc, #456]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec8:	0f1b      	lsrs	r3, r3, #28
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
          break;
 8004ed6:	e03a      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ed8:	4b6c      	ldr	r3, [pc, #432]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ee6:	4b69      	ldr	r3, [pc, #420]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eee:	4a69      	ldr	r2, [pc, #420]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e007      	b.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004f08:	4b60      	ldr	r3, [pc, #384]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	099b      	lsrs	r3, r3, #6
 8004f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	0f1b      	lsrs	r3, r3, #28
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	617b      	str	r3, [r7, #20]
          break;
 8004f2c:	e00f      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f2e:	4b57      	ldr	r3, [pc, #348]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3a:	d102      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f3e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004f40:	e005      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004f42:	4b55      	ldr	r3, [pc, #340]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f44:	617b      	str	r3, [r7, #20]
          break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
          break;
 8004f4c:	bf00      	nop
        }
      }
      break;
 8004f4e:	e096      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004f50:	4b4e      	ldr	r3, [pc, #312]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f56:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004f5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f62:	d00c      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f68:	d802      	bhi.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004f6e:	e082      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f74:	d047      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004f76:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004f7a:	d06f      	beq.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f7c:	e07b      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f7e:	4b44      	ldr	r3, [pc, #272]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f80:	617b      	str	r3, [r7, #20]
          break;
 8004f82:	e07b      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004f84:	4b41      	ldr	r3, [pc, #260]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f94:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	e019      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fa8:	4b38      	ldr	r3, [pc, #224]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb4:	d109      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fb6:	4b35      	ldr	r3, [pc, #212]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc0:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	e008      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fca:	4b30      	ldr	r3, [pc, #192]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd4:	4a30      	ldr	r2, [pc, #192]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ff0:	4b26      	ldr	r3, [pc, #152]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0f1b      	lsrs	r3, r3, #28
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	617b      	str	r3, [r7, #20]
          break;
 8005004:	e03a      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005012:	d108      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e007      	b.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005026:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502e:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	099b      	lsrs	r3, r3, #6
 800503c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0f1b      	lsrs	r3, r3, #28
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
          break;
 800505a:	e00f      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005068:	d102      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800506c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800506e:	e005      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005072:	617b      	str	r3, [r7, #20]
          break;
 8005074:	e002      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
          break;
 800507a:	bf00      	nop
        }
      }
      break;
 800507c:	bf00      	nop
    }
  }
  return frequency;
 800507e:	697b      	ldr	r3, [r7, #20]
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40023800 	.word	0x40023800
 8005090:	00bb8000 	.word	0x00bb8000
 8005094:	017d7840 	.word	0x017d7840
 8005098:	00f42400 	.word	0x00f42400

0800509c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d075      	beq.n	80051a0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050b4:	4ba2      	ldr	r3, [pc, #648]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d00c      	beq.n	80050da <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c0:	4b9f      	ldr	r3, [pc, #636]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d112      	bne.n	80050f2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050cc:	4b9c      	ldr	r3, [pc, #624]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d8:	d10b      	bne.n	80050f2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050da:	4b99      	ldr	r3, [pc, #612]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d05b      	beq.n	800519e <HAL_RCC_OscConfig+0x102>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d157      	bne.n	800519e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e20b      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x6e>
 80050fc:	4b90      	ldr	r3, [pc, #576]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a8f      	ldr	r2, [pc, #572]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e01d      	b.n	8005146 <HAL_RCC_OscConfig+0xaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005112:	d10c      	bne.n	800512e <HAL_RCC_OscConfig+0x92>
 8005114:	4b8a      	ldr	r3, [pc, #552]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a89      	ldr	r2, [pc, #548]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 800511a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b87      	ldr	r3, [pc, #540]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a86      	ldr	r2, [pc, #536]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e00b      	b.n	8005146 <HAL_RCC_OscConfig+0xaa>
 800512e:	4b84      	ldr	r3, [pc, #528]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a83      	ldr	r2, [pc, #524]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b81      	ldr	r3, [pc, #516]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a80      	ldr	r2, [pc, #512]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005144:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc fc09 	bl	8001964 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005156:	f7fc fc05 	bl	8001964 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	; 0x64
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e1d0      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005168:	4b75      	ldr	r3, [pc, #468]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0xba>
 8005174:	e014      	b.n	80051a0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fc fbf5 	bl	8001964 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517e:	f7fc fbf1 	bl	8001964 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	; 0x64
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1bc      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005190:	4b6b      	ldr	r3, [pc, #428]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <HAL_RCC_OscConfig+0xe2>
 800519c:	e000      	b.n	80051a0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d063      	beq.n	8005274 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051ac:	4b64      	ldr	r3, [pc, #400]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d11c      	bne.n	80051fe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c4:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d0:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_OscConfig+0x14c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e190      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e8:	4b55      	ldr	r3, [pc, #340]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4952      	ldr	r1, [pc, #328]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fc:	e03a      	b.n	8005274 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005206:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <HAL_RCC_OscConfig+0x2a8>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fbaa 	bl	8001964 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005214:	f7fc fba6 	bl	8001964 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e171      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005226:	4b46      	ldr	r3, [pc, #280]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	493f      	ldr	r1, [pc, #252]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
 8005246:	e015      	b.n	8005274 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005248:	4b3e      	ldr	r3, [pc, #248]	; (8005344 <HAL_RCC_OscConfig+0x2a8>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fc fb89 	bl	8001964 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005256:	f7fc fb85 	bl	8001964 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e150      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d030      	beq.n	80052e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d016      	beq.n	80052b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005288:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528e:	f7fc fb69 	bl	8001964 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005296:	f7fc fb65 	bl	8001964 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e130      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80052aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x1fa>
 80052b4:	e015      	b.n	80052e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fc fb52 	bl	8001964 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c4:	f7fc fb4e 	bl	8001964 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e119      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80052d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 809f 	beq.w	800542e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10f      	bne.n	8005320 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530e:	6413      	str	r3, [r2, #64]	; 0x40
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x2a4>)
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_RCC_OscConfig+0x2b0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d120      	bne.n	800536e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_RCC_OscConfig+0x2b0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a06      	ldr	r2, [pc, #24]	; (800534c <HAL_RCC_OscConfig+0x2b0>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005338:	f7fc fb14 	bl	8001964 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533e:	e010      	b.n	8005362 <HAL_RCC_OscConfig+0x2c6>
 8005340:	40023800 	.word	0x40023800
 8005344:	42470000 	.word	0x42470000
 8005348:	42470e80 	.word	0x42470e80
 800534c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fc fb08 	bl	8001964 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0d3      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b6c      	ldr	r3, [pc, #432]	; (8005514 <HAL_RCC_OscConfig+0x478>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x2e8>
 8005376:	4b68      	ldr	r3, [pc, #416]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a67      	ldr	r2, [pc, #412]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	e01c      	b.n	80053be <HAL_RCC_OscConfig+0x322>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x30a>
 800538c:	4b62      	ldr	r3, [pc, #392]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a61      	ldr	r2, [pc, #388]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
 8005398:	4b5f      	ldr	r3, [pc, #380]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	; 0x70
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x322>
 80053a6:	4b5c      	ldr	r3, [pc, #368]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a5b      	ldr	r2, [pc, #364]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	4b59      	ldr	r3, [pc, #356]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a58      	ldr	r2, [pc, #352]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fc facd 	bl	8001964 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc fac9 	bl	8001964 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e092      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b4c      	ldr	r3, [pc, #304]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x332>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fc fab7 	bl	8001964 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fc fab3 	bl	8001964 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e07c      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	4b41      	ldr	r3, [pc, #260]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d068      	beq.n	8005508 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b08      	cmp	r3, #8
 8005440:	d060      	beq.n	8005504 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d145      	bne.n	80054d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCC_OscConfig+0x480>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fc fa88 	bl	8001964 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005458:	f7fc fa84 	bl	8001964 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e04f      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	3b01      	subs	r3, #1
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	061b      	lsls	r3, r3, #24
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	071b      	lsls	r3, r3, #28
 80054a2:	491d      	ldr	r1, [pc, #116]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a8:	4b1c      	ldr	r3, [pc, #112]	; (800551c <HAL_RCC_OscConfig+0x480>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fa59 	bl	8001964 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b6:	f7fc fa55 	bl	8001964 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e020      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x41a>
 80054d4:	e018      	b.n	8005508 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_RCC_OscConfig+0x480>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fc fa42 	bl	8001964 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fc fa3e 	bl	8001964 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e009      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCC_OscConfig+0x47c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x448>
 8005502:	e001      	b.n	8005508 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40007000 	.word	0x40007000
 8005518:	40023800 	.word	0x40023800
 800551c:	42470060 	.word	0x42470060

08005520 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e022      	b.n	8005578 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fb ff43 	bl	80013d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f814 	bl	8005580 <HAL_SD_InitCard>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e00a      	b.n	8005578 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005580:	b5b0      	push	{r4, r5, r7, lr}
 8005582:	b08e      	sub	sp, #56	; 0x38
 8005584:	af04      	add	r7, sp, #16
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800559c:	2376      	movs	r3, #118	; 0x76
 800559e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681d      	ldr	r5, [r3, #0]
 80055a4:	466c      	mov	r4, sp
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b8:	4628      	mov	r0, r5
 80055ba:	f001 fe11 	bl	80071e0 <SDIO_Init>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80055c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e031      	b.n	8005634 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_SD_InitCard+0xbc>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fe38 	bl	8007250 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <HAL_SD_InitCard+0xbc>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fb18 	bl	8005c1c <SD_PowerON>
 80055ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e013      	b.n	8005634 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fa37 	bl	8005a80 <SD_InitCard>
 8005612:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bdb0      	pop	{r4, r5, r7, pc}
 800563c:	422580a0 	.word	0x422580a0

08005640 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564e:	0f9b      	lsrs	r3, r3, #30
 8005650:	b2da      	uxtb	r2, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565a:	0e9b      	lsrs	r3, r3, #26
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	b2da      	uxtb	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566c:	0e1b      	lsrs	r3, r3, #24
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	b2da      	uxtb	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b2da      	uxtb	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005696:	b2da      	uxtb	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056be:	0bdb      	lsrs	r3, r3, #15
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d0:	0b9b      	lsrs	r3, r3, #14
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f4:	0b1b      	lsrs	r3, r3, #12
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2200      	movs	r2, #0
 8005706:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570c:	2b00      	cmp	r3, #0
 800570e:	d163      	bne.n	80057d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005714:	009a      	lsls	r2, r3, #2
 8005716:	f640 73fc 	movw	r3, #4092	; 0xffc
 800571a:	4013      	ands	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005720:	0f92      	lsrs	r2, r2, #30
 8005722:	431a      	orrs	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	0edb      	lsrs	r3, r3, #27
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	b2da      	uxtb	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573e:	0e1b      	lsrs	r3, r3, #24
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b2da      	uxtb	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	0d5b      	lsrs	r3, r3, #21
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b2da      	uxtb	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	0c9b      	lsrs	r3, r3, #18
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	b2da      	uxtb	r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	0bdb      	lsrs	r3, r3, #15
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	b2da      	uxtb	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	7e1b      	ldrb	r3, [r3, #24]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	3302      	adds	r3, #2
 8005798:	2201      	movs	r2, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80057a2:	fb02 f203 	mul.w	r2, r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	7a1b      	ldrb	r3, [r3, #8]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2201      	movs	r2, #1
 80057b6:	409a      	lsls	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80057c4:	0a52      	lsrs	r2, r2, #9
 80057c6:	fb02 f203 	mul.w	r2, r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d4:	661a      	str	r2, [r3, #96]	; 0x60
 80057d6:	e031      	b.n	800583c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d11d      	bne.n	800581c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	431a      	orrs	r2, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	029a      	lsls	r2, r3, #10
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005810:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
 800581a:	e00f      	b.n	800583c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a58      	ldr	r2, [pc, #352]	; (8005984 <HAL_SD_GetCardCSD+0x344>)
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e09d      	b.n	8005978 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005840:	0b9b      	lsrs	r3, r3, #14
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	b2da      	uxtb	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	0fdb      	lsrs	r3, r3, #31
 8005876:	b2da      	uxtb	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	0f5b      	lsrs	r3, r3, #29
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	b2da      	uxtb	r2, r3
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	0e9b      	lsrs	r3, r3, #26
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	0d9b      	lsrs	r3, r3, #22
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	0d5b      	lsrs	r3, r3, #21
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	0bdb      	lsrs	r3, r3, #15
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	0b9b      	lsrs	r3, r3, #14
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	0b5b      	lsrs	r3, r3, #13
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	0b1b      	lsrs	r3, r3, #12
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	0a9b      	lsrs	r3, r3, #10
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	b2da      	uxtb	r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	b2da      	uxtb	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005966:	b2da      	uxtb	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	004005ff 	.word	0x004005ff

08005988 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af04      	add	r7, sp, #16
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d02e      	beq.n	8005a00 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	d106      	bne.n	80059b8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
 80059b6:	e029      	b.n	8005a0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d10a      	bne.n	80059d6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9b9 	bl	8005d38 <SD_WideBus_Enable>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
 80059d4:	e01a      	b.n	8005a0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9f6 	bl	8005dce <SD_WideBus_Disable>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
 80059f0:	e00c      	b.n	8005a0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
 80059fe:	e005      	b.n	8005a0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e024      	b.n	8005a72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681d      	ldr	r5, [r3, #0]
 8005a4e:	466c      	mov	r4, sp
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a5c:	f107 030c 	add.w	r3, r7, #12
 8005a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a62:	4628      	mov	r0, r5
 8005a64:	f001 fbbc 	bl	80071e0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3728      	adds	r7, #40	; 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bdb0      	pop	{r4, r5, r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	004005ff 	.word	0x004005ff

08005a80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b094      	sub	sp, #80	; 0x50
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fbec 	bl	800726e <SDIO_GetPowerState>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005aa0:	e0b7      	b.n	8005c12 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d02f      	beq.n	8005b0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 fd6b 	bl	800758a <SDMMC_CmdSendCID>
 8005ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <SD_InitCard+0x40>
    {
      return errorstate;
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	e0a8      	b.n	8005c12 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fc16 	bl	80072f8 <SDIO_GetResponse>
 8005acc:	4602      	mov	r2, r0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2104      	movs	r1, #4
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fc0d 	bl	80072f8 <SDIO_GetResponse>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2108      	movs	r1, #8
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fc04 	bl	80072f8 <SDIO_GetResponse>
 8005af0:	4602      	mov	r2, r0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	210c      	movs	r1, #12
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fbfb 	bl	80072f8 <SDIO_GetResponse>
 8005b02:	4602      	mov	r2, r0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d00d      	beq.n	8005b2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f107 020e 	add.w	r2, r7, #14
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fd71 	bl	8007604 <SDMMC_CmdSetRelAdd>
 8005b22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <SD_InitCard+0xae>
    {
      return errorstate;
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2c:	e071      	b.n	8005c12 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d036      	beq.n	8005ba4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f001 fd3b 	bl	80075c6 <SDMMC_CmdSendCSD>
 8005b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5a:	e05a      	b.n	8005c12 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fbc8 	bl	80072f8 <SDIO_GetResponse>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2104      	movs	r1, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fbbf 	bl	80072f8 <SDIO_GetResponse>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2108      	movs	r1, #8
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fbb6 	bl	80072f8 <SDIO_GetResponse>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	210c      	movs	r1, #12
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fbad 	bl	80072f8 <SDIO_GetResponse>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2104      	movs	r1, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 fba4 	bl	80072f8 <SDIO_GetResponse>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	0d1a      	lsrs	r2, r3, #20
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005bb8:	f107 0310 	add.w	r3, r7, #16
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fd3e 	bl	8005640 <HAL_SD_GetCardCSD>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bce:	e020      	b.n	8005c12 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	f04f 0400 	mov.w	r4, #0
 8005bde:	461a      	mov	r2, r3
 8005be0:	4623      	mov	r3, r4
 8005be2:	4608      	mov	r0, r1
 8005be4:	f001 fbe9 	bl	80073ba <SDMMC_CmdSelDesel>
 8005be8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <SD_InitCard+0x174>
  {
    return errorstate;
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	e00e      	b.n	8005c12 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681d      	ldr	r5, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	466c      	mov	r4, sp
 8005bfc:	f103 0210 	add.w	r2, r3, #16
 8005c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c06:	3304      	adds	r3, #4
 8005c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f001 fae8 	bl	80071e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3740      	adds	r7, #64	; 0x40
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fbe3 	bl	8007400 <SDMMC_CmdGoIdleState>
 8005c3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	e072      	b.n	8005d2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fbf6 	bl	800743c <SDMMC_CmdOperCond>
 8005c50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fbcc 	bl	8007400 <SDMMC_CmdGoIdleState>
 8005c68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	e05b      	b.n	8005d2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d137      	bne.n	8005cf2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fbf6 	bl	800747a <SDMMC_CmdAppCommand>
 8005c8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02d      	beq.n	8005cf2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c9a:	e047      	b.n	8005d2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fbe9 	bl	800747a <SDMMC_CmdAppCommand>
 8005ca8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e03b      	b.n	8005d2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	491e      	ldr	r1, [pc, #120]	; (8005d34 <SD_PowerON+0x118>)
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fbff 	bl	80074be <SDMMC_CmdAppOperCommand>
 8005cc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ccc:	e02e      	b.n	8005d2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 fb0f 	bl	80072f8 <SDIO_GetResponse>
 8005cda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	0fdb      	lsrs	r3, r3, #31
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <SD_PowerON+0xcc>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <SD_PowerON+0xce>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]

    count++;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d802      	bhi.n	8005d02 <SD_PowerON+0xe6>
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0cc      	beq.n	8005c9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d902      	bls.n	8005d12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d10:	e00c      	b.n	8005d2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
 8005d22:	e002      	b.n	8005d2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	c1100000 	.word	0xc1100000

08005d38 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fad2 	bl	80072f8 <SDIO_GetResponse>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d5e:	d102      	bne.n	8005d66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d64:	e02f      	b.n	8005dc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f879 	bl	8005e64 <SD_FindSCR>
 8005d72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	e023      	b.n	8005dc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01c      	beq.n	8005dc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	041b      	lsls	r3, r3, #16
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f001 fb70 	bl	800747a <SDMMC_CmdAppCommand>
 8005d9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	e00f      	b.n	8005dc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2102      	movs	r1, #2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fba9 	bl	8007504 <SDMMC_CmdBusWidth>
 8005db2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	e003      	b.n	8005dc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e001      	b.n	8005dc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fa87 	bl	80072f8 <SDIO_GetResponse>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df4:	d102      	bne.n	8005dfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dfa:	e02f      	b.n	8005e5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f82e 	bl	8005e64 <SD_FindSCR>
 8005e08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e023      	b.n	8005e5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01c      	beq.n	8005e58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f001 fb25 	bl	800747a <SDMMC_CmdAppCommand>
 8005e30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	e00f      	b.n	8005e5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 fb5e 	bl	8007504 <SDMMC_CmdBusWidth>
 8005e48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	e003      	b.n	8005e5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e001      	b.n	8005e5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b08f      	sub	sp, #60	; 0x3c
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e6e:	f7fb fd79 	bl	8001964 <HAL_GetTick>
 8005e72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2108      	movs	r1, #8
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 fa73 	bl	8007376 <SDMMC_CmdBlockLength>
 8005e90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	e0a9      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f001 fae6 	bl	800747a <SDMMC_CmdAppCommand>
 8005eae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <SD_FindSCR+0x56>
  {
    return errorstate;
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	e09a      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005ec4:	2330      	movs	r3, #48	; 0x30
 8005ec6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f107 0210 	add.w	r2, r7, #16
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 fa1d 	bl	800731e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 fb2d 	bl	8007548 <SDMMC_CmdSendSCR>
 8005eee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d022      	beq.n	8005f3c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	e07a      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	f107 0208 	add.w	r2, r7, #8
 8005f14:	18d4      	adds	r4, r2, r3
 8005f16:	4608      	mov	r0, r1
 8005f18:	f001 f98d 	bl	8007236 <SDIO_ReadFIFO>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	6023      	str	r3, [r4, #0]
      index++;
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	3301      	adds	r3, #1
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f26:	f7fb fd1d 	bl	8001964 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d102      	bne.n	8005f3c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005f36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f3a:	e059      	b.n	8005ff0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f42:	f240 432a 	movw	r3, #1066	; 0x42a
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0d6      	beq.n	8005efa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005f62:	2308      	movs	r3, #8
 8005f64:	e044      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e037      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2220      	movs	r2, #32
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005f96:	2320      	movs	r3, #32
 8005f98:	e02a      	b.n	8005ff0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	061a      	lsls	r2, r3, #24
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0e1b      	lsrs	r3, r3, #24
 8005fc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	601a      	str	r2, [r3, #0]
    scr++;
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	3304      	adds	r3, #4
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	061a      	lsls	r2, r3, #24
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fe2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	0e1b      	lsrs	r3, r3, #24
 8005fe8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	373c      	adds	r7, #60	; 0x3c
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}

08005ff8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e034      	b.n	8006078 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7fb faf4 	bl	8001610 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3308      	adds	r3, #8
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 ffd0 	bl	8006fd8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	461a      	mov	r2, r3
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	f001 f838 	bl	80070b8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6858      	ldr	r0, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	f001 f883 	bl	8007160 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6892      	ldr	r2, [r2, #8]
 8006062:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6892      	ldr	r2, [r2, #8]
 800606e:	f041 0101 	orr.w	r1, r1, #1
 8006072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e01d      	b.n	80060ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f815 	bl	80060d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f000 f968 	bl	8006394 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b06      	cmp	r3, #6
 8006112:	d007      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d122      	bne.n	800618e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	d11b      	bne.n	800618e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f06f 0202 	mvn.w	r2, #2
 800615e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8ee 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 800617a:	e005      	b.n	8006188 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8e0 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8f1 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d122      	bne.n	80061e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d11b      	bne.n	80061e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0204 	mvn.w	r2, #4
 80061b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8c4 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 80061ce:	e005      	b.n	80061dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8b6 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8c7 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d122      	bne.n	8006236 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d11b      	bne.n	8006236 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f06f 0208 	mvn.w	r2, #8
 8006206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f89a 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8006222:	e005      	b.n	8006230 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f88c 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f89d 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b10      	cmp	r3, #16
 8006242:	d122      	bne.n	800628a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b10      	cmp	r3, #16
 8006250:	d11b      	bne.n	800628a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f06f 0210 	mvn.w	r2, #16
 800625a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2208      	movs	r2, #8
 8006260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f870 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8006276:	e005      	b.n	8006284 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f862 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f873 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10e      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d107      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0201 	mvn.w	r2, #1
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fa fe7f 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d10e      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d107      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f903 	bl	80064e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d10e      	bne.n	800630e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d107      	bne.n	800630e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f838 	bl	800637e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d10e      	bne.n	800633a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b20      	cmp	r3, #32
 8006328:	d107      	bne.n	800633a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0220 	mvn.w	r2, #32
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f8cd 	bl	80064d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a40      	ldr	r2, [pc, #256]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <TIM_Base_SetConfig+0x118>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3c      	ldr	r2, [pc, #240]	; (80064b0 <TIM_Base_SetConfig+0x11c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3b      	ldr	r2, [pc, #236]	; (80064b4 <TIM_Base_SetConfig+0x120>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3a      	ldr	r2, [pc, #232]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d027      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <TIM_Base_SetConfig+0x118>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d023      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2b      	ldr	r2, [pc, #172]	; (80064b0 <TIM_Base_SetConfig+0x11c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <TIM_Base_SetConfig+0x120>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a29      	ldr	r2, [pc, #164]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d017      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a28      	ldr	r2, [pc, #160]	; (80064bc <TIM_Base_SetConfig+0x128>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <TIM_Base_SetConfig+0x12c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <TIM_Base_SetConfig+0x130>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <TIM_Base_SetConfig+0x134>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <TIM_Base_SetConfig+0x138>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <TIM_Base_SetConfig+0x13c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0xf8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40010400 	.word	0x40010400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800
 80064c8:	40001800 	.word	0x40001800
 80064cc:	40001c00 	.word	0x40001c00
 80064d0:	40002000 	.word	0x40002000

080064d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e03f      	b.n	800658e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fa ffbc 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2224      	movs	r2, #36	; 0x24
 800652c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9b1 	bl	80068a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af02      	add	r7, sp, #8
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	f040 8083 	bne.w	80066be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_UART_Transmit+0x2e>
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e07b      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Transmit+0x40>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e074      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2221      	movs	r2, #33	; 0x21
 80065e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80065ec:	f7fb f9ba 	bl	8001964 <HAL_GetTick>
 80065f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88fa      	ldrh	r2, [r7, #6]
 80065fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006606:	e042      	b.n	800668e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d122      	bne.n	8006666 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f8f2 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e042      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	3302      	adds	r3, #2
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	e017      	b.n	800668e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3301      	adds	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	e013      	b.n	800668e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f8cf 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e01f      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	60ba      	str	r2, [r7, #8]
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1b7      	bne.n	8006608 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2200      	movs	r2, #0
 80066a0:	2140      	movs	r1, #64	; 0x40
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f8b6 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e006      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	f040 8090 	bne.w	800680a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_UART_Receive+0x2e>
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e088      	b.n	800680c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_UART_Receive+0x40>
 8006704:	2302      	movs	r3, #2
 8006706:	e081      	b.n	800680c <HAL_UART_Receive+0x144>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2222      	movs	r2, #34	; 0x22
 800671a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800671e:	f7fb f921 	bl	8001964 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006738:	e05c      	b.n	80067f4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006750:	d12b      	bne.n	80067aa <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	2120      	movs	r1, #32
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f859 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e04f      	b.n	800680c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	b29a      	uxth	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	3302      	adds	r3, #2
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	e030      	b.n	80067f4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	b29b      	uxth	r3, r3
 800679a:	b2db      	uxtb	r3, r3
 800679c:	b29a      	uxth	r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	e024      	b.n	80067f4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2120      	movs	r1, #32
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f82d 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e023      	b.n	800680c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d108      	bne.n	80067de <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	60ba      	str	r2, [r7, #8]
 80067d8:	b2ca      	uxtb	r2, r1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e00a      	b.n	80067f4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d19d      	bne.n	800673a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	e02c      	b.n	8006880 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d028      	beq.n	8006880 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <UART_WaitOnFlagUntilTimeout+0x30>
 8006834:	f7fb f896 	bl	8001964 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	d21d      	bcs.n	8006880 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006852:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e00f      	b.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4013      	ands	r3, r2
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	429a      	cmp	r2, r3
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	429a      	cmp	r2, r3
 800689c:	d0c3      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068ea:	f023 030c 	bic.w	r3, r3, #12
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006916:	f040 8199 	bne.w	8006c4c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4ac6      	ldr	r2, [pc, #792]	; (8006c38 <UART_SetConfig+0x390>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00f      	beq.n	8006944 <UART_SetConfig+0x9c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4ac4      	ldr	r2, [pc, #784]	; (8006c3c <UART_SetConfig+0x394>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00a      	beq.n	8006944 <UART_SetConfig+0x9c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4ac3      	ldr	r2, [pc, #780]	; (8006c40 <UART_SetConfig+0x398>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d005      	beq.n	8006944 <UART_SetConfig+0x9c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4ac1      	ldr	r2, [pc, #772]	; (8006c44 <UART_SetConfig+0x39c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f040 80bd 	bne.w	8006abe <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fd ff88 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8006948:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	461d      	mov	r5, r3
 800694e:	f04f 0600 	mov.w	r6, #0
 8006952:	46a8      	mov	r8, r5
 8006954:	46b1      	mov	r9, r6
 8006956:	eb18 0308 	adds.w	r3, r8, r8
 800695a:	eb49 0409 	adc.w	r4, r9, r9
 800695e:	4698      	mov	r8, r3
 8006960:	46a1      	mov	r9, r4
 8006962:	eb18 0805 	adds.w	r8, r8, r5
 8006966:	eb49 0906 	adc.w	r9, r9, r6
 800696a:	f04f 0100 	mov.w	r1, #0
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006976:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800697a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800697e:	4688      	mov	r8, r1
 8006980:	4691      	mov	r9, r2
 8006982:	eb18 0005 	adds.w	r0, r8, r5
 8006986:	eb49 0106 	adc.w	r1, r9, r6
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	461d      	mov	r5, r3
 8006990:	f04f 0600 	mov.w	r6, #0
 8006994:	196b      	adds	r3, r5, r5
 8006996:	eb46 0406 	adc.w	r4, r6, r6
 800699a:	461a      	mov	r2, r3
 800699c:	4623      	mov	r3, r4
 800699e:	f7f9 fc8f 	bl	80002c0 <__aeabi_uldivmod>
 80069a2:	4603      	mov	r3, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	461a      	mov	r2, r3
 80069a8:	4ba7      	ldr	r3, [pc, #668]	; (8006c48 <UART_SetConfig+0x3a0>)
 80069aa:	fba3 2302 	umull	r2, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	461d      	mov	r5, r3
 80069b8:	f04f 0600 	mov.w	r6, #0
 80069bc:	46a9      	mov	r9, r5
 80069be:	46b2      	mov	sl, r6
 80069c0:	eb19 0309 	adds.w	r3, r9, r9
 80069c4:	eb4a 040a 	adc.w	r4, sl, sl
 80069c8:	4699      	mov	r9, r3
 80069ca:	46a2      	mov	sl, r4
 80069cc:	eb19 0905 	adds.w	r9, r9, r5
 80069d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80069d4:	f04f 0100 	mov.w	r1, #0
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069e8:	4689      	mov	r9, r1
 80069ea:	4692      	mov	sl, r2
 80069ec:	eb19 0005 	adds.w	r0, r9, r5
 80069f0:	eb4a 0106 	adc.w	r1, sl, r6
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	461d      	mov	r5, r3
 80069fa:	f04f 0600 	mov.w	r6, #0
 80069fe:	196b      	adds	r3, r5, r5
 8006a00:	eb46 0406 	adc.w	r4, r6, r6
 8006a04:	461a      	mov	r2, r3
 8006a06:	4623      	mov	r3, r4
 8006a08:	f7f9 fc5a 	bl	80002c0 <__aeabi_uldivmod>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b8d      	ldr	r3, [pc, #564]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	; 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a88      	ldr	r2, [pc, #544]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a34:	4498      	add	r8, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f04f 0600 	mov.w	r6, #0
 8006a3e:	46a9      	mov	r9, r5
 8006a40:	46b2      	mov	sl, r6
 8006a42:	eb19 0309 	adds.w	r3, r9, r9
 8006a46:	eb4a 040a 	adc.w	r4, sl, sl
 8006a4a:	4699      	mov	r9, r3
 8006a4c:	46a2      	mov	sl, r4
 8006a4e:	eb19 0905 	adds.w	r9, r9, r5
 8006a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a56:	f04f 0100 	mov.w	r1, #0
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a6a:	4689      	mov	r9, r1
 8006a6c:	4692      	mov	sl, r2
 8006a6e:	eb19 0005 	adds.w	r0, r9, r5
 8006a72:	eb4a 0106 	adc.w	r1, sl, r6
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	f04f 0600 	mov.w	r6, #0
 8006a80:	196b      	adds	r3, r5, r5
 8006a82:	eb46 0406 	adc.w	r4, r6, r6
 8006a86:	461a      	mov	r2, r3
 8006a88:	4623      	mov	r3, r4
 8006a8a:	f7f9 fc19 	bl	80002c0 <__aeabi_uldivmod>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	461a      	mov	r2, r3
 8006a94:	4b6c      	ldr	r3, [pc, #432]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006a96:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	2164      	movs	r1, #100	; 0x64
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	3332      	adds	r3, #50	; 0x32
 8006aa8:	4a67      	ldr	r2, [pc, #412]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	f003 0207 	and.w	r2, r3, #7
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4442      	add	r2, r8
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	e27d      	b.n	8006fba <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006abe:	f7fd feb7 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8006ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	f04f 0600 	mov.w	r6, #0
 8006acc:	46a8      	mov	r8, r5
 8006ace:	46b1      	mov	r9, r6
 8006ad0:	eb18 0308 	adds.w	r3, r8, r8
 8006ad4:	eb49 0409 	adc.w	r4, r9, r9
 8006ad8:	4698      	mov	r8, r3
 8006ada:	46a1      	mov	r9, r4
 8006adc:	eb18 0805 	adds.w	r8, r8, r5
 8006ae0:	eb49 0906 	adc.w	r9, r9, r6
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006af8:	4688      	mov	r8, r1
 8006afa:	4691      	mov	r9, r2
 8006afc:	eb18 0005 	adds.w	r0, r8, r5
 8006b00:	eb49 0106 	adc.w	r1, r9, r6
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	461d      	mov	r5, r3
 8006b0a:	f04f 0600 	mov.w	r6, #0
 8006b0e:	196b      	adds	r3, r5, r5
 8006b10:	eb46 0406 	adc.w	r4, r6, r6
 8006b14:	461a      	mov	r2, r3
 8006b16:	4623      	mov	r3, r4
 8006b18:	f7f9 fbd2 	bl	80002c0 <__aeabi_uldivmod>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	461a      	mov	r2, r3
 8006b22:	4b49      	ldr	r3, [pc, #292]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006b24:	fba3 2302 	umull	r2, r3, r3, r2
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	461d      	mov	r5, r3
 8006b32:	f04f 0600 	mov.w	r6, #0
 8006b36:	46a9      	mov	r9, r5
 8006b38:	46b2      	mov	sl, r6
 8006b3a:	eb19 0309 	adds.w	r3, r9, r9
 8006b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b42:	4699      	mov	r9, r3
 8006b44:	46a2      	mov	sl, r4
 8006b46:	eb19 0905 	adds.w	r9, r9, r5
 8006b4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b4e:	f04f 0100 	mov.w	r1, #0
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b62:	4689      	mov	r9, r1
 8006b64:	4692      	mov	sl, r2
 8006b66:	eb19 0005 	adds.w	r0, r9, r5
 8006b6a:	eb4a 0106 	adc.w	r1, sl, r6
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	461d      	mov	r5, r3
 8006b74:	f04f 0600 	mov.w	r6, #0
 8006b78:	196b      	adds	r3, r5, r5
 8006b7a:	eb46 0406 	adc.w	r4, r6, r6
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4623      	mov	r3, r4
 8006b82:	f7f9 fb9d 	bl	80002c0 <__aeabi_uldivmod>
 8006b86:	4603      	mov	r3, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4b2e      	ldr	r3, [pc, #184]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	2164      	movs	r1, #100	; 0x64
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	3332      	adds	r3, #50	; 0x32
 8006ba0:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bae:	4498      	add	r8, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	f04f 0600 	mov.w	r6, #0
 8006bb8:	46a9      	mov	r9, r5
 8006bba:	46b2      	mov	sl, r6
 8006bbc:	eb19 0309 	adds.w	r3, r9, r9
 8006bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	46a2      	mov	sl, r4
 8006bc8:	eb19 0905 	adds.w	r9, r9, r5
 8006bcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bd0:	f04f 0100 	mov.w	r1, #0
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006be4:	4689      	mov	r9, r1
 8006be6:	4692      	mov	sl, r2
 8006be8:	eb19 0005 	adds.w	r0, r9, r5
 8006bec:	eb4a 0106 	adc.w	r1, sl, r6
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	461d      	mov	r5, r3
 8006bf6:	f04f 0600 	mov.w	r6, #0
 8006bfa:	196b      	adds	r3, r5, r5
 8006bfc:	eb46 0406 	adc.w	r4, r6, r6
 8006c00:	461a      	mov	r2, r3
 8006c02:	4623      	mov	r3, r4
 8006c04:	f7f9 fb5c 	bl	80002c0 <__aeabi_uldivmod>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006c10:	fba3 1302 	umull	r1, r3, r3, r2
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	2164      	movs	r1, #100	; 0x64
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	3332      	adds	r3, #50	; 0x32
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <UART_SetConfig+0x3a0>)
 8006c24:	fba2 2303 	umull	r2, r3, r2, r3
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	f003 0207 	and.w	r2, r3, #7
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4442      	add	r2, r8
 8006c34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c36:	e1c0      	b.n	8006fba <UART_SetConfig+0x712>
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	40011800 	.word	0x40011800
 8006c44:	40011c00 	.word	0x40011c00
 8006c48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4adc      	ldr	r2, [pc, #880]	; (8006fc4 <UART_SetConfig+0x71c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <UART_SetConfig+0x3ce>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4adb      	ldr	r2, [pc, #876]	; (8006fc8 <UART_SetConfig+0x720>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00a      	beq.n	8006c76 <UART_SetConfig+0x3ce>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4ad9      	ldr	r2, [pc, #868]	; (8006fcc <UART_SetConfig+0x724>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d005      	beq.n	8006c76 <UART_SetConfig+0x3ce>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4ad8      	ldr	r2, [pc, #864]	; (8006fd0 <UART_SetConfig+0x728>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	f040 80d1 	bne.w	8006e18 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c76:	f7fd fdef 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8006c7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	469a      	mov	sl, r3
 8006c80:	f04f 0b00 	mov.w	fp, #0
 8006c84:	46d0      	mov	r8, sl
 8006c86:	46d9      	mov	r9, fp
 8006c88:	eb18 0308 	adds.w	r3, r8, r8
 8006c8c:	eb49 0409 	adc.w	r4, r9, r9
 8006c90:	4698      	mov	r8, r3
 8006c92:	46a1      	mov	r9, r4
 8006c94:	eb18 080a 	adds.w	r8, r8, sl
 8006c98:	eb49 090b 	adc.w	r9, r9, fp
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ca8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cb0:	4688      	mov	r8, r1
 8006cb2:	4691      	mov	r9, r2
 8006cb4:	eb1a 0508 	adds.w	r5, sl, r8
 8006cb8:	eb4b 0609 	adc.w	r6, fp, r9
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	f04f 0400 	mov.w	r4, #0
 8006cce:	0094      	lsls	r4, r2, #2
 8006cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cd4:	008b      	lsls	r3, r1, #2
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4623      	mov	r3, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f7f9 faef 	bl	80002c0 <__aeabi_uldivmod>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4bba      	ldr	r3, [pc, #744]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006cea:	fba3 2302 	umull	r2, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	469b      	mov	fp, r3
 8006cf8:	f04f 0c00 	mov.w	ip, #0
 8006cfc:	46d9      	mov	r9, fp
 8006cfe:	46e2      	mov	sl, ip
 8006d00:	eb19 0309 	adds.w	r3, r9, r9
 8006d04:	eb4a 040a 	adc.w	r4, sl, sl
 8006d08:	4699      	mov	r9, r3
 8006d0a:	46a2      	mov	sl, r4
 8006d0c:	eb19 090b 	adds.w	r9, r9, fp
 8006d10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d28:	4689      	mov	r9, r1
 8006d2a:	4692      	mov	sl, r2
 8006d2c:	eb1b 0509 	adds.w	r5, fp, r9
 8006d30:	eb4c 060a 	adc.w	r6, ip, sl
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	f04f 0400 	mov.w	r4, #0
 8006d46:	0094      	lsls	r4, r2, #2
 8006d48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d4c:	008b      	lsls	r3, r1, #2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4623      	mov	r3, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	4631      	mov	r1, r6
 8006d56:	f7f9 fab3 	bl	80002c0 <__aeabi_uldivmod>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4b9c      	ldr	r3, [pc, #624]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006d62:	fba3 1302 	umull	r1, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2164      	movs	r1, #100	; 0x64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a97      	ldr	r2, [pc, #604]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d80:	4498      	add	r8, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	469b      	mov	fp, r3
 8006d86:	f04f 0c00 	mov.w	ip, #0
 8006d8a:	46d9      	mov	r9, fp
 8006d8c:	46e2      	mov	sl, ip
 8006d8e:	eb19 0309 	adds.w	r3, r9, r9
 8006d92:	eb4a 040a 	adc.w	r4, sl, sl
 8006d96:	4699      	mov	r9, r3
 8006d98:	46a2      	mov	sl, r4
 8006d9a:	eb19 090b 	adds.w	r9, r9, fp
 8006d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006da2:	f04f 0100 	mov.w	r1, #0
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006db6:	4689      	mov	r9, r1
 8006db8:	4692      	mov	sl, r2
 8006dba:	eb1b 0509 	adds.w	r5, fp, r9
 8006dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	f04f 0400 	mov.w	r4, #0
 8006dd4:	0094      	lsls	r4, r2, #2
 8006dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dda:	008b      	lsls	r3, r1, #2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4623      	mov	r3, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	4631      	mov	r1, r6
 8006de4:	f7f9 fa6c 	bl	80002c0 <__aeabi_uldivmod>
 8006de8:	4603      	mov	r3, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b79      	ldr	r3, [pc, #484]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006df0:	fba3 1302 	umull	r1, r3, r3, r2
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	2164      	movs	r1, #100	; 0x64
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	3332      	adds	r3, #50	; 0x32
 8006e02:	4a74      	ldr	r2, [pc, #464]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006e04:	fba2 2303 	umull	r2, r3, r2, r3
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4442      	add	r2, r8
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	e0d0      	b.n	8006fba <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e18:	f7fd fd0a 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8006e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	469a      	mov	sl, r3
 8006e22:	f04f 0b00 	mov.w	fp, #0
 8006e26:	46d0      	mov	r8, sl
 8006e28:	46d9      	mov	r9, fp
 8006e2a:	eb18 0308 	adds.w	r3, r8, r8
 8006e2e:	eb49 0409 	adc.w	r4, r9, r9
 8006e32:	4698      	mov	r8, r3
 8006e34:	46a1      	mov	r9, r4
 8006e36:	eb18 080a 	adds.w	r8, r8, sl
 8006e3a:	eb49 090b 	adc.w	r9, r9, fp
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e52:	4688      	mov	r8, r1
 8006e54:	4691      	mov	r9, r2
 8006e56:	eb1a 0508 	adds.w	r5, sl, r8
 8006e5a:	eb4b 0609 	adc.w	r6, fp, r9
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	f04f 0400 	mov.w	r4, #0
 8006e70:	0094      	lsls	r4, r2, #2
 8006e72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e76:	008b      	lsls	r3, r1, #2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4623      	mov	r3, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	4631      	mov	r1, r6
 8006e80:	f7f9 fa1e 	bl	80002c0 <__aeabi_uldivmod>
 8006e84:	4603      	mov	r3, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4b52      	ldr	r3, [pc, #328]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	469b      	mov	fp, r3
 8006e9a:	f04f 0c00 	mov.w	ip, #0
 8006e9e:	46d9      	mov	r9, fp
 8006ea0:	46e2      	mov	sl, ip
 8006ea2:	eb19 0309 	adds.w	r3, r9, r9
 8006ea6:	eb4a 040a 	adc.w	r4, sl, sl
 8006eaa:	4699      	mov	r9, r3
 8006eac:	46a2      	mov	sl, r4
 8006eae:	eb19 090b 	adds.w	r9, r9, fp
 8006eb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006eb6:	f04f 0100 	mov.w	r1, #0
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ec2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ec6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eca:	4689      	mov	r9, r1
 8006ecc:	4692      	mov	sl, r2
 8006ece:	eb1b 0509 	adds.w	r5, fp, r9
 8006ed2:	eb4c 060a 	adc.w	r6, ip, sl
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4619      	mov	r1, r3
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	0094      	lsls	r4, r2, #2
 8006eea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eee:	008b      	lsls	r3, r1, #2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	f7f9 f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8006efc:	4603      	mov	r3, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	461a      	mov	r2, r3
 8006f02:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006f04:	fba3 1302 	umull	r1, r3, r3, r2
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	2164      	movs	r1, #100	; 0x64
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	3332      	adds	r3, #50	; 0x32
 8006f16:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006f18:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f22:	4498      	add	r8, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	469b      	mov	fp, r3
 8006f28:	f04f 0c00 	mov.w	ip, #0
 8006f2c:	46d9      	mov	r9, fp
 8006f2e:	46e2      	mov	sl, ip
 8006f30:	eb19 0309 	adds.w	r3, r9, r9
 8006f34:	eb4a 040a 	adc.w	r4, sl, sl
 8006f38:	4699      	mov	r9, r3
 8006f3a:	46a2      	mov	sl, r4
 8006f3c:	eb19 090b 	adds.w	r9, r9, fp
 8006f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f58:	4689      	mov	r9, r1
 8006f5a:	4692      	mov	sl, r2
 8006f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8006f60:	eb4c 060a 	adc.w	r6, ip, sl
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	f04f 0400 	mov.w	r4, #0
 8006f76:	0094      	lsls	r4, r2, #2
 8006f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f7c:	008b      	lsls	r3, r1, #2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4623      	mov	r3, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	4631      	mov	r1, r6
 8006f86:	f7f9 f99b 	bl	80002c0 <__aeabi_uldivmod>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	461a      	mov	r2, r3
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006f92:	fba3 1302 	umull	r1, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2164      	movs	r1, #100	; 0x64
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <UART_SetConfig+0x72c>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4442      	add	r2, r8
 8006fb6:	609a      	str	r2, [r3, #8]
}
 8006fb8:	e7ff      	b.n	8006fba <UART_SetConfig+0x712>
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	40011000 	.word	0x40011000
 8006fc8:	40011400 	.word	0x40011400
 8006fcc:	40011800 	.word	0x40011800
 8006fd0:	40011c00 	.word	0x40011c00
 8006fd4:	51eb851f 	.word	0x51eb851f

08006fd8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <FSMC_NORSRAM_Init+0xdc>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007002:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007008:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800700e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007014:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800701a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007020:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007026:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800702c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007032:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8007038:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800703e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007044:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800704a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b08      	cmp	r3, #8
 8007058:	d103      	bne.n	8007062 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007060:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007076:	d10a      	bne.n	800708e <FSMC_NORSRAM_Init+0xb6>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d006      	beq.n	80070a4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	ffc00480 	.word	0xffc00480

080070b8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070da:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070e6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070ee:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80070f6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007100:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	3b02      	subs	r3, #2
 8007108:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800710a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007110:	4313      	orrs	r3, r2
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6979      	ldr	r1, [r7, #20]
 8007120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007130:	d10e      	bne.n	8007150 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800713a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	051b      	lsls	r3, r3, #20
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007178:	d122      	bne.n	80071c0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007188:	4013      	ands	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007196:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800719e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80071a6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071ac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071be:	e005      	b.n	80071cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80071c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	cff00000 	.word	0xcff00000

080071e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80071e0:	b084      	sub	sp, #16
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	f107 001c 	add.w	r0, r7, #28
 80071ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80071f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80071f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80071fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80071fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007202:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007206:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800720a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800721a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	b004      	add	sp, #16
 8007234:	4770      	bx	lr

08007236 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800725e:	2002      	movs	r0, #2
 8007260:	f7fa fb8c 	bl	800197c <HAL_Delay>
  
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0303 	and.w	r3, r3, #3
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80072ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80072b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072c4:	f023 030f 	bic.w	r3, r3, #15
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	b2db      	uxtb	r3, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3314      	adds	r3, #20
 8007306:	461a      	mov	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	4413      	add	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
}  
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007344:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800734a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007350:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007368:	2300      	movs	r3, #0

}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b088      	sub	sp, #32
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007384:	2310      	movs	r3, #16
 8007386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007396:	f107 0308 	add.w	r3, r7, #8
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff74 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80073a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a6:	2110      	movs	r1, #16
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f975 	bl	8007698 <SDMMC_GetCmdResp1>
 80073ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b0:	69fb      	ldr	r3, [r7, #28]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b08a      	sub	sp, #40	; 0x28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073ca:	2307      	movs	r3, #7
 80073cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073da:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	4619      	mov	r1, r3
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff ff51 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80073e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ec:	2107      	movs	r1, #7
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f952 	bl	8007698 <SDMMC_GetCmdResp1>
 80073f4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3728      	adds	r7, #40	; 0x28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ff30 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f90c 	bl	8007648 <SDMMC_GetCmdError>
 8007430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007432:	69fb      	ldr	r3, [r7, #28]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007444:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800744a:	2308      	movs	r3, #8
 800744c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800745c:	f107 0308 	add.w	r3, r7, #8
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff ff11 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 faf5 	bl	8007a58 <SDMMC_GetCmdResp7>
 800746e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007470:	69fb      	ldr	r3, [r7, #28]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007488:	2337      	movs	r3, #55	; 0x37
 800748a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007498:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fef2 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80074a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074aa:	2137      	movs	r1, #55	; 0x37
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8f3 	bl	8007698 <SDMMC_GetCmdResp1>
 80074b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074b4:	69fb      	ldr	r3, [r7, #28]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3720      	adds	r7, #32
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b088      	sub	sp, #32
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074d4:	2329      	movs	r3, #41	; 0x29
 80074d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fecc 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa02 	bl	80078fc <SDMMC_GetCmdResp3>
 80074f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074fa:	69fb      	ldr	r3, [r7, #28]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007512:	2306      	movs	r3, #6
 8007514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800751e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007522:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007524:	f107 0308 	add.w	r3, r7, #8
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fead 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007530:	f241 3288 	movw	r2, #5000	; 0x1388
 8007534:	2106      	movs	r1, #6
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8ae 	bl	8007698 <SDMMC_GetCmdResp1>
 800753c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007554:	2333      	movs	r3, #51	; 0x33
 8007556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007564:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007566:	f107 0308 	add.w	r3, r7, #8
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fe8c 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007572:	f241 3288 	movw	r2, #5000	; 0x1388
 8007576:	2133      	movs	r1, #51	; 0x33
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f88d 	bl	8007698 <SDMMC_GetCmdResp1>
 800757e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007580:	69fb      	ldr	r3, [r7, #28]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007596:	2302      	movs	r3, #2
 8007598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800759a:	23c0      	movs	r3, #192	; 0xc0
 800759c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075a8:	f107 0308 	add.w	r3, r7, #8
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff fe6b 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f95b 	bl	8007870 <SDMMC_GetCmdResp2>
 80075ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075bc:	69fb      	ldr	r3, [r7, #28]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b088      	sub	sp, #32
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075d4:	2309      	movs	r3, #9
 80075d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075d8:	23c0      	movs	r3, #192	; 0xc0
 80075da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075e6:	f107 0308 	add.w	r3, r7, #8
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fe4c 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f93c 	bl	8007870 <SDMMC_GetCmdResp2>
 80075f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075fa:	69fb      	ldr	r3, [r7, #28]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007612:	2303      	movs	r3, #3
 8007614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007616:	2340      	movs	r3, #64	; 0x40
 8007618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800761e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fe2d 	bl	800728a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	2103      	movs	r1, #3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f99b 	bl	8007970 <SDMMC_GetCmdResp6>
 800763a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007648:	b490      	push	{r4, r7}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <SDMMC_GetCmdError+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <SDMMC_GetCmdError+0x4c>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	0a5b      	lsrs	r3, r3, #9
 800765c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007660:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007664:	4623      	mov	r3, r4
 8007666:	1e5c      	subs	r4, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800766c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007670:	e009      	b.n	8007686 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f2      	beq.n	8007664 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	22c5      	movs	r2, #197	; 0xc5
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bc90      	pop	{r4, r7}
 800768e:	4770      	bx	lr
 8007690:	20000008 	.word	0x20000008
 8007694:	10624dd3 	.word	0x10624dd3

08007698 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007698:	b590      	push	{r4, r7, lr}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	460b      	mov	r3, r1
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076a6:	4b6f      	ldr	r3, [pc, #444]	; (8007864 <SDMMC_GetCmdResp1+0x1cc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6f      	ldr	r2, [pc, #444]	; (8007868 <SDMMC_GetCmdResp1+0x1d0>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	0a5b      	lsrs	r3, r3, #9
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80076b8:	4623      	mov	r3, r4
 80076ba:	1e5c      	subs	r4, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076c4:	e0c9      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <SDMMC_GetCmdResp1+0x20>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1eb      	bne.n	80076b8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2204      	movs	r2, #4
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076f2:	2304      	movs	r3, #4
 80076f4:	e0b1      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007708:	2301      	movs	r3, #1
 800770a:	e0a6      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	22c5      	movs	r2, #197	; 0xc5
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff fde3 	bl	80072de <SDIO_GetCommandResponse>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	4293      	cmp	r3, r2
 8007720:	d001      	beq.n	8007726 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007722:	2301      	movs	r3, #1
 8007724:	e099      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007726:	2100      	movs	r1, #0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff fde5 	bl	80072f8 <SDIO_GetResponse>
 800772e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4b4e      	ldr	r3, [pc, #312]	; (800786c <SDMMC_GetCmdResp1+0x1d4>)
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800773a:	2300      	movs	r3, #0
 800773c:	e08d      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	da02      	bge.n	800774a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007748:	e087      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007754:	2340      	movs	r3, #64	; 0x40
 8007756:	e080      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	e079      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007774:	e071      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007784:	e069      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007794:	e061      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077a4:	e059      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b4:	e051      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077c4:	e049      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077d4:	e041      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80077e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e4:	e039      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80077f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077f4:	e031      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007800:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007804:	e029      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007810:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007814:	e021      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007820:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007824:	e019      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007834:	e011      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007844:	e009      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007850:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007854:	e001      	b.n	800785a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
 8007862:	bf00      	nop
 8007864:	20000008 	.word	0x20000008
 8007868:	10624dd3 	.word	0x10624dd3
 800786c:	fdffe008 	.word	0xfdffe008

08007870 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007870:	b490      	push	{r4, r7}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <SDMMC_GetCmdResp2+0x84>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <SDMMC_GetCmdResp2+0x88>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	0a5b      	lsrs	r3, r3, #9
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800788c:	4623      	mov	r3, r4
 800788e:	1e5c      	subs	r4, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007898:	e026      	b.n	80078e8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f0      	beq.n	800788c <SDMMC_GetCmdResp2+0x1c>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1eb      	bne.n	800788c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2204      	movs	r2, #4
 80078c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078c6:	2304      	movs	r3, #4
 80078c8:	e00e      	b.n	80078e8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078dc:	2301      	movs	r3, #1
 80078de:	e003      	b.n	80078e8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	22c5      	movs	r2, #197	; 0xc5
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc90      	pop	{r4, r7}
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000008 	.word	0x20000008
 80078f8:	10624dd3 	.word	0x10624dd3

080078fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80078fc:	b490      	push	{r4, r7}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007904:	4b18      	ldr	r3, [pc, #96]	; (8007968 <SDMMC_GetCmdResp3+0x6c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <SDMMC_GetCmdResp3+0x70>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	0a5b      	lsrs	r3, r3, #9
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007918:	4623      	mov	r3, r4
 800791a:	1e5c      	subs	r4, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007924:	e01b      	b.n	800795e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <SDMMC_GetCmdResp3+0x1c>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1eb      	bne.n	8007918 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2204      	movs	r2, #4
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007952:	2304      	movs	r3, #4
 8007954:	e003      	b.n	800795e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	22c5      	movs	r2, #197	; 0xc5
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bc90      	pop	{r4, r7}
 8007966:	4770      	bx	lr
 8007968:	20000008 	.word	0x20000008
 800796c:	10624dd3 	.word	0x10624dd3

08007970 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	460b      	mov	r3, r1
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800797e:	4b34      	ldr	r3, [pc, #208]	; (8007a50 <SDMMC_GetCmdResp6+0xe0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a34      	ldr	r2, [pc, #208]	; (8007a54 <SDMMC_GetCmdResp6+0xe4>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	0a5b      	lsrs	r3, r3, #9
 800798a:	f241 3288 	movw	r2, #5000	; 0x1388
 800798e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007992:	4623      	mov	r3, r4
 8007994:	1e5c      	subs	r4, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800799a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800799e:	e052      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <SDMMC_GetCmdResp6+0x22>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1eb      	bne.n	8007992 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2204      	movs	r2, #4
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079cc:	2304      	movs	r3, #4
 80079ce:	e03a      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e02f      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fc79 	bl	80072de <SDIO_GetCommandResponse>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d001      	beq.n	80079fa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e025      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22c5      	movs	r2, #197	; 0xc5
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a00:	2100      	movs	r1, #0
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fc78 	bl	80072f8 <SDIO_GetResponse>
 8007a08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	0c1b      	lsrs	r3, r3, #16
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e011      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a30:	e009      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a40:	e001      	b.n	8007a46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd90      	pop	{r4, r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000008 	.word	0x20000008
 8007a54:	10624dd3 	.word	0x10624dd3

08007a58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007a58:	b490      	push	{r4, r7}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a60:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <SDMMC_GetCmdResp7+0x90>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a21      	ldr	r2, [pc, #132]	; (8007aec <SDMMC_GetCmdResp7+0x94>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a74:	4623      	mov	r3, r4
 8007a76:	1e5c      	subs	r4, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a80:	e02c      	b.n	8007adc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <SDMMC_GetCmdResp7+0x1c>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1eb      	bne.n	8007a74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aae:	2304      	movs	r3, #4
 8007ab0:	e014      	b.n	8007adc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e009      	b.n	8007adc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2240      	movs	r2, #64	; 0x40
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ada:	2300      	movs	r3, #0
  
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc90      	pop	{r4, r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000008 	.word	0x20000008
 8007aec:	10624dd3 	.word	0x10624dd3

08007af0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007af0:	b084      	sub	sp, #16
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	f107 001c 	add.w	r0, r7, #28
 8007afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d122      	bne.n	8007b4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d105      	bne.n	8007b42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f94a 	bl	8007ddc <USB_CoreReset>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]
 8007b4c:	e01a      	b.n	8007b84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f93e 	bl	8007ddc <USB_CoreReset>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
 8007b76:	e005      	b.n	8007b84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d10b      	bne.n	8007ba2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f043 0206 	orr.w	r2, r3, #6
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bae:	b004      	add	sp, #16
 8007bb0:	4770      	bx	lr

08007bb2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f043 0201 	orr.w	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f023 0201 	bic.w	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	e00b      	b.n	8007c3a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]
 8007c34:	e001      	b.n	8007c3a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e003      	b.n	8007c42 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007c3a:	2032      	movs	r0, #50	; 0x32
 8007c3c:	f7f9 fe9e 	bl	800197c <HAL_Delay>

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	019b      	lsls	r3, r3, #6
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <USB_FlushTxFifo+0x48>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e006      	b.n	8007c86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d0f0      	beq.n	8007c66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	00030d40 	.word	0x00030d40

08007c98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <USB_FlushRxFifo+0x40>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d0f0      	beq.n	8007caa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	00030d40 	.word	0x00030d40

08007cdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b089      	sub	sp, #36	; 0x24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	460b      	mov	r3, r1
 8007cec:	71fb      	strb	r3, [r7, #7]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d11a      	bne.n	8007d38 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d02:	88bb      	ldrh	r3, [r7, #4]
 8007d04:	3303      	adds	r3, #3
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	e00f      	b.n	8007d30 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	031a      	lsls	r2, r3, #12
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3304      	adds	r3, #4
 8007d28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d3eb      	bcc.n	8007d10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3724      	adds	r7, #36	; 0x24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b089      	sub	sp, #36	; 0x24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	4613      	mov	r3, r2
 8007d52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	3303      	adds	r3, #3
 8007d60:	089b      	lsrs	r3, r3, #2
 8007d62:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e00b      	b.n	8007d82 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d3ef      	bcc.n	8007d6a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007d8a:	69fb      	ldr	r3, [r7, #28]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3724      	adds	r7, #36	; 0x24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4013      	ands	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f003 0301 	and.w	r3, r3, #1
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <USB_CoreReset+0x64>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e01b      	b.n	8007e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	daf2      	bge.n	8007de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f043 0201 	orr.w	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <USB_CoreReset+0x64>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d901      	bls.n	8007e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d0f0      	beq.n	8007e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	00030d40 	.word	0x00030d40

08007e44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e44:	b084      	sub	sp, #16
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	f107 001c 	add.w	r0, r7, #28
 8007e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e60:	461a      	mov	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d018      	beq.n	8007ebc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d10a      	bne.n	8007ea6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e9e:	f043 0304 	orr.w	r3, r3, #4
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	e014      	b.n	8007ed0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eb4:	f023 0304 	bic.w	r3, r3, #4
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e009      	b.n	8007ed0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eca:	f023 0304 	bic.w	r3, r3, #4
 8007ece:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007ed0:	2110      	movs	r1, #16
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff feba 	bl	8007c4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fedd 	bl	8007c98 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e015      	b.n	8007f10 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f04:	461a      	mov	r2, r3
 8007f06:	2300      	movs	r3, #0
 8007f08:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d3e5      	bcc.n	8007ee4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007f18:	2101      	movs	r1, #1
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8ac 	bl	8008078 <USB_DriveVbus>

  HAL_Delay(200U);
 8007f20:	20c8      	movs	r0, #200	; 0xc8
 8007f22:	f7f9 fd2b 	bl	800197c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f32:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a14      	ldr	r2, [pc, #80]	; (8007f9c <USB_HostInit+0x158>)
 8007f4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <USB_HostInit+0x15c>)
 8007f52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f56:	e009      	b.n	8007f6c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <USB_HostInit+0x160>)
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a10      	ldr	r2, [pc, #64]	; (8007fa8 <USB_HostInit+0x164>)
 8007f68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f043 0210 	orr.w	r2, r3, #16
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <USB_HostInit+0x168>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f96:	b004      	add	sp, #16
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	01000200 	.word	0x01000200
 8007fa0:	00e00300 	.word	0x00e00300
 8007fa4:	00600080 	.word	0x00600080
 8007fa8:	004000e0 	.word	0x004000e0
 8007fac:	a3200008 	.word	0xa3200008

08007fb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ffe:	6053      	str	r3, [r2, #4]
 8008000:	e009      	b.n	8008016 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d106      	bne.n	8008016 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800800e:	461a      	mov	r2, r3
 8008010:	f241 7370 	movw	r3, #6000	; 0x1770
 8008014:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008044:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800804e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008052:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008054:	2064      	movs	r0, #100	; 0x64
 8008056:	f7f9 fc91 	bl	800197c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008066:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008068:	200a      	movs	r0, #10
 800806a:	f7f9 fc87 	bl	800197c <HAL_Delay>

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800809c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <USB_DriveVbus+0x44>
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d106      	bne.n	80080bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c6:	d109      	bne.n	80080dc <USB_DriveVbus+0x64>
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	0c5b      	lsrs	r3, r3, #17
 8008108:	f003 0303 	and.w	r3, r3, #3
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	b29b      	uxth	r3, r3
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
	...

0800813c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	4608      	mov	r0, r1
 8008146:	4611      	mov	r1, r2
 8008148:	461a      	mov	r2, r3
 800814a:	4603      	mov	r3, r0
 800814c:	70fb      	strb	r3, [r7, #3]
 800814e:	460b      	mov	r3, r1
 8008150:	70bb      	strb	r3, [r7, #2]
 8008152:	4613      	mov	r3, r2
 8008154:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008176:	2b03      	cmp	r3, #3
 8008178:	d87e      	bhi.n	8008278 <USB_HC_Init+0x13c>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USB_HC_Init+0x44>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	08008191 	.word	0x08008191
 8008184:	0800823b 	.word	0x0800823b
 8008188:	08008191 	.word	0x08008191
 800818c:	080081fd 	.word	0x080081fd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4413      	add	r3, r2
 8008198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819c:	461a      	mov	r2, r3
 800819e:	f240 439d 	movw	r3, #1181	; 0x49d
 80081a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80081a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da10      	bge.n	80081ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ca:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80081cc:	e057      	b.n	800827e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d051      	beq.n	800827e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081f8:	60d3      	str	r3, [r2, #12]
      break;
 80081fa:	e040      	b.n	800827e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008208:	461a      	mov	r2, r3
 800820a:	f240 639d 	movw	r3, #1693	; 0x69d
 800820e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008210:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008214:	2b00      	cmp	r3, #0
 8008216:	da34      	bge.n	8008282 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	440a      	add	r2, r1
 800822e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008236:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008238:	e023      	b.n	8008282 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008246:	461a      	mov	r2, r3
 8008248:	f240 2325 	movw	r3, #549	; 0x225
 800824c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800824e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da17      	bge.n	8008286 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	440a      	add	r2, r1
 800826c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008270:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008274:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008276:	e006      	b.n	8008286 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
      break;
 800827c:	e004      	b.n	8008288 <USB_HC_Init+0x14c>
      break;
 800827e:	bf00      	nop
 8008280:	e002      	b.n	8008288 <USB_HC_Init+0x14c>
      break;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <USB_HC_Init+0x14c>
      break;
 8008286:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828e:	699a      	ldr	r2, [r3, #24]
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	2101      	movs	r1, #1
 8008298:	fa01 f303 	lsl.w	r3, r1, r3
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082a2:	4313      	orrs	r3, r2
 80082a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80082b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	da03      	bge.n	80082c2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80082ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	e001      	b.n	80082c6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80082c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d103      	bne.n	80082d6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80082ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e001      	b.n	80082da <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082da:	787b      	ldrb	r3, [r7, #1]
 80082dc:	059b      	lsls	r3, r3, #22
 80082de:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082e2:	78bb      	ldrb	r3, [r7, #2]
 80082e4:	02db      	lsls	r3, r3, #11
 80082e6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082ea:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082f0:	049b      	lsls	r3, r3, #18
 80082f2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	0159      	lsls	r1, r3, #5
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	440b      	add	r3, r1
 800830c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008310:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008316:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800831c:	2b03      	cmp	r3, #3
 800831e:	d10f      	bne.n	8008340 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800833e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
}
 8008342:	4618      	mov	r0, r3
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	; 0x30
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800836c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008376:	2b00      	cmp	r3, #0
 8008378:	d028      	beq.n	80083cc <USB_HC_StartXfer+0x7c>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <USB_HC_StartXfer+0x50>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	795b      	ldrb	r3, [r3, #5]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	4619      	mov	r1, r3
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fa30 	bl	80087fc <USB_DoPing>
      return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e114      	b.n	80085ca <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d112      	bne.n	80083cc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	6a3a      	ldr	r2, [r7, #32]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80083c4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2200      	movs	r2, #0
 80083ca:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d018      	beq.n	8008406 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	8912      	ldrh	r2, [r2, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	3b01      	subs	r3, #1
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	8912      	ldrh	r2, [r2, #8]
 80083e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80083ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083ec:	8b7b      	ldrh	r3, [r7, #26]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d90b      	bls.n	800840a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80083f2:	8b7b      	ldrh	r3, [r7, #26]
 80083f4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80083f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	8912      	ldrh	r2, [r2, #8]
 80083fc:	fb02 f203 	mul.w	r2, r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	611a      	str	r2, [r3, #16]
 8008404:	e001      	b.n	800840a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008406:	2301      	movs	r3, #1
 8008408:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	8912      	ldrh	r2, [r2, #8]
 8008418:	fb02 f203 	mul.w	r2, r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800842a:	04d9      	lsls	r1, r3, #19
 800842c:	4b69      	ldr	r3, [pc, #420]	; (80085d4 <USB_HC_StartXfer+0x284>)
 800842e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008430:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	7a9b      	ldrb	r3, [r3, #10]
 8008436:	075b      	lsls	r3, r3, #29
 8008438:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800843c:	69f9      	ldr	r1, [r7, #28]
 800843e:	0148      	lsls	r0, r1, #5
 8008440:	6a39      	ldr	r1, [r7, #32]
 8008442:	4401      	add	r1, r0
 8008444:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008448:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800844a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68d9      	ldr	r1, [r3, #12]
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008462:	460a      	mov	r2, r1
 8008464:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf0c      	ite	eq
 8008476:	2301      	moveq	r3, #1
 8008478:	2300      	movne	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	6a3a      	ldr	r2, [r7, #32]
 8008492:	440a      	add	r2, r1
 8008494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008498:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800849c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	7e7b      	ldrb	r3, [r7, #25]
 80084ae:	075b      	lsls	r3, r3, #29
 80084b0:	69f9      	ldr	r1, [r7, #28]
 80084b2:	0148      	lsls	r0, r1, #5
 80084b4:	6a39      	ldr	r1, [r7, #32]
 80084b6:	4401      	add	r1, r0
 80084b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80084bc:	4313      	orrs	r3, r2
 80084be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a42      	ldr	r2, [pc, #264]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084d0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084d2:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084da:	4a3f      	ldr	r2, [pc, #252]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084dc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80084e6:	4b3c      	ldr	r3, [pc, #240]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ee:	4a3a      	ldr	r2, [pc, #232]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e005      	b.n	8008500 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80084f4:	4b38      	ldr	r3, [pc, #224]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084fc:	4a36      	ldr	r2, [pc, #216]	; (80085d8 <USB_HC_StartXfer+0x288>)
 80084fe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008500:	4b35      	ldr	r3, [pc, #212]	; (80085d8 <USB_HC_StartXfer+0x288>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008508:	4a33      	ldr	r2, [pc, #204]	; (80085d8 <USB_HC_StartXfer+0x288>)
 800850a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008518:	461a      	mov	r2, r3
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <USB_HC_StartXfer+0x288>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e04f      	b.n	80085ca <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	78db      	ldrb	r3, [r3, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d14a      	bne.n	80085c8 <USB_HC_StartXfer+0x278>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d046      	beq.n	80085c8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	79db      	ldrb	r3, [r3, #7]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d830      	bhi.n	80085a4 <USB_HC_StartXfer+0x254>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USB_HC_StartXfer+0x1f8>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008559 	.word	0x08008559
 800854c:	0800857d 	.word	0x0800857d
 8008550:	08008559 	.word	0x08008559
 8008554:	0800857d 	.word	0x0800857d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	3303      	adds	r3, #3
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008562:	8afa      	ldrh	r2, [r7, #22]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	b29b      	uxth	r3, r3
 800856a:	429a      	cmp	r2, r3
 800856c:	d91c      	bls.n	80085a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]
        }
        break;
 800857a:	e015      	b.n	80085a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	3303      	adds	r3, #3
 8008582:	089b      	lsrs	r3, r3, #2
 8008584:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008586:	8afa      	ldrh	r2, [r7, #22]
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	b29b      	uxth	r3, r3
 8008592:	429a      	cmp	r2, r3
 8008594:	d90a      	bls.n	80085ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80085a2:	e003      	b.n	80085ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 80085a4:	bf00      	nop
 80085a6:	e002      	b.n	80085ae <USB_HC_StartXfer+0x25e>
        break;
 80085a8:	bf00      	nop
 80085aa:	e000      	b.n	80085ae <USB_HC_StartXfer+0x25e>
        break;
 80085ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	68d9      	ldr	r1, [r3, #12]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	785a      	ldrb	r2, [r3, #1]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	b298      	uxth	r0, r3
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fb8a 	bl	8007cdc <USB_WritePacket>
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3728      	adds	r7, #40	; 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	1ff80000 	.word	0x1ff80000
 80085d8:	20000100 	.word	0x20000100

080085dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	b29b      	uxth	r3, r3
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80085fe:	b480      	push	{r7}
 8008600:	b087      	sub	sp, #28
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	0c9b      	lsrs	r3, r3, #18
 8008626:	f003 0303 	and.w	r3, r3, #3
 800862a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USB_HC_Halt+0x3a>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d16c      	bne.n	8008712 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008656:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d143      	bne.n	80086ec <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	4413      	add	r3, r2
 800866c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	440a      	add	r2, r1
 800867a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008682:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	4413      	add	r3, r2
 800868c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	440a      	add	r2, r1
 800869a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800869e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086c2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	3301      	adds	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086d0:	d81d      	bhi.n	800870e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086e8:	d0ec      	beq.n	80086c4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086ea:	e080      	b.n	80087ee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	440a      	add	r2, r1
 8008702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800870a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800870c:	e06f      	b.n	80087ee <USB_HC_Halt+0x1f0>
          break;
 800870e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008710:	e06d      	b.n	80087ee <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	440a      	add	r2, r1
 8008728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008730:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d143      	bne.n	80087ca <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	440a      	add	r2, r1
 8008758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008760:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4413      	add	r3, r2
 800876a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	440a      	add	r2, r1
 8008778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800877c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008780:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4413      	add	r3, r2
 800878a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	440a      	add	r2, r1
 8008798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087a0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	3301      	adds	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ae:	d81d      	bhi.n	80087ec <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c6:	d0ec      	beq.n	80087a2 <USB_HC_Halt+0x1a4>
 80087c8:	e011      	b.n	80087ee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	e000      	b.n	80087ee <USB_HC_Halt+0x1f0>
          break;
 80087ec:	bf00      	nop
    }
  }

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	04da      	lsls	r2, r3, #19
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <USB_DoPing+0x74>)
 800881a:	4013      	ands	r3, r2
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	440a      	add	r2, r1
 8008824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800882c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008844:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800884c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885a:	461a      	mov	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	1ff80000 	.word	0x1ff80000

08008874 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff f9a5 	bl	8007bd4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800888a:	2110      	movs	r1, #16
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7ff f9dd 	bl	8007c4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff fa00 	bl	8007c98 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008898:	2300      	movs	r3, #0
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	e01f      	b.n	80088de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	461a      	mov	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3301      	adds	r3, #1
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b0f      	cmp	r3, #15
 80088e2:	d9dc      	bls.n	800889e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
 80088e8:	e034      	b.n	8008954 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008900:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008908:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008910:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	461a      	mov	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3301      	adds	r3, #1
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008930:	d80c      	bhi.n	800894c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008948:	d0ec      	beq.n	8008924 <USB_StopHost+0xb0>
 800894a:	e000      	b.n	800894e <USB_StopHost+0xda>
        break;
 800894c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b0f      	cmp	r3, #15
 8008958:	d9c7      	bls.n	80088ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008960:	461a      	mov	r2, r3
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f04f 32ff 	mov.w	r2, #4294967295
 800896e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff f91e 	bl	8007bb2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008980:	b590      	push	{r4, r7, lr}
 8008982:	b089      	sub	sp, #36	; 0x24
 8008984:	af04      	add	r7, sp, #16
 8008986:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008988:	2301      	movs	r3, #1
 800898a:	2202      	movs	r2, #2
 800898c:	2102      	movs	r1, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fcb4 	bl	80092fc <USBH_FindInterface>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2bff      	cmp	r3, #255	; 0xff
 800899c:	d002      	beq.n	80089a4 <USBH_CDC_InterfaceInit+0x24>
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d901      	bls.n	80089a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089a4:	2302      	movs	r3, #2
 80089a6:	e13d      	b.n	8008c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc89 	bl	80092c4 <USBH_SelectInterface>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	e131      	b.n	8008c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80089c6:	2050      	movs	r0, #80	; 0x50
 80089c8:	f005 fc44 	bl	800e254 <malloc>
 80089cc:	4603      	mov	r3, r0
 80089ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80089e0:	2302      	movs	r3, #2
 80089e2:	e11f      	b.n	8008c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80089e4:	2250      	movs	r2, #80	; 0x50
 80089e6:	2100      	movs	r1, #0
 80089e8:	68b8      	ldr	r0, [r7, #8]
 80089ea:	f005 fc4e 	bl	800e28a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	211a      	movs	r1, #26
 80089f4:	fb01 f303 	mul.w	r3, r1, r3
 80089f8:	4413      	add	r3, r2
 80089fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b25b      	sxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da15      	bge.n	8008a32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	211a      	movs	r1, #26
 8008a0c:	fb01 f303 	mul.w	r3, r1, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	211a      	movs	r1, #26
 8008a22:	fb01 f303 	mul.w	r3, r1, r3
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a2c:	881a      	ldrh	r2, [r3, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f002 f890 	bl	800ab5e <USBH_AllocPipe>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	7819      	ldrb	r1, [r3, #0]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	7858      	ldrb	r0, [r3, #1]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	8952      	ldrh	r2, [r2, #10]
 8008a5e:	9202      	str	r2, [sp, #8]
 8008a60:	2203      	movs	r2, #3
 8008a62:	9201      	str	r2, [sp, #4]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4623      	mov	r3, r4
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 f848 	bl	800ab00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2200      	movs	r2, #0
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f005 fb3b 	bl	800e0f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2200      	movs	r2, #0
 8008a82:	210a      	movs	r1, #10
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fc39 	bl	80092fc <USBH_FindInterface>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	2bff      	cmp	r3, #255	; 0xff
 8008a92:	d002      	beq.n	8008a9a <USBH_CDC_InterfaceInit+0x11a>
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d901      	bls.n	8008a9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e0c2      	b.n	8008c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	211a      	movs	r1, #26
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b25b      	sxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da16      	bge.n	8008ae4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	211a      	movs	r1, #26
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	211a      	movs	r1, #26
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008adc:	881a      	ldrh	r2, [r3, #0]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	835a      	strh	r2, [r3, #26]
 8008ae2:	e015      	b.n	8008b10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	211a      	movs	r1, #26
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	211a      	movs	r1, #26
 8008b00:	fb01 f303 	mul.w	r3, r1, r3
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b0a:	881a      	ldrh	r2, [r3, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	211a      	movs	r1, #26
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da16      	bge.n	8008b56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	211a      	movs	r1, #26
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	211a      	movs	r1, #26
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b4e:	881a      	ldrh	r2, [r3, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	835a      	strh	r2, [r3, #26]
 8008b54:	e015      	b.n	8008b82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	211a      	movs	r1, #26
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	211a      	movs	r1, #26
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	7b9b      	ldrb	r3, [r3, #14]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 ffe8 	bl	800ab5e <USBH_AllocPipe>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	7bdb      	ldrb	r3, [r3, #15]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 ffde 	bl	800ab5e <USBH_AllocPipe>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	7b59      	ldrb	r1, [r3, #13]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	7b98      	ldrb	r0, [r3, #14]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	8b12      	ldrh	r2, [r2, #24]
 8008bc2:	9202      	str	r2, [sp, #8]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	4623      	mov	r3, r4
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 ff96 	bl	800ab00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	7b19      	ldrb	r1, [r3, #12]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	7bd8      	ldrb	r0, [r3, #15]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	8b52      	ldrh	r2, [r2, #26]
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 ff81 	bl	800ab00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	7b5b      	ldrb	r3, [r3, #13]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f005 fa70 	bl	800e0f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	7b1b      	ldrb	r3, [r3, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f005 fa69 	bl	800e0f4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd90      	pop	{r4, r7, pc}

08008c2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 ff76 	bl	800ab3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 ffa1 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	7b1b      	ldrb	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00e      	beq.n	8008c8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	7b1b      	ldrb	r3, [r3, #12]
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 ff63 	bl	800ab3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	7b1b      	ldrb	r3, [r3, #12]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 ff8e 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	7b5b      	ldrb	r3, [r3, #13]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00e      	beq.n	8008cb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	7b5b      	ldrb	r3, [r3, #13]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 ff50 	bl	800ab3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	7b5b      	ldrb	r3, [r3, #13]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 ff7b 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f005 facd 	bl	800e264 <free>
    phost->pActiveClass->pData = 0U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3340      	adds	r3, #64	; 0x40
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8b1 	bl	8008e5e <GetLineCoding>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d12:	7afb      	ldrb	r3, [r7, #11]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d877      	bhi.n	8008e30 <USBH_CDC_Process+0x114>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <USBH_CDC_Process+0x2c>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d63 	.word	0x08008d63
 8008d50:	08008d93 	.word	0x08008d93
 8008d54:	08008e07 	.word	0x08008e07
 8008d58:	08008e15 	.word	0x08008e15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d60:	e06d      	b.n	8008e3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f897 	bl	8008e9c <SetLineCoding>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d72:	7bbb      	ldrb	r3, [r7, #14]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d80:	e058      	b.n	8008e34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d055      	beq.n	8008e34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008d90:	e050      	b.n	8008e34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3340      	adds	r3, #64	; 0x40
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f860 	bl	8008e5e <GetLineCoding>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d126      	bne.n	8008df6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dba:	791b      	ldrb	r3, [r3, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d13b      	bne.n	8008e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d133      	bne.n	8008e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d12b      	bne.n	8008e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d124      	bne.n	8008e38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f984 	bl	80090fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008df4:	e020      	b.n	8008e38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d01d      	beq.n	8008e38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2204      	movs	r2, #4
 8008e00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e04:	e018      	b.n	8008e38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f867 	bl	8008eda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8f8 	bl	8009002 <CDC_ProcessReception>
      break;
 8008e12:	e014      	b.n	8008e3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e14:	2100      	movs	r1, #0
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 f94f 	bl	800a0ba <USBH_ClrFeature>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008e2e:	e005      	b.n	8008e3c <USBH_CDC_Process+0x120>

    default:
      break;
 8008e30:	bf00      	nop
 8008e32:	e004      	b.n	8008e3e <USBH_CDC_Process+0x122>
      break;
 8008e34:	bf00      	nop
 8008e36:	e002      	b.n	8008e3e <USBH_CDC_Process+0x122>
      break;
 8008e38:	bf00      	nop
 8008e3a:	e000      	b.n	8008e3e <USBH_CDC_Process+0x122>
      break;
 8008e3c:	bf00      	nop

  }

  return status;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	22a1      	movs	r2, #161	; 0xa1
 8008e6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2221      	movs	r2, #33	; 0x21
 8008e72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2207      	movs	r2, #7
 8008e84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2207      	movs	r2, #7
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 faf4 	bl	800a47a <USBH_CtlReq>
 8008e92:	4603      	mov	r3, r0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2221      	movs	r2, #33	; 0x21
 8008eaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2207      	movs	r2, #7
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 fad5 	bl	800a47a <USBH_CtlReq>
 8008ed0:	4603      	mov	r3, r0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af02      	add	r7, sp, #8
 8008ee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d002      	beq.n	8008f00 <CDC_ProcessTransmission+0x26>
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d025      	beq.n	8008f4a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008efe:	e07c      	b.n	8008ffa <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	8b12      	ldrh	r2, [r2, #24]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d90c      	bls.n	8008f26 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	69d9      	ldr	r1, [r3, #28]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8b1a      	ldrh	r2, [r3, #24]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	7b58      	ldrb	r0, [r3, #13]
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fdab 	bl	800aa7a <USBH_BulkSendData>
 8008f24:	e00c      	b.n	8008f40 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7b58      	ldrb	r0, [r3, #13]
 8008f34:	2301      	movs	r3, #1
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4603      	mov	r3, r0
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 fd9d 	bl	800aa7a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008f48:	e057      	b.n	8008ffa <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	7b5b      	ldrb	r3, [r3, #13]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f005 f8a5 	bl	800e0a0 <USBH_LL_GetURBState>
 8008f56:	4603      	mov	r3, r0
 8008f58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d136      	bne.n	8008fce <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	8b12      	ldrh	r2, [r2, #24]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d90e      	bls.n	8008f8a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	8b12      	ldrh	r2, [r2, #24]
 8008f74:	1a9a      	subs	r2, r3, r2
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	8b12      	ldrh	r2, [r2, #24]
 8008f82:	441a      	add	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	61da      	str	r2, [r3, #28]
 8008f88:	e002      	b.n	8008f90 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008fa0:	e006      	b.n	8008fb0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f892 	bl	80090d4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f001 fff8 	bl	800afbc <osMessageQueuePut>
      break;
 8008fcc:	e014      	b.n	8008ff8 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d111      	bne.n	8008ff8 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2204      	movs	r2, #4
 8008fe0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f001 ffe2 	bl	800afbc <osMessageQueuePut>
      break;
 8008ff8:	bf00      	nop
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009014:	2300      	movs	r3, #0
 8009016:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800901e:	2b03      	cmp	r3, #3
 8009020:	d002      	beq.n	8009028 <CDC_ProcessReception+0x26>
 8009022:	2b04      	cmp	r3, #4
 8009024:	d00e      	beq.n	8009044 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009026:	e051      	b.n	80090cc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6a19      	ldr	r1, [r3, #32]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	8b5a      	ldrh	r2, [r3, #26]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	7b1b      	ldrb	r3, [r3, #12]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 fd45 	bl	800aac4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2204      	movs	r2, #4
 800903e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009042:	e043      	b.n	80090cc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	7b1b      	ldrb	r3, [r3, #12]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f005 f828 	bl	800e0a0 <USBH_LL_GetURBState>
 8009050:	4603      	mov	r3, r0
 8009052:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009054:	7cfb      	ldrb	r3, [r7, #19]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d137      	bne.n	80090ca <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	7b1b      	ldrb	r3, [r3, #12]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f004 ff8b 	bl	800df7c <USBH_LL_GetLastXferSize>
 8009066:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	429a      	cmp	r2, r3
 8009070:	d016      	beq.n	80090a0 <CDC_ProcessReception+0x9e>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	8b5b      	ldrh	r3, [r3, #26]
 8009076:	461a      	mov	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4293      	cmp	r3, r2
 800907c:	d910      	bls.n	80090a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6a1a      	ldr	r2, [r3, #32]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	441a      	add	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2203      	movs	r2, #3
 800909a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800909e:	e006      	b.n	80090ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f81d 	bl	80090e8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2204      	movs	r2, #4
 80090b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090c2:	2300      	movs	r3, #0
 80090c4:	2200      	movs	r2, #0
 80090c6:	f001 ff79 	bl	800afbc <osMessageQueuePut>
      break;
 80090ca:	bf00      	nop
  }
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009124:	2302      	movs	r3, #2
 8009126:	e044      	b.n	80091b2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	79fa      	ldrb	r2, [r7, #7]
 800912c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f841 	bl	80091c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009174:	2200      	movs	r2, #0
 8009176:	2104      	movs	r1, #4
 8009178:	2010      	movs	r0, #16
 800917a:	f001 fe99 	bl	800aeb0 <osMessageQueueNew>
 800917e:	4602      	mov	r2, r0
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <USBH_Init+0xac>)
 8009188:	4a0d      	ldr	r2, [pc, #52]	; (80091c0 <USBH_Init+0xb0>)
 800918a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800918c:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <USBH_Init+0xac>)
 800918e:	2280      	movs	r2, #128	; 0x80
 8009190:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <USBH_Init+0xac>)
 8009194:	2218      	movs	r2, #24
 8009196:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009198:	4a08      	ldr	r2, [pc, #32]	; (80091bc <USBH_Init+0xac>)
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	4809      	ldr	r0, [pc, #36]	; (80091c4 <USBH_Init+0xb4>)
 800919e:	f001 fdb3 	bl	800ad08 <osThreadNew>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f004 fe34 	bl	800de18 <USBH_LL_Init>

  return USBH_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20004c7c 	.word	0x20004c7c
 80091c0:	0800f0b8 	.word	0x0800f0b8
 80091c4:	08009e31 	.word	0x08009e31

080091c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e009      	b.n	80091ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	33e0      	adds	r3, #224	; 0xe0
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b0e      	cmp	r3, #14
 80091f2:	d9f2      	bls.n	80091da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e009      	b.n	800920e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d3f1      	bcc.n	80091fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2240      	movs	r2, #64	; 0x40
 800923a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d016      	beq.n	80092b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10e      	bne.n	80092ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	33de      	adds	r3, #222	; 0xde
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
 80092aa:	e004      	b.n	80092b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092ac:	2302      	movs	r3, #2
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e001      	b.n	80092b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d204      	bcs.n	80092ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80092e8:	e001      	b.n	80092ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80092ea:	2302      	movs	r3, #2
 80092ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	4603      	mov	r3, r0
 800930c:	70fb      	strb	r3, [r7, #3]
 800930e:	460b      	mov	r3, r1
 8009310:	70bb      	strb	r3, [r7, #2]
 8009312:	4613      	mov	r3, r2
 8009314:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009324:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009326:	e025      	b.n	8009374 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	221a      	movs	r2, #26
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	3308      	adds	r3, #8
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	3302      	adds	r3, #2
 8009338:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	429a      	cmp	r2, r3
 8009342:	d002      	beq.n	800934a <USBH_FindInterface+0x4e>
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	2bff      	cmp	r3, #255	; 0xff
 8009348:	d111      	bne.n	800936e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800934e:	78ba      	ldrb	r2, [r7, #2]
 8009350:	429a      	cmp	r2, r3
 8009352:	d002      	beq.n	800935a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009354:	78bb      	ldrb	r3, [r7, #2]
 8009356:	2bff      	cmp	r3, #255	; 0xff
 8009358:	d109      	bne.n	800936e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800935e:	787a      	ldrb	r2, [r7, #1]
 8009360:	429a      	cmp	r2, r3
 8009362:	d002      	beq.n	800936a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009364:	787b      	ldrb	r3, [r7, #1]
 8009366:	2bff      	cmp	r3, #255	; 0xff
 8009368:	d101      	bne.n	800936e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	e006      	b.n	800937c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	3301      	adds	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d9d6      	bls.n	8009328 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800937a:	23ff      	movs	r3, #255	; 0xff
}
 800937c:	4618      	mov	r0, r3
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f004 fd7d 	bl	800de90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009396:	2101      	movs	r1, #1
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f004 fe94 	bl	800e0c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af04      	add	r7, sp, #16
 80093ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d102      	bne.n	80093ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2203      	movs	r2, #3
 80093c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b0b      	cmp	r3, #11
 80093d2:	f200 823c 	bhi.w	800984e <USBH_Process+0x4a6>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBH_Process+0x34>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800940d 	.word	0x0800940d
 80093e0:	0800945b 	.word	0x0800945b
 80093e4:	080094df 	.word	0x080094df
 80093e8:	080097cd 	.word	0x080097cd
 80093ec:	0800984f 	.word	0x0800984f
 80093f0:	0800959f 	.word	0x0800959f
 80093f4:	08009757 	.word	0x08009757
 80093f8:	080095f1 	.word	0x080095f1
 80093fc:	0800962d 	.word	0x0800962d
 8009400:	08009667 	.word	0x08009667
 8009404:	080096af 	.word	0x080096af
 8009408:	080097b5 	.word	0x080097b5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 821c 	beq.w	8009852 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009420:	20c8      	movs	r0, #200	; 0xc8
 8009422:	f004 fe9a 	bl	800e15a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f004 fd8d 	bl	800df46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009450:	2300      	movs	r3, #0
 8009452:	2200      	movs	r2, #0
 8009454:	f001 fdb2 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009458:	e1fb      	b.n	8009852 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009460:	2b01      	cmp	r3, #1
 8009462:	d107      	bne.n	8009474 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	e025      	b.n	80094c0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800947a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800947e:	d914      	bls.n	80094aa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009486:	3301      	adds	r3, #1
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009496:	2b03      	cmp	r3, #3
 8009498:	d903      	bls.n	80094a2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	220d      	movs	r2, #13
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	e00e      	b.n	80094c0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
 80094a8:	e00a      	b.n	80094c0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094b0:	f103 020a 	add.w	r2, r3, #10
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094ba:	200a      	movs	r0, #10
 80094bc:	f004 fe4d 	bl	800e15a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	f001 fd70 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 80094dc:	e1c0      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094ee:	2104      	movs	r1, #4
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094f4:	2064      	movs	r0, #100	; 0x64
 80094f6:	f004 fe30 	bl	800e15a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f004 fcfe 	bl	800defc <USBH_LL_GetSpeed>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2205      	movs	r2, #5
 800950e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fb23 	bl	800ab5e <USBH_AllocPipe>
 8009518:	4603      	mov	r3, r0
 800951a:	461a      	mov	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009520:	2180      	movs	r1, #128	; 0x80
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fb1b 	bl	800ab5e <USBH_AllocPipe>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7919      	ldrb	r1, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009544:	b292      	uxth	r2, r2
 8009546:	9202      	str	r2, [sp, #8]
 8009548:	2200      	movs	r2, #0
 800954a:	9201      	str	r2, [sp, #4]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4603      	mov	r3, r0
 8009550:	2280      	movs	r2, #128	; 0x80
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fad4 	bl	800ab00 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7959      	ldrb	r1, [r3, #5]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800956c:	b292      	uxth	r2, r2
 800956e:	9202      	str	r2, [sp, #8]
 8009570:	2200      	movs	r2, #0
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	4603      	mov	r3, r0
 8009578:	2200      	movs	r2, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fac0 	bl	800ab00 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009594:	2300      	movs	r3, #0
 8009596:	2200      	movs	r2, #0
 8009598:	f001 fd10 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 800959c:	e160      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f964 	bl	800986c <USBH_HandleEnum>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 8152 	bne.w	8009856 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d103      	bne.n	80095cc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2208      	movs	r2, #8
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	e002      	b.n	80095d2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2207      	movs	r2, #7
 80095d0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2205      	movs	r2, #5
 80095d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095e6:	2300      	movs	r3, #0
 80095e8:	2200      	movs	r2, #0
 80095ea:	f001 fce7 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      }
      break;
 80095ee:	e132      	b.n	8009856 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 812f 	beq.w	800985a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009602:	2101      	movs	r1, #1
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2208      	movs	r2, #8
 800960c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2205      	movs	r2, #5
 8009612:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009622:	2300      	movs	r3, #0
 8009624:	2200      	movs	r2, #0
 8009626:	f001 fcc9 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800962a:	e116      	b.n	800985a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009632:	b29b      	uxth	r3, r3
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fcf8 	bl	800a02c <USBH_SetCfg>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2209      	movs	r2, #9
 8009646:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800965c:	2300      	movs	r3, #0
 800965e:	2200      	movs	r2, #0
 8009660:	f001 fcac 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 8009664:	e0fc      	b.n	8009860 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00a      	beq.n	800968a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009674:	2101      	movs	r1, #1
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fcfb 	bl	800a072 <USBH_SetFeature>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	220a      	movs	r2, #10
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e002      	b.n	8009690 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	220a      	movs	r2, #10
 800968e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096a4:	2300      	movs	r3, #0
 80096a6:	2200      	movs	r2, #0
 80096a8:	f001 fc88 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 80096ac:	e0d8      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d03f      	beq.n	8009738 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e016      	b.n	80096f4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80096c6:	7bfa      	ldrb	r2, [r7, #15]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	32de      	adds	r2, #222	; 0xde
 80096cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d0:	791a      	ldrb	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80096d8:	429a      	cmp	r2, r3
 80096da:	d108      	bne.n	80096ee <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80096dc:	7bfa      	ldrb	r2, [r7, #15]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	32de      	adds	r2, #222	; 0xde
 80096e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80096ec:	e005      	b.n	80096fa <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	3301      	adds	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0e5      	beq.n	80096c6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d016      	beq.n	8009732 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d109      	bne.n	800972a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2206      	movs	r2, #6
 800971a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009722:	2103      	movs	r1, #3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
 8009728:	e006      	b.n	8009738 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	220d      	movs	r2, #13
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	e002      	b.n	8009738 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220d      	movs	r2, #13
 8009736:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2205      	movs	r2, #5
 800973c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800974c:	2300      	movs	r3, #0
 800974e:	2200      	movs	r2, #0
 8009750:	f001 fc34 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 8009754:	e084      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d017      	beq.n	8009790 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	4798      	blx	r3
 800976c:	4603      	mov	r3, r0
 800976e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d103      	bne.n	8009780 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	220b      	movs	r2, #11
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	e00a      	b.n	8009796 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b02      	cmp	r3, #2
 8009786:	d106      	bne.n	8009796 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	220d      	movs	r2, #13
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e002      	b.n	8009796 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	220d      	movs	r2, #13
 8009794:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2205      	movs	r2, #5
 800979a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	f001 fc05 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 80097b2:	e055      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d04f      	beq.n	800985e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	4798      	blx	r3
      }
      break;
 80097ca:	e048      	b.n	800985e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fcf7 	bl	80091c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009808:	2105      	movs	r1, #5
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b01      	cmp	r3, #1
 8009818:	d107      	bne.n	800982a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff fdb0 	bl	8009388 <USBH_Start>
 8009828:	e002      	b.n	8009830 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f004 fb30 	bl	800de90 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009844:	2300      	movs	r3, #0
 8009846:	2200      	movs	r2, #0
 8009848:	f001 fbb8 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      break;
 800984c:	e008      	b.n	8009860 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800984e:	bf00      	nop
 8009850:	e006      	b.n	8009860 <USBH_Process+0x4b8>
      break;
 8009852:	bf00      	nop
 8009854:	e004      	b.n	8009860 <USBH_Process+0x4b8>
      break;
 8009856:	bf00      	nop
 8009858:	e002      	b.n	8009860 <USBH_Process+0x4b8>
    break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <USBH_Process+0x4b8>
      break;
 800985e:	bf00      	nop
  }
  return USBH_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop

0800986c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af04      	add	r7, sp, #16
 8009872:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009878:	2301      	movs	r3, #1
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	785b      	ldrb	r3, [r3, #1]
 8009880:	2b07      	cmp	r3, #7
 8009882:	f200 8208 	bhi.w	8009c96 <USBH_HandleEnum+0x42a>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <USBH_HandleEnum+0x20>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098ad 	.word	0x080098ad
 8009890:	0800996b 	.word	0x0800996b
 8009894:	080099d5 	.word	0x080099d5
 8009898:	08009a63 	.word	0x08009a63
 800989c:	08009acd 	.word	0x08009acd
 80098a0:	08009b3d 	.word	0x08009b3d
 80098a4:	08009bd9 	.word	0x08009bd9
 80098a8:	08009c57 	.word	0x08009c57
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098ac:	2108      	movs	r1, #8
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 faec 	bl	8009e8c <USBH_Get_DevDesc>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d130      	bne.n	8009920 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7919      	ldrb	r1, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098e2:	b292      	uxth	r2, r2
 80098e4:	9202      	str	r2, [sp, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	9201      	str	r2, [sp, #4]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4603      	mov	r3, r0
 80098ee:	2280      	movs	r2, #128	; 0x80
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 f905 	bl	800ab00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7959      	ldrb	r1, [r3, #5]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800990a:	b292      	uxth	r2, r2
 800990c:	9202      	str	r2, [sp, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	9201      	str	r2, [sp, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4603      	mov	r3, r0
 8009916:	2200      	movs	r2, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f8f1 	bl	800ab00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800991e:	e1bc      	b.n	8009c9a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b03      	cmp	r3, #3
 8009924:	f040 81b9 	bne.w	8009c9a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800992e:	3301      	adds	r3, #1
 8009930:	b2da      	uxtb	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800993e:	2b03      	cmp	r3, #3
 8009940:	d903      	bls.n	800994a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	220d      	movs	r2, #13
 8009946:	701a      	strb	r2, [r3, #0]
      break;
 8009948:	e1a7      	b.n	8009c9a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	795b      	ldrb	r3, [r3, #5]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 f925 	bl	800aba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 f91f 	bl	800aba0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	701a      	strb	r2, [r3, #0]
      break;
 8009968:	e197      	b.n	8009c9a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800996a:	2112      	movs	r1, #18
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa8d 	bl	8009e8c <USBH_Get_DevDesc>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009982:	e18c      	b.n	8009c9e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b03      	cmp	r3, #3
 8009988:	f040 8189 	bne.w	8009c9e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009992:	3301      	adds	r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d903      	bls.n	80099ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	220d      	movs	r2, #13
 80099aa:	701a      	strb	r2, [r3, #0]
      break;
 80099ac:	e177      	b.n	8009c9e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	795b      	ldrb	r3, [r3, #5]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 f8f3 	bl	800aba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	791b      	ldrb	r3, [r3, #4]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 f8ed 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]
      break;
 80099d2:	e164      	b.n	8009c9e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80099d4:	2101      	movs	r1, #1
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fb04 	bl	8009fe4 <USBH_SetAddress>
 80099dc:	4603      	mov	r3, r0
 80099de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d132      	bne.n	8009a4c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80099e6:	2002      	movs	r0, #2
 80099e8:	f004 fbb7 	bl	800e15a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2203      	movs	r2, #3
 80099f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7919      	ldrb	r1, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a0e:	b292      	uxth	r2, r2
 8009a10:	9202      	str	r2, [sp, #8]
 8009a12:	2200      	movs	r2, #0
 8009a14:	9201      	str	r2, [sp, #4]
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2280      	movs	r2, #128	; 0x80
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 f86f 	bl	800ab00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	7959      	ldrb	r1, [r3, #5]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a36:	b292      	uxth	r2, r2
 8009a38:	9202      	str	r2, [sp, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	9201      	str	r2, [sp, #4]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	4603      	mov	r3, r0
 8009a42:	2200      	movs	r2, #0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 f85b 	bl	800ab00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a4a:	e12a      	b.n	8009ca2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	f040 8127 	bne.w	8009ca2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	220d      	movs	r2, #13
 8009a58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	705a      	strb	r2, [r3, #1]
      break;
 8009a60:	e11f      	b.n	8009ca2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a62:	2109      	movs	r1, #9
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fa39 	bl	8009edc <USBH_Get_CfgDesc>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2204      	movs	r2, #4
 8009a78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a7a:	e114      	b.n	8009ca6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	f040 8111 	bne.w	8009ca6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d903      	bls.n	8009aa6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	220d      	movs	r2, #13
 8009aa2:	701a      	strb	r2, [r3, #0]
      break;
 8009aa4:	e0ff      	b.n	8009ca6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	795b      	ldrb	r3, [r3, #5]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 f877 	bl	800aba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	791b      	ldrb	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 f871 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
      break;
 8009aca:	e0ec      	b.n	8009ca6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fa01 	bl	8009edc <USBH_Get_CfgDesc>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d103      	bne.n	8009aec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009aea:	e0de      	b.n	8009caa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	f040 80db 	bne.w	8009caa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009afa:	3301      	adds	r3, #1
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d903      	bls.n	8009b16 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	220d      	movs	r2, #13
 8009b12:	701a      	strb	r2, [r3, #0]
      break;
 8009b14:	e0c9      	b.n	8009caa <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	795b      	ldrb	r3, [r3, #5]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 f83f 	bl	800aba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	791b      	ldrb	r3, [r3, #4]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 f839 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
      break;
 8009b3a:	e0b6      	b.n	8009caa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d036      	beq.n	8009bb4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b52:	23ff      	movs	r3, #255	; 0xff
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f9e5 	bl	8009f24 <USBH_Get_StringDesc>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d111      	bne.n	8009b88 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2206      	movs	r2, #6
 8009b68:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2205      	movs	r2, #5
 8009b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	f001 fa1b 	bl	800afbc <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b86:	e092      	b.n	8009cae <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	f040 808f 	bne.w	8009cae <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2206      	movs	r2, #6
 8009b94:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2205      	movs	r2, #5
 8009b9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009baa:	2300      	movs	r3, #0
 8009bac:	2200      	movs	r2, #0
 8009bae:	f001 fa05 	bl	800afbc <osMessageQueuePut>
      break;
 8009bb2:	e07c      	b.n	8009cae <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2205      	movs	r2, #5
 8009bbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f001 f9f3 	bl	800afbc <osMessageQueuePut>
      break;
 8009bd6:	e06a      	b.n	8009cae <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d027      	beq.n	8009c32 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bee:	23ff      	movs	r3, #255	; 0xff
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f997 	bl	8009f24 <USBH_Get_StringDesc>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2207      	movs	r2, #7
 8009c04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c06:	e054      	b.n	8009cb2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d151      	bne.n	8009cb2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2207      	movs	r2, #7
 8009c12:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2205      	movs	r2, #5
 8009c18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f001 f9c6 	bl	800afbc <osMessageQueuePut>
      break;
 8009c30:	e03f      	b.n	8009cb2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2207      	movs	r2, #7
 8009c36:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f001 f9b4 	bl	800afbc <osMessageQueuePut>
      break;
 8009c54:	e02d      	b.n	8009cb2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d017      	beq.n	8009c90 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c6c:	23ff      	movs	r3, #255	; 0xff
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f958 	bl	8009f24 <USBH_Get_StringDesc>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c82:	e018      	b.n	8009cb6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d115      	bne.n	8009cb6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8e:	e012      	b.n	8009cb6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
      break;
 8009c94:	e00f      	b.n	8009cb6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8009c96:	bf00      	nop
 8009c98:	e00e      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e00c      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e00a      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009ca2:	bf00      	nop
 8009ca4:	e008      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009ca6:	bf00      	nop
 8009ca8:	e006      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009caa:	bf00      	nop
 8009cac:	e004      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e002      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e000      	b.n	8009cb8 <USBH_HandleEnum+0x44c>
      break;
 8009cb6:	bf00      	nop
  }
  return Status;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f804 	bl	8009d06 <USBH_HandleSof>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b0b      	cmp	r3, #11
 8009d16:	d10a      	bne.n	8009d2e <USBH_HandleSof+0x28>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
  }
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f001 f92d 	bl	800afbc <osMessageQueuePut>
#endif
#endif

  return;
 8009d62:	bf00      	nop
}
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009d7a:	bf00      	nop
}
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f001 f8fd 	bl	800afbc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f004 f86a 	bl	800dec6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	791b      	ldrb	r3, [r3, #4]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fed1 	bl	800aba0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	795b      	ldrb	r3, [r3, #5]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fecb 	bl	800aba0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2200      	movs	r2, #0
 8009e22:	f001 f8cb 	bl	800afbc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e44:	f04f 33ff 	mov.w	r3, #4294967295
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f001 f92b 	bl	800b0a4 <osMessageQueueGet>
 8009e4e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1f0      	bne.n	8009e38 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff faa6 	bl	80093a8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e5c:	e7ec      	b.n	8009e38 <USBH_Process_OS+0x8>

08009e5e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f001 f89d 	bl	800afbc <osMessageQueuePut>
#endif

  return USBH_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f864 	bl	8009f7a <USBH_GetDescriptor>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	b292      	uxth	r2, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	f000 f918 	bl	800a102 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	331c      	adds	r3, #28
 8009eec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009eee:	887b      	ldrh	r3, [r7, #2]
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f83d 	bl	8009f7a <USBH_GetDescriptor>
 8009f00:	4603      	mov	r3, r0
 8009f02:	72fb      	strb	r3, [r7, #11]
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f10:	887a      	ldrh	r2, [r7, #2]
 8009f12:	68f9      	ldr	r1, [r7, #12]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f964 	bl	800a1e2 <USBH_ParseCfgDesc>
  }

  return status;
 8009f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	460b      	mov	r3, r1
 8009f32:	72fb      	strb	r3, [r7, #11]
 8009f34:	4613      	mov	r3, r2
 8009f36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f40:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f48:	893b      	ldrh	r3, [r7, #8]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	2100      	movs	r1, #0
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f812 	bl	8009f7a <USBH_GetDescriptor>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d107      	bne.n	8009f70 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f66:	893a      	ldrh	r2, [r7, #8]
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fa37 	bl	800a3de <USBH_ParseStringDesc>
  }

  return status;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	607b      	str	r3, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	72fb      	strb	r3, [r7, #11]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	789b      	ldrb	r3, [r3, #2]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d11c      	bne.n	8009fce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2206      	movs	r2, #6
 8009fa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	893a      	ldrh	r2, [r7, #8]
 8009faa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009fac:	893b      	ldrh	r3, [r7, #8]
 8009fae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fb6:	d104      	bne.n	8009fc2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f240 4209 	movw	r2, #1033	; 0x409
 8009fbe:	829a      	strh	r2, [r3, #20]
 8009fc0:	e002      	b.n	8009fc8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8b3a      	ldrh	r2, [r7, #24]
 8009fcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009fce:	8b3b      	ldrh	r3, [r7, #24]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 fa50 	bl	800a47a <USBH_CtlReq>
 8009fda:	4603      	mov	r3, r0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	789b      	ldrb	r3, [r3, #2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d10f      	bne.n	800a018 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2205      	movs	r2, #5
 800a002:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fa2c 	bl	800a47a <USBH_CtlReq>
 800a022:	4603      	mov	r3, r0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	789b      	ldrb	r3, [r3, #2]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d10e      	bne.n	800a05e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2209      	movs	r2, #9
 800a04a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	887a      	ldrh	r2, [r7, #2]
 800a050:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa09 	bl	800a47a <USBH_CtlReq>
 800a068:	4603      	mov	r3, r0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	789b      	ldrb	r3, [r3, #2]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d10f      	bne.n	800a0a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2203      	movs	r2, #3
 800a090:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f9e5 	bl	800a47a <USBH_CtlReq>
 800a0b0:	4603      	mov	r3, r0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	789b      	ldrb	r3, [r3, #2]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d10f      	bne.n	800a0ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f9c1 	bl	800a47a <USBH_CtlReq>
 800a0f8:	4603      	mov	r3, r0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	4613      	mov	r3, r2
 800a10e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	785a      	ldrb	r2, [r3, #1]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	3302      	adds	r3, #2
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b29a      	uxth	r2, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	3303      	adds	r3, #3
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b29b      	uxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	791a      	ldrb	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	795a      	ldrb	r2, [r3, #5]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	799a      	ldrb	r2, [r3, #6]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	79da      	ldrb	r2, [r3, #7]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	2b08      	cmp	r3, #8
 800a160:	d939      	bls.n	800a1d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3308      	adds	r3, #8
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b29a      	uxth	r2, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3309      	adds	r3, #9
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	b29b      	uxth	r3, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	330a      	adds	r3, #10
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b29a      	uxth	r2, r3
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	330b      	adds	r3, #11
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b29b      	uxth	r3, r3
 800a192:	4313      	orrs	r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	330c      	adds	r3, #12
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	330d      	adds	r3, #13
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	7b9a      	ldrb	r2, [r3, #14]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	7bda      	ldrb	r2, [r3, #15]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	7c1a      	ldrb	r2, [r3, #16]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	7c5a      	ldrb	r2, [r3, #17]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	745a      	strb	r2, [r3, #17]
  }
}
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b08a      	sub	sp, #40	; 0x28
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	785a      	ldrb	r2, [r3, #1]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	3302      	adds	r3, #2
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3303      	adds	r3, #3
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b29b      	uxth	r3, r3
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	b29b      	uxth	r3, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	791a      	ldrb	r2, [r3, #4]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	795a      	ldrb	r2, [r3, #5]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	799a      	ldrb	r2, [r3, #6]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	79da      	ldrb	r2, [r3, #7]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	7a1a      	ldrb	r2, [r3, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a258:	88fb      	ldrh	r3, [r7, #6]
 800a25a:	2b09      	cmp	r3, #9
 800a25c:	d95f      	bls.n	800a31e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a25e:	2309      	movs	r3, #9
 800a260:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a262:	2300      	movs	r3, #0
 800a264:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a266:	e051      	b.n	800a30c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a268:	f107 0316 	add.w	r3, r7, #22
 800a26c:	4619      	mov	r1, r3
 800a26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a270:	f000 f8e8 	bl	800a444 <USBH_GetNextDesc>
 800a274:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d146      	bne.n	800a30c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a27e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a282:	221a      	movs	r2, #26
 800a284:	fb02 f303 	mul.w	r3, r2, r3
 800a288:	3308      	adds	r3, #8
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4413      	add	r3, r2
 800a28e:	3302      	adds	r3, #2
 800a290:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a294:	69f8      	ldr	r0, [r7, #28]
 800a296:	f000 f846 	bl	800a326 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2a4:	e022      	b.n	800a2ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2a6:	f107 0316 	add.w	r3, r7, #22
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ae:	f000 f8c9 	bl	800a444 <USBH_GetNextDesc>
 800a2b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	2b05      	cmp	r3, #5
 800a2ba:	d117      	bne.n	800a2ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2c4:	3201      	adds	r2, #1
 800a2c6:	00d2      	lsls	r2, r2, #3
 800a2c8:	211a      	movs	r1, #26
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a2da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2dc:	69b8      	ldr	r0, [r7, #24]
 800a2de:	f000 f851 	bl	800a384 <USBH_ParseEPDesc>
            ep_ix++;
 800a2e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	791b      	ldrb	r3, [r3, #4]
 800a2f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d204      	bcs.n	800a302 <USBH_ParseCfgDesc+0x120>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	885a      	ldrh	r2, [r3, #2]
 800a2fc:	8afb      	ldrh	r3, [r7, #22]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d8d1      	bhi.n	800a2a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a306:	3301      	adds	r3, #1
 800a308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a30c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a310:	2b01      	cmp	r3, #1
 800a312:	d804      	bhi.n	800a31e <USBH_ParseCfgDesc+0x13c>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	885a      	ldrh	r2, [r3, #2]
 800a318:	8afb      	ldrh	r3, [r7, #22]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d8a4      	bhi.n	800a268 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a31e:	bf00      	nop
 800a320:	3728      	adds	r7, #40	; 0x28
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785a      	ldrb	r2, [r3, #1]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	789a      	ldrb	r2, [r3, #2]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	78da      	ldrb	r2, [r3, #3]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	791a      	ldrb	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	795a      	ldrb	r2, [r3, #5]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	799a      	ldrb	r2, [r3, #6]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	79da      	ldrb	r2, [r3, #7]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	7a1a      	ldrb	r2, [r3, #8]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	721a      	strb	r2, [r3, #8]
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781a      	ldrb	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	785a      	ldrb	r2, [r3, #1]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	789a      	ldrb	r2, [r3, #2]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	78da      	ldrb	r2, [r3, #3]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	3305      	adds	r3, #5
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	021b      	lsls	r3, r3, #8
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	799a      	ldrb	r2, [r3, #6]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	719a      	strb	r2, [r3, #6]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b087      	sub	sp, #28
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d120      	bne.n	800a438 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	1e9a      	subs	r2, r3, #2
 800a3fc:	88fb      	ldrh	r3, [r7, #6]
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bf28      	it	cs
 800a402:	4613      	movcs	r3, r2
 800a404:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3302      	adds	r3, #2
 800a40a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a40c:	2300      	movs	r3, #0
 800a40e:	82fb      	strh	r3, [r7, #22]
 800a410:	e00b      	b.n	800a42a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a412:	8afb      	ldrh	r3, [r7, #22]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4413      	add	r3, r2
 800a418:	781a      	ldrb	r2, [r3, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	3301      	adds	r3, #1
 800a422:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a424:	8afb      	ldrh	r3, [r7, #22]
 800a426:	3302      	adds	r3, #2
 800a428:	82fb      	strh	r3, [r7, #22]
 800a42a:	8afa      	ldrh	r2, [r7, #22]
 800a42c:	8abb      	ldrh	r3, [r7, #20]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d3ef      	bcc.n	800a412 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
  }
}
 800a438:	bf00      	nop
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	881a      	ldrh	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	4413      	add	r3, r2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4413      	add	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a46c:	68fb      	ldr	r3, [r7, #12]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	4613      	mov	r3, r2
 800a486:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a488:	2301      	movs	r3, #1
 800a48a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	789b      	ldrb	r3, [r3, #2]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d002      	beq.n	800a49a <USBH_CtlReq+0x20>
 800a494:	2b02      	cmp	r3, #2
 800a496:	d01d      	beq.n	800a4d4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a498:	e043      	b.n	800a522 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	88fa      	ldrh	r2, [r7, #6]
 800a4a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f000 fd75 	bl	800afbc <osMessageQueuePut>
      break;
 800a4d2:	e026      	b.n	800a522 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f829 	bl	800a52c <USBH_HandleControl>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <USBH_CtlReq+0x70>
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d106      	bne.n	800a4f8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	761a      	strb	r2, [r3, #24]
 800a4f6:	e005      	b.n	800a504 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d102      	bne.n	800a504 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2203      	movs	r2, #3
 800a508:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	f000 fd4e 	bl	800afbc <osMessageQueuePut>
      break;
 800a520:	bf00      	nop
  }
  return status;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af02      	add	r7, sp, #8
 800a532:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a534:	2301      	movs	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a538:	2300      	movs	r3, #0
 800a53a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7e1b      	ldrb	r3, [r3, #24]
 800a540:	3b01      	subs	r3, #1
 800a542:	2b0a      	cmp	r3, #10
 800a544:	f200 822b 	bhi.w	800a99e <USBH_HandleControl+0x472>
 800a548:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <USBH_HandleControl+0x24>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a57d 	.word	0x0800a57d
 800a554:	0800a597 	.word	0x0800a597
 800a558:	0800a639 	.word	0x0800a639
 800a55c:	0800a65f 	.word	0x0800a65f
 800a560:	0800a6eb 	.word	0x0800a6eb
 800a564:	0800a717 	.word	0x0800a717
 800a568:	0800a7d9 	.word	0x0800a7d9
 800a56c:	0800a7fb 	.word	0x0800a7fb
 800a570:	0800a88d 	.word	0x0800a88d
 800a574:	0800a8b5 	.word	0x0800a8b5
 800a578:	0800a947 	.word	0x0800a947
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f103 0110 	add.w	r1, r3, #16
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	795b      	ldrb	r3, [r3, #5]
 800a586:	461a      	mov	r2, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fa19 	bl	800a9c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	761a      	strb	r2, [r3, #24]
      break;
 800a594:	e20e      	b.n	800a9b4 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	795b      	ldrb	r3, [r3, #5]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f003 fd7f 	bl	800e0a0 <USBH_LL_GetURBState>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5a6:	7bbb      	ldrb	r3, [r7, #14]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d12c      	bne.n	800a606 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	7c1b      	ldrb	r3, [r3, #16]
 800a5b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8adb      	ldrh	r3, [r3, #22]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5be:	7b7b      	ldrb	r3, [r7, #13]
 800a5c0:	2b80      	cmp	r3, #128	; 0x80
 800a5c2:	d103      	bne.n	800a5cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2203      	movs	r2, #3
 800a5c8:	761a      	strb	r2, [r3, #24]
 800a5ca:	e00d      	b.n	800a5e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	761a      	strb	r2, [r3, #24]
 800a5d2:	e009      	b.n	800a5e8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a5d4:	7b7b      	ldrb	r3, [r7, #13]
 800a5d6:	2b80      	cmp	r3, #128	; 0x80
 800a5d8:	d103      	bne.n	800a5e2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2209      	movs	r2, #9
 800a5de:	761a      	strb	r2, [r3, #24]
 800a5e0:	e002      	b.n	800a5e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2207      	movs	r2, #7
 800a5e6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2200      	movs	r2, #0
 800a600:	f000 fcdc 	bl	800afbc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a604:	e1cd      	b.n	800a9a2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d003      	beq.n	800a614 <USBH_HandleControl+0xe8>
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	f040 81c7 	bne.w	800a9a2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	220b      	movs	r2, #11
 800a618:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2203      	movs	r2, #3
 800a61e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a62e:	2300      	movs	r3, #0
 800a630:	2200      	movs	r2, #0
 800a632:	f000 fcc3 	bl	800afbc <osMessageQueuePut>
      break;
 800a636:	e1b4      	b.n	800a9a2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6899      	ldr	r1, [r3, #8]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	899a      	ldrh	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	791b      	ldrb	r3, [r3, #4]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f9f4 	bl	800aa3e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2204      	movs	r2, #4
 800a65a:	761a      	strb	r2, [r3, #24]
      break;
 800a65c:	e1aa      	b.n	800a9b4 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	791b      	ldrb	r3, [r3, #4]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f003 fd1b 	bl	800e0a0 <USBH_LL_GetURBState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d110      	bne.n	800a696 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2209      	movs	r2, #9
 800a678:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2203      	movs	r2, #3
 800a67e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	f000 fc93 	bl	800afbc <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b05      	cmp	r3, #5
 800a69a:	d110      	bne.n	800a6be <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a69c:	2303      	movs	r3, #3
 800a69e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f000 fc80 	bl	800afbc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6bc:	e173      	b.n	800a9a6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a6be:	7bbb      	ldrb	r3, [r7, #14]
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	f040 8170 	bne.w	800a9a6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	220b      	movs	r2, #11
 800a6ca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f000 fc6a 	bl	800afbc <osMessageQueuePut>
      break;
 800a6e8:	e15d      	b.n	800a9a6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6899      	ldr	r1, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	899a      	ldrh	r2, [r3, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7958      	ldrb	r0, [r3, #5]
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f979 	bl	800a9f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2206      	movs	r2, #6
 800a712:	761a      	strb	r2, [r3, #24]
      break;
 800a714:	e14e      	b.n	800a9b4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	795b      	ldrb	r3, [r3, #5]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f003 fcbf 	bl	800e0a0 <USBH_LL_GetURBState>
 800a722:	4603      	mov	r3, r0
 800a724:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d111      	bne.n	800a750 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2207      	movs	r2, #7
 800a730:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2203      	movs	r2, #3
 800a736:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a746:	2300      	movs	r3, #0
 800a748:	2200      	movs	r2, #0
 800a74a:	f000 fc37 	bl	800afbc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a74e:	e12c      	b.n	800a9aa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b05      	cmp	r3, #5
 800a754:	d113      	bne.n	800a77e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	220c      	movs	r2, #12
 800a75a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a75c:	2303      	movs	r3, #3
 800a75e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2203      	movs	r2, #3
 800a764:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a774:	2300      	movs	r3, #0
 800a776:	2200      	movs	r2, #0
 800a778:	f000 fc20 	bl	800afbc <osMessageQueuePut>
      break;
 800a77c:	e115      	b.n	800a9aa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d111      	bne.n	800a7a8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2205      	movs	r2, #5
 800a788:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2203      	movs	r2, #3
 800a78e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f000 fc0b 	bl	800afbc <osMessageQueuePut>
      break;
 800a7a6:	e100      	b.n	800a9aa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	f040 80fd 	bne.w	800a9aa <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	220b      	movs	r2, #11
 800a7b4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2203      	movs	r2, #3
 800a7be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f000 fbf3 	bl	800afbc <osMessageQueuePut>
      break;
 800a7d6:	e0e8      	b.n	800a9aa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	791b      	ldrb	r3, [r3, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f92c 	bl	800aa3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	761a      	strb	r2, [r3, #24]

      break;
 800a7f8:	e0dc      	b.n	800a9b4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f003 fc4d 	bl	800e0a0 <USBH_LL_GetURBState>
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d113      	bne.n	800a838 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	220d      	movs	r2, #13
 800a814:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2203      	movs	r2, #3
 800a81e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a82e:	2300      	movs	r3, #0
 800a830:	2200      	movs	r2, #0
 800a832:	f000 fbc3 	bl	800afbc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a836:	e0ba      	b.n	800a9ae <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d111      	bne.n	800a862 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	220b      	movs	r2, #11
 800a842:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2203      	movs	r2, #3
 800a848:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a858:	2300      	movs	r3, #0
 800a85a:	2200      	movs	r2, #0
 800a85c:	f000 fbae 	bl	800afbc <osMessageQueuePut>
      break;
 800a860:	e0a5      	b.n	800a9ae <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	2b05      	cmp	r3, #5
 800a866:	f040 80a2 	bne.w	800a9ae <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800a86a:	2303      	movs	r3, #3
 800a86c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2203      	movs	r2, #3
 800a872:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a882:	2300      	movs	r3, #0
 800a884:	2200      	movs	r2, #0
 800a886:	f000 fb99 	bl	800afbc <osMessageQueuePut>
      break;
 800a88a:	e090      	b.n	800a9ae <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	795a      	ldrb	r2, [r3, #5]
 800a890:	2301      	movs	r3, #1
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f8aa 	bl	800a9f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	220a      	movs	r2, #10
 800a8b0:	761a      	strb	r2, [r3, #24]
      break;
 800a8b2:	e07f      	b.n	800a9b4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	795b      	ldrb	r3, [r3, #5]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f003 fbf0 	bl	800e0a0 <USBH_LL_GetURBState>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d113      	bne.n	800a8f2 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	220d      	movs	r2, #13
 800a8d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f000 fb66 	bl	800afbc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a8f0:	e05f      	b.n	800a9b2 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d111      	bne.n	800a91c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2209      	movs	r2, #9
 800a8fc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2203      	movs	r2, #3
 800a902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a912:	2300      	movs	r3, #0
 800a914:	2200      	movs	r2, #0
 800a916:	f000 fb51 	bl	800afbc <osMessageQueuePut>
      break;
 800a91a:	e04a      	b.n	800a9b2 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d147      	bne.n	800a9b2 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	220b      	movs	r2, #11
 800a926:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2203      	movs	r2, #3
 800a92c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a93c:	2300      	movs	r3, #0
 800a93e:	2200      	movs	r2, #0
 800a940:	f000 fb3c 	bl	800afbc <osMessageQueuePut>
      break;
 800a944:	e035      	b.n	800a9b2 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	7e5b      	ldrb	r3, [r3, #25]
 800a94a:	3301      	adds	r3, #1
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	765a      	strb	r2, [r3, #25]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7e5b      	ldrb	r3, [r3, #25]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d806      	bhi.n	800a968 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a966:	e025      	b.n	800a9b4 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a96e:	2106      	movs	r1, #6
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	795b      	ldrb	r3, [r3, #5]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f90d 	bl	800aba0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f907 	bl	800aba0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a998:	2302      	movs	r3, #2
 800a99a:	73fb      	strb	r3, [r7, #15]
      break;
 800a99c:	e00a      	b.n	800a9b4 <USBH_HandleControl+0x488>

    default:
      break;
 800a99e:	bf00      	nop
 800a9a0:	e008      	b.n	800a9b4 <USBH_HandleControl+0x488>
      break;
 800a9a2:	bf00      	nop
 800a9a4:	e006      	b.n	800a9b4 <USBH_HandleControl+0x488>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <USBH_HandleControl+0x488>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <USBH_HandleControl+0x488>
      break;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <USBH_HandleControl+0x488>
      break;
 800a9b2:	bf00      	nop
  }

  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop

0800a9c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af04      	add	r7, sp, #16
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9ce:	79f9      	ldrb	r1, [r7, #7]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f003 fb2a 	bl	800e03e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af04      	add	r7, sp, #16
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	461a      	mov	r2, r3
 800aa02:	460b      	mov	r3, r1
 800aa04:	80fb      	strh	r3, [r7, #6]
 800aa06:	4613      	mov	r3, r2
 800aa08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa18:	7979      	ldrb	r1, [r7, #5]
 800aa1a:	7e3b      	ldrb	r3, [r7, #24]
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	2301      	movs	r3, #1
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f003 fb05 	bl	800e03e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af04      	add	r7, sp, #16
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	80fb      	strh	r3, [r7, #6]
 800aa50:	4613      	mov	r3, r2
 800aa52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa54:	7979      	ldrb	r1, [r7, #5]
 800aa56:	2300      	movs	r3, #0
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	88fb      	ldrh	r3, [r7, #6]
 800aa5c:	9302      	str	r3, [sp, #8]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	2301      	movs	r3, #1
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	2201      	movs	r2, #1
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f003 fae7 	bl	800e03e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aa70:	2300      	movs	r3, #0

}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b088      	sub	sp, #32
 800aa7e:	af04      	add	r7, sp, #16
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	4611      	mov	r1, r2
 800aa86:	461a      	mov	r2, r3
 800aa88:	460b      	mov	r3, r1
 800aa8a:	80fb      	strh	r3, [r7, #6]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa9e:	7979      	ldrb	r1, [r7, #5]
 800aaa0:	7e3b      	ldrb	r3, [r7, #24]
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	88fb      	ldrh	r3, [r7, #6]
 800aaa6:	9302      	str	r3, [sp, #8]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	2301      	movs	r3, #1
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	2302      	movs	r3, #2
 800aab2:	2200      	movs	r2, #0
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f003 fac2 	bl	800e03e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af04      	add	r7, sp, #16
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	4611      	mov	r1, r2
 800aad0:	461a      	mov	r2, r3
 800aad2:	460b      	mov	r3, r1
 800aad4:	80fb      	strh	r3, [r7, #6]
 800aad6:	4613      	mov	r3, r2
 800aad8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aada:	7979      	ldrb	r1, [r7, #5]
 800aadc:	2300      	movs	r3, #0
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	2301      	movs	r3, #1
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	2302      	movs	r3, #2
 800aaee:	2201      	movs	r2, #1
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f003 faa4 	bl	800e03e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af04      	add	r7, sp, #16
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	70fb      	strb	r3, [r7, #3]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70bb      	strb	r3, [r7, #2]
 800ab16:	4613      	mov	r3, r2
 800ab18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab1a:	7878      	ldrb	r0, [r7, #1]
 800ab1c:	78ba      	ldrb	r2, [r7, #2]
 800ab1e:	78f9      	ldrb	r1, [r7, #3]
 800ab20:	8b3b      	ldrh	r3, [r7, #24]
 800ab22:	9302      	str	r3, [sp, #8]
 800ab24:	7d3b      	ldrb	r3, [r7, #20]
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	7c3b      	ldrb	r3, [r7, #16]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f003 fa37 	bl	800dfa2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f003 fa56 	bl	800e000 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f836 	bl	800abdc <USBH_GetFreePipe>
 800ab70:	4603      	mov	r3, r0
 800ab72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00a      	beq.n	800ab94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ab7e:	78fa      	ldrb	r2, [r7, #3]
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	33e0      	adds	r3, #224	; 0xe0
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab94:	89fb      	ldrh	r3, [r7, #14]
 800ab96:	b2db      	uxtb	r3, r3
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b0a      	cmp	r3, #10
 800abb0:	d80d      	bhi.n	800abce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abb2:	78fb      	ldrb	r3, [r7, #3]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	33e0      	adds	r3, #224	; 0xe0
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	33e0      	adds	r3, #224	; 0xe0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e00f      	b.n	800ac0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	33e0      	adds	r3, #224	; 0xe0
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	e007      	b.n	800ac18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	2b0a      	cmp	r3, #10
 800ac12:	d9ec      	bls.n	800abee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac24:	b480      	push	{r7}
 800ac26:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ac28:	bf00      	nop
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
	...

0800ac34 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac3a:	f3ef 8305 	mrs	r3, IPSR
 800ac3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10f      	bne.n	800ac66 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac46:	f3ef 8310 	mrs	r3, PRIMASK
 800ac4a:	607b      	str	r3, [r7, #4]
  return(result);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d105      	bne.n	800ac5e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac52:	f3ef 8311 	mrs	r3, BASEPRI
 800ac56:	603b      	str	r3, [r7, #0]
  return(result);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <osKernelInitialize+0x3a>
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	; (800ac98 <osKernelInitialize+0x64>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d103      	bne.n	800ac6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ac66:	f06f 0305 	mvn.w	r3, #5
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	e00c      	b.n	800ac88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <osKernelInitialize+0x64>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac76:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <osKernelInitialize+0x64>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	e002      	b.n	800ac88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000104 	.word	0x20000104

0800ac9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca2:	f3ef 8305 	mrs	r3, IPSR
 800aca6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10f      	bne.n	800acce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acae:	f3ef 8310 	mrs	r3, PRIMASK
 800acb2:	607b      	str	r3, [r7, #4]
  return(result);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d105      	bne.n	800acc6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acba:	f3ef 8311 	mrs	r3, BASEPRI
 800acbe:	603b      	str	r3, [r7, #0]
  return(result);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <osKernelStart+0x3a>
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <osKernelStart+0x68>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d103      	bne.n	800acd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800acce:	f06f 0305 	mvn.w	r3, #5
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e010      	b.n	800acf8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <osKernelStart+0x68>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d109      	bne.n	800acf2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800acde:	f7ff ffa1 	bl	800ac24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <osKernelStart+0x68>)
 800ace4:	2202      	movs	r2, #2
 800ace6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ace8:	f001 fb14 	bl	800c314 <vTaskStartScheduler>
      stat = osOK;
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e002      	b.n	800acf8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800acf2:	f04f 33ff 	mov.w	r3, #4294967295
 800acf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800acf8:	68fb      	ldr	r3, [r7, #12]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000104 	.word	0x20000104

0800ad08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b090      	sub	sp, #64	; 0x40
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad14:	2300      	movs	r3, #0
 800ad16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad18:	f3ef 8305 	mrs	r3, IPSR
 800ad1c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 808f 	bne.w	800ae44 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad26:	f3ef 8310 	mrs	r3, PRIMASK
 800ad2a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d105      	bne.n	800ad3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad32:	f3ef 8311 	mrs	r3, BASEPRI
 800ad36:	617b      	str	r3, [r7, #20]
  return(result);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <osThreadNew+0x3e>
 800ad3e:	4b44      	ldr	r3, [pc, #272]	; (800ae50 <osThreadNew+0x148>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d07e      	beq.n	800ae44 <osThreadNew+0x13c>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d07b      	beq.n	800ae44 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ad4c:	2380      	movs	r3, #128	; 0x80
 800ad4e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ad50:	2318      	movs	r3, #24
 800ad52:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ad54:	2300      	movs	r3, #0
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d045      	beq.n	800adf0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <osThreadNew+0x6a>
        name = attr->name;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d002      	beq.n	800ad80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d008      	beq.n	800ad98 <osThreadNew+0x90>
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2b38      	cmp	r3, #56	; 0x38
 800ad8a:	d805      	bhi.n	800ad98 <osThreadNew+0x90>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <osThreadNew+0x94>
        return (NULL);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e054      	b.n	800ae46 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	089b      	lsrs	r3, r3, #2
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00e      	beq.n	800add2 <osThreadNew+0xca>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	2b5b      	cmp	r3, #91	; 0x5b
 800adba:	d90a      	bls.n	800add2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <osThreadNew+0xca>
        mem = 1;
 800adcc:	2301      	movs	r3, #1
 800adce:	623b      	str	r3, [r7, #32]
 800add0:	e010      	b.n	800adf4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10c      	bne.n	800adf4 <osThreadNew+0xec>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d108      	bne.n	800adf4 <osThreadNew+0xec>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d104      	bne.n	800adf4 <osThreadNew+0xec>
          mem = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	623b      	str	r3, [r7, #32]
 800adee:	e001      	b.n	800adf4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d110      	bne.n	800ae1c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae02:	9202      	str	r2, [sp, #8]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f001 f833 	bl	800be7c <xTaskCreateStatic>
 800ae16:	4603      	mov	r3, r0
 800ae18:	613b      	str	r3, [r7, #16]
 800ae1a:	e013      	b.n	800ae44 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d110      	bne.n	800ae44 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	f107 0310 	add.w	r3, r7, #16
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f001 f87b 	bl	800bf30 <xTaskCreate>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d001      	beq.n	800ae44 <osThreadNew+0x13c>
          hTask = NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae44:	693b      	ldr	r3, [r7, #16]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3730      	adds	r7, #48	; 0x30
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000104 	.word	0x20000104

0800ae54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae5c:	f3ef 8305 	mrs	r3, IPSR
 800ae60:	613b      	str	r3, [r7, #16]
  return(result);
 800ae62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10f      	bne.n	800ae88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae68:	f3ef 8310 	mrs	r3, PRIMASK
 800ae6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d105      	bne.n	800ae80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae74:	f3ef 8311 	mrs	r3, BASEPRI
 800ae78:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d007      	beq.n	800ae90 <osDelay+0x3c>
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <osDelay+0x58>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d103      	bne.n	800ae90 <osDelay+0x3c>
    stat = osErrorISR;
 800ae88:	f06f 0305 	mvn.w	r3, #5
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e007      	b.n	800aea0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fa06 	bl	800c2ac <vTaskDelay>
    }
  }

  return (stat);
 800aea0:	697b      	ldr	r3, [r7, #20]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000104 	.word	0x20000104

0800aeb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08c      	sub	sp, #48	; 0x30
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec0:	f3ef 8305 	mrs	r3, IPSR
 800aec4:	61bb      	str	r3, [r7, #24]
  return(result);
 800aec6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d170      	bne.n	800afae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aecc:	f3ef 8310 	mrs	r3, PRIMASK
 800aed0:	617b      	str	r3, [r7, #20]
  return(result);
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d105      	bne.n	800aee4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aed8:	f3ef 8311 	mrs	r3, BASEPRI
 800aedc:	613b      	str	r3, [r7, #16]
  return(result);
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <osMessageQueueNew+0x3c>
 800aee4:	4b34      	ldr	r3, [pc, #208]	; (800afb8 <osMessageQueueNew+0x108>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d060      	beq.n	800afae <osMessageQueueNew+0xfe>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d05d      	beq.n	800afae <osMessageQueueNew+0xfe>
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d05a      	beq.n	800afae <osMessageQueueNew+0xfe>
    mem = -1;
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d029      	beq.n	800af58 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d012      	beq.n	800af32 <osMessageQueueNew+0x82>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	2b4f      	cmp	r3, #79	; 0x4f
 800af12:	d90e      	bls.n	800af32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00a      	beq.n	800af32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	695a      	ldr	r2, [r3, #20]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	fb01 f303 	mul.w	r3, r1, r3
 800af28:	429a      	cmp	r2, r3
 800af2a:	d302      	bcc.n	800af32 <osMessageQueueNew+0x82>
        mem = 1;
 800af2c:	2301      	movs	r3, #1
 800af2e:	623b      	str	r3, [r7, #32]
 800af30:	e014      	b.n	800af5c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d110      	bne.n	800af5c <osMessageQueueNew+0xac>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10c      	bne.n	800af5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af46:	2b00      	cmp	r3, #0
 800af48:	d108      	bne.n	800af5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d104      	bne.n	800af5c <osMessageQueueNew+0xac>
          mem = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	623b      	str	r3, [r7, #32]
 800af56:	e001      	b.n	800af5c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d10c      	bne.n	800af7c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	691a      	ldr	r2, [r3, #16]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6899      	ldr	r1, [r3, #8]
 800af6a:	2300      	movs	r3, #0
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	460b      	mov	r3, r1
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 fa58 	bl	800b428 <xQueueGenericCreateStatic>
 800af78:	6278      	str	r0, [r7, #36]	; 0x24
 800af7a:	e008      	b.n	800af8e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d105      	bne.n	800af8e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800af82:	2200      	movs	r2, #0
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fac1 	bl	800b50e <xQueueGenericCreate>
 800af8c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00c      	beq.n	800afae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	61fb      	str	r3, [r7, #28]
 800afa0:	e001      	b.n	800afa6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800afa6:	69f9      	ldr	r1, [r7, #28]
 800afa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afaa:	f000 ff0b 	bl	800bdc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3728      	adds	r7, #40	; 0x28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000104 	.word	0x20000104

0800afbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08a      	sub	sp, #40	; 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afd4:	f3ef 8305 	mrs	r3, IPSR
 800afd8:	61fb      	str	r3, [r7, #28]
  return(result);
 800afda:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10f      	bne.n	800b000 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afe0:	f3ef 8310 	mrs	r3, PRIMASK
 800afe4:	61bb      	str	r3, [r7, #24]
  return(result);
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d105      	bne.n	800aff8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afec:	f3ef 8311 	mrs	r3, BASEPRI
 800aff0:	617b      	str	r3, [r7, #20]
  return(result);
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d02c      	beq.n	800b052 <osMessageQueuePut+0x96>
 800aff8:	4b28      	ldr	r3, [pc, #160]	; (800b09c <osMessageQueuePut+0xe0>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d128      	bne.n	800b052 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <osMessageQueuePut+0x56>
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <osMessageQueuePut+0x56>
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b012:	f06f 0303 	mvn.w	r3, #3
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b018:	e039      	b.n	800b08e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b01e:	f107 0210 	add.w	r2, r7, #16
 800b022:	2300      	movs	r3, #0
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	6a38      	ldr	r0, [r7, #32]
 800b028:	f000 fbce 	bl	800b7c8 <xQueueGenericSendFromISR>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d003      	beq.n	800b03a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b032:	f06f 0302 	mvn.w	r3, #2
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b038:	e029      	b.n	800b08e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d026      	beq.n	800b08e <osMessageQueuePut+0xd2>
 800b040:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <osMessageQueuePut+0xe4>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b050:	e01d      	b.n	800b08e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <osMessageQueuePut+0xa2>
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b05e:	f06f 0303 	mvn.w	r3, #3
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
 800b064:	e014      	b.n	800b090 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b066:	2300      	movs	r3, #0
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	6a38      	ldr	r0, [r7, #32]
 800b06e:	f000 fab1 	bl	800b5d4 <xQueueGenericSend>
 800b072:	4603      	mov	r3, r0
 800b074:	2b01      	cmp	r3, #1
 800b076:	d00b      	beq.n	800b090 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b07e:	f06f 0301 	mvn.w	r3, #1
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
 800b084:	e004      	b.n	800b090 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b086:	f06f 0302 	mvn.w	r3, #2
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
 800b08c:	e000      	b.n	800b090 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b08e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b092:	4618      	mov	r0, r3
 800b094:	3728      	adds	r7, #40	; 0x28
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000104 	.word	0x20000104
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	; 0x28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ba:	f3ef 8305 	mrs	r3, IPSR
 800b0be:	61fb      	str	r3, [r7, #28]
  return(result);
 800b0c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10f      	bne.n	800b0e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b0ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d105      	bne.n	800b0de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0d2:	f3ef 8311 	mrs	r3, BASEPRI
 800b0d6:	617b      	str	r3, [r7, #20]
  return(result);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d02c      	beq.n	800b138 <osMessageQueueGet+0x94>
 800b0de:	4b28      	ldr	r3, [pc, #160]	; (800b180 <osMessageQueueGet+0xdc>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d128      	bne.n	800b138 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d005      	beq.n	800b0f8 <osMessageQueueGet+0x54>
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <osMessageQueueGet+0x54>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b0f8:	f06f 0303 	mvn.w	r3, #3
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0fe:	e038      	b.n	800b172 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b100:	2300      	movs	r3, #0
 800b102:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b104:	f107 0310 	add.w	r3, r7, #16
 800b108:	461a      	mov	r2, r3
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	6a38      	ldr	r0, [r7, #32]
 800b10e:	f000 fccb 	bl	800baa8 <xQueueReceiveFromISR>
 800b112:	4603      	mov	r3, r0
 800b114:	2b01      	cmp	r3, #1
 800b116:	d003      	beq.n	800b120 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b118:	f06f 0302 	mvn.w	r3, #2
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b11e:	e028      	b.n	800b172 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d025      	beq.n	800b172 <osMessageQueueGet+0xce>
 800b126:	4b17      	ldr	r3, [pc, #92]	; (800b184 <osMessageQueueGet+0xe0>)
 800b128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b136:	e01c      	b.n	800b172 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <osMessageQueueGet+0xa0>
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b144:	f06f 0303 	mvn.w	r3, #3
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
 800b14a:	e013      	b.n	800b174 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	6a38      	ldr	r0, [r7, #32]
 800b152:	f000 fbcd 	bl	800b8f0 <xQueueReceive>
 800b156:	4603      	mov	r3, r0
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d00b      	beq.n	800b174 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b162:	f06f 0301 	mvn.w	r3, #1
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
 800b168:	e004      	b.n	800b174 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b16a:	f06f 0302 	mvn.w	r3, #2
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24
 800b170:	e000      	b.n	800b174 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b172:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b176:	4618      	mov	r0, r3
 800b178:	3728      	adds	r7, #40	; 0x28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000104 	.word	0x20000104
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4a07      	ldr	r2, [pc, #28]	; (800b1b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4a06      	ldr	r2, [pc, #24]	; (800b1b8 <vApplicationGetIdleTaskMemory+0x30>)
 800b19e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2280      	movs	r2, #128	; 0x80
 800b1a4:	601a      	str	r2, [r3, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	20000108 	.word	0x20000108
 800b1b8:	20000164 	.word	0x20000164

0800b1bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4a07      	ldr	r2, [pc, #28]	; (800b1e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b1cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	4a06      	ldr	r2, [pc, #24]	; (800b1ec <vApplicationGetTimerTaskMemory+0x30>)
 800b1d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1da:	601a      	str	r2, [r3, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	20000364 	.word	0x20000364
 800b1ec:	200003c0 	.word	0x200003c0

0800b1f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f103 0208 	add.w	r2, r3, #8
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f04f 32ff 	mov.w	r2, #4294967295
 800b208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f103 0208 	add.w	r2, r3, #8
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f103 0208 	add.w	r2, r3, #8
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b24a:	b480      	push	{r7}
 800b24c:	b085      	sub	sp, #20
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	601a      	str	r2, [r3, #0]
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a8:	d103      	bne.n	800b2b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e00c      	b.n	800b2cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	e002      	b.n	800b2c0 <vListInsert+0x2e>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d2f6      	bcs.n	800b2ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	601a      	str	r2, [r3, #0]
}
 800b2f8:	bf00      	nop
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	6892      	ldr	r2, [r2, #8]
 800b31a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6852      	ldr	r2, [r2, #4]
 800b324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d103      	bne.n	800b338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	1e5a      	subs	r2, r3, #1
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d109      	bne.n	800b380 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60bb      	str	r3, [r7, #8]
 800b37e:	e7fe      	b.n	800b37e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b380:	f002 f94c 	bl	800d61c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b390:	fb01 f303 	mul.w	r3, r1, r3
 800b394:	441a      	add	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	68f9      	ldr	r1, [r7, #12]
 800b3b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3b6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ba:	441a      	add	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	22ff      	movs	r2, #255	; 0xff
 800b3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	22ff      	movs	r2, #255	; 0xff
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d114      	bne.n	800b400 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01a      	beq.n	800b414 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3310      	adds	r3, #16
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f001 fa16 	bl	800c814 <xTaskRemoveFromEventList>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d012      	beq.n	800b414 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <xQueueGenericReset+0xcc>)
 800b3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	e009      	b.n	800b414 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3310      	adds	r3, #16
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fef3 	bl	800b1f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3324      	adds	r3, #36	; 0x24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff feee 	bl	800b1f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b414:	f002 f930 	bl	800d678 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b418:	2301      	movs	r3, #1
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	e000ed04 	.word	0xe000ed04

0800b428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08e      	sub	sp, #56	; 0x38
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <xQueueGenericCreateStatic+0x28>
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b44e:	e7fe      	b.n	800b44e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <xQueueGenericCreateStatic+0x42>
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	627b      	str	r3, [r7, #36]	; 0x24
 800b468:	e7fe      	b.n	800b468 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <xQueueGenericCreateStatic+0x4e>
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <xQueueGenericCreateStatic+0x52>
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <xQueueGenericCreateStatic+0x54>
 800b47a:	2300      	movs	r3, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d109      	bne.n	800b494 <xQueueGenericCreateStatic+0x6c>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	623b      	str	r3, [r7, #32]
 800b492:	e7fe      	b.n	800b492 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <xQueueGenericCreateStatic+0x78>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <xQueueGenericCreateStatic+0x7c>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <xQueueGenericCreateStatic+0x7e>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d109      	bne.n	800b4be <xQueueGenericCreateStatic+0x96>
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	61fb      	str	r3, [r7, #28]
 800b4bc:	e7fe      	b.n	800b4bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4be:	2350      	movs	r3, #80	; 0x50
 800b4c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b50      	cmp	r3, #80	; 0x50
 800b4c6:	d009      	beq.n	800b4dc <xQueueGenericCreateStatic+0xb4>
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	61bb      	str	r3, [r7, #24]
 800b4da:	e7fe      	b.n	800b4da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00d      	beq.n	800b504 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 f844 	bl	800b58c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b506:	4618      	mov	r0, r3
 800b508:	3730      	adds	r7, #48	; 0x30
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b08a      	sub	sp, #40	; 0x28
 800b512:	af02      	add	r7, sp, #8
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	4613      	mov	r3, r2
 800b51a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <xQueueGenericCreate+0x28>
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	613b      	str	r3, [r7, #16]
 800b534:	e7fe      	b.n	800b534 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	e004      	b.n	800b54c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	3350      	adds	r3, #80	; 0x50
 800b550:	4618      	mov	r0, r3
 800b552:	f002 f97d 	bl	800d850 <pvPortMalloc>
 800b556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d011      	beq.n	800b582 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	3350      	adds	r3, #80	; 0x50
 800b566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b570:	79fa      	ldrb	r2, [r7, #7]
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	4613      	mov	r3, r2
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 f805 	bl	800b58c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b582:	69bb      	ldr	r3, [r7, #24]
	}
 800b584:	4618      	mov	r0, r3
 800b586:	3720      	adds	r7, #32
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d103      	bne.n	800b5a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e002      	b.n	800b5ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	69b8      	ldr	r0, [r7, #24]
 800b5be:	f7ff fecb 	bl	800b358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	78fa      	ldrb	r2, [r7, #3]
 800b5c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5ca:	bf00      	nop
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08e      	sub	sp, #56	; 0x38
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d109      	bne.n	800b604 <xQueueGenericSend+0x30>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	62bb      	str	r3, [r7, #40]	; 0x28
 800b602:	e7fe      	b.n	800b602 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <xQueueGenericSend+0x3e>
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <xQueueGenericSend+0x42>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericSend+0x44>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d109      	bne.n	800b630 <xQueueGenericSend+0x5c>
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
 800b62e:	e7fe      	b.n	800b62e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b02      	cmp	r3, #2
 800b634:	d103      	bne.n	800b63e <xQueueGenericSend+0x6a>
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d101      	bne.n	800b642 <xQueueGenericSend+0x6e>
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <xQueueGenericSend+0x70>
 800b642:	2300      	movs	r3, #0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d109      	bne.n	800b65c <xQueueGenericSend+0x88>
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	623b      	str	r3, [r7, #32]
 800b65a:	e7fe      	b.n	800b65a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b65c:	f001 fa90 	bl	800cb80 <xTaskGetSchedulerState>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d102      	bne.n	800b66c <xQueueGenericSend+0x98>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <xQueueGenericSend+0x9c>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e000      	b.n	800b672 <xQueueGenericSend+0x9e>
 800b670:	2300      	movs	r3, #0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d109      	bne.n	800b68a <xQueueGenericSend+0xb6>
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	61fb      	str	r3, [r7, #28]
 800b688:	e7fe      	b.n	800b688 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b68a:	f001 ffc7 	bl	800d61c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b696:	429a      	cmp	r2, r3
 800b698:	d302      	bcc.n	800b6a0 <xQueueGenericSend+0xcc>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d129      	bne.n	800b6f4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6a6:	f000 fa7c 	bl	800bba2 <prvCopyDataToQueue>
 800b6aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d010      	beq.n	800b6d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	3324      	adds	r3, #36	; 0x24
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f8ab 	bl	800c814 <xTaskRemoveFromEventList>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d013      	beq.n	800b6ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6c4:	4b3f      	ldr	r3, [pc, #252]	; (800b7c4 <xQueueGenericSend+0x1f0>)
 800b6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	e00a      	b.n	800b6ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6dc:	4b39      	ldr	r3, [pc, #228]	; (800b7c4 <xQueueGenericSend+0x1f0>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6ec:	f001 ffc4 	bl	800d678 <vPortExitCritical>
				return pdPASS;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e063      	b.n	800b7bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d103      	bne.n	800b702 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6fa:	f001 ffbd 	bl	800d678 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	e05c      	b.n	800b7bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	2b00      	cmp	r3, #0
 800b706:	d106      	bne.n	800b716 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b708:	f107 0314 	add.w	r3, r7, #20
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f8e3 	bl	800c8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b712:	2301      	movs	r3, #1
 800b714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b716:	f001 ffaf 	bl	800d678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b71a:	f000 fe5f 	bl	800c3dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b71e:	f001 ff7d 	bl	800d61c <vPortEnterCritical>
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b728:	b25b      	sxtb	r3, r3
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72e:	d103      	bne.n	800b738 <xQueueGenericSend+0x164>
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b73e:	b25b      	sxtb	r3, r3
 800b740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b744:	d103      	bne.n	800b74e <xQueueGenericSend+0x17a>
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b74e:	f001 ff93 	bl	800d678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b752:	1d3a      	adds	r2, r7, #4
 800b754:	f107 0314 	add.w	r3, r7, #20
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f001 f8d2 	bl	800c904 <xTaskCheckForTimeOut>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d124      	bne.n	800b7b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b768:	f000 fb13 	bl	800bd92 <prvIsQueueFull>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d018      	beq.n	800b7a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	3310      	adds	r3, #16
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fffc 	bl	800c778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b782:	f000 fa9e 	bl	800bcc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b786:	f000 fe37 	bl	800c3f8 <xTaskResumeAll>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f af7c 	bne.w	800b68a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <xQueueGenericSend+0x1f0>)
 800b794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	e772      	b.n	800b68a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7a6:	f000 fa8c 	bl	800bcc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7aa:	f000 fe25 	bl	800c3f8 <xTaskResumeAll>
 800b7ae:	e76c      	b.n	800b68a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7b2:	f000 fa86 	bl	800bcc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7b6:	f000 fe1f 	bl	800c3f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3738      	adds	r7, #56	; 0x38
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	e000ed04 	.word	0xe000ed04

0800b7c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08e      	sub	sp, #56	; 0x38
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d109      	bne.n	800b7f4 <xQueueGenericSendFromISR+0x2c>
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f2:	e7fe      	b.n	800b7f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d103      	bne.n	800b802 <xQueueGenericSendFromISR+0x3a>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <xQueueGenericSendFromISR+0x3e>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericSendFromISR+0x40>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d109      	bne.n	800b820 <xQueueGenericSendFromISR+0x58>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	e7fe      	b.n	800b81e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d103      	bne.n	800b82e <xQueueGenericSendFromISR+0x66>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <xQueueGenericSendFromISR+0x6a>
 800b82e:	2301      	movs	r3, #1
 800b830:	e000      	b.n	800b834 <xQueueGenericSendFromISR+0x6c>
 800b832:	2300      	movs	r3, #0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <xQueueGenericSendFromISR+0x84>
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	61fb      	str	r3, [r7, #28]
 800b84a:	e7fe      	b.n	800b84a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b84c:	f001 ffc2 	bl	800d7d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b850:	f3ef 8211 	mrs	r2, BASEPRI
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	61ba      	str	r2, [r7, #24]
 800b866:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b868:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <xQueueGenericSendFromISR+0xb6>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d12c      	bne.n	800b8d8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b88e:	f000 f988 	bl	800bba2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b892:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d112      	bne.n	800b8c2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d016      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 ffb3 	bl	800c814 <xTaskRemoveFromEventList>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00e      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00b      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	e007      	b.n	800b8d2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	b25a      	sxtb	r2, r3
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b8d6:	e001      	b.n	800b8dc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3738      	adds	r7, #56	; 0x38
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08c      	sub	sp, #48	; 0x30
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d109      	bne.n	800b91e <xQueueReceive+0x2e>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	623b      	str	r3, [r7, #32]
 800b91c:	e7fe      	b.n	800b91c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d103      	bne.n	800b92c <xQueueReceive+0x3c>
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <xQueueReceive+0x40>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e000      	b.n	800b932 <xQueueReceive+0x42>
 800b930:	2300      	movs	r3, #0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <xQueueReceive+0x5a>
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e7fe      	b.n	800b948 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b94a:	f001 f919 	bl	800cb80 <xTaskGetSchedulerState>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <xQueueReceive+0x6a>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <xQueueReceive+0x6e>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <xQueueReceive+0x70>
 800b95e:	2300      	movs	r3, #0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d109      	bne.n	800b978 <xQueueReceive+0x88>
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	e7fe      	b.n	800b976 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b978:	f001 fe50 	bl	800d61c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b980:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	2b00      	cmp	r3, #0
 800b986:	d01f      	beq.n	800b9c8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98c:	f000 f973 	bl	800bc76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	1e5a      	subs	r2, r3, #1
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00f      	beq.n	800b9c0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	3310      	adds	r3, #16
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 ff35 	bl	800c814 <xTaskRemoveFromEventList>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d007      	beq.n	800b9c0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9b0:	4b3c      	ldr	r3, [pc, #240]	; (800baa4 <xQueueReceive+0x1b4>)
 800b9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9c0:	f001 fe5a 	bl	800d678 <vPortExitCritical>
				return pdPASS;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e069      	b.n	800ba9c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d103      	bne.n	800b9d6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9ce:	f001 fe53 	bl	800d678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e062      	b.n	800ba9c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 ff79 	bl	800c8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9ea:	f001 fe45 	bl	800d678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9ee:	f000 fcf5 	bl	800c3dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9f2:	f001 fe13 	bl	800d61c <vPortEnterCritical>
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9fc:	b25b      	sxtb	r3, r3
 800b9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba02:	d103      	bne.n	800ba0c <xQueueReceive+0x11c>
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba12:	b25b      	sxtb	r3, r3
 800ba14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba18:	d103      	bne.n	800ba22 <xQueueReceive+0x132>
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba22:	f001 fe29 	bl	800d678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba26:	1d3a      	adds	r2, r7, #4
 800ba28:	f107 0310 	add.w	r3, r7, #16
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 ff68 	bl	800c904 <xTaskCheckForTimeOut>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d123      	bne.n	800ba82 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba3c:	f000 f993 	bl	800bd66 <prvIsQueueEmpty>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d017      	beq.n	800ba76 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba48:	3324      	adds	r3, #36	; 0x24
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fe92 	bl	800c778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba56:	f000 f934 	bl	800bcc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba5a:	f000 fccd 	bl	800c3f8 <xTaskResumeAll>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d189      	bne.n	800b978 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ba64:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <xQueueReceive+0x1b4>)
 800ba66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	e780      	b.n	800b978 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba78:	f000 f923 	bl	800bcc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba7c:	f000 fcbc 	bl	800c3f8 <xTaskResumeAll>
 800ba80:	e77a      	b.n	800b978 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba84:	f000 f91d 	bl	800bcc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba88:	f000 fcb6 	bl	800c3f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba8e:	f000 f96a 	bl	800bd66 <prvIsQueueEmpty>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f43f af6f 	beq.w	800b978 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3730      	adds	r7, #48	; 0x30
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	e000ed04 	.word	0xe000ed04

0800baa8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08e      	sub	sp, #56	; 0x38
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2b00      	cmp	r3, #0
 800babc:	d109      	bne.n	800bad2 <xQueueReceiveFromISR+0x2a>
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	623b      	str	r3, [r7, #32]
 800bad0:	e7fe      	b.n	800bad0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d103      	bne.n	800bae0 <xQueueReceiveFromISR+0x38>
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <xQueueReceiveFromISR+0x3c>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e000      	b.n	800bae6 <xQueueReceiveFromISR+0x3e>
 800bae4:	2300      	movs	r3, #0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <xQueueReceiveFromISR+0x56>
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	61fb      	str	r3, [r7, #28]
 800bafc:	e7fe      	b.n	800bafc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bafe:	f001 fe69 	bl	800d7d4 <vPortValidateInterruptPriority>
	__asm volatile
 800bb02:	f3ef 8211 	mrs	r2, BASEPRI
 800bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	61ba      	str	r2, [r7, #24]
 800bb18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d02f      	beq.n	800bb8a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb38:	f000 f89d 	bl	800bc76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	1e5a      	subs	r2, r3, #1
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bb44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d112      	bne.n	800bb74 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	3310      	adds	r3, #16
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 fe5a 	bl	800c814 <xTaskRemoveFromEventList>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00e      	beq.n	800bb84 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	e007      	b.n	800bb84 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb78:	3301      	adds	r3, #1
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	b25a      	sxtb	r2, r3
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bb84:	2301      	movs	r3, #1
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
 800bb88:	e001      	b.n	800bb8e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3738      	adds	r7, #56	; 0x38
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b086      	sub	sp, #24
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10d      	bne.n	800bbdc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d14d      	bne.n	800bc64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 fff5 	bl	800cbbc <xTaskPriorityDisinherit>
 800bbd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	609a      	str	r2, [r3, #8]
 800bbda:	e043      	b.n	800bc64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d119      	bne.n	800bc16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6858      	ldr	r0, [r3, #4]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	461a      	mov	r2, r3
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	f002 fb41 	bl	800e274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	441a      	add	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d32b      	bcc.n	800bc64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	605a      	str	r2, [r3, #4]
 800bc14:	e026      	b.n	800bc64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	68d8      	ldr	r0, [r3, #12]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	f002 fb27 	bl	800e274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	425b      	negs	r3, r3
 800bc30:	441a      	add	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d207      	bcs.n	800bc52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689a      	ldr	r2, [r3, #8]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	425b      	negs	r3, r3
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d105      	bne.n	800bc64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc6c:	697b      	ldr	r3, [r7, #20]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d018      	beq.n	800bcba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc90:	441a      	add	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68da      	ldr	r2, [r3, #12]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d303      	bcc.n	800bcaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68d9      	ldr	r1, [r3, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6838      	ldr	r0, [r7, #0]
 800bcb6:	f002 fadd 	bl	800e274 <memcpy>
	}
}
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcca:	f001 fca7 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcd6:	e011      	b.n	800bcfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d012      	beq.n	800bd06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3324      	adds	r3, #36	; 0x24
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fd95 	bl	800c814 <xTaskRemoveFromEventList>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcf0:	f000 fe68 	bl	800c9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dce9      	bgt.n	800bcd8 <prvUnlockQueue+0x16>
 800bd04:	e000      	b.n	800bd08 <prvUnlockQueue+0x46>
					break;
 800bd06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	22ff      	movs	r2, #255	; 0xff
 800bd0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd10:	f001 fcb2 	bl	800d678 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd14:	f001 fc82 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd20:	e011      	b.n	800bd46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d012      	beq.n	800bd50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3310      	adds	r3, #16
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 fd70 	bl	800c814 <xTaskRemoveFromEventList>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd3a:	f000 fe43 	bl	800c9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dce9      	bgt.n	800bd22 <prvUnlockQueue+0x60>
 800bd4e:	e000      	b.n	800bd52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	22ff      	movs	r2, #255	; 0xff
 800bd56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd5a:	f001 fc8d 	bl	800d678 <vPortExitCritical>
}
 800bd5e:	bf00      	nop
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd6e:	f001 fc55 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	60fb      	str	r3, [r7, #12]
 800bd7e:	e001      	b.n	800bd84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd84:	f001 fc78 	bl	800d678 <vPortExitCritical>

	return xReturn;
 800bd88:	68fb      	ldr	r3, [r7, #12]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd9a:	f001 fc3f 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d102      	bne.n	800bdb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	e001      	b.n	800bdb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdb4:	f001 fc60 	bl	800d678 <vPortExitCritical>

	return xReturn;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e014      	b.n	800bdfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bdd4:	4a0e      	ldr	r2, [pc, #56]	; (800be10 <vQueueAddToRegistry+0x4c>)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10b      	bne.n	800bdf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bde0:	490b      	ldr	r1, [pc, #44]	; (800be10 <vQueueAddToRegistry+0x4c>)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdea:	4a09      	ldr	r2, [pc, #36]	; (800be10 <vQueueAddToRegistry+0x4c>)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdf6:	e005      	b.n	800be04 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b07      	cmp	r3, #7
 800be02:	d9e7      	bls.n	800bdd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be04:	bf00      	nop
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20004ca0 	.word	0x20004ca0

0800be14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be24:	f001 fbfa 	bl	800d61c <vPortEnterCritical>
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be34:	d103      	bne.n	800be3e <vQueueWaitForMessageRestricted+0x2a>
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be44:	b25b      	sxtb	r3, r3
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d103      	bne.n	800be54 <vQueueWaitForMessageRestricted+0x40>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be54:	f001 fc10 	bl	800d678 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d106      	bne.n	800be6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	3324      	adds	r3, #36	; 0x24
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fca9 	bl	800c7c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be6e:	6978      	ldr	r0, [r7, #20]
 800be70:	f7ff ff27 	bl	800bcc2 <prvUnlockQueue>
	}
 800be74:	bf00      	nop
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af04      	add	r7, sp, #16
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <xTaskCreateStatic+0x28>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	623b      	str	r3, [r7, #32]
 800bea2:	e7fe      	b.n	800bea2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <xTaskCreateStatic+0x42>
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	61fb      	str	r3, [r7, #28]
 800bebc:	e7fe      	b.n	800bebc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bebe:	235c      	movs	r3, #92	; 0x5c
 800bec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2b5c      	cmp	r3, #92	; 0x5c
 800bec6:	d009      	beq.n	800bedc <xTaskCreateStatic+0x60>
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61bb      	str	r3, [r7, #24]
 800beda:	e7fe      	b.n	800beda <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bedc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01e      	beq.n	800bf22 <xTaskCreateStatic+0xa6>
 800bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01b      	beq.n	800bf22 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800befc:	2300      	movs	r3, #0
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	9302      	str	r3, [sp, #8]
 800bf04:	f107 0314 	add.w	r3, r7, #20
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 f850 	bl	800bfba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf1c:	f000 f8dc 	bl	800c0d8 <prvAddNewTaskToReadyList>
 800bf20:	e001      	b.n	800bf26 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf26:	697b      	ldr	r3, [r7, #20]
	}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3728      	adds	r7, #40	; 0x28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08c      	sub	sp, #48	; 0x30
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 fc83 	bl	800d850 <pvPortMalloc>
 800bf4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00e      	beq.n	800bf70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf52:	205c      	movs	r0, #92	; 0x5c
 800bf54:	f001 fc7c 	bl	800d850 <pvPortMalloc>
 800bf58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
 800bf66:	e005      	b.n	800bf74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf68:	6978      	ldr	r0, [r7, #20]
 800bf6a:	f001 fd33 	bl	800d9d4 <vPortFree>
 800bf6e:	e001      	b.n	800bf74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d017      	beq.n	800bfaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf82:	88fa      	ldrh	r2, [r7, #6]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9303      	str	r3, [sp, #12]
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f80e 	bl	800bfba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf9e:	69f8      	ldr	r0, [r7, #28]
 800bfa0:	f000 f89a 	bl	800c0d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	e002      	b.n	800bfb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295
 800bfae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
	}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b088      	sub	sp, #32
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	607a      	str	r2, [r7, #4]
 800bfc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	21a5      	movs	r1, #165	; 0xa5
 800bfd4:	f002 f959 	bl	800e28a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	f023 0307 	bic.w	r3, r3, #7
 800bff0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	f003 0307 	and.w	r3, r3, #7
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d009      	beq.n	800c010 <prvInitialiseNewTask+0x56>
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	617b      	str	r3, [r7, #20]
 800c00e:	e7fe      	b.n	800c00e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01f      	beq.n	800c056 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c016:	2300      	movs	r3, #0
 800c018:	61fb      	str	r3, [r7, #28]
 800c01a:	e012      	b.n	800c042 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	7819      	ldrb	r1, [r3, #0]
 800c024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	4413      	add	r3, r2
 800c02a:	3334      	adds	r3, #52	; 0x34
 800c02c:	460a      	mov	r2, r1
 800c02e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4413      	add	r3, r2
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	3301      	adds	r3, #1
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	2b0f      	cmp	r3, #15
 800c046:	d9e9      	bls.n	800c01c <prvInitialiseNewTask+0x62>
 800c048:	e000      	b.n	800c04c <prvInitialiseNewTask+0x92>
			{
				break;
 800c04a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c054:	e003      	b.n	800c05e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	2b37      	cmp	r3, #55	; 0x37
 800c062:	d901      	bls.n	800c068 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c064:	2337      	movs	r3, #55	; 0x37
 800c066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c06c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	2200      	movs	r2, #0
 800c078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	3304      	adds	r3, #4
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff f8d6 	bl	800b230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	3318      	adds	r3, #24
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff f8d1 	bl	800b230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	68f9      	ldr	r1, [r7, #12]
 800c0b6:	69b8      	ldr	r0, [r7, #24]
 800c0b8:	f001 f986 	bl	800d3c8 <pxPortInitialiseStack>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0ce:	bf00      	nop
 800c0d0:	3720      	adds	r7, #32
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
	...

0800c0d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0e0:	f001 fa9c 	bl	800d61c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0e4:	4b2d      	ldr	r3, [pc, #180]	; (800c19c <prvAddNewTaskToReadyList+0xc4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	4a2c      	ldr	r2, [pc, #176]	; (800c19c <prvAddNewTaskToReadyList+0xc4>)
 800c0ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0ee:	4b2c      	ldr	r3, [pc, #176]	; (800c1a0 <prvAddNewTaskToReadyList+0xc8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d109      	bne.n	800c10a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0f6:	4a2a      	ldr	r2, [pc, #168]	; (800c1a0 <prvAddNewTaskToReadyList+0xc8>)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0fc:	4b27      	ldr	r3, [pc, #156]	; (800c19c <prvAddNewTaskToReadyList+0xc4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d110      	bne.n	800c126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c104:	f000 fc82 	bl	800ca0c <prvInitialiseTaskLists>
 800c108:	e00d      	b.n	800c126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c10a:	4b26      	ldr	r3, [pc, #152]	; (800c1a4 <prvAddNewTaskToReadyList+0xcc>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d109      	bne.n	800c126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c112:	4b23      	ldr	r3, [pc, #140]	; (800c1a0 <prvAddNewTaskToReadyList+0xc8>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d802      	bhi.n	800c126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c120:	4a1f      	ldr	r2, [pc, #124]	; (800c1a0 <prvAddNewTaskToReadyList+0xc8>)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c126:	4b20      	ldr	r3, [pc, #128]	; (800c1a8 <prvAddNewTaskToReadyList+0xd0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3301      	adds	r3, #1
 800c12c:	4a1e      	ldr	r2, [pc, #120]	; (800c1a8 <prvAddNewTaskToReadyList+0xd0>)
 800c12e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c130:	4b1d      	ldr	r3, [pc, #116]	; (800c1a8 <prvAddNewTaskToReadyList+0xd0>)
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13c:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <prvAddNewTaskToReadyList+0xd4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	d903      	bls.n	800c14c <prvAddNewTaskToReadyList+0x74>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c148:	4a18      	ldr	r2, [pc, #96]	; (800c1ac <prvAddNewTaskToReadyList+0xd4>)
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <prvAddNewTaskToReadyList+0xd8>)
 800c15a:	441a      	add	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3304      	adds	r3, #4
 800c160:	4619      	mov	r1, r3
 800c162:	4610      	mov	r0, r2
 800c164:	f7ff f871 	bl	800b24a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c168:	f001 fa86 	bl	800d678 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c16c:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <prvAddNewTaskToReadyList+0xcc>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c174:	4b0a      	ldr	r3, [pc, #40]	; (800c1a0 <prvAddNewTaskToReadyList+0xc8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	429a      	cmp	r2, r3
 800c180:	d207      	bcs.n	800c192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <prvAddNewTaskToReadyList+0xdc>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000c94 	.word	0x20000c94
 800c1a0:	200007c0 	.word	0x200007c0
 800c1a4:	20000ca0 	.word	0x20000ca0
 800c1a8:	20000cb0 	.word	0x20000cb0
 800c1ac:	20000c9c 	.word	0x20000c9c
 800c1b0:	200007c4 	.word	0x200007c4
 800c1b4:	e000ed04 	.word	0xe000ed04

0800c1b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d109      	bne.n	800c1e0 <vTaskDelayUntil+0x28>
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	e7fe      	b.n	800c1de <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d109      	bne.n	800c1fa <vTaskDelayUntil+0x42>
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	e7fe      	b.n	800c1f8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800c1fa:	4b29      	ldr	r3, [pc, #164]	; (800c2a0 <vTaskDelayUntil+0xe8>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <vTaskDelayUntil+0x5e>
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e7fe      	b.n	800c214 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800c216:	f000 f8e1 	bl	800c3dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c21a:	4b22      	ldr	r3, [pc, #136]	; (800c2a4 <vTaskDelayUntil+0xec>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	4413      	add	r3, r2
 800c228:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6a3a      	ldr	r2, [r7, #32]
 800c230:	429a      	cmp	r2, r3
 800c232:	d20b      	bcs.n	800c24c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	69fa      	ldr	r2, [r7, #28]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d211      	bcs.n	800c262 <vTaskDelayUntil+0xaa>
 800c23e:	69fa      	ldr	r2, [r7, #28]
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	429a      	cmp	r2, r3
 800c244:	d90d      	bls.n	800c262 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800c246:	2301      	movs	r3, #1
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
 800c24a:	e00a      	b.n	800c262 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	429a      	cmp	r2, r3
 800c254:	d303      	bcc.n	800c25e <vTaskDelayUntil+0xa6>
 800c256:	69fa      	ldr	r2, [r7, #28]
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d901      	bls.n	800c262 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800c25e:	2301      	movs	r3, #1
 800c260:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69fa      	ldr	r2, [r7, #28]
 800c266:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d006      	beq.n	800c27c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c26e:	69fa      	ldr	r2, [r7, #28]
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	2100      	movs	r1, #0
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fd0c 	bl	800cc94 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c27c:	f000 f8bc 	bl	800c3f8 <xTaskResumeAll>
 800c280:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d107      	bne.n	800c298 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <vTaskDelayUntil+0xf0>)
 800c28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c298:	bf00      	nop
 800c29a:	3728      	adds	r7, #40	; 0x28
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20000cbc 	.word	0x20000cbc
 800c2a4:	20000c98 	.word	0x20000c98
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d016      	beq.n	800c2ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2be:	4b13      	ldr	r3, [pc, #76]	; (800c30c <vTaskDelay+0x60>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d009      	beq.n	800c2da <vTaskDelay+0x2e>
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60bb      	str	r3, [r7, #8]
 800c2d8:	e7fe      	b.n	800c2d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c2da:	f000 f87f 	bl	800c3dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2de:	2100      	movs	r1, #0
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fcd7 	bl	800cc94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2e6:	f000 f887 	bl	800c3f8 <xTaskResumeAll>
 800c2ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c2f2:	4b07      	ldr	r3, [pc, #28]	; (800c310 <vTaskDelay+0x64>)
 800c2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000cbc 	.word	0x20000cbc
 800c310:	e000ed04 	.word	0xe000ed04

0800c314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08a      	sub	sp, #40	; 0x28
 800c318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c322:	463a      	mov	r2, r7
 800c324:	1d39      	adds	r1, r7, #4
 800c326:	f107 0308 	add.w	r3, r7, #8
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe ff2c 	bl	800b188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	9202      	str	r2, [sp, #8]
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	2300      	movs	r3, #0
 800c340:	460a      	mov	r2, r1
 800c342:	4920      	ldr	r1, [pc, #128]	; (800c3c4 <vTaskStartScheduler+0xb0>)
 800c344:	4820      	ldr	r0, [pc, #128]	; (800c3c8 <vTaskStartScheduler+0xb4>)
 800c346:	f7ff fd99 	bl	800be7c <xTaskCreateStatic>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b1f      	ldr	r3, [pc, #124]	; (800c3cc <vTaskStartScheduler+0xb8>)
 800c34e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <vTaskStartScheduler+0xb8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c358:	2301      	movs	r3, #1
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	e001      	b.n	800c362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c35e:	2300      	movs	r3, #0
 800c360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d102      	bne.n	800c36e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c368:	f000 fce8 	bl	800cd3c <xTimerCreateTimerTask>
 800c36c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d115      	bne.n	800c3a0 <vTaskStartScheduler+0x8c>
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <vTaskStartScheduler+0xbc>)
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c38e:	4b11      	ldr	r3, [pc, #68]	; (800c3d4 <vTaskStartScheduler+0xc0>)
 800c390:	2201      	movs	r2, #1
 800c392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c394:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <vTaskStartScheduler+0xc4>)
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c39a:	f001 f8a1 	bl	800d4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c39e:	e00d      	b.n	800c3bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a6:	d109      	bne.n	800c3bc <vTaskStartScheduler+0xa8>
 800c3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	e7fe      	b.n	800c3ba <vTaskStartScheduler+0xa6>
}
 800c3bc:	bf00      	nop
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	0800f0c4 	.word	0x0800f0c4
 800c3c8:	0800c9dd 	.word	0x0800c9dd
 800c3cc:	20000cb8 	.word	0x20000cb8
 800c3d0:	20000cb4 	.word	0x20000cb4
 800c3d4:	20000ca0 	.word	0x20000ca0
 800c3d8:	20000c98 	.word	0x20000c98

0800c3dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c3e0:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <vTaskSuspendAll+0x18>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	4a03      	ldr	r2, [pc, #12]	; (800c3f4 <vTaskSuspendAll+0x18>)
 800c3e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c3ea:	bf00      	nop
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20000cbc 	.word	0x20000cbc

0800c3f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c402:	2300      	movs	r3, #0
 800c404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c406:	4b41      	ldr	r3, [pc, #260]	; (800c50c <xTaskResumeAll+0x114>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d109      	bne.n	800c422 <xTaskResumeAll+0x2a>
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	603b      	str	r3, [r7, #0]
 800c420:	e7fe      	b.n	800c420 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c422:	f001 f8fb 	bl	800d61c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c426:	4b39      	ldr	r3, [pc, #228]	; (800c50c <xTaskResumeAll+0x114>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	4a37      	ldr	r2, [pc, #220]	; (800c50c <xTaskResumeAll+0x114>)
 800c42e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c430:	4b36      	ldr	r3, [pc, #216]	; (800c50c <xTaskResumeAll+0x114>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d162      	bne.n	800c4fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c438:	4b35      	ldr	r3, [pc, #212]	; (800c510 <xTaskResumeAll+0x118>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d05e      	beq.n	800c4fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c440:	e02f      	b.n	800c4a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c442:	4b34      	ldr	r3, [pc, #208]	; (800c514 <xTaskResumeAll+0x11c>)
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3318      	adds	r3, #24
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe ff58 	bl	800b304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3304      	adds	r3, #4
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe ff53 	bl	800b304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c462:	4b2d      	ldr	r3, [pc, #180]	; (800c518 <xTaskResumeAll+0x120>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d903      	bls.n	800c472 <xTaskResumeAll+0x7a>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	4a2a      	ldr	r2, [pc, #168]	; (800c518 <xTaskResumeAll+0x120>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4a27      	ldr	r2, [pc, #156]	; (800c51c <xTaskResumeAll+0x124>)
 800c480:	441a      	add	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f7fe fede 	bl	800b24a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c492:	4b23      	ldr	r3, [pc, #140]	; (800c520 <xTaskResumeAll+0x128>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d302      	bcc.n	800c4a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c49c:	4b21      	ldr	r3, [pc, #132]	; (800c524 <xTaskResumeAll+0x12c>)
 800c49e:	2201      	movs	r2, #1
 800c4a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4a2:	4b1c      	ldr	r3, [pc, #112]	; (800c514 <xTaskResumeAll+0x11c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1cb      	bne.n	800c442 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4b0:	f000 fb46 	bl	800cb40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <xTaskResumeAll+0x130>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d010      	beq.n	800c4e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4c0:	f000 f846 	bl	800c550 <xTaskIncrementTick>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <xTaskResumeAll+0x12c>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f1      	bne.n	800c4c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c4dc:	4b12      	ldr	r3, [pc, #72]	; (800c528 <xTaskResumeAll+0x130>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <xTaskResumeAll+0x12c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	; (800c52c <xTaskResumeAll+0x134>)
 800c4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4fe:	f001 f8bb 	bl	800d678 <vPortExitCritical>

	return xAlreadyYielded;
 800c502:	68bb      	ldr	r3, [r7, #8]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20000cbc 	.word	0x20000cbc
 800c510:	20000c94 	.word	0x20000c94
 800c514:	20000c54 	.word	0x20000c54
 800c518:	20000c9c 	.word	0x20000c9c
 800c51c:	200007c4 	.word	0x200007c4
 800c520:	200007c0 	.word	0x200007c0
 800c524:	20000ca8 	.word	0x20000ca8
 800c528:	20000ca4 	.word	0x20000ca4
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c536:	4b05      	ldr	r3, [pc, #20]	; (800c54c <xTaskGetTickCount+0x1c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c53c:	687b      	ldr	r3, [r7, #4]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20000c98 	.word	0x20000c98

0800c550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c55a:	4b4e      	ldr	r3, [pc, #312]	; (800c694 <xTaskIncrementTick+0x144>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 8088 	bne.w	800c674 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c564:	4b4c      	ldr	r3, [pc, #304]	; (800c698 <xTaskIncrementTick+0x148>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3301      	adds	r3, #1
 800c56a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c56c:	4a4a      	ldr	r2, [pc, #296]	; (800c698 <xTaskIncrementTick+0x148>)
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d11f      	bne.n	800c5b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c578:	4b48      	ldr	r3, [pc, #288]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d009      	beq.n	800c596 <xTaskIncrementTick+0x46>
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	e7fe      	b.n	800c594 <xTaskIncrementTick+0x44>
 800c596:	4b41      	ldr	r3, [pc, #260]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	4b40      	ldr	r3, [pc, #256]	; (800c6a0 <xTaskIncrementTick+0x150>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a3e      	ldr	r2, [pc, #248]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	4a3e      	ldr	r2, [pc, #248]	; (800c6a0 <xTaskIncrementTick+0x150>)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	4b3e      	ldr	r3, [pc, #248]	; (800c6a4 <xTaskIncrementTick+0x154>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	4a3c      	ldr	r2, [pc, #240]	; (800c6a4 <xTaskIncrementTick+0x154>)
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	f000 fac4 	bl	800cb40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5b8:	4b3b      	ldr	r3, [pc, #236]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	693a      	ldr	r2, [r7, #16]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d349      	bcc.n	800c656 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5c2:	4b36      	ldr	r3, [pc, #216]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d104      	bne.n	800c5d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5cc:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d2:	601a      	str	r2, [r3, #0]
					break;
 800c5d4:	e03f      	b.n	800c656 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d6:	4b31      	ldr	r3, [pc, #196]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d203      	bcs.n	800c5f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5ee:	4a2e      	ldr	r2, [pc, #184]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5f4:	e02f      	b.n	800c656 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fe82 	bl	800b304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	3318      	adds	r3, #24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fe79 	bl	800b304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c616:	4b25      	ldr	r3, [pc, #148]	; (800c6ac <xTaskIncrementTick+0x15c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d903      	bls.n	800c626 <xTaskIncrementTick+0xd6>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c622:	4a22      	ldr	r2, [pc, #136]	; (800c6ac <xTaskIncrementTick+0x15c>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4a1f      	ldr	r2, [pc, #124]	; (800c6b0 <xTaskIncrementTick+0x160>)
 800c634:	441a      	add	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	3304      	adds	r3, #4
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fe fe04 	bl	800b24a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <xTaskIncrementTick+0x164>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d3b8      	bcc.n	800c5c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c654:	e7b5      	b.n	800c5c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c656:	4b17      	ldr	r3, [pc, #92]	; (800c6b4 <xTaskIncrementTick+0x164>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65c:	4914      	ldr	r1, [pc, #80]	; (800c6b0 <xTaskIncrementTick+0x160>)
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d907      	bls.n	800c67e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]
 800c672:	e004      	b.n	800c67e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c674:	4b10      	ldr	r3, [pc, #64]	; (800c6b8 <xTaskIncrementTick+0x168>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3301      	adds	r3, #1
 800c67a:	4a0f      	ldr	r2, [pc, #60]	; (800c6b8 <xTaskIncrementTick+0x168>)
 800c67c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c67e:	4b0f      	ldr	r3, [pc, #60]	; (800c6bc <xTaskIncrementTick+0x16c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c686:	2301      	movs	r3, #1
 800c688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c68a:	697b      	ldr	r3, [r7, #20]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20000cbc 	.word	0x20000cbc
 800c698:	20000c98 	.word	0x20000c98
 800c69c:	20000c4c 	.word	0x20000c4c
 800c6a0:	20000c50 	.word	0x20000c50
 800c6a4:	20000cac 	.word	0x20000cac
 800c6a8:	20000cb4 	.word	0x20000cb4
 800c6ac:	20000c9c 	.word	0x20000c9c
 800c6b0:	200007c4 	.word	0x200007c4
 800c6b4:	200007c0 	.word	0x200007c0
 800c6b8:	20000ca4 	.word	0x20000ca4
 800c6bc:	20000ca8 	.word	0x20000ca8

0800c6c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6c6:	4b27      	ldr	r3, [pc, #156]	; (800c764 <vTaskSwitchContext+0xa4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6ce:	4b26      	ldr	r3, [pc, #152]	; (800c768 <vTaskSwitchContext+0xa8>)
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6d4:	e040      	b.n	800c758 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c6d6:	4b24      	ldr	r3, [pc, #144]	; (800c768 <vTaskSwitchContext+0xa8>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6dc:	4b23      	ldr	r3, [pc, #140]	; (800c76c <vTaskSwitchContext+0xac>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e00f      	b.n	800c704 <vTaskSwitchContext+0x44>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d109      	bne.n	800c6fe <vTaskSwitchContext+0x3e>
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	607b      	str	r3, [r7, #4]
 800c6fc:	e7fe      	b.n	800c6fc <vTaskSwitchContext+0x3c>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b01      	subs	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	491a      	ldr	r1, [pc, #104]	; (800c770 <vTaskSwitchContext+0xb0>)
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0e5      	beq.n	800c6e4 <vTaskSwitchContext+0x24>
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4613      	mov	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4a13      	ldr	r2, [pc, #76]	; (800c770 <vTaskSwitchContext+0xb0>)
 800c724:	4413      	add	r3, r2
 800c726:	60bb      	str	r3, [r7, #8]
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	605a      	str	r2, [r3, #4]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	3308      	adds	r3, #8
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d104      	bne.n	800c748 <vTaskSwitchContext+0x88>
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	605a      	str	r2, [r3, #4]
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	4a09      	ldr	r2, [pc, #36]	; (800c774 <vTaskSwitchContext+0xb4>)
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	4a06      	ldr	r2, [pc, #24]	; (800c76c <vTaskSwitchContext+0xac>)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6013      	str	r3, [r2, #0]
}
 800c758:	bf00      	nop
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	20000cbc 	.word	0x20000cbc
 800c768:	20000ca8 	.word	0x20000ca8
 800c76c:	20000c9c 	.word	0x20000c9c
 800c770:	200007c4 	.word	0x200007c4
 800c774:	200007c0 	.word	0x200007c0

0800c778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d109      	bne.n	800c79c <vTaskPlaceOnEventList+0x24>
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	60fb      	str	r3, [r7, #12]
 800c79a:	e7fe      	b.n	800c79a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c79c:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <vTaskPlaceOnEventList+0x44>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3318      	adds	r3, #24
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fe fd74 	bl	800b292 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	6838      	ldr	r0, [r7, #0]
 800c7ae:	f000 fa71 	bl	800cc94 <prvAddCurrentTaskToDelayedList>
}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200007c0 	.word	0x200007c0

0800c7c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <vTaskPlaceOnEventListRestricted+0x26>
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	e7fe      	b.n	800c7e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7e6:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <vTaskPlaceOnEventListRestricted+0x50>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	3318      	adds	r3, #24
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7fe fd2b 	bl	800b24a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d002      	beq.n	800c800 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	68b8      	ldr	r0, [r7, #8]
 800c804:	f000 fa46 	bl	800cc94 <prvAddCurrentTaskToDelayedList>
	}
 800c808:	bf00      	nop
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	200007c0 	.word	0x200007c0

0800c814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <xTaskRemoveFromEventList+0x2a>
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e7fe      	b.n	800c83c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	3318      	adds	r3, #24
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe fd5e 	bl	800b304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c848:	4b1d      	ldr	r3, [pc, #116]	; (800c8c0 <xTaskRemoveFromEventList+0xac>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d11d      	bne.n	800c88c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	3304      	adds	r3, #4
 800c854:	4618      	mov	r0, r3
 800c856:	f7fe fd55 	bl	800b304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85e:	4b19      	ldr	r3, [pc, #100]	; (800c8c4 <xTaskRemoveFromEventList+0xb0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d903      	bls.n	800c86e <xTaskRemoveFromEventList+0x5a>
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86a:	4a16      	ldr	r2, [pc, #88]	; (800c8c4 <xTaskRemoveFromEventList+0xb0>)
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4a13      	ldr	r2, [pc, #76]	; (800c8c8 <xTaskRemoveFromEventList+0xb4>)
 800c87c:	441a      	add	r2, r3
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3304      	adds	r3, #4
 800c882:	4619      	mov	r1, r3
 800c884:	4610      	mov	r0, r2
 800c886:	f7fe fce0 	bl	800b24a <vListInsertEnd>
 800c88a:	e005      	b.n	800c898 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	3318      	adds	r3, #24
 800c890:	4619      	mov	r1, r3
 800c892:	480e      	ldr	r0, [pc, #56]	; (800c8cc <xTaskRemoveFromEventList+0xb8>)
 800c894:	f7fe fcd9 	bl	800b24a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <xTaskRemoveFromEventList+0xbc>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d905      	bls.n	800c8b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8aa:	4b0a      	ldr	r3, [pc, #40]	; (800c8d4 <xTaskRemoveFromEventList+0xc0>)
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	e001      	b.n	800c8b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8b6:	697b      	ldr	r3, [r7, #20]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20000cbc 	.word	0x20000cbc
 800c8c4:	20000c9c 	.word	0x20000c9c
 800c8c8:	200007c4 	.word	0x200007c4
 800c8cc:	20000c54 	.word	0x20000c54
 800c8d0:	200007c0 	.word	0x200007c0
 800c8d4:	20000ca8 	.word	0x20000ca8

0800c8d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8e0:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <vTaskInternalSetTimeOutState+0x24>)
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8e8:	4b05      	ldr	r3, [pc, #20]	; (800c900 <vTaskInternalSetTimeOutState+0x28>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	605a      	str	r2, [r3, #4]
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	20000cac 	.word	0x20000cac
 800c900:	20000c98 	.word	0x20000c98

0800c904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <xTaskCheckForTimeOut+0x24>
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	e7fe      	b.n	800c926 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d109      	bne.n	800c942 <xTaskCheckForTimeOut+0x3e>
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e7fe      	b.n	800c940 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c942:	f000 fe6b 	bl	800d61c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c946:	4b1d      	ldr	r3, [pc, #116]	; (800c9bc <xTaskCheckForTimeOut+0xb8>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d102      	bne.n	800c966 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]
 800c964:	e023      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <xTaskCheckForTimeOut+0xbc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d007      	beq.n	800c982 <xTaskCheckForTimeOut+0x7e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d302      	bcc.n	800c982 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c97c:	2301      	movs	r3, #1
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	e015      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d20b      	bcs.n	800c9a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	1ad2      	subs	r2, r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ff9d 	bl	800c8d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	e004      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f000 fe63 	bl	800d678 <vPortExitCritical>

	return xReturn;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20000c98 	.word	0x20000c98
 800c9c0:	20000cac 	.word	0x20000cac

0800c9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	; (800c9d8 <vTaskMissedYield+0x14>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	20000ca8 	.word	0x20000ca8

0800c9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9e4:	f000 f852 	bl	800ca8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9e8:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <prvIdleTask+0x28>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d9f9      	bls.n	800c9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <prvIdleTask+0x2c>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca00:	e7f0      	b.n	800c9e4 <prvIdleTask+0x8>
 800ca02:	bf00      	nop
 800ca04:	200007c4 	.word	0x200007c4
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca12:	2300      	movs	r3, #0
 800ca14:	607b      	str	r3, [r7, #4]
 800ca16:	e00c      	b.n	800ca32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4a12      	ldr	r2, [pc, #72]	; (800ca6c <prvInitialiseTaskLists+0x60>)
 800ca24:	4413      	add	r3, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fbe2 	bl	800b1f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b37      	cmp	r3, #55	; 0x37
 800ca36:	d9ef      	bls.n	800ca18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca38:	480d      	ldr	r0, [pc, #52]	; (800ca70 <prvInitialiseTaskLists+0x64>)
 800ca3a:	f7fe fbd9 	bl	800b1f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca3e:	480d      	ldr	r0, [pc, #52]	; (800ca74 <prvInitialiseTaskLists+0x68>)
 800ca40:	f7fe fbd6 	bl	800b1f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca44:	480c      	ldr	r0, [pc, #48]	; (800ca78 <prvInitialiseTaskLists+0x6c>)
 800ca46:	f7fe fbd3 	bl	800b1f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca4a:	480c      	ldr	r0, [pc, #48]	; (800ca7c <prvInitialiseTaskLists+0x70>)
 800ca4c:	f7fe fbd0 	bl	800b1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca50:	480b      	ldr	r0, [pc, #44]	; (800ca80 <prvInitialiseTaskLists+0x74>)
 800ca52:	f7fe fbcd 	bl	800b1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <prvInitialiseTaskLists+0x78>)
 800ca58:	4a05      	ldr	r2, [pc, #20]	; (800ca70 <prvInitialiseTaskLists+0x64>)
 800ca5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <prvInitialiseTaskLists+0x7c>)
 800ca5e:	4a05      	ldr	r2, [pc, #20]	; (800ca74 <prvInitialiseTaskLists+0x68>)
 800ca60:	601a      	str	r2, [r3, #0]
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200007c4 	.word	0x200007c4
 800ca70:	20000c24 	.word	0x20000c24
 800ca74:	20000c38 	.word	0x20000c38
 800ca78:	20000c54 	.word	0x20000c54
 800ca7c:	20000c68 	.word	0x20000c68
 800ca80:	20000c80 	.word	0x20000c80
 800ca84:	20000c4c 	.word	0x20000c4c
 800ca88:	20000c50 	.word	0x20000c50

0800ca8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca92:	e019      	b.n	800cac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca94:	f000 fdc2 	bl	800d61c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca98:	4b0f      	ldr	r3, [pc, #60]	; (800cad8 <prvCheckTasksWaitingTermination+0x4c>)
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3304      	adds	r3, #4
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fc2d 	bl	800b304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caaa:	4b0c      	ldr	r3, [pc, #48]	; (800cadc <prvCheckTasksWaitingTermination+0x50>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <prvCheckTasksWaitingTermination+0x50>)
 800cab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cab4:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3b01      	subs	r3, #1
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800cabc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cabe:	f000 fddb 	bl	800d678 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f80e 	bl	800cae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac8:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1e1      	bne.n	800ca94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000c68 	.word	0x20000c68
 800cadc:	20000c94 	.word	0x20000c94
 800cae0:	20000c7c 	.word	0x20000c7c

0800cae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d108      	bne.n	800cb08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 ff6a 	bl	800d9d4 <vPortFree>
				vPortFree( pxTCB );
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 ff67 	bl	800d9d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb06:	e017      	b.n	800cb38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d103      	bne.n	800cb1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 ff5e 	bl	800d9d4 <vPortFree>
	}
 800cb18:	e00e      	b.n	800cb38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d009      	beq.n	800cb38 <prvDeleteTCB+0x54>
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e7fe      	b.n	800cb36 <prvDeleteTCB+0x52>
	}
 800cb38:	bf00      	nop
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb46:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <prvResetNextTaskUnblockTime+0x38>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d104      	bne.n	800cb5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <prvResetNextTaskUnblockTime+0x3c>)
 800cb52:	f04f 32ff 	mov.w	r2, #4294967295
 800cb56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb58:	e008      	b.n	800cb6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <prvResetNextTaskUnblockTime+0x38>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	4a04      	ldr	r2, [pc, #16]	; (800cb7c <prvResetNextTaskUnblockTime+0x3c>)
 800cb6a:	6013      	str	r3, [r2, #0]
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	20000c4c 	.word	0x20000c4c
 800cb7c:	20000cb4 	.word	0x20000cb4

0800cb80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb86:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <xTaskGetSchedulerState+0x34>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d102      	bne.n	800cb94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	e008      	b.n	800cba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb94:	4b08      	ldr	r3, [pc, #32]	; (800cbb8 <xTaskGetSchedulerState+0x38>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d102      	bne.n	800cba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	e001      	b.n	800cba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cba6:	687b      	ldr	r3, [r7, #4]
	}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	20000ca0 	.word	0x20000ca0
 800cbb8:	20000cbc 	.word	0x20000cbc

0800cbbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d054      	beq.n	800cc7c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbd2:	4b2d      	ldr	r3, [pc, #180]	; (800cc88 <xTaskPriorityDisinherit+0xcc>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d009      	beq.n	800cbf0 <xTaskPriorityDisinherit+0x34>
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e7fe      	b.n	800cbee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d109      	bne.n	800cc0c <xTaskPriorityDisinherit+0x50>
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60bb      	str	r3, [r7, #8]
 800cc0a:	e7fe      	b.n	800cc0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc10:	1e5a      	subs	r2, r3, #1
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d02c      	beq.n	800cc7c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d128      	bne.n	800cc7c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fb68 	bl	800b304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4c:	4b0f      	ldr	r3, [pc, #60]	; (800cc8c <xTaskPriorityDisinherit+0xd0>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d903      	bls.n	800cc5c <xTaskPriorityDisinherit+0xa0>
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	4a0c      	ldr	r2, [pc, #48]	; (800cc8c <xTaskPriorityDisinherit+0xd0>)
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc60:	4613      	mov	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4a09      	ldr	r2, [pc, #36]	; (800cc90 <xTaskPriorityDisinherit+0xd4>)
 800cc6a:	441a      	add	r2, r3
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	3304      	adds	r3, #4
 800cc70:	4619      	mov	r1, r3
 800cc72:	4610      	mov	r0, r2
 800cc74:	f7fe fae9 	bl	800b24a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc7c:	697b      	ldr	r3, [r7, #20]
	}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200007c0 	.word	0x200007c0
 800cc8c:	20000c9c 	.word	0x20000c9c
 800cc90:	200007c4 	.word	0x200007c4

0800cc94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc9e:	4b21      	ldr	r3, [pc, #132]	; (800cd24 <prvAddCurrentTaskToDelayedList+0x90>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cca4:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fe fb2a 	bl	800b304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d10a      	bne.n	800ccce <prvAddCurrentTaskToDelayedList+0x3a>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d007      	beq.n	800ccce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccbe:	4b1a      	ldr	r3, [pc, #104]	; (800cd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	4819      	ldr	r0, [pc, #100]	; (800cd2c <prvAddCurrentTaskToDelayedList+0x98>)
 800ccc8:	f7fe fabf 	bl	800b24a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cccc:	e026      	b.n	800cd1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccd6:	4b14      	ldr	r3, [pc, #80]	; (800cd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d209      	bcs.n	800ccfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cce6:	4b12      	ldr	r3, [pc, #72]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7fe facd 	bl	800b292 <vListInsert>
}
 800ccf8:	e010      	b.n	800cd1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccfa:	4b0e      	ldr	r3, [pc, #56]	; (800cd34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3304      	adds	r3, #4
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	f7fe fac3 	bl	800b292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd0c:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d202      	bcs.n	800cd1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd16:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	6013      	str	r3, [r2, #0]
}
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20000c98 	.word	0x20000c98
 800cd28:	200007c0 	.word	0x200007c0
 800cd2c:	20000c80 	.word	0x20000c80
 800cd30:	20000c50 	.word	0x20000c50
 800cd34:	20000c4c 	.word	0x20000c4c
 800cd38:	20000cb4 	.word	0x20000cb4

0800cd3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd46:	f000 faff 	bl	800d348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd4a:	4b1c      	ldr	r3, [pc, #112]	; (800cdbc <xTimerCreateTimerTask+0x80>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d021      	beq.n	800cd96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd5a:	1d3a      	adds	r2, r7, #4
 800cd5c:	f107 0108 	add.w	r1, r7, #8
 800cd60:	f107 030c 	add.w	r3, r7, #12
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe fa29 	bl	800b1bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	9202      	str	r2, [sp, #8]
 800cd72:	9301      	str	r3, [sp, #4]
 800cd74:	2302      	movs	r3, #2
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	460a      	mov	r2, r1
 800cd7c:	4910      	ldr	r1, [pc, #64]	; (800cdc0 <xTimerCreateTimerTask+0x84>)
 800cd7e:	4811      	ldr	r0, [pc, #68]	; (800cdc4 <xTimerCreateTimerTask+0x88>)
 800cd80:	f7ff f87c 	bl	800be7c <xTaskCreateStatic>
 800cd84:	4602      	mov	r2, r0
 800cd86:	4b10      	ldr	r3, [pc, #64]	; (800cdc8 <xTimerCreateTimerTask+0x8c>)
 800cd88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <xTimerCreateTimerTask+0x8c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd92:	2301      	movs	r3, #1
 800cd94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d109      	bne.n	800cdb0 <xTimerCreateTimerTask+0x74>
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	613b      	str	r3, [r7, #16]
 800cdae:	e7fe      	b.n	800cdae <xTimerCreateTimerTask+0x72>
	return xReturn;
 800cdb0:	697b      	ldr	r3, [r7, #20]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000cf0 	.word	0x20000cf0
 800cdc0:	0800f0cc 	.word	0x0800f0cc
 800cdc4:	0800cefd 	.word	0x0800cefd
 800cdc8:	20000cf4 	.word	0x20000cf4

0800cdcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08a      	sub	sp, #40	; 0x28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d109      	bne.n	800cdf8 <xTimerGenericCommand+0x2c>
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	623b      	str	r3, [r7, #32]
 800cdf6:	e7fe      	b.n	800cdf6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cdf8:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <xTimerGenericCommand+0x94>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d02a      	beq.n	800ce56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b05      	cmp	r3, #5
 800ce10:	dc18      	bgt.n	800ce44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce12:	f7ff feb5 	bl	800cb80 <xTaskGetSchedulerState>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d109      	bne.n	800ce30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce1c:	4b10      	ldr	r3, [pc, #64]	; (800ce60 <xTimerGenericCommand+0x94>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	f107 0110 	add.w	r1, r7, #16
 800ce24:	2300      	movs	r3, #0
 800ce26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce28:	f7fe fbd4 	bl	800b5d4 <xQueueGenericSend>
 800ce2c:	6278      	str	r0, [r7, #36]	; 0x24
 800ce2e:	e012      	b.n	800ce56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <xTimerGenericCommand+0x94>)
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	f107 0110 	add.w	r1, r7, #16
 800ce38:	2300      	movs	r3, #0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f7fe fbca 	bl	800b5d4 <xQueueGenericSend>
 800ce40:	6278      	str	r0, [r7, #36]	; 0x24
 800ce42:	e008      	b.n	800ce56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce44:	4b06      	ldr	r3, [pc, #24]	; (800ce60 <xTimerGenericCommand+0x94>)
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	f107 0110 	add.w	r1, r7, #16
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	f7fe fcba 	bl	800b7c8 <xQueueGenericSendFromISR>
 800ce54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3728      	adds	r7, #40	; 0x28
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000cf0 	.word	0x20000cf0

0800ce64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6e:	4b22      	ldr	r3, [pc, #136]	; (800cef8 <prvProcessExpiredTimer+0x94>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe fa41 	bl	800b304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d021      	beq.n	800ced4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	699a      	ldr	r2, [r3, #24]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	18d1      	adds	r1, r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	6978      	ldr	r0, [r7, #20]
 800ce9e:	f000 f8d1 	bl	800d044 <prvInsertTimerInActiveList>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01e      	beq.n	800cee6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cea8:	2300      	movs	r3, #0
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	2300      	movs	r3, #0
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	6978      	ldr	r0, [r7, #20]
 800ceb4:	f7ff ff8a 	bl	800cdcc <xTimerGenericCommand>
 800ceb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d112      	bne.n	800cee6 <prvProcessExpiredTimer+0x82>
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e7fe      	b.n	800ced2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceda:	f023 0301 	bic.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	6978      	ldr	r0, [r7, #20]
 800ceec:	4798      	blx	r3
}
 800ceee:	bf00      	nop
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000ce8 	.word	0x20000ce8

0800cefc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 f857 	bl	800cfbc <prvGetNextExpireTime>
 800cf0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4619      	mov	r1, r3
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f803 	bl	800cf20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf1a:	f000 f8d5 	bl	800d0c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf1e:	e7f1      	b.n	800cf04 <prvTimerTask+0x8>

0800cf20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf2a:	f7ff fa57 	bl	800c3dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf2e:	f107 0308 	add.w	r3, r7, #8
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 f866 	bl	800d004 <prvSampleTimeNow>
 800cf38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d130      	bne.n	800cfa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10a      	bne.n	800cf5c <prvProcessTimerOrBlockTask+0x3c>
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d806      	bhi.n	800cf5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf4e:	f7ff fa53 	bl	800c3f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf52:	68f9      	ldr	r1, [r7, #12]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff ff85 	bl	800ce64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf5a:	e024      	b.n	800cfa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d008      	beq.n	800cf74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf62:	4b13      	ldr	r3, [pc, #76]	; (800cfb0 <prvProcessTimerOrBlockTask+0x90>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <prvProcessTimerOrBlockTask+0x50>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e000      	b.n	800cf72 <prvProcessTimerOrBlockTask+0x52>
 800cf70:	2300      	movs	r3, #0
 800cf72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf74:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <prvProcessTimerOrBlockTask+0x94>)
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7fe ff47 	bl	800be14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf86:	f7ff fa37 	bl	800c3f8 <xTaskResumeAll>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10a      	bne.n	800cfa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf90:	4b09      	ldr	r3, [pc, #36]	; (800cfb8 <prvProcessTimerOrBlockTask+0x98>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
}
 800cfa0:	e001      	b.n	800cfa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfa2:	f7ff fa29 	bl	800c3f8 <xTaskResumeAll>
}
 800cfa6:	bf00      	nop
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	20000cec 	.word	0x20000cec
 800cfb4:	20000cf0 	.word	0x20000cf0
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfc4:	4b0e      	ldr	r3, [pc, #56]	; (800d000 <prvGetNextExpireTime+0x44>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <prvGetNextExpireTime+0x16>
 800cfce:	2201      	movs	r2, #1
 800cfd0:	e000      	b.n	800cfd4 <prvGetNextExpireTime+0x18>
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d105      	bne.n	800cfec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <prvGetNextExpireTime+0x44>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	60fb      	str	r3, [r7, #12]
 800cfea:	e001      	b.n	800cff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cff0:	68fb      	ldr	r3, [r7, #12]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3714      	adds	r7, #20
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	20000ce8 	.word	0x20000ce8

0800d004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d00c:	f7ff fa90 	bl	800c530 <xTaskGetTickCount>
 800d010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d012:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <prvSampleTimeNow+0x3c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68fa      	ldr	r2, [r7, #12]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d205      	bcs.n	800d028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d01c:	f000 f930 	bl	800d280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	e002      	b.n	800d02e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d02e:	4a04      	ldr	r2, [pc, #16]	; (800d040 <prvSampleTimeNow+0x3c>)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d034:	68fb      	ldr	r3, [r7, #12]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000cf8 	.word	0x20000cf8

0800d044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	429a      	cmp	r2, r3
 800d068:	d812      	bhi.n	800d090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	1ad2      	subs	r2, r2, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	429a      	cmp	r2, r3
 800d076:	d302      	bcc.n	800d07e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d078:	2301      	movs	r3, #1
 800d07a:	617b      	str	r3, [r7, #20]
 800d07c:	e01b      	b.n	800d0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d07e:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <prvInsertTimerInActiveList+0x7c>)
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3304      	adds	r3, #4
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f7fe f902 	bl	800b292 <vListInsert>
 800d08e:	e012      	b.n	800d0b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d206      	bcs.n	800d0a6 <prvInsertTimerInActiveList+0x62>
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d302      	bcc.n	800d0a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e007      	b.n	800d0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0a6:	4b07      	ldr	r3, [pc, #28]	; (800d0c4 <prvInsertTimerInActiveList+0x80>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	f7fe f8ee 	bl	800b292 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0b6:	697b      	ldr	r3, [r7, #20]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	20000cec 	.word	0x20000cec
 800d0c4:	20000ce8 	.word	0x20000ce8

0800d0c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08e      	sub	sp, #56	; 0x38
 800d0cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0ce:	e0c6      	b.n	800d25e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	da17      	bge.n	800d106 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0d6:	1d3b      	adds	r3, r7, #4
 800d0d8:	3304      	adds	r3, #4
 800d0da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d109      	bne.n	800d0f6 <prvProcessReceivedCommands+0x2e>
 800d0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	61fb      	str	r3, [r7, #28]
 800d0f4:	e7fe      	b.n	800d0f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0fc:	6850      	ldr	r0, [r2, #4]
 800d0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d100:	6892      	ldr	r2, [r2, #8]
 800d102:	4611      	mov	r1, r2
 800d104:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f2c0 80a7 	blt.w	800d25c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d004      	beq.n	800d124 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	3304      	adds	r3, #4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe f8f0 	bl	800b304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d124:	463b      	mov	r3, r7
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff ff6c 	bl	800d004 <prvSampleTimeNow>
 800d12c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b09      	cmp	r3, #9
 800d132:	f200 8094 	bhi.w	800d25e <prvProcessReceivedCommands+0x196>
 800d136:	a201      	add	r2, pc, #4	; (adr r2, 800d13c <prvProcessReceivedCommands+0x74>)
 800d138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13c:	0800d165 	.word	0x0800d165
 800d140:	0800d165 	.word	0x0800d165
 800d144:	0800d165 	.word	0x0800d165
 800d148:	0800d1d7 	.word	0x0800d1d7
 800d14c:	0800d1eb 	.word	0x0800d1eb
 800d150:	0800d233 	.word	0x0800d233
 800d154:	0800d165 	.word	0x0800d165
 800d158:	0800d165 	.word	0x0800d165
 800d15c:	0800d1d7 	.word	0x0800d1d7
 800d160:	0800d1eb 	.word	0x0800d1eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16a:	f043 0301 	orr.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	18d1      	adds	r1, r2, r3
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d184:	f7ff ff5e 	bl	800d044 <prvInsertTimerInActiveList>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d067      	beq.n	800d25e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d194:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d19c:	f003 0304 	and.w	r3, r3, #4
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d05c      	beq.n	800d25e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	441a      	add	r2, r3
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b6:	f7ff fe09 	bl	800cdcc <xTimerGenericCommand>
 800d1ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d14d      	bne.n	800d25e <prvProcessReceivedCommands+0x196>
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	61bb      	str	r3, [r7, #24]
 800d1d4:	e7fe      	b.n	800d1d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1dc:	f023 0301 	bic.w	r3, r3, #1
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1e8:	e039      	b.n	800d25e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1f0:	f043 0301 	orr.w	r3, r3, #1
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d109      	bne.n	800d21e <prvProcessReceivedCommands+0x156>
 800d20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e7fe      	b.n	800d21c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	18d1      	adds	r1, r2, r3
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22c:	f7ff ff0a 	bl	800d044 <prvInsertTimerInActiveList>
					break;
 800d230:	e015      	b.n	800d25e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d242:	f000 fbc7 	bl	800d9d4 <vPortFree>
 800d246:	e00a      	b.n	800d25e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d24e:	f023 0301 	bic.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d25a:	e000      	b.n	800d25e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d25c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d25e:	4b07      	ldr	r3, [pc, #28]	; (800d27c <prvProcessReceivedCommands+0x1b4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	1d39      	adds	r1, r7, #4
 800d264:	2200      	movs	r2, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe fb42 	bl	800b8f0 <xQueueReceive>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f47f af2e 	bne.w	800d0d0 <prvProcessReceivedCommands+0x8>
	}
}
 800d274:	bf00      	nop
 800d276:	3730      	adds	r7, #48	; 0x30
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20000cf0 	.word	0x20000cf0

0800d280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d286:	e047      	b.n	800d318 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d288:	4b2d      	ldr	r3, [pc, #180]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d292:	4b2b      	ldr	r3, [pc, #172]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fe f82f 	bl	800b304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2b4:	f003 0304 	and.w	r3, r3, #4
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d02d      	beq.n	800d318 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d90e      	bls.n	800d2ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2da:	4b19      	ldr	r3, [pc, #100]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	f7fd ffd4 	bl	800b292 <vListInsert>
 800d2ea:	e015      	b.n	800d318 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7ff fd68 	bl	800cdcc <xTimerGenericCommand>
 800d2fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d109      	bne.n	800d318 <prvSwitchTimerLists+0x98>
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	603b      	str	r3, [r7, #0]
 800d316:	e7fe      	b.n	800d316 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d318:	4b09      	ldr	r3, [pc, #36]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1b2      	bne.n	800d288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d322:	4b07      	ldr	r3, [pc, #28]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d328:	4b06      	ldr	r3, [pc, #24]	; (800d344 <prvSwitchTimerLists+0xc4>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a04      	ldr	r2, [pc, #16]	; (800d340 <prvSwitchTimerLists+0xc0>)
 800d32e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d330:	4a04      	ldr	r2, [pc, #16]	; (800d344 <prvSwitchTimerLists+0xc4>)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	6013      	str	r3, [r2, #0]
}
 800d336:	bf00      	nop
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20000ce8 	.word	0x20000ce8
 800d344:	20000cec 	.word	0x20000cec

0800d348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d34e:	f000 f965 	bl	800d61c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d352:	4b15      	ldr	r3, [pc, #84]	; (800d3a8 <prvCheckForValidListAndQueue+0x60>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d120      	bne.n	800d39c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d35a:	4814      	ldr	r0, [pc, #80]	; (800d3ac <prvCheckForValidListAndQueue+0x64>)
 800d35c:	f7fd ff48 	bl	800b1f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d360:	4813      	ldr	r0, [pc, #76]	; (800d3b0 <prvCheckForValidListAndQueue+0x68>)
 800d362:	f7fd ff45 	bl	800b1f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d366:	4b13      	ldr	r3, [pc, #76]	; (800d3b4 <prvCheckForValidListAndQueue+0x6c>)
 800d368:	4a10      	ldr	r2, [pc, #64]	; (800d3ac <prvCheckForValidListAndQueue+0x64>)
 800d36a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d36c:	4b12      	ldr	r3, [pc, #72]	; (800d3b8 <prvCheckForValidListAndQueue+0x70>)
 800d36e:	4a10      	ldr	r2, [pc, #64]	; (800d3b0 <prvCheckForValidListAndQueue+0x68>)
 800d370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d372:	2300      	movs	r3, #0
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	4b11      	ldr	r3, [pc, #68]	; (800d3bc <prvCheckForValidListAndQueue+0x74>)
 800d378:	4a11      	ldr	r2, [pc, #68]	; (800d3c0 <prvCheckForValidListAndQueue+0x78>)
 800d37a:	2110      	movs	r1, #16
 800d37c:	200a      	movs	r0, #10
 800d37e:	f7fe f853 	bl	800b428 <xQueueGenericCreateStatic>
 800d382:	4602      	mov	r2, r0
 800d384:	4b08      	ldr	r3, [pc, #32]	; (800d3a8 <prvCheckForValidListAndQueue+0x60>)
 800d386:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d388:	4b07      	ldr	r3, [pc, #28]	; (800d3a8 <prvCheckForValidListAndQueue+0x60>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d005      	beq.n	800d39c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d390:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <prvCheckForValidListAndQueue+0x60>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	490b      	ldr	r1, [pc, #44]	; (800d3c4 <prvCheckForValidListAndQueue+0x7c>)
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fd14 	bl	800bdc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d39c:	f000 f96c 	bl	800d678 <vPortExitCritical>
}
 800d3a0:	bf00      	nop
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000cf0 	.word	0x20000cf0
 800d3ac:	20000cc0 	.word	0x20000cc0
 800d3b0:	20000cd4 	.word	0x20000cd4
 800d3b4:	20000ce8 	.word	0x20000ce8
 800d3b8:	20000cec 	.word	0x20000cec
 800d3bc:	20000d9c 	.word	0x20000d9c
 800d3c0:	20000cfc 	.word	0x20000cfc
 800d3c4:	0800f0d4 	.word	0x0800f0d4

0800d3c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3b04      	subs	r3, #4
 800d3d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3b04      	subs	r3, #4
 800d3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	f023 0201 	bic.w	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3b04      	subs	r3, #4
 800d3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3f8:	4a0c      	ldr	r2, [pc, #48]	; (800d42c <pxPortInitialiseStack+0x64>)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3b14      	subs	r3, #20
 800d402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3b04      	subs	r3, #4
 800d40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f06f 0202 	mvn.w	r2, #2
 800d416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	3b20      	subs	r3, #32
 800d41c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	0800d431 	.word	0x0800d431

0800d430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d43a:	4b11      	ldr	r3, [pc, #68]	; (800d480 <prvTaskExitError+0x50>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d442:	d009      	beq.n	800d458 <prvTaskExitError+0x28>
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	e7fe      	b.n	800d456 <prvTaskExitError+0x26>
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d46a:	bf00      	nop
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0fc      	beq.n	800d46c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	20000034 	.word	0x20000034
	...

0800d490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d490:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <pxCurrentTCBConst2>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6808      	ldr	r0, [r1, #0]
 800d496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	f380 8809 	msr	PSP, r0
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8811 	msr	BASEPRI, r0
 800d4aa:	4770      	bx	lr
 800d4ac:	f3af 8000 	nop.w

0800d4b0 <pxCurrentTCBConst2>:
 800d4b0:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop

0800d4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4b8:	4808      	ldr	r0, [pc, #32]	; (800d4dc <prvPortStartFirstTask+0x24>)
 800d4ba:	6800      	ldr	r0, [r0, #0]
 800d4bc:	6800      	ldr	r0, [r0, #0]
 800d4be:	f380 8808 	msr	MSP, r0
 800d4c2:	f04f 0000 	mov.w	r0, #0
 800d4c6:	f380 8814 	msr	CONTROL, r0
 800d4ca:	b662      	cpsie	i
 800d4cc:	b661      	cpsie	f
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	df00      	svc	0
 800d4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4da:	bf00      	nop
 800d4dc:	e000ed08 	.word	0xe000ed08

0800d4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4e6:	4b44      	ldr	r3, [pc, #272]	; (800d5f8 <xPortStartScheduler+0x118>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a44      	ldr	r2, [pc, #272]	; (800d5fc <xPortStartScheduler+0x11c>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d109      	bne.n	800d504 <xPortStartScheduler+0x24>
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	613b      	str	r3, [r7, #16]
 800d502:	e7fe      	b.n	800d502 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d504:	4b3c      	ldr	r3, [pc, #240]	; (800d5f8 <xPortStartScheduler+0x118>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a3d      	ldr	r2, [pc, #244]	; (800d600 <xPortStartScheduler+0x120>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d109      	bne.n	800d522 <xPortStartScheduler+0x42>
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	e7fe      	b.n	800d520 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d522:	4b38      	ldr	r3, [pc, #224]	; (800d604 <xPortStartScheduler+0x124>)
 800d524:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	22ff      	movs	r2, #255	; 0xff
 800d532:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d53c:	78fb      	ldrb	r3, [r7, #3]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d544:	b2da      	uxtb	r2, r3
 800d546:	4b30      	ldr	r3, [pc, #192]	; (800d608 <xPortStartScheduler+0x128>)
 800d548:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d54a:	4b30      	ldr	r3, [pc, #192]	; (800d60c <xPortStartScheduler+0x12c>)
 800d54c:	2207      	movs	r2, #7
 800d54e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d550:	e009      	b.n	800d566 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d552:	4b2e      	ldr	r3, [pc, #184]	; (800d60c <xPortStartScheduler+0x12c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3b01      	subs	r3, #1
 800d558:	4a2c      	ldr	r2, [pc, #176]	; (800d60c <xPortStartScheduler+0x12c>)
 800d55a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d55c:	78fb      	ldrb	r3, [r7, #3]
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	b2db      	uxtb	r3, r3
 800d564:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d566:	78fb      	ldrb	r3, [r7, #3]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56e:	2b80      	cmp	r3, #128	; 0x80
 800d570:	d0ef      	beq.n	800d552 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d572:	4b26      	ldr	r3, [pc, #152]	; (800d60c <xPortStartScheduler+0x12c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f1c3 0307 	rsb	r3, r3, #7
 800d57a:	2b04      	cmp	r3, #4
 800d57c:	d009      	beq.n	800d592 <xPortStartScheduler+0xb2>
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	60bb      	str	r3, [r7, #8]
 800d590:	e7fe      	b.n	800d590 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d592:	4b1e      	ldr	r3, [pc, #120]	; (800d60c <xPortStartScheduler+0x12c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	021b      	lsls	r3, r3, #8
 800d598:	4a1c      	ldr	r2, [pc, #112]	; (800d60c <xPortStartScheduler+0x12c>)
 800d59a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xPortStartScheduler+0x12c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5a4:	4a19      	ldr	r2, [pc, #100]	; (800d60c <xPortStartScheduler+0x12c>)
 800d5a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5b0:	4b17      	ldr	r3, [pc, #92]	; (800d610 <xPortStartScheduler+0x130>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a16      	ldr	r2, [pc, #88]	; (800d610 <xPortStartScheduler+0x130>)
 800d5b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5bc:	4b14      	ldr	r3, [pc, #80]	; (800d610 <xPortStartScheduler+0x130>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a13      	ldr	r2, [pc, #76]	; (800d610 <xPortStartScheduler+0x130>)
 800d5c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5c8:	f000 f8d6 	bl	800d778 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5cc:	4b11      	ldr	r3, [pc, #68]	; (800d614 <xPortStartScheduler+0x134>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5d2:	f000 f8f5 	bl	800d7c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5d6:	4b10      	ldr	r3, [pc, #64]	; (800d618 <xPortStartScheduler+0x138>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a0f      	ldr	r2, [pc, #60]	; (800d618 <xPortStartScheduler+0x138>)
 800d5dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5e2:	f7ff ff69 	bl	800d4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5e6:	f7ff f86b 	bl	800c6c0 <vTaskSwitchContext>
	prvTaskExitError();
 800d5ea:	f7ff ff21 	bl	800d430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	e000ed00 	.word	0xe000ed00
 800d5fc:	410fc271 	.word	0x410fc271
 800d600:	410fc270 	.word	0x410fc270
 800d604:	e000e400 	.word	0xe000e400
 800d608:	20000dec 	.word	0x20000dec
 800d60c:	20000df0 	.word	0x20000df0
 800d610:	e000ed20 	.word	0xe000ed20
 800d614:	20000034 	.word	0x20000034
 800d618:	e000ef34 	.word	0xe000ef34

0800d61c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d634:	4b0e      	ldr	r3, [pc, #56]	; (800d670 <vPortEnterCritical+0x54>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3301      	adds	r3, #1
 800d63a:	4a0d      	ldr	r2, [pc, #52]	; (800d670 <vPortEnterCritical+0x54>)
 800d63c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <vPortEnterCritical+0x54>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d10e      	bne.n	800d664 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <vPortEnterCritical+0x58>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <vPortEnterCritical+0x48>
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	603b      	str	r3, [r7, #0]
 800d662:	e7fe      	b.n	800d662 <vPortEnterCritical+0x46>
	}
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	20000034 	.word	0x20000034
 800d674:	e000ed04 	.word	0xe000ed04

0800d678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d67e:	4b11      	ldr	r3, [pc, #68]	; (800d6c4 <vPortExitCritical+0x4c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d109      	bne.n	800d69a <vPortExitCritical+0x22>
 800d686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	607b      	str	r3, [r7, #4]
 800d698:	e7fe      	b.n	800d698 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d69a:	4b0a      	ldr	r3, [pc, #40]	; (800d6c4 <vPortExitCritical+0x4c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	4a08      	ldr	r2, [pc, #32]	; (800d6c4 <vPortExitCritical+0x4c>)
 800d6a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6a4:	4b07      	ldr	r3, [pc, #28]	; (800d6c4 <vPortExitCritical+0x4c>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d104      	bne.n	800d6b6 <vPortExitCritical+0x3e>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6b6:	bf00      	nop
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	20000034 	.word	0x20000034
	...

0800d6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6d0:	f3ef 8009 	mrs	r0, PSP
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	4b15      	ldr	r3, [pc, #84]	; (800d730 <pxCurrentTCBConst>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	f01e 0f10 	tst.w	lr, #16
 800d6e0:	bf08      	it	eq
 800d6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	6010      	str	r0, [r2, #0]
 800d6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6f4:	f380 8811 	msr	BASEPRI, r0
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f7fe ffde 	bl	800c6c0 <vTaskSwitchContext>
 800d704:	f04f 0000 	mov.w	r0, #0
 800d708:	f380 8811 	msr	BASEPRI, r0
 800d70c:	bc09      	pop	{r0, r3}
 800d70e:	6819      	ldr	r1, [r3, #0]
 800d710:	6808      	ldr	r0, [r1, #0]
 800d712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d716:	f01e 0f10 	tst.w	lr, #16
 800d71a:	bf08      	it	eq
 800d71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d720:	f380 8809 	msr	PSP, r0
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w

0800d730 <pxCurrentTCBConst>:
 800d730:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop

0800d738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d750:	f7fe fefe 	bl	800c550 <xTaskIncrementTick>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d003      	beq.n	800d762 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d75a:	4b06      	ldr	r3, [pc, #24]	; (800d774 <SysTick_Handler+0x3c>)
 800d75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	e000ed04 	.word	0xe000ed04

0800d778 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d77c:	4b0b      	ldr	r3, [pc, #44]	; (800d7ac <vPortSetupTimerInterrupt+0x34>)
 800d77e:	2200      	movs	r2, #0
 800d780:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d782:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <vPortSetupTimerInterrupt+0x38>)
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d788:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <vPortSetupTimerInterrupt+0x3c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a0a      	ldr	r2, [pc, #40]	; (800d7b8 <vPortSetupTimerInterrupt+0x40>)
 800d78e:	fba2 2303 	umull	r2, r3, r2, r3
 800d792:	099b      	lsrs	r3, r3, #6
 800d794:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <vPortSetupTimerInterrupt+0x44>)
 800d796:	3b01      	subs	r3, #1
 800d798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d79a:	4b04      	ldr	r3, [pc, #16]	; (800d7ac <vPortSetupTimerInterrupt+0x34>)
 800d79c:	2207      	movs	r2, #7
 800d79e:	601a      	str	r2, [r3, #0]
}
 800d7a0:	bf00      	nop
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	e000e010 	.word	0xe000e010
 800d7b0:	e000e018 	.word	0xe000e018
 800d7b4:	20000008 	.word	0x20000008
 800d7b8:	10624dd3 	.word	0x10624dd3
 800d7bc:	e000e014 	.word	0xe000e014

0800d7c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7d0 <vPortEnableVFP+0x10>
 800d7c4:	6801      	ldr	r1, [r0, #0]
 800d7c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7ca:	6001      	str	r1, [r0, #0]
 800d7cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7ce:	bf00      	nop
 800d7d0:	e000ed88 	.word	0xe000ed88

0800d7d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7da:	f3ef 8305 	mrs	r3, IPSR
 800d7de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2b0f      	cmp	r3, #15
 800d7e4:	d913      	bls.n	800d80e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d7e6:	4a16      	ldr	r2, [pc, #88]	; (800d840 <vPortValidateInterruptPriority+0x6c>)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d7f0:	4b14      	ldr	r3, [pc, #80]	; (800d844 <vPortValidateInterruptPriority+0x70>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	7afa      	ldrb	r2, [r7, #11]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d209      	bcs.n	800d80e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	607b      	str	r3, [r7, #4]
 800d80c:	e7fe      	b.n	800d80c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d80e:	4b0e      	ldr	r3, [pc, #56]	; (800d848 <vPortValidateInterruptPriority+0x74>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d816:	4b0d      	ldr	r3, [pc, #52]	; (800d84c <vPortValidateInterruptPriority+0x78>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d909      	bls.n	800d832 <vPortValidateInterruptPriority+0x5e>
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	603b      	str	r3, [r7, #0]
 800d830:	e7fe      	b.n	800d830 <vPortValidateInterruptPriority+0x5c>
	}
 800d832:	bf00      	nop
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	e000e3f0 	.word	0xe000e3f0
 800d844:	20000dec 	.word	0x20000dec
 800d848:	e000ed0c 	.word	0xe000ed0c
 800d84c:	20000df0 	.word	0x20000df0

0800d850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d858:	2300      	movs	r3, #0
 800d85a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d85c:	f7fe fdbe 	bl	800c3dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d860:	4b57      	ldr	r3, [pc, #348]	; (800d9c0 <pvPortMalloc+0x170>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d868:	f000 f90c 	bl	800da84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d86c:	4b55      	ldr	r3, [pc, #340]	; (800d9c4 <pvPortMalloc+0x174>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	f040 808c 	bne.w	800d992 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01c      	beq.n	800d8ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d880:	2208      	movs	r2, #8
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4413      	add	r3, r2
 800d886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f003 0307 	and.w	r3, r3, #7
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d013      	beq.n	800d8ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f023 0307 	bic.w	r3, r3, #7
 800d898:	3308      	adds	r3, #8
 800d89a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f003 0307 	and.w	r3, r3, #7
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d009      	beq.n	800d8ba <pvPortMalloc+0x6a>
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	617b      	str	r3, [r7, #20]
 800d8b8:	e7fe      	b.n	800d8b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d068      	beq.n	800d992 <pvPortMalloc+0x142>
 800d8c0:	4b41      	ldr	r3, [pc, #260]	; (800d9c8 <pvPortMalloc+0x178>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d863      	bhi.n	800d992 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8ca:	4b40      	ldr	r3, [pc, #256]	; (800d9cc <pvPortMalloc+0x17c>)
 800d8cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8ce:	4b3f      	ldr	r3, [pc, #252]	; (800d9cc <pvPortMalloc+0x17c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8d4:	e004      	b.n	800d8e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d903      	bls.n	800d8f2 <pvPortMalloc+0xa2>
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1f1      	bne.n	800d8d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8f2:	4b33      	ldr	r3, [pc, #204]	; (800d9c0 <pvPortMalloc+0x170>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d04a      	beq.n	800d992 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2208      	movs	r2, #8
 800d902:	4413      	add	r3, r2
 800d904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	1ad2      	subs	r2, r2, r3
 800d916:	2308      	movs	r3, #8
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d91e      	bls.n	800d95c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4413      	add	r3, r2
 800d924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	f003 0307 	and.w	r3, r3, #7
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d009      	beq.n	800d944 <pvPortMalloc+0xf4>
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	613b      	str	r3, [r7, #16]
 800d942:	e7fe      	b.n	800d942 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d956:	69b8      	ldr	r0, [r7, #24]
 800d958:	f000 f8f6 	bl	800db48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d95c:	4b1a      	ldr	r3, [pc, #104]	; (800d9c8 <pvPortMalloc+0x178>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	4a18      	ldr	r2, [pc, #96]	; (800d9c8 <pvPortMalloc+0x178>)
 800d968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d96a:	4b17      	ldr	r3, [pc, #92]	; (800d9c8 <pvPortMalloc+0x178>)
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	4b18      	ldr	r3, [pc, #96]	; (800d9d0 <pvPortMalloc+0x180>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	429a      	cmp	r2, r3
 800d974:	d203      	bcs.n	800d97e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d976:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <pvPortMalloc+0x178>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a15      	ldr	r2, [pc, #84]	; (800d9d0 <pvPortMalloc+0x180>)
 800d97c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	4b10      	ldr	r3, [pc, #64]	; (800d9c4 <pvPortMalloc+0x174>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	431a      	orrs	r2, r3
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	2200      	movs	r2, #0
 800d990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d992:	f7fe fd31 	bl	800c3f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	f003 0307 	and.w	r3, r3, #7
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d009      	beq.n	800d9b4 <pvPortMalloc+0x164>
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	e7fe      	b.n	800d9b2 <pvPortMalloc+0x162>
	return pvReturn;
 800d9b4:	69fb      	ldr	r3, [r7, #28]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3728      	adds	r7, #40	; 0x28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	200049fc 	.word	0x200049fc
 800d9c4:	20004a08 	.word	0x20004a08
 800d9c8:	20004a00 	.word	0x20004a00
 800d9cc:	200049f4 	.word	0x200049f4
 800d9d0:	20004a04 	.word	0x20004a04

0800d9d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d046      	beq.n	800da74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9e6:	2308      	movs	r3, #8
 800d9e8:	425b      	negs	r3, r3
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	685a      	ldr	r2, [r3, #4]
 800d9f8:	4b20      	ldr	r3, [pc, #128]	; (800da7c <vPortFree+0xa8>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d109      	bne.n	800da16 <vPortFree+0x42>
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	e7fe      	b.n	800da14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d009      	beq.n	800da32 <vPortFree+0x5e>
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	60bb      	str	r3, [r7, #8]
 800da30:	e7fe      	b.n	800da30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	4b11      	ldr	r3, [pc, #68]	; (800da7c <vPortFree+0xa8>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d019      	beq.n	800da74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d115      	bne.n	800da74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	4b0b      	ldr	r3, [pc, #44]	; (800da7c <vPortFree+0xa8>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	43db      	mvns	r3, r3
 800da52:	401a      	ands	r2, r3
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da58:	f7fe fcc0 	bl	800c3dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	4b07      	ldr	r3, [pc, #28]	; (800da80 <vPortFree+0xac>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4413      	add	r3, r2
 800da66:	4a06      	ldr	r2, [pc, #24]	; (800da80 <vPortFree+0xac>)
 800da68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f000 f86c 	bl	800db48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800da70:	f7fe fcc2 	bl	800c3f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da74:	bf00      	nop
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20004a08 	.word	0x20004a08
 800da80:	20004a00 	.word	0x20004a00

0800da84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800da8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da90:	4b27      	ldr	r3, [pc, #156]	; (800db30 <prvHeapInit+0xac>)
 800da92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00c      	beq.n	800dab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3307      	adds	r3, #7
 800daa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f023 0307 	bic.w	r3, r3, #7
 800daaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	4a1f      	ldr	r2, [pc, #124]	; (800db30 <prvHeapInit+0xac>)
 800dab4:	4413      	add	r3, r2
 800dab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dabc:	4a1d      	ldr	r2, [pc, #116]	; (800db34 <prvHeapInit+0xb0>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dac2:	4b1c      	ldr	r3, [pc, #112]	; (800db34 <prvHeapInit+0xb0>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	4413      	add	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dad0:	2208      	movs	r2, #8
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	1a9b      	subs	r3, r3, r2
 800dad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0307 	bic.w	r3, r3, #7
 800dade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	4a15      	ldr	r2, [pc, #84]	; (800db38 <prvHeapInit+0xb4>)
 800dae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dae6:	4b14      	ldr	r3, [pc, #80]	; (800db38 <prvHeapInit+0xb4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2200      	movs	r2, #0
 800daec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daee:	4b12      	ldr	r3, [pc, #72]	; (800db38 <prvHeapInit+0xb4>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	1ad2      	subs	r2, r2, r3
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db04:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <prvHeapInit+0xb4>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4a0a      	ldr	r2, [pc, #40]	; (800db3c <prvHeapInit+0xb8>)
 800db12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	4a09      	ldr	r2, [pc, #36]	; (800db40 <prvHeapInit+0xbc>)
 800db1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db1c:	4b09      	ldr	r3, [pc, #36]	; (800db44 <prvHeapInit+0xc0>)
 800db1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db22:	601a      	str	r2, [r3, #0]
}
 800db24:	bf00      	nop
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	20000df4 	.word	0x20000df4
 800db34:	200049f4 	.word	0x200049f4
 800db38:	200049fc 	.word	0x200049fc
 800db3c:	20004a04 	.word	0x20004a04
 800db40:	20004a00 	.word	0x20004a00
 800db44:	20004a08 	.word	0x20004a08

0800db48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db50:	4b28      	ldr	r3, [pc, #160]	; (800dbf4 <prvInsertBlockIntoFreeList+0xac>)
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	e002      	b.n	800db5c <prvInsertBlockIntoFreeList+0x14>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d8f7      	bhi.n	800db56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	4413      	add	r3, r2
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d108      	bne.n	800db8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	441a      	add	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68ba      	ldr	r2, [r7, #8]
 800db94:	441a      	add	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d118      	bne.n	800dbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	4b15      	ldr	r3, [pc, #84]	; (800dbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d00d      	beq.n	800dbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	441a      	add	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	e008      	b.n	800dbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e003      	b.n	800dbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d002      	beq.n	800dbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbe6:	bf00      	nop
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	200049f4 	.word	0x200049f4
 800dbf8:	200049fc 	.word	0x200049fc

0800dbfc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dc00:	2201      	movs	r2, #1
 800dc02:	490e      	ldr	r1, [pc, #56]	; (800dc3c <MX_USB_HOST_Init+0x40>)
 800dc04:	480e      	ldr	r0, [pc, #56]	; (800dc40 <MX_USB_HOST_Init+0x44>)
 800dc06:	f7fb fa83 	bl	8009110 <USBH_Init>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dc10:	f7f3 f9e2 	bl	8000fd8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800dc14:	490b      	ldr	r1, [pc, #44]	; (800dc44 <MX_USB_HOST_Init+0x48>)
 800dc16:	480a      	ldr	r0, [pc, #40]	; (800dc40 <MX_USB_HOST_Init+0x44>)
 800dc18:	f7fb fb2a 	bl	8009270 <USBH_RegisterClass>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d001      	beq.n	800dc26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dc22:	f7f3 f9d9 	bl	8000fd8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dc26:	4806      	ldr	r0, [pc, #24]	; (800dc40 <MX_USB_HOST_Init+0x44>)
 800dc28:	f7fb fbae 	bl	8009388 <USBH_Start>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dc32:	f7f3 f9d1 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dc36:	bf00      	nop
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0800dc49 	.word	0x0800dc49
 800dc40:	20004ce0 	.word	0x20004ce0
 800dc44:	20000014 	.word	0x20000014

0800dc48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	460b      	mov	r3, r1
 800dc52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dc54:	78fb      	ldrb	r3, [r7, #3]
 800dc56:	3b01      	subs	r3, #1
 800dc58:	2b04      	cmp	r3, #4
 800dc5a:	d819      	bhi.n	800dc90 <USBH_UserProcess+0x48>
 800dc5c:	a201      	add	r2, pc, #4	; (adr r2, 800dc64 <USBH_UserProcess+0x1c>)
 800dc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc62:	bf00      	nop
 800dc64:	0800dc91 	.word	0x0800dc91
 800dc68:	0800dc81 	.word	0x0800dc81
 800dc6c:	0800dc91 	.word	0x0800dc91
 800dc70:	0800dc89 	.word	0x0800dc89
 800dc74:	0800dc79 	.word	0x0800dc79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dc78:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <USBH_UserProcess+0x58>)
 800dc7a:	2203      	movs	r2, #3
 800dc7c:	701a      	strb	r2, [r3, #0]
  break;
 800dc7e:	e008      	b.n	800dc92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dc80:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <USBH_UserProcess+0x58>)
 800dc82:	2202      	movs	r2, #2
 800dc84:	701a      	strb	r2, [r3, #0]
  break;
 800dc86:	e004      	b.n	800dc92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dc88:	4b05      	ldr	r3, [pc, #20]	; (800dca0 <USBH_UserProcess+0x58>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	701a      	strb	r2, [r3, #0]
  break;
 800dc8e:	e000      	b.n	800dc92 <USBH_UserProcess+0x4a>

  default:
  break;
 800dc90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc92:	bf00      	nop
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	20004a0c 	.word	0x20004a0c

0800dca4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08a      	sub	sp, #40	; 0x28
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcac:	f107 0314 	add.w	r3, r7, #20
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	605a      	str	r2, [r3, #4]
 800dcb6:	609a      	str	r2, [r3, #8]
 800dcb8:	60da      	str	r2, [r3, #12]
 800dcba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcc4:	d147      	bne.n	800dd56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	613b      	str	r3, [r7, #16]
 800dcca:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcce:	4a24      	ldr	r2, [pc, #144]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dcd0:	f043 0301 	orr.w	r3, r3, #1
 800dcd4:	6313      	str	r3, [r2, #48]	; 0x30
 800dcd6:	4b22      	ldr	r3, [pc, #136]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	613b      	str	r3, [r7, #16]
 800dce0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800dce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dce8:	2300      	movs	r3, #0
 800dcea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcec:	2300      	movs	r3, #0
 800dcee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800dcf0:	f107 0314 	add.w	r3, r7, #20
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	481b      	ldr	r0, [pc, #108]	; (800dd64 <HAL_HCD_MspInit+0xc0>)
 800dcf8:	f7f4 f898 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800dcfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dd00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd02:	2302      	movs	r3, #2
 800dd04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd0e:	230a      	movs	r3, #10
 800dd10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd12:	f107 0314 	add.w	r3, r7, #20
 800dd16:	4619      	mov	r1, r3
 800dd18:	4812      	ldr	r0, [pc, #72]	; (800dd64 <HAL_HCD_MspInit+0xc0>)
 800dd1a:	f7f4 f887 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd1e:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd22:	4a0f      	ldr	r2, [pc, #60]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dd24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd28:	6353      	str	r3, [r2, #52]	; 0x34
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd32:	4a0b      	ldr	r2, [pc, #44]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dd34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd38:	6453      	str	r3, [r2, #68]	; 0x44
 800dd3a:	4b09      	ldr	r3, [pc, #36]	; (800dd60 <HAL_HCD_MspInit+0xbc>)
 800dd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dd46:	2200      	movs	r2, #0
 800dd48:	2100      	movs	r1, #0
 800dd4a:	2043      	movs	r0, #67	; 0x43
 800dd4c:	f7f3 fef0 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd50:	2043      	movs	r0, #67	; 0x43
 800dd52:	f7f3 ff09 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd56:	bf00      	nop
 800dd58:	3728      	adds	r7, #40	; 0x28
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	40023800 	.word	0x40023800
 800dd64:	40020000 	.word	0x40020000

0800dd68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fb ffb3 	bl	8009ce2 <USBH_LL_IncTimer>
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fb fff7 	bl	8009d86 <USBH_LL_Connect>
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fc f80c 	bl	8009dcc <USBH_LL_Disconnect>
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70fb      	strb	r3, [r7, #3]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fc f843 	bl	8009e5e <USBH_LL_NotifyURBChange>
#endif
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fb ffa1 	bl	8009d36 <USBH_LL_PortEnabled>
}
 800ddf4:	bf00      	nop
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fb ffad 	bl	8009d6a <USBH_LL_PortDisabled>
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800de26:	2b01      	cmp	r3, #1
 800de28:	d12a      	bne.n	800de80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800de2a:	4a18      	ldr	r2, [pc, #96]	; (800de8c <USBH_LL_Init+0x74>)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a15      	ldr	r2, [pc, #84]	; (800de8c <USBH_LL_Init+0x74>)
 800de36:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de3a:	4b14      	ldr	r3, [pc, #80]	; (800de8c <USBH_LL_Init+0x74>)
 800de3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800de42:	4b12      	ldr	r3, [pc, #72]	; (800de8c <USBH_LL_Init+0x74>)
 800de44:	220c      	movs	r2, #12
 800de46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800de48:	4b10      	ldr	r3, [pc, #64]	; (800de8c <USBH_LL_Init+0x74>)
 800de4a:	2201      	movs	r2, #1
 800de4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de4e:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <USBH_LL_Init+0x74>)
 800de50:	2200      	movs	r2, #0
 800de52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800de54:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <USBH_LL_Init+0x74>)
 800de56:	2202      	movs	r2, #2
 800de58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de5a:	4b0c      	ldr	r3, [pc, #48]	; (800de8c <USBH_LL_Init+0x74>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800de60:	480a      	ldr	r0, [pc, #40]	; (800de8c <USBH_LL_Init+0x74>)
 800de62:	f7f4 f98e 	bl	8002182 <HAL_HCD_Init>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800de6c:	f7f3 f8b4 	bl	8000fd8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800de70:	4806      	ldr	r0, [pc, #24]	; (800de8c <USBH_LL_Init+0x74>)
 800de72:	f7f4 fd91 	bl	8002998 <HAL_HCD_GetCurrentFrame>
 800de76:	4603      	mov	r3, r0
 800de78:	4619      	mov	r1, r3
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7fb ff22 	bl	8009cc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	200050c4 	.word	0x200050c4

0800de90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f4 fcfe 	bl	80028a8 <HAL_HCD_Start>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f95c 	bl	800e170 <USBH_Get_USB_Status>
 800deb8:	4603      	mov	r3, r0
 800deba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800debc:	7bbb      	ldrb	r3, [r7, #14]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dedc:	4618      	mov	r0, r3
 800dede:	f7f4 fd06 	bl	80028ee <HAL_HCD_Stop>
 800dee2:	4603      	mov	r3, r0
 800dee4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 f941 	bl	800e170 <USBH_Get_USB_Status>
 800deee:	4603      	mov	r3, r0
 800def0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def2:	7bbb      	ldrb	r3, [r7, #14]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800df04:	2301      	movs	r3, #1
 800df06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df0e:	4618      	mov	r0, r3
 800df10:	f7f4 fd50 	bl	80029b4 <HAL_HCD_GetCurrentSpeed>
 800df14:	4603      	mov	r3, r0
 800df16:	2b01      	cmp	r3, #1
 800df18:	d007      	beq.n	800df2a <USBH_LL_GetSpeed+0x2e>
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d302      	bcc.n	800df24 <USBH_LL_GetSpeed+0x28>
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d006      	beq.n	800df30 <USBH_LL_GetSpeed+0x34>
 800df22:	e008      	b.n	800df36 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]
    break;
 800df28:	e008      	b.n	800df3c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800df2a:	2301      	movs	r3, #1
 800df2c:	73fb      	strb	r3, [r7, #15]
    break;
 800df2e:	e005      	b.n	800df3c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800df30:	2302      	movs	r3, #2
 800df32:	73fb      	strb	r3, [r7, #15]
    break;
 800df34:	e002      	b.n	800df3c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800df36:	2301      	movs	r3, #1
 800df38:	73fb      	strb	r3, [r7, #15]
    break;
 800df3a:	bf00      	nop
  }
  return  speed;
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f4 fce3 	bl	8002928 <HAL_HCD_ResetPort>
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 f901 	bl	800e170 <USBH_Get_USB_Status>
 800df6e:	4603      	mov	r3, r0
 800df70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df72:	7bbb      	ldrb	r3, [r7, #14]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df8e:	78fa      	ldrb	r2, [r7, #3]
 800df90:	4611      	mov	r1, r2
 800df92:	4618      	mov	r0, r3
 800df94:	f7f4 fceb 	bl	800296e <HAL_HCD_HC_GetXferCount>
 800df98:	4603      	mov	r3, r0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dfa2:	b590      	push	{r4, r7, lr}
 800dfa4:	b089      	sub	sp, #36	; 0x24
 800dfa6:	af04      	add	r7, sp, #16
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	4608      	mov	r0, r1
 800dfac:	4611      	mov	r1, r2
 800dfae:	461a      	mov	r2, r3
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	70fb      	strb	r3, [r7, #3]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70bb      	strb	r3, [r7, #2]
 800dfb8:	4613      	mov	r3, r2
 800dfba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dfca:	787c      	ldrb	r4, [r7, #1]
 800dfcc:	78ba      	ldrb	r2, [r7, #2]
 800dfce:	78f9      	ldrb	r1, [r7, #3]
 800dfd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfd2:	9302      	str	r3, [sp, #8]
 800dfd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	f7f4 f930 	bl	8002246 <HAL_HCD_HC_Init>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 f8bf 	bl	800e170 <USBH_Get_USB_Status>
 800dff2:	4603      	mov	r3, r0
 800dff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd90      	pop	{r4, r7, pc}

0800e000 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e01a:	78fa      	ldrb	r2, [r7, #3]
 800e01c:	4611      	mov	r1, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f4 f9a9 	bl	8002376 <HAL_HCD_HC_Halt>
 800e024:	4603      	mov	r3, r0
 800e026:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e028:	7bfb      	ldrb	r3, [r7, #15]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 f8a0 	bl	800e170 <USBH_Get_USB_Status>
 800e030:	4603      	mov	r3, r0
 800e032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e034:	7bbb      	ldrb	r3, [r7, #14]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e03e:	b590      	push	{r4, r7, lr}
 800e040:	b089      	sub	sp, #36	; 0x24
 800e042:	af04      	add	r7, sp, #16
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	4608      	mov	r0, r1
 800e048:	4611      	mov	r1, r2
 800e04a:	461a      	mov	r2, r3
 800e04c:	4603      	mov	r3, r0
 800e04e:	70fb      	strb	r3, [r7, #3]
 800e050:	460b      	mov	r3, r1
 800e052:	70bb      	strb	r3, [r7, #2]
 800e054:	4613      	mov	r3, r2
 800e056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e066:	787c      	ldrb	r4, [r7, #1]
 800e068:	78ba      	ldrb	r2, [r7, #2]
 800e06a:	78f9      	ldrb	r1, [r7, #3]
 800e06c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e070:	9303      	str	r3, [sp, #12]
 800e072:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e074:	9302      	str	r3, [sp, #8]
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	4623      	mov	r3, r4
 800e082:	f7f4 f99b 	bl	80023bc <HAL_HCD_HC_SubmitRequest>
 800e086:	4603      	mov	r3, r0
 800e088:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 f86f 	bl	800e170 <USBH_Get_USB_Status>
 800e092:	4603      	mov	r3, r0
 800e094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e096:	7bbb      	ldrb	r3, [r7, #14]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd90      	pop	{r4, r7, pc}

0800e0a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0b2:	78fa      	ldrb	r2, [r7, #3]
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f4 fc44 	bl	8002944 <HAL_HCD_HC_GetURBState>
 800e0bc:	4603      	mov	r3, r0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b082      	sub	sp, #8
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d103      	bne.n	800e0e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e0dc:	78fb      	ldrb	r3, [r7, #3]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f872 	bl	800e1c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e0e4:	20c8      	movs	r0, #200	; 0xc8
 800e0e6:	f7f3 fc49 	bl	800197c <HAL_Delay>
  return USBH_OK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	70fb      	strb	r3, [r7, #3]
 800e100:	4613      	mov	r3, r2
 800e102:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e10a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e10c:	78fa      	ldrb	r2, [r7, #3]
 800e10e:	68f9      	ldr	r1, [r7, #12]
 800e110:	4613      	mov	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	440b      	add	r3, r1
 800e11a:	333b      	adds	r3, #59	; 0x3b
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e122:	78fa      	ldrb	r2, [r7, #3]
 800e124:	68f9      	ldr	r1, [r7, #12]
 800e126:	4613      	mov	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4413      	add	r3, r2
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	440b      	add	r3, r1
 800e130:	3350      	adds	r3, #80	; 0x50
 800e132:	78ba      	ldrb	r2, [r7, #2]
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	e009      	b.n	800e14c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e138:	78fa      	ldrb	r2, [r7, #3]
 800e13a:	68f9      	ldr	r1, [r7, #12]
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	00db      	lsls	r3, r3, #3
 800e144:	440b      	add	r3, r1
 800e146:	3351      	adds	r3, #81	; 0x51
 800e148:	78ba      	ldrb	r2, [r7, #2]
 800e14a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr

0800e15a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b082      	sub	sp, #8
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7f3 fc0a 	bl	800197c <HAL_Delay>
}
 800e168:	bf00      	nop
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	2b03      	cmp	r3, #3
 800e182:	d817      	bhi.n	800e1b4 <USBH_Get_USB_Status+0x44>
 800e184:	a201      	add	r2, pc, #4	; (adr r2, 800e18c <USBH_Get_USB_Status+0x1c>)
 800e186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18a:	bf00      	nop
 800e18c:	0800e19d 	.word	0x0800e19d
 800e190:	0800e1a3 	.word	0x0800e1a3
 800e194:	0800e1a9 	.word	0x0800e1a9
 800e198:	0800e1af 	.word	0x0800e1af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a0:	e00b      	b.n	800e1ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a6:	e008      	b.n	800e1ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ac:	e005      	b.n	800e1ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b2:	e002      	b.n	800e1ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b8:	bf00      	nop
  }
  return usb_status;
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d102      	bne.n	800e1e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	73fb      	strb	r3, [r7, #15]
 800e1e0:	e001      	b.n	800e1e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1ee:	4803      	ldr	r0, [pc, #12]	; (800e1fc <MX_DriverVbusFS+0x34>)
 800e1f0:	f7f3 ffae 	bl	8002150 <HAL_GPIO_WritePin>
}
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	40021800 	.word	0x40021800

0800e200 <__errno>:
 800e200:	4b01      	ldr	r3, [pc, #4]	; (800e208 <__errno+0x8>)
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	20000038 	.word	0x20000038

0800e20c <__libc_init_array>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	4e0d      	ldr	r6, [pc, #52]	; (800e244 <__libc_init_array+0x38>)
 800e210:	4c0d      	ldr	r4, [pc, #52]	; (800e248 <__libc_init_array+0x3c>)
 800e212:	1ba4      	subs	r4, r4, r6
 800e214:	10a4      	asrs	r4, r4, #2
 800e216:	2500      	movs	r5, #0
 800e218:	42a5      	cmp	r5, r4
 800e21a:	d109      	bne.n	800e230 <__libc_init_array+0x24>
 800e21c:	4e0b      	ldr	r6, [pc, #44]	; (800e24c <__libc_init_array+0x40>)
 800e21e:	4c0c      	ldr	r4, [pc, #48]	; (800e250 <__libc_init_array+0x44>)
 800e220:	f000 ff20 	bl	800f064 <_init>
 800e224:	1ba4      	subs	r4, r4, r6
 800e226:	10a4      	asrs	r4, r4, #2
 800e228:	2500      	movs	r5, #0
 800e22a:	42a5      	cmp	r5, r4
 800e22c:	d105      	bne.n	800e23a <__libc_init_array+0x2e>
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e234:	4798      	blx	r3
 800e236:	3501      	adds	r5, #1
 800e238:	e7ee      	b.n	800e218 <__libc_init_array+0xc>
 800e23a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e23e:	4798      	blx	r3
 800e240:	3501      	adds	r5, #1
 800e242:	e7f2      	b.n	800e22a <__libc_init_array+0x1e>
 800e244:	0800f224 	.word	0x0800f224
 800e248:	0800f224 	.word	0x0800f224
 800e24c:	0800f224 	.word	0x0800f224
 800e250:	0800f228 	.word	0x0800f228

0800e254 <malloc>:
 800e254:	4b02      	ldr	r3, [pc, #8]	; (800e260 <malloc+0xc>)
 800e256:	4601      	mov	r1, r0
 800e258:	6818      	ldr	r0, [r3, #0]
 800e25a:	f000 b86d 	b.w	800e338 <_malloc_r>
 800e25e:	bf00      	nop
 800e260:	20000038 	.word	0x20000038

0800e264 <free>:
 800e264:	4b02      	ldr	r3, [pc, #8]	; (800e270 <free+0xc>)
 800e266:	4601      	mov	r1, r0
 800e268:	6818      	ldr	r0, [r3, #0]
 800e26a:	f000 b817 	b.w	800e29c <_free_r>
 800e26e:	bf00      	nop
 800e270:	20000038 	.word	0x20000038

0800e274 <memcpy>:
 800e274:	b510      	push	{r4, lr}
 800e276:	1e43      	subs	r3, r0, #1
 800e278:	440a      	add	r2, r1
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d100      	bne.n	800e280 <memcpy+0xc>
 800e27e:	bd10      	pop	{r4, pc}
 800e280:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e284:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e288:	e7f7      	b.n	800e27a <memcpy+0x6>

0800e28a <memset>:
 800e28a:	4402      	add	r2, r0
 800e28c:	4603      	mov	r3, r0
 800e28e:	4293      	cmp	r3, r2
 800e290:	d100      	bne.n	800e294 <memset+0xa>
 800e292:	4770      	bx	lr
 800e294:	f803 1b01 	strb.w	r1, [r3], #1
 800e298:	e7f9      	b.n	800e28e <memset+0x4>
	...

0800e29c <_free_r>:
 800e29c:	b538      	push	{r3, r4, r5, lr}
 800e29e:	4605      	mov	r5, r0
 800e2a0:	2900      	cmp	r1, #0
 800e2a2:	d045      	beq.n	800e330 <_free_r+0x94>
 800e2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a8:	1f0c      	subs	r4, r1, #4
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	bfb8      	it	lt
 800e2ae:	18e4      	addlt	r4, r4, r3
 800e2b0:	f000 f98e 	bl	800e5d0 <__malloc_lock>
 800e2b4:	4a1f      	ldr	r2, [pc, #124]	; (800e334 <_free_r+0x98>)
 800e2b6:	6813      	ldr	r3, [r2, #0]
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	b933      	cbnz	r3, 800e2ca <_free_r+0x2e>
 800e2bc:	6063      	str	r3, [r4, #4]
 800e2be:	6014      	str	r4, [r2, #0]
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2c6:	f000 b984 	b.w	800e5d2 <__malloc_unlock>
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	d90c      	bls.n	800e2e8 <_free_r+0x4c>
 800e2ce:	6821      	ldr	r1, [r4, #0]
 800e2d0:	1862      	adds	r2, r4, r1
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	bf04      	itt	eq
 800e2d6:	681a      	ldreq	r2, [r3, #0]
 800e2d8:	685b      	ldreq	r3, [r3, #4]
 800e2da:	6063      	str	r3, [r4, #4]
 800e2dc:	bf04      	itt	eq
 800e2de:	1852      	addeq	r2, r2, r1
 800e2e0:	6022      	streq	r2, [r4, #0]
 800e2e2:	6004      	str	r4, [r0, #0]
 800e2e4:	e7ec      	b.n	800e2c0 <_free_r+0x24>
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	b10a      	cbz	r2, 800e2f0 <_free_r+0x54>
 800e2ec:	42a2      	cmp	r2, r4
 800e2ee:	d9fa      	bls.n	800e2e6 <_free_r+0x4a>
 800e2f0:	6819      	ldr	r1, [r3, #0]
 800e2f2:	1858      	adds	r0, r3, r1
 800e2f4:	42a0      	cmp	r0, r4
 800e2f6:	d10b      	bne.n	800e310 <_free_r+0x74>
 800e2f8:	6820      	ldr	r0, [r4, #0]
 800e2fa:	4401      	add	r1, r0
 800e2fc:	1858      	adds	r0, r3, r1
 800e2fe:	4282      	cmp	r2, r0
 800e300:	6019      	str	r1, [r3, #0]
 800e302:	d1dd      	bne.n	800e2c0 <_free_r+0x24>
 800e304:	6810      	ldr	r0, [r2, #0]
 800e306:	6852      	ldr	r2, [r2, #4]
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	4401      	add	r1, r0
 800e30c:	6019      	str	r1, [r3, #0]
 800e30e:	e7d7      	b.n	800e2c0 <_free_r+0x24>
 800e310:	d902      	bls.n	800e318 <_free_r+0x7c>
 800e312:	230c      	movs	r3, #12
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	e7d3      	b.n	800e2c0 <_free_r+0x24>
 800e318:	6820      	ldr	r0, [r4, #0]
 800e31a:	1821      	adds	r1, r4, r0
 800e31c:	428a      	cmp	r2, r1
 800e31e:	bf04      	itt	eq
 800e320:	6811      	ldreq	r1, [r2, #0]
 800e322:	6852      	ldreq	r2, [r2, #4]
 800e324:	6062      	str	r2, [r4, #4]
 800e326:	bf04      	itt	eq
 800e328:	1809      	addeq	r1, r1, r0
 800e32a:	6021      	streq	r1, [r4, #0]
 800e32c:	605c      	str	r4, [r3, #4]
 800e32e:	e7c7      	b.n	800e2c0 <_free_r+0x24>
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	20004a10 	.word	0x20004a10

0800e338 <_malloc_r>:
 800e338:	b570      	push	{r4, r5, r6, lr}
 800e33a:	1ccd      	adds	r5, r1, #3
 800e33c:	f025 0503 	bic.w	r5, r5, #3
 800e340:	3508      	adds	r5, #8
 800e342:	2d0c      	cmp	r5, #12
 800e344:	bf38      	it	cc
 800e346:	250c      	movcc	r5, #12
 800e348:	2d00      	cmp	r5, #0
 800e34a:	4606      	mov	r6, r0
 800e34c:	db01      	blt.n	800e352 <_malloc_r+0x1a>
 800e34e:	42a9      	cmp	r1, r5
 800e350:	d903      	bls.n	800e35a <_malloc_r+0x22>
 800e352:	230c      	movs	r3, #12
 800e354:	6033      	str	r3, [r6, #0]
 800e356:	2000      	movs	r0, #0
 800e358:	bd70      	pop	{r4, r5, r6, pc}
 800e35a:	f000 f939 	bl	800e5d0 <__malloc_lock>
 800e35e:	4a21      	ldr	r2, [pc, #132]	; (800e3e4 <_malloc_r+0xac>)
 800e360:	6814      	ldr	r4, [r2, #0]
 800e362:	4621      	mov	r1, r4
 800e364:	b991      	cbnz	r1, 800e38c <_malloc_r+0x54>
 800e366:	4c20      	ldr	r4, [pc, #128]	; (800e3e8 <_malloc_r+0xb0>)
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	b91b      	cbnz	r3, 800e374 <_malloc_r+0x3c>
 800e36c:	4630      	mov	r0, r6
 800e36e:	f000 f855 	bl	800e41c <_sbrk_r>
 800e372:	6020      	str	r0, [r4, #0]
 800e374:	4629      	mov	r1, r5
 800e376:	4630      	mov	r0, r6
 800e378:	f000 f850 	bl	800e41c <_sbrk_r>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d124      	bne.n	800e3ca <_malloc_r+0x92>
 800e380:	230c      	movs	r3, #12
 800e382:	6033      	str	r3, [r6, #0]
 800e384:	4630      	mov	r0, r6
 800e386:	f000 f924 	bl	800e5d2 <__malloc_unlock>
 800e38a:	e7e4      	b.n	800e356 <_malloc_r+0x1e>
 800e38c:	680b      	ldr	r3, [r1, #0]
 800e38e:	1b5b      	subs	r3, r3, r5
 800e390:	d418      	bmi.n	800e3c4 <_malloc_r+0x8c>
 800e392:	2b0b      	cmp	r3, #11
 800e394:	d90f      	bls.n	800e3b6 <_malloc_r+0x7e>
 800e396:	600b      	str	r3, [r1, #0]
 800e398:	50cd      	str	r5, [r1, r3]
 800e39a:	18cc      	adds	r4, r1, r3
 800e39c:	4630      	mov	r0, r6
 800e39e:	f000 f918 	bl	800e5d2 <__malloc_unlock>
 800e3a2:	f104 000b 	add.w	r0, r4, #11
 800e3a6:	1d23      	adds	r3, r4, #4
 800e3a8:	f020 0007 	bic.w	r0, r0, #7
 800e3ac:	1ac3      	subs	r3, r0, r3
 800e3ae:	d0d3      	beq.n	800e358 <_malloc_r+0x20>
 800e3b0:	425a      	negs	r2, r3
 800e3b2:	50e2      	str	r2, [r4, r3]
 800e3b4:	e7d0      	b.n	800e358 <_malloc_r+0x20>
 800e3b6:	428c      	cmp	r4, r1
 800e3b8:	684b      	ldr	r3, [r1, #4]
 800e3ba:	bf16      	itet	ne
 800e3bc:	6063      	strne	r3, [r4, #4]
 800e3be:	6013      	streq	r3, [r2, #0]
 800e3c0:	460c      	movne	r4, r1
 800e3c2:	e7eb      	b.n	800e39c <_malloc_r+0x64>
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	6849      	ldr	r1, [r1, #4]
 800e3c8:	e7cc      	b.n	800e364 <_malloc_r+0x2c>
 800e3ca:	1cc4      	adds	r4, r0, #3
 800e3cc:	f024 0403 	bic.w	r4, r4, #3
 800e3d0:	42a0      	cmp	r0, r4
 800e3d2:	d005      	beq.n	800e3e0 <_malloc_r+0xa8>
 800e3d4:	1a21      	subs	r1, r4, r0
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f000 f820 	bl	800e41c <_sbrk_r>
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d0cf      	beq.n	800e380 <_malloc_r+0x48>
 800e3e0:	6025      	str	r5, [r4, #0]
 800e3e2:	e7db      	b.n	800e39c <_malloc_r+0x64>
 800e3e4:	20004a10 	.word	0x20004a10
 800e3e8:	20004a14 	.word	0x20004a14

0800e3ec <iprintf>:
 800e3ec:	b40f      	push	{r0, r1, r2, r3}
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <iprintf+0x2c>)
 800e3f0:	b513      	push	{r0, r1, r4, lr}
 800e3f2:	681c      	ldr	r4, [r3, #0]
 800e3f4:	b124      	cbz	r4, 800e400 <iprintf+0x14>
 800e3f6:	69a3      	ldr	r3, [r4, #24]
 800e3f8:	b913      	cbnz	r3, 800e400 <iprintf+0x14>
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 f85e 	bl	800e4bc <__sinit>
 800e400:	ab05      	add	r3, sp, #20
 800e402:	9a04      	ldr	r2, [sp, #16]
 800e404:	68a1      	ldr	r1, [r4, #8]
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 f90d 	bl	800e628 <_vfiprintf_r>
 800e40e:	b002      	add	sp, #8
 800e410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e414:	b004      	add	sp, #16
 800e416:	4770      	bx	lr
 800e418:	20000038 	.word	0x20000038

0800e41c <_sbrk_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4c06      	ldr	r4, [pc, #24]	; (800e438 <_sbrk_r+0x1c>)
 800e420:	2300      	movs	r3, #0
 800e422:	4605      	mov	r5, r0
 800e424:	4608      	mov	r0, r1
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	f7f3 f9f0 	bl	800180c <_sbrk>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_sbrk_r+0x1a>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	b103      	cbz	r3, 800e436 <_sbrk_r+0x1a>
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	20005388 	.word	0x20005388

0800e43c <std>:
 800e43c:	2300      	movs	r3, #0
 800e43e:	b510      	push	{r4, lr}
 800e440:	4604      	mov	r4, r0
 800e442:	e9c0 3300 	strd	r3, r3, [r0]
 800e446:	6083      	str	r3, [r0, #8]
 800e448:	8181      	strh	r1, [r0, #12]
 800e44a:	6643      	str	r3, [r0, #100]	; 0x64
 800e44c:	81c2      	strh	r2, [r0, #14]
 800e44e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e452:	6183      	str	r3, [r0, #24]
 800e454:	4619      	mov	r1, r3
 800e456:	2208      	movs	r2, #8
 800e458:	305c      	adds	r0, #92	; 0x5c
 800e45a:	f7ff ff16 	bl	800e28a <memset>
 800e45e:	4b05      	ldr	r3, [pc, #20]	; (800e474 <std+0x38>)
 800e460:	6263      	str	r3, [r4, #36]	; 0x24
 800e462:	4b05      	ldr	r3, [pc, #20]	; (800e478 <std+0x3c>)
 800e464:	62a3      	str	r3, [r4, #40]	; 0x28
 800e466:	4b05      	ldr	r3, [pc, #20]	; (800e47c <std+0x40>)
 800e468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e46a:	4b05      	ldr	r3, [pc, #20]	; (800e480 <std+0x44>)
 800e46c:	6224      	str	r4, [r4, #32]
 800e46e:	6323      	str	r3, [r4, #48]	; 0x30
 800e470:	bd10      	pop	{r4, pc}
 800e472:	bf00      	nop
 800e474:	0800eb65 	.word	0x0800eb65
 800e478:	0800eb87 	.word	0x0800eb87
 800e47c:	0800ebbf 	.word	0x0800ebbf
 800e480:	0800ebe3 	.word	0x0800ebe3

0800e484 <_cleanup_r>:
 800e484:	4901      	ldr	r1, [pc, #4]	; (800e48c <_cleanup_r+0x8>)
 800e486:	f000 b885 	b.w	800e594 <_fwalk_reent>
 800e48a:	bf00      	nop
 800e48c:	0800eebd 	.word	0x0800eebd

0800e490 <__sfmoreglue>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	1e4a      	subs	r2, r1, #1
 800e494:	2568      	movs	r5, #104	; 0x68
 800e496:	4355      	muls	r5, r2
 800e498:	460e      	mov	r6, r1
 800e49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e49e:	f7ff ff4b 	bl	800e338 <_malloc_r>
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	b140      	cbz	r0, 800e4b8 <__sfmoreglue+0x28>
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e4ac:	300c      	adds	r0, #12
 800e4ae:	60a0      	str	r0, [r4, #8]
 800e4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4b4:	f7ff fee9 	bl	800e28a <memset>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	bd70      	pop	{r4, r5, r6, pc}

0800e4bc <__sinit>:
 800e4bc:	6983      	ldr	r3, [r0, #24]
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	bb33      	cbnz	r3, 800e512 <__sinit+0x56>
 800e4c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e4c8:	6503      	str	r3, [r0, #80]	; 0x50
 800e4ca:	4b12      	ldr	r3, [pc, #72]	; (800e514 <__sinit+0x58>)
 800e4cc:	4a12      	ldr	r2, [pc, #72]	; (800e518 <__sinit+0x5c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6282      	str	r2, [r0, #40]	; 0x28
 800e4d2:	4298      	cmp	r0, r3
 800e4d4:	bf04      	itt	eq
 800e4d6:	2301      	moveq	r3, #1
 800e4d8:	6183      	streq	r3, [r0, #24]
 800e4da:	f000 f81f 	bl	800e51c <__sfp>
 800e4de:	6060      	str	r0, [r4, #4]
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f000 f81b 	bl	800e51c <__sfp>
 800e4e6:	60a0      	str	r0, [r4, #8]
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f000 f817 	bl	800e51c <__sfp>
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	60e0      	str	r0, [r4, #12]
 800e4f2:	2104      	movs	r1, #4
 800e4f4:	6860      	ldr	r0, [r4, #4]
 800e4f6:	f7ff ffa1 	bl	800e43c <std>
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	2109      	movs	r1, #9
 800e4fe:	68a0      	ldr	r0, [r4, #8]
 800e500:	f7ff ff9c 	bl	800e43c <std>
 800e504:	2202      	movs	r2, #2
 800e506:	2112      	movs	r1, #18
 800e508:	68e0      	ldr	r0, [r4, #12]
 800e50a:	f7ff ff97 	bl	800e43c <std>
 800e50e:	2301      	movs	r3, #1
 800e510:	61a3      	str	r3, [r4, #24]
 800e512:	bd10      	pop	{r4, pc}
 800e514:	0800f184 	.word	0x0800f184
 800e518:	0800e485 	.word	0x0800e485

0800e51c <__sfp>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <__sfp+0x70>)
 800e520:	681e      	ldr	r6, [r3, #0]
 800e522:	69b3      	ldr	r3, [r6, #24]
 800e524:	4607      	mov	r7, r0
 800e526:	b913      	cbnz	r3, 800e52e <__sfp+0x12>
 800e528:	4630      	mov	r0, r6
 800e52a:	f7ff ffc7 	bl	800e4bc <__sinit>
 800e52e:	3648      	adds	r6, #72	; 0x48
 800e530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e534:	3b01      	subs	r3, #1
 800e536:	d503      	bpl.n	800e540 <__sfp+0x24>
 800e538:	6833      	ldr	r3, [r6, #0]
 800e53a:	b133      	cbz	r3, 800e54a <__sfp+0x2e>
 800e53c:	6836      	ldr	r6, [r6, #0]
 800e53e:	e7f7      	b.n	800e530 <__sfp+0x14>
 800e540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e544:	b16d      	cbz	r5, 800e562 <__sfp+0x46>
 800e546:	3468      	adds	r4, #104	; 0x68
 800e548:	e7f4      	b.n	800e534 <__sfp+0x18>
 800e54a:	2104      	movs	r1, #4
 800e54c:	4638      	mov	r0, r7
 800e54e:	f7ff ff9f 	bl	800e490 <__sfmoreglue>
 800e552:	6030      	str	r0, [r6, #0]
 800e554:	2800      	cmp	r0, #0
 800e556:	d1f1      	bne.n	800e53c <__sfp+0x20>
 800e558:	230c      	movs	r3, #12
 800e55a:	603b      	str	r3, [r7, #0]
 800e55c:	4604      	mov	r4, r0
 800e55e:	4620      	mov	r0, r4
 800e560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e562:	4b0b      	ldr	r3, [pc, #44]	; (800e590 <__sfp+0x74>)
 800e564:	6665      	str	r5, [r4, #100]	; 0x64
 800e566:	e9c4 5500 	strd	r5, r5, [r4]
 800e56a:	60a5      	str	r5, [r4, #8]
 800e56c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e570:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e574:	2208      	movs	r2, #8
 800e576:	4629      	mov	r1, r5
 800e578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e57c:	f7ff fe85 	bl	800e28a <memset>
 800e580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e588:	e7e9      	b.n	800e55e <__sfp+0x42>
 800e58a:	bf00      	nop
 800e58c:	0800f184 	.word	0x0800f184
 800e590:	ffff0001 	.word	0xffff0001

0800e594 <_fwalk_reent>:
 800e594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e598:	4680      	mov	r8, r0
 800e59a:	4689      	mov	r9, r1
 800e59c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5a0:	2600      	movs	r6, #0
 800e5a2:	b914      	cbnz	r4, 800e5aa <_fwalk_reent+0x16>
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e5ae:	3f01      	subs	r7, #1
 800e5b0:	d501      	bpl.n	800e5b6 <_fwalk_reent+0x22>
 800e5b2:	6824      	ldr	r4, [r4, #0]
 800e5b4:	e7f5      	b.n	800e5a2 <_fwalk_reent+0xe>
 800e5b6:	89ab      	ldrh	r3, [r5, #12]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d907      	bls.n	800e5cc <_fwalk_reent+0x38>
 800e5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	d003      	beq.n	800e5cc <_fwalk_reent+0x38>
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4640      	mov	r0, r8
 800e5c8:	47c8      	blx	r9
 800e5ca:	4306      	orrs	r6, r0
 800e5cc:	3568      	adds	r5, #104	; 0x68
 800e5ce:	e7ee      	b.n	800e5ae <_fwalk_reent+0x1a>

0800e5d0 <__malloc_lock>:
 800e5d0:	4770      	bx	lr

0800e5d2 <__malloc_unlock>:
 800e5d2:	4770      	bx	lr

0800e5d4 <__sfputc_r>:
 800e5d4:	6893      	ldr	r3, [r2, #8]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	b410      	push	{r4}
 800e5dc:	6093      	str	r3, [r2, #8]
 800e5de:	da08      	bge.n	800e5f2 <__sfputc_r+0x1e>
 800e5e0:	6994      	ldr	r4, [r2, #24]
 800e5e2:	42a3      	cmp	r3, r4
 800e5e4:	db01      	blt.n	800e5ea <__sfputc_r+0x16>
 800e5e6:	290a      	cmp	r1, #10
 800e5e8:	d103      	bne.n	800e5f2 <__sfputc_r+0x1e>
 800e5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ee:	f000 bafd 	b.w	800ebec <__swbuf_r>
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	1c58      	adds	r0, r3, #1
 800e5f6:	6010      	str	r0, [r2, #0]
 800e5f8:	7019      	strb	r1, [r3, #0]
 800e5fa:	4608      	mov	r0, r1
 800e5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <__sfputs_r>:
 800e602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e604:	4606      	mov	r6, r0
 800e606:	460f      	mov	r7, r1
 800e608:	4614      	mov	r4, r2
 800e60a:	18d5      	adds	r5, r2, r3
 800e60c:	42ac      	cmp	r4, r5
 800e60e:	d101      	bne.n	800e614 <__sfputs_r+0x12>
 800e610:	2000      	movs	r0, #0
 800e612:	e007      	b.n	800e624 <__sfputs_r+0x22>
 800e614:	463a      	mov	r2, r7
 800e616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e61a:	4630      	mov	r0, r6
 800e61c:	f7ff ffda 	bl	800e5d4 <__sfputc_r>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d1f3      	bne.n	800e60c <__sfputs_r+0xa>
 800e624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e628 <_vfiprintf_r>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	460c      	mov	r4, r1
 800e62e:	b09d      	sub	sp, #116	; 0x74
 800e630:	4617      	mov	r7, r2
 800e632:	461d      	mov	r5, r3
 800e634:	4606      	mov	r6, r0
 800e636:	b118      	cbz	r0, 800e640 <_vfiprintf_r+0x18>
 800e638:	6983      	ldr	r3, [r0, #24]
 800e63a:	b90b      	cbnz	r3, 800e640 <_vfiprintf_r+0x18>
 800e63c:	f7ff ff3e 	bl	800e4bc <__sinit>
 800e640:	4b7c      	ldr	r3, [pc, #496]	; (800e834 <_vfiprintf_r+0x20c>)
 800e642:	429c      	cmp	r4, r3
 800e644:	d158      	bne.n	800e6f8 <_vfiprintf_r+0xd0>
 800e646:	6874      	ldr	r4, [r6, #4]
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	0718      	lsls	r0, r3, #28
 800e64c:	d55e      	bpl.n	800e70c <_vfiprintf_r+0xe4>
 800e64e:	6923      	ldr	r3, [r4, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d05b      	beq.n	800e70c <_vfiprintf_r+0xe4>
 800e654:	2300      	movs	r3, #0
 800e656:	9309      	str	r3, [sp, #36]	; 0x24
 800e658:	2320      	movs	r3, #32
 800e65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e65e:	2330      	movs	r3, #48	; 0x30
 800e660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e664:	9503      	str	r5, [sp, #12]
 800e666:	f04f 0b01 	mov.w	fp, #1
 800e66a:	46b8      	mov	r8, r7
 800e66c:	4645      	mov	r5, r8
 800e66e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e672:	b10b      	cbz	r3, 800e678 <_vfiprintf_r+0x50>
 800e674:	2b25      	cmp	r3, #37	; 0x25
 800e676:	d154      	bne.n	800e722 <_vfiprintf_r+0xfa>
 800e678:	ebb8 0a07 	subs.w	sl, r8, r7
 800e67c:	d00b      	beq.n	800e696 <_vfiprintf_r+0x6e>
 800e67e:	4653      	mov	r3, sl
 800e680:	463a      	mov	r2, r7
 800e682:	4621      	mov	r1, r4
 800e684:	4630      	mov	r0, r6
 800e686:	f7ff ffbc 	bl	800e602 <__sfputs_r>
 800e68a:	3001      	adds	r0, #1
 800e68c:	f000 80c2 	beq.w	800e814 <_vfiprintf_r+0x1ec>
 800e690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e692:	4453      	add	r3, sl
 800e694:	9309      	str	r3, [sp, #36]	; 0x24
 800e696:	f898 3000 	ldrb.w	r3, [r8]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 80ba 	beq.w	800e814 <_vfiprintf_r+0x1ec>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6aa:	9304      	str	r3, [sp, #16]
 800e6ac:	9307      	str	r3, [sp, #28]
 800e6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800e6b4:	46a8      	mov	r8, r5
 800e6b6:	2205      	movs	r2, #5
 800e6b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e6bc:	485e      	ldr	r0, [pc, #376]	; (800e838 <_vfiprintf_r+0x210>)
 800e6be:	f7f1 fdaf 	bl	8000220 <memchr>
 800e6c2:	9b04      	ldr	r3, [sp, #16]
 800e6c4:	bb78      	cbnz	r0, 800e726 <_vfiprintf_r+0xfe>
 800e6c6:	06d9      	lsls	r1, r3, #27
 800e6c8:	bf44      	itt	mi
 800e6ca:	2220      	movmi	r2, #32
 800e6cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6d0:	071a      	lsls	r2, r3, #28
 800e6d2:	bf44      	itt	mi
 800e6d4:	222b      	movmi	r2, #43	; 0x2b
 800e6d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6da:	782a      	ldrb	r2, [r5, #0]
 800e6dc:	2a2a      	cmp	r2, #42	; 0x2a
 800e6de:	d02a      	beq.n	800e736 <_vfiprintf_r+0x10e>
 800e6e0:	9a07      	ldr	r2, [sp, #28]
 800e6e2:	46a8      	mov	r8, r5
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	250a      	movs	r5, #10
 800e6e8:	4641      	mov	r1, r8
 800e6ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ee:	3b30      	subs	r3, #48	; 0x30
 800e6f0:	2b09      	cmp	r3, #9
 800e6f2:	d969      	bls.n	800e7c8 <_vfiprintf_r+0x1a0>
 800e6f4:	b360      	cbz	r0, 800e750 <_vfiprintf_r+0x128>
 800e6f6:	e024      	b.n	800e742 <_vfiprintf_r+0x11a>
 800e6f8:	4b50      	ldr	r3, [pc, #320]	; (800e83c <_vfiprintf_r+0x214>)
 800e6fa:	429c      	cmp	r4, r3
 800e6fc:	d101      	bne.n	800e702 <_vfiprintf_r+0xda>
 800e6fe:	68b4      	ldr	r4, [r6, #8]
 800e700:	e7a2      	b.n	800e648 <_vfiprintf_r+0x20>
 800e702:	4b4f      	ldr	r3, [pc, #316]	; (800e840 <_vfiprintf_r+0x218>)
 800e704:	429c      	cmp	r4, r3
 800e706:	bf08      	it	eq
 800e708:	68f4      	ldreq	r4, [r6, #12]
 800e70a:	e79d      	b.n	800e648 <_vfiprintf_r+0x20>
 800e70c:	4621      	mov	r1, r4
 800e70e:	4630      	mov	r0, r6
 800e710:	f000 fad0 	bl	800ecb4 <__swsetup_r>
 800e714:	2800      	cmp	r0, #0
 800e716:	d09d      	beq.n	800e654 <_vfiprintf_r+0x2c>
 800e718:	f04f 30ff 	mov.w	r0, #4294967295
 800e71c:	b01d      	add	sp, #116	; 0x74
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	46a8      	mov	r8, r5
 800e724:	e7a2      	b.n	800e66c <_vfiprintf_r+0x44>
 800e726:	4a44      	ldr	r2, [pc, #272]	; (800e838 <_vfiprintf_r+0x210>)
 800e728:	1a80      	subs	r0, r0, r2
 800e72a:	fa0b f000 	lsl.w	r0, fp, r0
 800e72e:	4318      	orrs	r0, r3
 800e730:	9004      	str	r0, [sp, #16]
 800e732:	4645      	mov	r5, r8
 800e734:	e7be      	b.n	800e6b4 <_vfiprintf_r+0x8c>
 800e736:	9a03      	ldr	r2, [sp, #12]
 800e738:	1d11      	adds	r1, r2, #4
 800e73a:	6812      	ldr	r2, [r2, #0]
 800e73c:	9103      	str	r1, [sp, #12]
 800e73e:	2a00      	cmp	r2, #0
 800e740:	db01      	blt.n	800e746 <_vfiprintf_r+0x11e>
 800e742:	9207      	str	r2, [sp, #28]
 800e744:	e004      	b.n	800e750 <_vfiprintf_r+0x128>
 800e746:	4252      	negs	r2, r2
 800e748:	f043 0302 	orr.w	r3, r3, #2
 800e74c:	9207      	str	r2, [sp, #28]
 800e74e:	9304      	str	r3, [sp, #16]
 800e750:	f898 3000 	ldrb.w	r3, [r8]
 800e754:	2b2e      	cmp	r3, #46	; 0x2e
 800e756:	d10e      	bne.n	800e776 <_vfiprintf_r+0x14e>
 800e758:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e75c:	2b2a      	cmp	r3, #42	; 0x2a
 800e75e:	d138      	bne.n	800e7d2 <_vfiprintf_r+0x1aa>
 800e760:	9b03      	ldr	r3, [sp, #12]
 800e762:	1d1a      	adds	r2, r3, #4
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	9203      	str	r2, [sp, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	bfb8      	it	lt
 800e76c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e770:	f108 0802 	add.w	r8, r8, #2
 800e774:	9305      	str	r3, [sp, #20]
 800e776:	4d33      	ldr	r5, [pc, #204]	; (800e844 <_vfiprintf_r+0x21c>)
 800e778:	f898 1000 	ldrb.w	r1, [r8]
 800e77c:	2203      	movs	r2, #3
 800e77e:	4628      	mov	r0, r5
 800e780:	f7f1 fd4e 	bl	8000220 <memchr>
 800e784:	b140      	cbz	r0, 800e798 <_vfiprintf_r+0x170>
 800e786:	2340      	movs	r3, #64	; 0x40
 800e788:	1b40      	subs	r0, r0, r5
 800e78a:	fa03 f000 	lsl.w	r0, r3, r0
 800e78e:	9b04      	ldr	r3, [sp, #16]
 800e790:	4303      	orrs	r3, r0
 800e792:	f108 0801 	add.w	r8, r8, #1
 800e796:	9304      	str	r3, [sp, #16]
 800e798:	f898 1000 	ldrb.w	r1, [r8]
 800e79c:	482a      	ldr	r0, [pc, #168]	; (800e848 <_vfiprintf_r+0x220>)
 800e79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7a2:	2206      	movs	r2, #6
 800e7a4:	f108 0701 	add.w	r7, r8, #1
 800e7a8:	f7f1 fd3a 	bl	8000220 <memchr>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d037      	beq.n	800e820 <_vfiprintf_r+0x1f8>
 800e7b0:	4b26      	ldr	r3, [pc, #152]	; (800e84c <_vfiprintf_r+0x224>)
 800e7b2:	bb1b      	cbnz	r3, 800e7fc <_vfiprintf_r+0x1d4>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	3307      	adds	r3, #7
 800e7b8:	f023 0307 	bic.w	r3, r3, #7
 800e7bc:	3308      	adds	r3, #8
 800e7be:	9303      	str	r3, [sp, #12]
 800e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c2:	444b      	add	r3, r9
 800e7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c6:	e750      	b.n	800e66a <_vfiprintf_r+0x42>
 800e7c8:	fb05 3202 	mla	r2, r5, r2, r3
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	4688      	mov	r8, r1
 800e7d0:	e78a      	b.n	800e6e8 <_vfiprintf_r+0xc0>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f108 0801 	add.w	r8, r8, #1
 800e7d8:	9305      	str	r3, [sp, #20]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	250a      	movs	r5, #10
 800e7de:	4640      	mov	r0, r8
 800e7e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7e4:	3a30      	subs	r2, #48	; 0x30
 800e7e6:	2a09      	cmp	r2, #9
 800e7e8:	d903      	bls.n	800e7f2 <_vfiprintf_r+0x1ca>
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0c3      	beq.n	800e776 <_vfiprintf_r+0x14e>
 800e7ee:	9105      	str	r1, [sp, #20]
 800e7f0:	e7c1      	b.n	800e776 <_vfiprintf_r+0x14e>
 800e7f2:	fb05 2101 	mla	r1, r5, r1, r2
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	4680      	mov	r8, r0
 800e7fa:	e7f0      	b.n	800e7de <_vfiprintf_r+0x1b6>
 800e7fc:	ab03      	add	r3, sp, #12
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	4622      	mov	r2, r4
 800e802:	4b13      	ldr	r3, [pc, #76]	; (800e850 <_vfiprintf_r+0x228>)
 800e804:	a904      	add	r1, sp, #16
 800e806:	4630      	mov	r0, r6
 800e808:	f3af 8000 	nop.w
 800e80c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e810:	4681      	mov	r9, r0
 800e812:	d1d5      	bne.n	800e7c0 <_vfiprintf_r+0x198>
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	065b      	lsls	r3, r3, #25
 800e818:	f53f af7e 	bmi.w	800e718 <_vfiprintf_r+0xf0>
 800e81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e81e:	e77d      	b.n	800e71c <_vfiprintf_r+0xf4>
 800e820:	ab03      	add	r3, sp, #12
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	4622      	mov	r2, r4
 800e826:	4b0a      	ldr	r3, [pc, #40]	; (800e850 <_vfiprintf_r+0x228>)
 800e828:	a904      	add	r1, sp, #16
 800e82a:	4630      	mov	r0, r6
 800e82c:	f000 f888 	bl	800e940 <_printf_i>
 800e830:	e7ec      	b.n	800e80c <_vfiprintf_r+0x1e4>
 800e832:	bf00      	nop
 800e834:	0800f1a8 	.word	0x0800f1a8
 800e838:	0800f1e8 	.word	0x0800f1e8
 800e83c:	0800f1c8 	.word	0x0800f1c8
 800e840:	0800f188 	.word	0x0800f188
 800e844:	0800f1ee 	.word	0x0800f1ee
 800e848:	0800f1f2 	.word	0x0800f1f2
 800e84c:	00000000 	.word	0x00000000
 800e850:	0800e603 	.word	0x0800e603

0800e854 <_printf_common>:
 800e854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e858:	4691      	mov	r9, r2
 800e85a:	461f      	mov	r7, r3
 800e85c:	688a      	ldr	r2, [r1, #8]
 800e85e:	690b      	ldr	r3, [r1, #16]
 800e860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e864:	4293      	cmp	r3, r2
 800e866:	bfb8      	it	lt
 800e868:	4613      	movlt	r3, r2
 800e86a:	f8c9 3000 	str.w	r3, [r9]
 800e86e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e872:	4606      	mov	r6, r0
 800e874:	460c      	mov	r4, r1
 800e876:	b112      	cbz	r2, 800e87e <_printf_common+0x2a>
 800e878:	3301      	adds	r3, #1
 800e87a:	f8c9 3000 	str.w	r3, [r9]
 800e87e:	6823      	ldr	r3, [r4, #0]
 800e880:	0699      	lsls	r1, r3, #26
 800e882:	bf42      	ittt	mi
 800e884:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e888:	3302      	addmi	r3, #2
 800e88a:	f8c9 3000 	strmi.w	r3, [r9]
 800e88e:	6825      	ldr	r5, [r4, #0]
 800e890:	f015 0506 	ands.w	r5, r5, #6
 800e894:	d107      	bne.n	800e8a6 <_printf_common+0x52>
 800e896:	f104 0a19 	add.w	sl, r4, #25
 800e89a:	68e3      	ldr	r3, [r4, #12]
 800e89c:	f8d9 2000 	ldr.w	r2, [r9]
 800e8a0:	1a9b      	subs	r3, r3, r2
 800e8a2:	42ab      	cmp	r3, r5
 800e8a4:	dc28      	bgt.n	800e8f8 <_printf_common+0xa4>
 800e8a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	3300      	adds	r3, #0
 800e8ae:	bf18      	it	ne
 800e8b0:	2301      	movne	r3, #1
 800e8b2:	0692      	lsls	r2, r2, #26
 800e8b4:	d42d      	bmi.n	800e912 <_printf_common+0xbe>
 800e8b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	4630      	mov	r0, r6
 800e8be:	47c0      	blx	r8
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d020      	beq.n	800e906 <_printf_common+0xb2>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	68e5      	ldr	r5, [r4, #12]
 800e8c8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8cc:	f003 0306 	and.w	r3, r3, #6
 800e8d0:	2b04      	cmp	r3, #4
 800e8d2:	bf08      	it	eq
 800e8d4:	1aad      	subeq	r5, r5, r2
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	6922      	ldr	r2, [r4, #16]
 800e8da:	bf0c      	ite	eq
 800e8dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8e0:	2500      	movne	r5, #0
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	bfc4      	itt	gt
 800e8e6:	1a9b      	subgt	r3, r3, r2
 800e8e8:	18ed      	addgt	r5, r5, r3
 800e8ea:	f04f 0900 	mov.w	r9, #0
 800e8ee:	341a      	adds	r4, #26
 800e8f0:	454d      	cmp	r5, r9
 800e8f2:	d11a      	bne.n	800e92a <_printf_common+0xd6>
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e008      	b.n	800e90a <_printf_common+0xb6>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4652      	mov	r2, sl
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	4630      	mov	r0, r6
 800e900:	47c0      	blx	r8
 800e902:	3001      	adds	r0, #1
 800e904:	d103      	bne.n	800e90e <_printf_common+0xba>
 800e906:	f04f 30ff 	mov.w	r0, #4294967295
 800e90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90e:	3501      	adds	r5, #1
 800e910:	e7c3      	b.n	800e89a <_printf_common+0x46>
 800e912:	18e1      	adds	r1, r4, r3
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	2030      	movs	r0, #48	; 0x30
 800e918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e91c:	4422      	add	r2, r4
 800e91e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e922:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e926:	3302      	adds	r3, #2
 800e928:	e7c5      	b.n	800e8b6 <_printf_common+0x62>
 800e92a:	2301      	movs	r3, #1
 800e92c:	4622      	mov	r2, r4
 800e92e:	4639      	mov	r1, r7
 800e930:	4630      	mov	r0, r6
 800e932:	47c0      	blx	r8
 800e934:	3001      	adds	r0, #1
 800e936:	d0e6      	beq.n	800e906 <_printf_common+0xb2>
 800e938:	f109 0901 	add.w	r9, r9, #1
 800e93c:	e7d8      	b.n	800e8f0 <_printf_common+0x9c>
	...

0800e940 <_printf_i>:
 800e940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e948:	460c      	mov	r4, r1
 800e94a:	7e09      	ldrb	r1, [r1, #24]
 800e94c:	b085      	sub	sp, #20
 800e94e:	296e      	cmp	r1, #110	; 0x6e
 800e950:	4617      	mov	r7, r2
 800e952:	4606      	mov	r6, r0
 800e954:	4698      	mov	r8, r3
 800e956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e958:	f000 80b3 	beq.w	800eac2 <_printf_i+0x182>
 800e95c:	d822      	bhi.n	800e9a4 <_printf_i+0x64>
 800e95e:	2963      	cmp	r1, #99	; 0x63
 800e960:	d036      	beq.n	800e9d0 <_printf_i+0x90>
 800e962:	d80a      	bhi.n	800e97a <_printf_i+0x3a>
 800e964:	2900      	cmp	r1, #0
 800e966:	f000 80b9 	beq.w	800eadc <_printf_i+0x19c>
 800e96a:	2958      	cmp	r1, #88	; 0x58
 800e96c:	f000 8083 	beq.w	800ea76 <_printf_i+0x136>
 800e970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e978:	e032      	b.n	800e9e0 <_printf_i+0xa0>
 800e97a:	2964      	cmp	r1, #100	; 0x64
 800e97c:	d001      	beq.n	800e982 <_printf_i+0x42>
 800e97e:	2969      	cmp	r1, #105	; 0x69
 800e980:	d1f6      	bne.n	800e970 <_printf_i+0x30>
 800e982:	6820      	ldr	r0, [r4, #0]
 800e984:	6813      	ldr	r3, [r2, #0]
 800e986:	0605      	lsls	r5, r0, #24
 800e988:	f103 0104 	add.w	r1, r3, #4
 800e98c:	d52a      	bpl.n	800e9e4 <_printf_i+0xa4>
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6011      	str	r1, [r2, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	da03      	bge.n	800e99e <_printf_i+0x5e>
 800e996:	222d      	movs	r2, #45	; 0x2d
 800e998:	425b      	negs	r3, r3
 800e99a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e99e:	486f      	ldr	r0, [pc, #444]	; (800eb5c <_printf_i+0x21c>)
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	e039      	b.n	800ea18 <_printf_i+0xd8>
 800e9a4:	2973      	cmp	r1, #115	; 0x73
 800e9a6:	f000 809d 	beq.w	800eae4 <_printf_i+0x1a4>
 800e9aa:	d808      	bhi.n	800e9be <_printf_i+0x7e>
 800e9ac:	296f      	cmp	r1, #111	; 0x6f
 800e9ae:	d020      	beq.n	800e9f2 <_printf_i+0xb2>
 800e9b0:	2970      	cmp	r1, #112	; 0x70
 800e9b2:	d1dd      	bne.n	800e970 <_printf_i+0x30>
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	f043 0320 	orr.w	r3, r3, #32
 800e9ba:	6023      	str	r3, [r4, #0]
 800e9bc:	e003      	b.n	800e9c6 <_printf_i+0x86>
 800e9be:	2975      	cmp	r1, #117	; 0x75
 800e9c0:	d017      	beq.n	800e9f2 <_printf_i+0xb2>
 800e9c2:	2978      	cmp	r1, #120	; 0x78
 800e9c4:	d1d4      	bne.n	800e970 <_printf_i+0x30>
 800e9c6:	2378      	movs	r3, #120	; 0x78
 800e9c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9cc:	4864      	ldr	r0, [pc, #400]	; (800eb60 <_printf_i+0x220>)
 800e9ce:	e055      	b.n	800ea7c <_printf_i+0x13c>
 800e9d0:	6813      	ldr	r3, [r2, #0]
 800e9d2:	1d19      	adds	r1, r3, #4
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6011      	str	r1, [r2, #0]
 800e9d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e08c      	b.n	800eafe <_printf_i+0x1be>
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6011      	str	r1, [r2, #0]
 800e9e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9ec:	bf18      	it	ne
 800e9ee:	b21b      	sxthne	r3, r3
 800e9f0:	e7cf      	b.n	800e992 <_printf_i+0x52>
 800e9f2:	6813      	ldr	r3, [r2, #0]
 800e9f4:	6825      	ldr	r5, [r4, #0]
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	6010      	str	r0, [r2, #0]
 800e9fa:	0628      	lsls	r0, r5, #24
 800e9fc:	d501      	bpl.n	800ea02 <_printf_i+0xc2>
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	e002      	b.n	800ea08 <_printf_i+0xc8>
 800ea02:	0668      	lsls	r0, r5, #25
 800ea04:	d5fb      	bpl.n	800e9fe <_printf_i+0xbe>
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	4854      	ldr	r0, [pc, #336]	; (800eb5c <_printf_i+0x21c>)
 800ea0a:	296f      	cmp	r1, #111	; 0x6f
 800ea0c:	bf14      	ite	ne
 800ea0e:	220a      	movne	r2, #10
 800ea10:	2208      	moveq	r2, #8
 800ea12:	2100      	movs	r1, #0
 800ea14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea18:	6865      	ldr	r5, [r4, #4]
 800ea1a:	60a5      	str	r5, [r4, #8]
 800ea1c:	2d00      	cmp	r5, #0
 800ea1e:	f2c0 8095 	blt.w	800eb4c <_printf_i+0x20c>
 800ea22:	6821      	ldr	r1, [r4, #0]
 800ea24:	f021 0104 	bic.w	r1, r1, #4
 800ea28:	6021      	str	r1, [r4, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d13d      	bne.n	800eaaa <_printf_i+0x16a>
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	f040 808e 	bne.w	800eb50 <_printf_i+0x210>
 800ea34:	4665      	mov	r5, ip
 800ea36:	2a08      	cmp	r2, #8
 800ea38:	d10b      	bne.n	800ea52 <_printf_i+0x112>
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	07db      	lsls	r3, r3, #31
 800ea3e:	d508      	bpl.n	800ea52 <_printf_i+0x112>
 800ea40:	6923      	ldr	r3, [r4, #16]
 800ea42:	6862      	ldr	r2, [r4, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	bfde      	ittt	le
 800ea48:	2330      	movle	r3, #48	; 0x30
 800ea4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea52:	ebac 0305 	sub.w	r3, ip, r5
 800ea56:	6123      	str	r3, [r4, #16]
 800ea58:	f8cd 8000 	str.w	r8, [sp]
 800ea5c:	463b      	mov	r3, r7
 800ea5e:	aa03      	add	r2, sp, #12
 800ea60:	4621      	mov	r1, r4
 800ea62:	4630      	mov	r0, r6
 800ea64:	f7ff fef6 	bl	800e854 <_printf_common>
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d14d      	bne.n	800eb08 <_printf_i+0x1c8>
 800ea6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea70:	b005      	add	sp, #20
 800ea72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea76:	4839      	ldr	r0, [pc, #228]	; (800eb5c <_printf_i+0x21c>)
 800ea78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ea7c:	6813      	ldr	r3, [r2, #0]
 800ea7e:	6821      	ldr	r1, [r4, #0]
 800ea80:	1d1d      	adds	r5, r3, #4
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	6015      	str	r5, [r2, #0]
 800ea86:	060a      	lsls	r2, r1, #24
 800ea88:	d50b      	bpl.n	800eaa2 <_printf_i+0x162>
 800ea8a:	07ca      	lsls	r2, r1, #31
 800ea8c:	bf44      	itt	mi
 800ea8e:	f041 0120 	orrmi.w	r1, r1, #32
 800ea92:	6021      	strmi	r1, [r4, #0]
 800ea94:	b91b      	cbnz	r3, 800ea9e <_printf_i+0x15e>
 800ea96:	6822      	ldr	r2, [r4, #0]
 800ea98:	f022 0220 	bic.w	r2, r2, #32
 800ea9c:	6022      	str	r2, [r4, #0]
 800ea9e:	2210      	movs	r2, #16
 800eaa0:	e7b7      	b.n	800ea12 <_printf_i+0xd2>
 800eaa2:	064d      	lsls	r5, r1, #25
 800eaa4:	bf48      	it	mi
 800eaa6:	b29b      	uxthmi	r3, r3
 800eaa8:	e7ef      	b.n	800ea8a <_printf_i+0x14a>
 800eaaa:	4665      	mov	r5, ip
 800eaac:	fbb3 f1f2 	udiv	r1, r3, r2
 800eab0:	fb02 3311 	mls	r3, r2, r1, r3
 800eab4:	5cc3      	ldrb	r3, [r0, r3]
 800eab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eaba:	460b      	mov	r3, r1
 800eabc:	2900      	cmp	r1, #0
 800eabe:	d1f5      	bne.n	800eaac <_printf_i+0x16c>
 800eac0:	e7b9      	b.n	800ea36 <_printf_i+0xf6>
 800eac2:	6813      	ldr	r3, [r2, #0]
 800eac4:	6825      	ldr	r5, [r4, #0]
 800eac6:	6961      	ldr	r1, [r4, #20]
 800eac8:	1d18      	adds	r0, r3, #4
 800eaca:	6010      	str	r0, [r2, #0]
 800eacc:	0628      	lsls	r0, r5, #24
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	d501      	bpl.n	800ead6 <_printf_i+0x196>
 800ead2:	6019      	str	r1, [r3, #0]
 800ead4:	e002      	b.n	800eadc <_printf_i+0x19c>
 800ead6:	066a      	lsls	r2, r5, #25
 800ead8:	d5fb      	bpl.n	800ead2 <_printf_i+0x192>
 800eada:	8019      	strh	r1, [r3, #0]
 800eadc:	2300      	movs	r3, #0
 800eade:	6123      	str	r3, [r4, #16]
 800eae0:	4665      	mov	r5, ip
 800eae2:	e7b9      	b.n	800ea58 <_printf_i+0x118>
 800eae4:	6813      	ldr	r3, [r2, #0]
 800eae6:	1d19      	adds	r1, r3, #4
 800eae8:	6011      	str	r1, [r2, #0]
 800eaea:	681d      	ldr	r5, [r3, #0]
 800eaec:	6862      	ldr	r2, [r4, #4]
 800eaee:	2100      	movs	r1, #0
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f7f1 fb95 	bl	8000220 <memchr>
 800eaf6:	b108      	cbz	r0, 800eafc <_printf_i+0x1bc>
 800eaf8:	1b40      	subs	r0, r0, r5
 800eafa:	6060      	str	r0, [r4, #4]
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	6123      	str	r3, [r4, #16]
 800eb00:	2300      	movs	r3, #0
 800eb02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb06:	e7a7      	b.n	800ea58 <_printf_i+0x118>
 800eb08:	6923      	ldr	r3, [r4, #16]
 800eb0a:	462a      	mov	r2, r5
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	4630      	mov	r0, r6
 800eb10:	47c0      	blx	r8
 800eb12:	3001      	adds	r0, #1
 800eb14:	d0aa      	beq.n	800ea6c <_printf_i+0x12c>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	079b      	lsls	r3, r3, #30
 800eb1a:	d413      	bmi.n	800eb44 <_printf_i+0x204>
 800eb1c:	68e0      	ldr	r0, [r4, #12]
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	4298      	cmp	r0, r3
 800eb22:	bfb8      	it	lt
 800eb24:	4618      	movlt	r0, r3
 800eb26:	e7a3      	b.n	800ea70 <_printf_i+0x130>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	464a      	mov	r2, r9
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	4630      	mov	r0, r6
 800eb30:	47c0      	blx	r8
 800eb32:	3001      	adds	r0, #1
 800eb34:	d09a      	beq.n	800ea6c <_printf_i+0x12c>
 800eb36:	3501      	adds	r5, #1
 800eb38:	68e3      	ldr	r3, [r4, #12]
 800eb3a:	9a03      	ldr	r2, [sp, #12]
 800eb3c:	1a9b      	subs	r3, r3, r2
 800eb3e:	42ab      	cmp	r3, r5
 800eb40:	dcf2      	bgt.n	800eb28 <_printf_i+0x1e8>
 800eb42:	e7eb      	b.n	800eb1c <_printf_i+0x1dc>
 800eb44:	2500      	movs	r5, #0
 800eb46:	f104 0919 	add.w	r9, r4, #25
 800eb4a:	e7f5      	b.n	800eb38 <_printf_i+0x1f8>
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1ac      	bne.n	800eaaa <_printf_i+0x16a>
 800eb50:	7803      	ldrb	r3, [r0, #0]
 800eb52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb5a:	e76c      	b.n	800ea36 <_printf_i+0xf6>
 800eb5c:	0800f1f9 	.word	0x0800f1f9
 800eb60:	0800f20a 	.word	0x0800f20a

0800eb64 <__sread>:
 800eb64:	b510      	push	{r4, lr}
 800eb66:	460c      	mov	r4, r1
 800eb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6c:	f000 fa46 	bl	800effc <_read_r>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	bfab      	itete	ge
 800eb74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb76:	89a3      	ldrhlt	r3, [r4, #12]
 800eb78:	181b      	addge	r3, r3, r0
 800eb7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb7e:	bfac      	ite	ge
 800eb80:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb82:	81a3      	strhlt	r3, [r4, #12]
 800eb84:	bd10      	pop	{r4, pc}

0800eb86 <__swrite>:
 800eb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8a:	461f      	mov	r7, r3
 800eb8c:	898b      	ldrh	r3, [r1, #12]
 800eb8e:	05db      	lsls	r3, r3, #23
 800eb90:	4605      	mov	r5, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	4616      	mov	r6, r2
 800eb96:	d505      	bpl.n	800eba4 <__swrite+0x1e>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba0:	f000 f9b6 	bl	800ef10 <_lseek_r>
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebae:	81a3      	strh	r3, [r4, #12]
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	463b      	mov	r3, r7
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebba:	f000 b869 	b.w	800ec90 <_write_r>

0800ebbe <__sseek>:
 800ebbe:	b510      	push	{r4, lr}
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc6:	f000 f9a3 	bl	800ef10 <_lseek_r>
 800ebca:	1c43      	adds	r3, r0, #1
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	bf15      	itete	ne
 800ebd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebda:	81a3      	strheq	r3, [r4, #12]
 800ebdc:	bf18      	it	ne
 800ebde:	81a3      	strhne	r3, [r4, #12]
 800ebe0:	bd10      	pop	{r4, pc}

0800ebe2 <__sclose>:
 800ebe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe6:	f000 b8d3 	b.w	800ed90 <_close_r>
	...

0800ebec <__swbuf_r>:
 800ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebee:	460e      	mov	r6, r1
 800ebf0:	4614      	mov	r4, r2
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	b118      	cbz	r0, 800ebfe <__swbuf_r+0x12>
 800ebf6:	6983      	ldr	r3, [r0, #24]
 800ebf8:	b90b      	cbnz	r3, 800ebfe <__swbuf_r+0x12>
 800ebfa:	f7ff fc5f 	bl	800e4bc <__sinit>
 800ebfe:	4b21      	ldr	r3, [pc, #132]	; (800ec84 <__swbuf_r+0x98>)
 800ec00:	429c      	cmp	r4, r3
 800ec02:	d12a      	bne.n	800ec5a <__swbuf_r+0x6e>
 800ec04:	686c      	ldr	r4, [r5, #4]
 800ec06:	69a3      	ldr	r3, [r4, #24]
 800ec08:	60a3      	str	r3, [r4, #8]
 800ec0a:	89a3      	ldrh	r3, [r4, #12]
 800ec0c:	071a      	lsls	r2, r3, #28
 800ec0e:	d52e      	bpl.n	800ec6e <__swbuf_r+0x82>
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	b363      	cbz	r3, 800ec6e <__swbuf_r+0x82>
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	6820      	ldr	r0, [r4, #0]
 800ec18:	1ac0      	subs	r0, r0, r3
 800ec1a:	6963      	ldr	r3, [r4, #20]
 800ec1c:	b2f6      	uxtb	r6, r6
 800ec1e:	4283      	cmp	r3, r0
 800ec20:	4637      	mov	r7, r6
 800ec22:	dc04      	bgt.n	800ec2e <__swbuf_r+0x42>
 800ec24:	4621      	mov	r1, r4
 800ec26:	4628      	mov	r0, r5
 800ec28:	f000 f948 	bl	800eebc <_fflush_r>
 800ec2c:	bb28      	cbnz	r0, 800ec7a <__swbuf_r+0x8e>
 800ec2e:	68a3      	ldr	r3, [r4, #8]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	60a3      	str	r3, [r4, #8]
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	1c5a      	adds	r2, r3, #1
 800ec38:	6022      	str	r2, [r4, #0]
 800ec3a:	701e      	strb	r6, [r3, #0]
 800ec3c:	6963      	ldr	r3, [r4, #20]
 800ec3e:	3001      	adds	r0, #1
 800ec40:	4283      	cmp	r3, r0
 800ec42:	d004      	beq.n	800ec4e <__swbuf_r+0x62>
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	07db      	lsls	r3, r3, #31
 800ec48:	d519      	bpl.n	800ec7e <__swbuf_r+0x92>
 800ec4a:	2e0a      	cmp	r6, #10
 800ec4c:	d117      	bne.n	800ec7e <__swbuf_r+0x92>
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4628      	mov	r0, r5
 800ec52:	f000 f933 	bl	800eebc <_fflush_r>
 800ec56:	b190      	cbz	r0, 800ec7e <__swbuf_r+0x92>
 800ec58:	e00f      	b.n	800ec7a <__swbuf_r+0x8e>
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	; (800ec88 <__swbuf_r+0x9c>)
 800ec5c:	429c      	cmp	r4, r3
 800ec5e:	d101      	bne.n	800ec64 <__swbuf_r+0x78>
 800ec60:	68ac      	ldr	r4, [r5, #8]
 800ec62:	e7d0      	b.n	800ec06 <__swbuf_r+0x1a>
 800ec64:	4b09      	ldr	r3, [pc, #36]	; (800ec8c <__swbuf_r+0xa0>)
 800ec66:	429c      	cmp	r4, r3
 800ec68:	bf08      	it	eq
 800ec6a:	68ec      	ldreq	r4, [r5, #12]
 800ec6c:	e7cb      	b.n	800ec06 <__swbuf_r+0x1a>
 800ec6e:	4621      	mov	r1, r4
 800ec70:	4628      	mov	r0, r5
 800ec72:	f000 f81f 	bl	800ecb4 <__swsetup_r>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d0cc      	beq.n	800ec14 <__swbuf_r+0x28>
 800ec7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec7e:	4638      	mov	r0, r7
 800ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec82:	bf00      	nop
 800ec84:	0800f1a8 	.word	0x0800f1a8
 800ec88:	0800f1c8 	.word	0x0800f1c8
 800ec8c:	0800f188 	.word	0x0800f188

0800ec90 <_write_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4c07      	ldr	r4, [pc, #28]	; (800ecb0 <_write_r+0x20>)
 800ec94:	4605      	mov	r5, r0
 800ec96:	4608      	mov	r0, r1
 800ec98:	4611      	mov	r1, r2
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	6022      	str	r2, [r4, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f7f2 fd63 	bl	800176a <_write>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_write_r+0x1e>
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_write_r+0x1e>
 800ecac:	602b      	str	r3, [r5, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	20005388 	.word	0x20005388

0800ecb4 <__swsetup_r>:
 800ecb4:	4b32      	ldr	r3, [pc, #200]	; (800ed80 <__swsetup_r+0xcc>)
 800ecb6:	b570      	push	{r4, r5, r6, lr}
 800ecb8:	681d      	ldr	r5, [r3, #0]
 800ecba:	4606      	mov	r6, r0
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	b125      	cbz	r5, 800ecca <__swsetup_r+0x16>
 800ecc0:	69ab      	ldr	r3, [r5, #24]
 800ecc2:	b913      	cbnz	r3, 800ecca <__swsetup_r+0x16>
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	f7ff fbf9 	bl	800e4bc <__sinit>
 800ecca:	4b2e      	ldr	r3, [pc, #184]	; (800ed84 <__swsetup_r+0xd0>)
 800eccc:	429c      	cmp	r4, r3
 800ecce:	d10f      	bne.n	800ecf0 <__swsetup_r+0x3c>
 800ecd0:	686c      	ldr	r4, [r5, #4]
 800ecd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	0715      	lsls	r5, r2, #28
 800ecda:	d42c      	bmi.n	800ed36 <__swsetup_r+0x82>
 800ecdc:	06d0      	lsls	r0, r2, #27
 800ecde:	d411      	bmi.n	800ed04 <__swsetup_r+0x50>
 800ece0:	2209      	movs	r2, #9
 800ece2:	6032      	str	r2, [r6, #0]
 800ece4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	f04f 30ff 	mov.w	r0, #4294967295
 800ecee:	e03e      	b.n	800ed6e <__swsetup_r+0xba>
 800ecf0:	4b25      	ldr	r3, [pc, #148]	; (800ed88 <__swsetup_r+0xd4>)
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d101      	bne.n	800ecfa <__swsetup_r+0x46>
 800ecf6:	68ac      	ldr	r4, [r5, #8]
 800ecf8:	e7eb      	b.n	800ecd2 <__swsetup_r+0x1e>
 800ecfa:	4b24      	ldr	r3, [pc, #144]	; (800ed8c <__swsetup_r+0xd8>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	bf08      	it	eq
 800ed00:	68ec      	ldreq	r4, [r5, #12]
 800ed02:	e7e6      	b.n	800ecd2 <__swsetup_r+0x1e>
 800ed04:	0751      	lsls	r1, r2, #29
 800ed06:	d512      	bpl.n	800ed2e <__swsetup_r+0x7a>
 800ed08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed0a:	b141      	cbz	r1, 800ed1e <__swsetup_r+0x6a>
 800ed0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed10:	4299      	cmp	r1, r3
 800ed12:	d002      	beq.n	800ed1a <__swsetup_r+0x66>
 800ed14:	4630      	mov	r0, r6
 800ed16:	f7ff fac1 	bl	800e29c <_free_r>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ed1e:	89a3      	ldrh	r3, [r4, #12]
 800ed20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed24:	81a3      	strh	r3, [r4, #12]
 800ed26:	2300      	movs	r3, #0
 800ed28:	6063      	str	r3, [r4, #4]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	f043 0308 	orr.w	r3, r3, #8
 800ed34:	81a3      	strh	r3, [r4, #12]
 800ed36:	6923      	ldr	r3, [r4, #16]
 800ed38:	b94b      	cbnz	r3, 800ed4e <__swsetup_r+0x9a>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed44:	d003      	beq.n	800ed4e <__swsetup_r+0x9a>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f000 f917 	bl	800ef7c <__smakebuf_r>
 800ed4e:	89a2      	ldrh	r2, [r4, #12]
 800ed50:	f012 0301 	ands.w	r3, r2, #1
 800ed54:	d00c      	beq.n	800ed70 <__swsetup_r+0xbc>
 800ed56:	2300      	movs	r3, #0
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	6963      	ldr	r3, [r4, #20]
 800ed5c:	425b      	negs	r3, r3
 800ed5e:	61a3      	str	r3, [r4, #24]
 800ed60:	6923      	ldr	r3, [r4, #16]
 800ed62:	b953      	cbnz	r3, 800ed7a <__swsetup_r+0xc6>
 800ed64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ed6c:	d1ba      	bne.n	800ece4 <__swsetup_r+0x30>
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	0792      	lsls	r2, r2, #30
 800ed72:	bf58      	it	pl
 800ed74:	6963      	ldrpl	r3, [r4, #20]
 800ed76:	60a3      	str	r3, [r4, #8]
 800ed78:	e7f2      	b.n	800ed60 <__swsetup_r+0xac>
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e7f7      	b.n	800ed6e <__swsetup_r+0xba>
 800ed7e:	bf00      	nop
 800ed80:	20000038 	.word	0x20000038
 800ed84:	0800f1a8 	.word	0x0800f1a8
 800ed88:	0800f1c8 	.word	0x0800f1c8
 800ed8c:	0800f188 	.word	0x0800f188

0800ed90 <_close_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4c06      	ldr	r4, [pc, #24]	; (800edac <_close_r+0x1c>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4605      	mov	r5, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	6023      	str	r3, [r4, #0]
 800ed9c:	f7f2 fd01 	bl	80017a2 <_close>
 800eda0:	1c43      	adds	r3, r0, #1
 800eda2:	d102      	bne.n	800edaa <_close_r+0x1a>
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	b103      	cbz	r3, 800edaa <_close_r+0x1a>
 800eda8:	602b      	str	r3, [r5, #0]
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	20005388 	.word	0x20005388

0800edb0 <__sflush_r>:
 800edb0:	898a      	ldrh	r2, [r1, #12]
 800edb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	4605      	mov	r5, r0
 800edb8:	0710      	lsls	r0, r2, #28
 800edba:	460c      	mov	r4, r1
 800edbc:	d458      	bmi.n	800ee70 <__sflush_r+0xc0>
 800edbe:	684b      	ldr	r3, [r1, #4]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dc05      	bgt.n	800edd0 <__sflush_r+0x20>
 800edc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	dc02      	bgt.n	800edd0 <__sflush_r+0x20>
 800edca:	2000      	movs	r0, #0
 800edcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edd2:	2e00      	cmp	r6, #0
 800edd4:	d0f9      	beq.n	800edca <__sflush_r+0x1a>
 800edd6:	2300      	movs	r3, #0
 800edd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eddc:	682f      	ldr	r7, [r5, #0]
 800edde:	6a21      	ldr	r1, [r4, #32]
 800ede0:	602b      	str	r3, [r5, #0]
 800ede2:	d032      	beq.n	800ee4a <__sflush_r+0x9a>
 800ede4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	075a      	lsls	r2, r3, #29
 800edea:	d505      	bpl.n	800edf8 <__sflush_r+0x48>
 800edec:	6863      	ldr	r3, [r4, #4]
 800edee:	1ac0      	subs	r0, r0, r3
 800edf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edf2:	b10b      	cbz	r3, 800edf8 <__sflush_r+0x48>
 800edf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edf6:	1ac0      	subs	r0, r0, r3
 800edf8:	2300      	movs	r3, #0
 800edfa:	4602      	mov	r2, r0
 800edfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edfe:	6a21      	ldr	r1, [r4, #32]
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b0      	blx	r6
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	d106      	bne.n	800ee18 <__sflush_r+0x68>
 800ee0a:	6829      	ldr	r1, [r5, #0]
 800ee0c:	291d      	cmp	r1, #29
 800ee0e:	d848      	bhi.n	800eea2 <__sflush_r+0xf2>
 800ee10:	4a29      	ldr	r2, [pc, #164]	; (800eeb8 <__sflush_r+0x108>)
 800ee12:	40ca      	lsrs	r2, r1
 800ee14:	07d6      	lsls	r6, r2, #31
 800ee16:	d544      	bpl.n	800eea2 <__sflush_r+0xf2>
 800ee18:	2200      	movs	r2, #0
 800ee1a:	6062      	str	r2, [r4, #4]
 800ee1c:	04d9      	lsls	r1, r3, #19
 800ee1e:	6922      	ldr	r2, [r4, #16]
 800ee20:	6022      	str	r2, [r4, #0]
 800ee22:	d504      	bpl.n	800ee2e <__sflush_r+0x7e>
 800ee24:	1c42      	adds	r2, r0, #1
 800ee26:	d101      	bne.n	800ee2c <__sflush_r+0x7c>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	b903      	cbnz	r3, 800ee2e <__sflush_r+0x7e>
 800ee2c:	6560      	str	r0, [r4, #84]	; 0x54
 800ee2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee30:	602f      	str	r7, [r5, #0]
 800ee32:	2900      	cmp	r1, #0
 800ee34:	d0c9      	beq.n	800edca <__sflush_r+0x1a>
 800ee36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	d002      	beq.n	800ee44 <__sflush_r+0x94>
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f7ff fa2c 	bl	800e29c <_free_r>
 800ee44:	2000      	movs	r0, #0
 800ee46:	6360      	str	r0, [r4, #52]	; 0x34
 800ee48:	e7c0      	b.n	800edcc <__sflush_r+0x1c>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	47b0      	blx	r6
 800ee50:	1c41      	adds	r1, r0, #1
 800ee52:	d1c8      	bne.n	800ede6 <__sflush_r+0x36>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0c5      	beq.n	800ede6 <__sflush_r+0x36>
 800ee5a:	2b1d      	cmp	r3, #29
 800ee5c:	d001      	beq.n	800ee62 <__sflush_r+0xb2>
 800ee5e:	2b16      	cmp	r3, #22
 800ee60:	d101      	bne.n	800ee66 <__sflush_r+0xb6>
 800ee62:	602f      	str	r7, [r5, #0]
 800ee64:	e7b1      	b.n	800edca <__sflush_r+0x1a>
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee6c:	81a3      	strh	r3, [r4, #12]
 800ee6e:	e7ad      	b.n	800edcc <__sflush_r+0x1c>
 800ee70:	690f      	ldr	r7, [r1, #16]
 800ee72:	2f00      	cmp	r7, #0
 800ee74:	d0a9      	beq.n	800edca <__sflush_r+0x1a>
 800ee76:	0793      	lsls	r3, r2, #30
 800ee78:	680e      	ldr	r6, [r1, #0]
 800ee7a:	bf08      	it	eq
 800ee7c:	694b      	ldreq	r3, [r1, #20]
 800ee7e:	600f      	str	r7, [r1, #0]
 800ee80:	bf18      	it	ne
 800ee82:	2300      	movne	r3, #0
 800ee84:	eba6 0807 	sub.w	r8, r6, r7
 800ee88:	608b      	str	r3, [r1, #8]
 800ee8a:	f1b8 0f00 	cmp.w	r8, #0
 800ee8e:	dd9c      	ble.n	800edca <__sflush_r+0x1a>
 800ee90:	4643      	mov	r3, r8
 800ee92:	463a      	mov	r2, r7
 800ee94:	6a21      	ldr	r1, [r4, #32]
 800ee96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee98:	4628      	mov	r0, r5
 800ee9a:	47b0      	blx	r6
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	dc06      	bgt.n	800eeae <__sflush_r+0xfe>
 800eea0:	89a3      	ldrh	r3, [r4, #12]
 800eea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eea6:	81a3      	strh	r3, [r4, #12]
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e78e      	b.n	800edcc <__sflush_r+0x1c>
 800eeae:	4407      	add	r7, r0
 800eeb0:	eba8 0800 	sub.w	r8, r8, r0
 800eeb4:	e7e9      	b.n	800ee8a <__sflush_r+0xda>
 800eeb6:	bf00      	nop
 800eeb8:	20400001 	.word	0x20400001

0800eebc <_fflush_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	690b      	ldr	r3, [r1, #16]
 800eec0:	4605      	mov	r5, r0
 800eec2:	460c      	mov	r4, r1
 800eec4:	b1db      	cbz	r3, 800eefe <_fflush_r+0x42>
 800eec6:	b118      	cbz	r0, 800eed0 <_fflush_r+0x14>
 800eec8:	6983      	ldr	r3, [r0, #24]
 800eeca:	b90b      	cbnz	r3, 800eed0 <_fflush_r+0x14>
 800eecc:	f7ff faf6 	bl	800e4bc <__sinit>
 800eed0:	4b0c      	ldr	r3, [pc, #48]	; (800ef04 <_fflush_r+0x48>)
 800eed2:	429c      	cmp	r4, r3
 800eed4:	d109      	bne.n	800eeea <_fflush_r+0x2e>
 800eed6:	686c      	ldr	r4, [r5, #4]
 800eed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eedc:	b17b      	cbz	r3, 800eefe <_fflush_r+0x42>
 800eede:	4621      	mov	r1, r4
 800eee0:	4628      	mov	r0, r5
 800eee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eee6:	f7ff bf63 	b.w	800edb0 <__sflush_r>
 800eeea:	4b07      	ldr	r3, [pc, #28]	; (800ef08 <_fflush_r+0x4c>)
 800eeec:	429c      	cmp	r4, r3
 800eeee:	d101      	bne.n	800eef4 <_fflush_r+0x38>
 800eef0:	68ac      	ldr	r4, [r5, #8]
 800eef2:	e7f1      	b.n	800eed8 <_fflush_r+0x1c>
 800eef4:	4b05      	ldr	r3, [pc, #20]	; (800ef0c <_fflush_r+0x50>)
 800eef6:	429c      	cmp	r4, r3
 800eef8:	bf08      	it	eq
 800eefa:	68ec      	ldreq	r4, [r5, #12]
 800eefc:	e7ec      	b.n	800eed8 <_fflush_r+0x1c>
 800eefe:	2000      	movs	r0, #0
 800ef00:	bd38      	pop	{r3, r4, r5, pc}
 800ef02:	bf00      	nop
 800ef04:	0800f1a8 	.word	0x0800f1a8
 800ef08:	0800f1c8 	.word	0x0800f1c8
 800ef0c:	0800f188 	.word	0x0800f188

0800ef10 <_lseek_r>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4c07      	ldr	r4, [pc, #28]	; (800ef30 <_lseek_r+0x20>)
 800ef14:	4605      	mov	r5, r0
 800ef16:	4608      	mov	r0, r1
 800ef18:	4611      	mov	r1, r2
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	6022      	str	r2, [r4, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f7f2 fc66 	bl	80017f0 <_lseek>
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	d102      	bne.n	800ef2e <_lseek_r+0x1e>
 800ef28:	6823      	ldr	r3, [r4, #0]
 800ef2a:	b103      	cbz	r3, 800ef2e <_lseek_r+0x1e>
 800ef2c:	602b      	str	r3, [r5, #0]
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	20005388 	.word	0x20005388

0800ef34 <__swhatbuf_r>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	460e      	mov	r6, r1
 800ef38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	b096      	sub	sp, #88	; 0x58
 800ef40:	4614      	mov	r4, r2
 800ef42:	461d      	mov	r5, r3
 800ef44:	da07      	bge.n	800ef56 <__swhatbuf_r+0x22>
 800ef46:	2300      	movs	r3, #0
 800ef48:	602b      	str	r3, [r5, #0]
 800ef4a:	89b3      	ldrh	r3, [r6, #12]
 800ef4c:	061a      	lsls	r2, r3, #24
 800ef4e:	d410      	bmi.n	800ef72 <__swhatbuf_r+0x3e>
 800ef50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef54:	e00e      	b.n	800ef74 <__swhatbuf_r+0x40>
 800ef56:	466a      	mov	r2, sp
 800ef58:	f000 f862 	bl	800f020 <_fstat_r>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	dbf2      	blt.n	800ef46 <__swhatbuf_r+0x12>
 800ef60:	9a01      	ldr	r2, [sp, #4]
 800ef62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef6a:	425a      	negs	r2, r3
 800ef6c:	415a      	adcs	r2, r3
 800ef6e:	602a      	str	r2, [r5, #0]
 800ef70:	e7ee      	b.n	800ef50 <__swhatbuf_r+0x1c>
 800ef72:	2340      	movs	r3, #64	; 0x40
 800ef74:	2000      	movs	r0, #0
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	b016      	add	sp, #88	; 0x58
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}

0800ef7c <__smakebuf_r>:
 800ef7c:	898b      	ldrh	r3, [r1, #12]
 800ef7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef80:	079d      	lsls	r5, r3, #30
 800ef82:	4606      	mov	r6, r0
 800ef84:	460c      	mov	r4, r1
 800ef86:	d507      	bpl.n	800ef98 <__smakebuf_r+0x1c>
 800ef88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	6123      	str	r3, [r4, #16]
 800ef90:	2301      	movs	r3, #1
 800ef92:	6163      	str	r3, [r4, #20]
 800ef94:	b002      	add	sp, #8
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
 800ef98:	ab01      	add	r3, sp, #4
 800ef9a:	466a      	mov	r2, sp
 800ef9c:	f7ff ffca 	bl	800ef34 <__swhatbuf_r>
 800efa0:	9900      	ldr	r1, [sp, #0]
 800efa2:	4605      	mov	r5, r0
 800efa4:	4630      	mov	r0, r6
 800efa6:	f7ff f9c7 	bl	800e338 <_malloc_r>
 800efaa:	b948      	cbnz	r0, 800efc0 <__smakebuf_r+0x44>
 800efac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efb0:	059a      	lsls	r2, r3, #22
 800efb2:	d4ef      	bmi.n	800ef94 <__smakebuf_r+0x18>
 800efb4:	f023 0303 	bic.w	r3, r3, #3
 800efb8:	f043 0302 	orr.w	r3, r3, #2
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	e7e3      	b.n	800ef88 <__smakebuf_r+0xc>
 800efc0:	4b0d      	ldr	r3, [pc, #52]	; (800eff8 <__smakebuf_r+0x7c>)
 800efc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	6020      	str	r0, [r4, #0]
 800efc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efcc:	81a3      	strh	r3, [r4, #12]
 800efce:	9b00      	ldr	r3, [sp, #0]
 800efd0:	6163      	str	r3, [r4, #20]
 800efd2:	9b01      	ldr	r3, [sp, #4]
 800efd4:	6120      	str	r0, [r4, #16]
 800efd6:	b15b      	cbz	r3, 800eff0 <__smakebuf_r+0x74>
 800efd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efdc:	4630      	mov	r0, r6
 800efde:	f000 f831 	bl	800f044 <_isatty_r>
 800efe2:	b128      	cbz	r0, 800eff0 <__smakebuf_r+0x74>
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	f023 0303 	bic.w	r3, r3, #3
 800efea:	f043 0301 	orr.w	r3, r3, #1
 800efee:	81a3      	strh	r3, [r4, #12]
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	431d      	orrs	r5, r3
 800eff4:	81a5      	strh	r5, [r4, #12]
 800eff6:	e7cd      	b.n	800ef94 <__smakebuf_r+0x18>
 800eff8:	0800e485 	.word	0x0800e485

0800effc <_read_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4c07      	ldr	r4, [pc, #28]	; (800f01c <_read_r+0x20>)
 800f000:	4605      	mov	r5, r0
 800f002:	4608      	mov	r0, r1
 800f004:	4611      	mov	r1, r2
 800f006:	2200      	movs	r2, #0
 800f008:	6022      	str	r2, [r4, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f7f2 fb90 	bl	8001730 <_read>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_read_r+0x1e>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	b103      	cbz	r3, 800f01a <_read_r+0x1e>
 800f018:	602b      	str	r3, [r5, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	20005388 	.word	0x20005388

0800f020 <_fstat_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4c07      	ldr	r4, [pc, #28]	; (800f040 <_fstat_r+0x20>)
 800f024:	2300      	movs	r3, #0
 800f026:	4605      	mov	r5, r0
 800f028:	4608      	mov	r0, r1
 800f02a:	4611      	mov	r1, r2
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	f7f2 fbc4 	bl	80017ba <_fstat>
 800f032:	1c43      	adds	r3, r0, #1
 800f034:	d102      	bne.n	800f03c <_fstat_r+0x1c>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	b103      	cbz	r3, 800f03c <_fstat_r+0x1c>
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	bd38      	pop	{r3, r4, r5, pc}
 800f03e:	bf00      	nop
 800f040:	20005388 	.word	0x20005388

0800f044 <_isatty_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4c06      	ldr	r4, [pc, #24]	; (800f060 <_isatty_r+0x1c>)
 800f048:	2300      	movs	r3, #0
 800f04a:	4605      	mov	r5, r0
 800f04c:	4608      	mov	r0, r1
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	f7f2 fbc3 	bl	80017da <_isatty>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d102      	bne.n	800f05e <_isatty_r+0x1a>
 800f058:	6823      	ldr	r3, [r4, #0]
 800f05a:	b103      	cbz	r3, 800f05e <_isatty_r+0x1a>
 800f05c:	602b      	str	r3, [r5, #0]
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	20005388 	.word	0x20005388

0800f064 <_init>:
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	bf00      	nop
 800f068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f06a:	bc08      	pop	{r3}
 800f06c:	469e      	mov	lr, r3
 800f06e:	4770      	bx	lr

0800f070 <_fini>:
 800f070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f072:	bf00      	nop
 800f074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f076:	bc08      	pop	{r3}
 800f078:	469e      	mov	lr, r3
 800f07a:	4770      	bx	lr
