
MeasuringRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800e288  0800e288  0001e288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e390  0800e390  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e390  0800e390  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e398  0800e398  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e398  0800e398  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e39c  0800e39c  0001e39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f4  20000094  0800e434  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005388  0800e434  00025388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e4a1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005717  00000000  00000000  0004e565  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021f0  00000000  00000000  00053c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f88  00000000  00000000  00055e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000080fa  00000000  00000000  00057df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e2ec  00000000  00000000  0005fef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea9f7  00000000  00000000  0007e1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168bd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000914c  00000000  00000000  00168c50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e270 	.word	0x0800e270

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800e270 	.word	0x0800e270

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000524:	f001 f91a 	bl	800175c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000528:	f000 f850 	bl	80005cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800052c:	f000 fa14 	bl	8000958 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000530:	f000 f8e8 	bl	8000704 <MX_DFSDM1_Init>
	MX_DFSDM2_Init();
 8000534:	f000 f91e 	bl	8000774 <MX_DFSDM2_Init>
	MX_FSMC_Init();
 8000538:	f000 fc42 	bl	8000dc0 <MX_FSMC_Init>
	MX_I2S2_Init();
 800053c:	f000 f984 	bl	8000848 <MX_I2S2_Init>
	MX_SDIO_SD_Init();
 8000540:	f000 f9b0 	bl	80008a4 <MX_SDIO_SD_Init>
	MX_UART7_Init();
 8000544:	f000 f9de 	bl	8000904 <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	*lidar_tx_buffer = 1510212608U;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x78>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800054e:	f00a faa3 	bl	800aa98 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PollLidar */
	PollLidarHandle = osThreadNew(StartPollLidarTask, NULL,
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <main+0x7c>)
 8000554:	2100      	movs	r1, #0
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0x80>)
 8000558:	f00a fb08 	bl	800ab6c <osThreadNew>
 800055c:	4602      	mov	r2, r0
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0x84>)
 8000560:	601a      	str	r2, [r3, #0]
			&PollLidar_attributes);

	/* creation of UpdateLCD */
	UpdateLCDHandle = osThreadNew(StartUpdateLCDTask, NULL,
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <main+0x88>)
 8000564:	2100      	movs	r1, #0
 8000566:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x8c>)
 8000568:	f00a fb00 	bl	800ab6c <osThreadNew>
 800056c:	4602      	mov	r2, r0
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <main+0x90>)
 8000570:	601a      	str	r2, [r3, #0]
			&UpdateLCD_attributes);

	/* creation of ControlMotors */
	ControlMotorsHandle = osThreadNew(StartMotorControlTask, NULL,
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <main+0x94>)
 8000574:	2100      	movs	r1, #0
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0x98>)
 8000578:	f00a faf8 	bl	800ab6c <osThreadNew>
 800057c:	4602      	mov	r2, r0
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <main+0x9c>)
 8000580:	601a      	str	r2, [r3, #0]
			&ControlMotors_attributes);

	/* creation of ChangeMetric */
	ChangeMetricHandle = osThreadNew(StartChangeMetricTask, NULL,
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <main+0xa0>)
 8000584:	2100      	movs	r1, #0
 8000586:	480f      	ldr	r0, [pc, #60]	; (80005c4 <main+0xa4>)
 8000588:	f00a faf0 	bl	800ab6c <osThreadNew>
 800058c:	4602      	mov	r2, r0
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0xa8>)
 8000590:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000592:	f00a fab5 	bl	800ab00 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000596:	e7fe      	b.n	8000596 <main+0x76>
 8000598:	20004be4 	.word	0x20004be4
 800059c:	0800e2e8 	.word	0x0800e2e8
 80005a0:	08000e85 	.word	0x08000e85
 80005a4:	20004ac8 	.word	0x20004ac8
 80005a8:	0800e30c 	.word	0x0800e30c
 80005ac:	08000ec9 	.word	0x08000ec9
 80005b0:	20004a8c 	.word	0x20004a8c
 80005b4:	0800e330 	.word	0x0800e330
 80005b8:	08000ed9 	.word	0x08000ed9
 80005bc:	20004c30 	.word	0x20004c30
 80005c0:	0800e354 	.word	0x0800e354
 80005c4:	08000ee3 	.word	0x08000ee3
 80005c8:	20004a48 	.word	0x20004a48

080005cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0aa      	sub	sp, #168	; 0xa8
 80005d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f00d fd85 	bl	800e0ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2258      	movs	r2, #88	; 0x58
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d fd76 	bl	800e0ea <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <SystemClock_Config+0x130>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	4a3d      	ldr	r2, [pc, #244]	; (80006fc <SystemClock_Config+0x130>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <SystemClock_Config+0x130>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <SystemClock_Config+0x134>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a37      	ldr	r2, [pc, #220]	; (8000700 <SystemClock_Config+0x134>)
 8000624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <SystemClock_Config+0x134>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000636:	2303      	movs	r3, #3
 8000638:	677b      	str	r3, [r7, #116]	; 0x74
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 800063a:	2300      	movs	r3, #0
 800063c:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLM = 15;
 8000658:	230f      	movs	r3, #15
 800065a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLN = 144;
 800065e:	2390      	movs	r3, #144	; 0x90
 8000660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800066a:	2305      	movs	r3, #5
 800066c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000676:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fc40 	bl	8004f00 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xbe>
		Error_Handler();
 8000686:	f000 fc47 	bl	8000f18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068e:	2300      	movs	r3, #0
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800069e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fe51 	bl	800434c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xe8>
		Error_Handler();
 80006b0:	f000 fc32 	bl	8000f18 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1
 80006b4:	f240 1361 	movw	r3, #353	; 0x161
 80006b8:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_DFSDM1 | RCC_PERIPHCLK_SDIO | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006ba:	2332      	movs	r3, #50	; 0x32
 80006bc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80006be:	230c      	movs	r3, #12
 80006c0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006ca:	2300      	movs	r3, #0
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006d8:	2300      	movs	r3, #0
 80006da:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 f82f 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x128>
		Error_Handler();
 80006f0:	f000 fc12 	bl	8000f18 <Error_Handler>
	}
}
 80006f4:	bf00      	nop
 80006f6:	37a8      	adds	r7, #168	; 0xa8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_DFSDM1_Init+0x68>)
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <MX_DFSDM1_Init+0x6c>)
 800070c:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000710:	2201      	movs	r2, #1
 8000712:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_DFSDM1_Init+0x68>)
 800071c:	2202      	movs	r2, #2
 800071e:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_DFSDM1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type =
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000734:	2202      	movs	r2, #2
 8000736:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_DFSDM1_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000746:	2201      	movs	r2, #1
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_DFSDM1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_DFSDM1_Init+0x68>)
 8000758:	f001 f946 	bl	80019e8 <HAL_DFSDM_ChannelInit>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_DFSDM1_Init+0x62>
		Error_Handler();
 8000762:	f000 fbd9 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20004a10 	.word	0x20004a10
 8000770:	40016020 	.word	0x40016020

08000774 <MX_DFSDM2_Init>:
/**
 * @brief DFSDM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM2_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM2_Init 0 */

	/* USER CODE BEGIN DFSDM2_Init 1 */

	/* USER CODE END DFSDM2_Init 1 */
	hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <MX_DFSDM2_Init+0xc8>)
 800077c:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 8000780:	2201      	movs	r2, #1
 8000782:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel1.Init.OutputClock.Selection =
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel1.Init.SerialInterface.Type =
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel1.Init.SerialInterface.SpiClock =
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel1.Init.Offset = 0;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK) {
 80007c6:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_DFSDM2_Init+0xc4>)
 80007c8:	f001 f90e 	bl	80019e8 <HAL_DFSDM_ChannelInit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_DFSDM2_Init+0x62>
		Error_Handler();
 80007d2:	f000 fba1 	bl	8000f18 <Error_Handler>
	}
	hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <MX_DFSDM2_Init+0xd0>)
 80007da:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007de:	2201      	movs	r2, #1
 80007e0:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel7.Init.OutputClock.Selection =
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel7.Init.SerialInterface.Type =
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 8000802:	2202      	movs	r2, #2
 8000804:	61da      	str	r2, [r3, #28]
			DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel7.Init.SerialInterface.SpiClock =
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 8000814:	2201      	movs	r2, #1
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel7.Init.Offset = 0;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 800081a:	2200      	movs	r2, #0
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK) {
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_DFSDM2_Init+0xcc>)
 8000826:	f001 f8df 	bl	80019e8 <HAL_DFSDM_ChannelInit>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_DFSDM2_Init+0xc0>
		Error_Handler();
 8000830:	f000 fb72 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM2_Init 2 */

	/* USER CODE END DFSDM2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20004b1c 	.word	0x20004b1c
 800083c:	40016420 	.word	0x40016420
 8000840:	20004a90 	.word	0x20004a90
 8000844:	400164e0 	.word	0x400164e0

08000848 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_I2S2_Init+0x54>)
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <MX_I2S2_Init+0x58>)
 8000850:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2S2_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_I2S2_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2S2_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_I2S2_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_I2S2_Init+0x54>)
 8000870:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000874:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2S2_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2S2_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2S2_Init+0x54>)
 8000884:	2201      	movs	r2, #1
 8000886:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2S2_Init+0x54>)
 800088a:	f003 f89d 	bl	80039c8 <HAL_I2S_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2S2_Init+0x50>
		Error_Handler();
 8000894:	f000 fb40 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20004be8 	.word	0x20004be8
 80008a0:	40003800 	.word	0x40003800

080008a4 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_SDIO_SD_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 80008d2:	480a      	ldr	r0, [pc, #40]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008d4:	f004 fd56 	bl	8005384 <HAL_SD_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SDIO_SD_Init+0x3e>
		Error_Handler();
 80008de:	f000 fb1b 	bl	8000f18 <Error_Handler>
	}
	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 80008e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_SDIO_SD_Init+0x58>)
 80008e8:	f004 ff80 	bl	80057ec <HAL_SD_ConfigWideBusOperation>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_SDIO_SD_Init+0x52>
		Error_Handler();
 80008f2:	f000 fb11 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20004b54 	.word	0x20004b54
 8000900:	40012c00 	.word	0x40012c00

08000904 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_UART7_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_UART7_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_UART7_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_UART7_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_UART7_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_UART7_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_UART7_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_UART7_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_UART7_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_UART7_Init+0x4c>)
 800093c:	f005 fd10 	bl	8006360 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_UART7_Init+0x46>
		Error_Handler();
 8000946:	f000 fae7 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20004a4c 	.word	0x20004a4c
 8000954:	40007800 	.word	0x40007800

08000958 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
 8000972:	4bb1      	ldr	r3, [pc, #708]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4ab0      	ldr	r2, [pc, #704]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4bae      	ldr	r3, [pc, #696]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	623b      	str	r3, [r7, #32]
 8000988:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	4baa      	ldr	r3, [pc, #680]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4aa9      	ldr	r2, [pc, #676]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4ba7      	ldr	r3, [pc, #668]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	4ba3      	ldr	r3, [pc, #652]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4aa2      	ldr	r2, [pc, #648]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4ba0      	ldr	r3, [pc, #640]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	4b9c      	ldr	r3, [pc, #624]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a9b      	ldr	r2, [pc, #620]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b99      	ldr	r3, [pc, #612]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b95      	ldr	r3, [pc, #596]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a94      	ldr	r2, [pc, #592]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b92      	ldr	r3, [pc, #584]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b8e      	ldr	r3, [pc, #568]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a8d      	ldr	r2, [pc, #564]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b8b      	ldr	r3, [pc, #556]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b87      	ldr	r3, [pc, #540]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a86      	ldr	r2, [pc, #536]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b84      	ldr	r3, [pc, #528]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b80      	ldr	r3, [pc, #512]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a7f      	ldr	r2, [pc, #508]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b7d      	ldr	r3, [pc, #500]	; (8000c38 <MX_GPIO_Init+0x2e0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2178      	movs	r1, #120	; 0x78
 8000a52:	487a      	ldr	r0, [pc, #488]	; (8000c3c <MX_GPIO_Init+0x2e4>)
 8000a54:	f001 faae 	bl	8001fb4 <HAL_GPIO_WritePin>
			LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin | LEFT_MOTOR_2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RIGHT_MOTOR_I_Pin | RIGHT_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f242 0120 	movw	r1, #8224	; 0x2020
 8000a5e:	4878      	ldr	r0, [pc, #480]	; (8000c40 <MX_GPIO_Init+0x2e8>)
 8000a60:	f001 faa8 	bl	8001fb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LEFT_MOTOR_SPEED_GPIO_Port, LEFT_MOTOR_SPEED_Pin,
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6a:	4876      	ldr	r0, [pc, #472]	; (8000c44 <MX_GPIO_Init+0x2ec>)
 8000a6c:	f001 faa2 	bl	8001fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RIGHT_MOTOR_IA4_GPIO_Port, RIGHT_MOTOR_IA4_Pin,
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	4874      	ldr	r0, [pc, #464]	; (8000c48 <MX_GPIO_Init+0x2f0>)
 8000a76:	f001 fa9d 	bl	8001fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f24e 0141 	movw	r1, #57409	; 0xe041
 8000a80:	4872      	ldr	r0, [pc, #456]	; (8000c4c <MX_GPIO_Init+0x2f4>)
 8000a82:	f001 fa97 	bl	8001fb4 <HAL_GPIO_WritePin>
			RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin | WIFI_WKUP_Pin
					| LEFT_MOTOR_I_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13,
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000a8c:	4870      	ldr	r0, [pc, #448]	; (8000c50 <MX_GPIO_Init+0x2f8>)
 8000a8e:	f001 fa91 	bl	8001fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : QSPI_BK1_IO2_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8000a92:	2304      	movs	r3, #4
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4863      	ldr	r0, [pc, #396]	; (8000c3c <MX_GPIO_Init+0x2e4>)
 8000aae:	f001 f8ef 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin LEFT_MOTOR_2_Pin */
	GPIO_InitStruct.Pin = LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin
 8000ab2:	2378      	movs	r3, #120	; 0x78
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
			| LEFT_MOTOR_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	485c      	ldr	r0, [pc, #368]	; (8000c3c <MX_GPIO_Init+0x2e4>)
 8000aca:	f001 f8e1 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_I_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_I_Pin | RIGHT_Pin;
 8000ace:	f242 0320 	movw	r3, #8224	; 0x2020
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4856      	ldr	r0, [pc, #344]	; (8000c40 <MX_GPIO_Init+0x2e8>)
 8000ae8:	f001 f8d2 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin | QSPI_BK1_IO1_Pin;
 8000aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afe:	230a      	movs	r3, #10
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	484e      	ldr	r0, [pc, #312]	; (8000c44 <MX_GPIO_Init+0x2ec>)
 8000b0a:	f001 f8c1 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : LEFT_MOTOR_SPEED_Pin */
	GPIO_InitStruct.Pin = LEFT_MOTOR_SPEED_Pin;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LEFT_MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4847      	ldr	r0, [pc, #284]	; (8000c44 <MX_GPIO_Init+0x2ec>)
 8000b28:	f001 f8b2 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin */
	GPIO_InitStruct.Pin = ARD_A0_Pin | ARD_A5_Pin;
 8000b2c:	2311      	movs	r3, #17
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4840      	ldr	r0, [pc, #256]	; (8000c40 <MX_GPIO_Init+0x2e8>)
 8000b40:	f001 f8a6 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : CTP_INT_Pin */
	GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <MX_GPIO_Init+0x2fc>)
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	483a      	ldr	r0, [pc, #232]	; (8000c40 <MX_GPIO_Init+0x2e8>)
 8000b58:	f001 f89a 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : METRIC_CHANGE_Pin */
	GPIO_InitStruct.Pin = METRIC_CHANGE_Pin;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x2fc>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(METRIC_CHANGE_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4836      	ldr	r0, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x2f0>)
 8000b70:	f001 f88e 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : RIGHT_MOTOR_IA4_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_IA4_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(RIGHT_MOTOR_IA4_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	482f      	ldr	r0, [pc, #188]	; (8000c48 <MX_GPIO_Init+0x2f0>)
 8000b8c:	f001 f880 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A3_Pin */
	GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000b90:	2320      	movs	r3, #32
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	2303      	movs	r3, #3
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4829      	ldr	r0, [pc, #164]	; (8000c48 <MX_GPIO_Init+0x2f0>)
 8000ba4:	f001 f874 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_SPEED_Pin PB13 LCD_TE_Pin WIFI_WKUP_Pin
	 LEFT_MOTOR_I_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin
 8000ba8:	f24e 0341 	movw	r3, #57409	; 0xe041
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
			| WIFI_WKUP_Pin | LEFT_MOTOR_I_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4822      	ldr	r0, [pc, #136]	; (8000c4c <MX_GPIO_Init+0x2f4>)
 8000bc2:	f001 f865 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A4_Pin */
	GPIO_InitStruct.Pin = ARD_A4_Pin;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481c      	ldr	r0, [pc, #112]	; (8000c4c <MX_GPIO_Init+0x2f4>)
 8000bda:	f001 f859 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_CLK_Pin */
	GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000bee:	2309      	movs	r3, #9
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4814      	ldr	r0, [pc, #80]	; (8000c4c <MX_GPIO_Init+0x2f4>)
 8000bfa:	f001 f849 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_Detect_Pin */
	GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_GPIO_Init+0x2fc>)
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_GPIO_Init+0x2ec>)
 8000c14:	f001 f83c 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8000c18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	e010      	b.n	8000c58 <MX_GPIO_Init+0x300>
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	10110000 	.word	0x10110000
 8000c58:	4853      	ldr	r0, [pc, #332]	; (8000da8 <MX_GPIO_Init+0x450>)
 8000c5a:	f001 f819 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D13_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	484b      	ldr	r0, [pc, #300]	; (8000da8 <MX_GPIO_Init+0x450>)
 8000c7c:	f001 f808 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_IO3_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000c92:	2309      	movs	r3, #9
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4843      	ldr	r0, [pc, #268]	; (8000dac <MX_GPIO_Init+0x454>)
 8000c9e:	f000 fff7 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483c      	ldr	r0, [pc, #240]	; (8000db0 <MX_GPIO_Init+0x458>)
 8000cbe:	f000 ffe7 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin | CODEC_INT_Pin;
 8000cc2:	f248 0380 	movw	r3, #32896	; 0x8080
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <MX_GPIO_Init+0x45c>)
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4836      	ldr	r0, [pc, #216]	; (8000db0 <MX_GPIO_Init+0x458>)
 8000cd8:	f000 ffda 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13;
 8000cdc:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482e      	ldr	r0, [pc, #184]	; (8000db0 <MX_GPIO_Init+0x458>)
 8000cf6:	f000 ffcb 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2CFMP1_SCL_Pin I2CFMP_SDA_Pin */
	GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin | I2CFMP_SDA_Pin;
 8000cfa:	23c0      	movs	r3, #192	; 0xc0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4828      	ldr	r0, [pc, #160]	; (8000db8 <MX_GPIO_Init+0x460>)
 8000d16:	f000 ffbb 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D10_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_GPIO_Init+0x464>)
 8000d38:	f000 ffaa 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 8000d3c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4815      	ldr	r0, [pc, #84]	; (8000db0 <MX_GPIO_Init+0x458>)
 8000d5a:	f000 ff99 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D12_Pin | ARD_D11_Pin;
 8000d5e:	2330      	movs	r3, #48	; 0x30
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <MX_GPIO_Init+0x450>)
 8000d7a:	f000 ff89 	bl	8001c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d90:	2302      	movs	r3, #2
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_GPIO_Init+0x450>)
 8000d9c:	f000 ff78 	bl	8001c90 <HAL_GPIO_Init>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021800 	.word	0x40021800
 8000db4:	10110000 	.word	0x10110000
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000dda:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000dde:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <MX_FSMC_Init+0xc0>)
 8000de4:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 8000e40:	230f      	movs	r3, #15
 8000e42:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8000e44:	230f      	movs	r3, #15
 8000e46:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 8000e48:	23ff      	movs	r3, #255	; 0xff
 8000e4a:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 8000e50:	2310      	movs	r3, #16
 8000e52:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8000e54:	2311      	movs	r3, #17
 8000e56:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_FSMC_Init+0xbc>)
 8000e64:	f004 fffa 	bl	8005e5c <HAL_SRAM_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_FSMC_Init+0xb2>
		Error_Handler();
 8000e6e:	f000 f853 	bl	8000f18 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004acc 	.word	0x20004acc
 8000e80:	a0000104 	.word	0xa0000104

08000e84 <StartPollLidarTask>:
 * @brief  Function implementing the PollLidar thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPollLidarTask */
void StartPollLidarTask(void *argument) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000e8c:	f00c fde6 	bl	800da5c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	TickType_t lastWakeTime = xTaskGetTickCount();
 8000e90:	f00b fa80 	bl	800c394 <xTaskGetTickCount>
 8000e94:	60f8      	str	r0, [r7, #12]

	for (;;) {
		//delay for 50ms
		vTaskDelayUntil(&xTaskGetTickCount, LIDAR_RATE);
 8000e96:	2132      	movs	r1, #50	; 0x32
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <StartPollLidarTask+0x34>)
 8000e9a:	f00b f8bf 	bl	800c01c <vTaskDelayUntil>

		// send 5A 04 04 00 to tell lidar sensor to send data
		HAL_UART_Transmit(&huart7,lidar_tx_buffer,4,50);
 8000e9e:	2332      	movs	r3, #50	; 0x32
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4906      	ldr	r1, [pc, #24]	; (8000ebc <StartPollLidarTask+0x38>)
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <StartPollLidarTask+0x3c>)
 8000ea6:	f005 faa8 	bl	80063fa <HAL_UART_Transmit>

		//get 9 bytes of data and place into buffer
		HAL_UART_Receive(&huart7,lidar_rx_buffer,9,50);
 8000eaa:	2332      	movs	r3, #50	; 0x32
 8000eac:	2209      	movs	r2, #9
 8000eae:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <StartPollLidarTask+0x40>)
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <StartPollLidarTask+0x3c>)
 8000eb2:	f005 fb3b 	bl	800652c <HAL_UART_Receive>
		vTaskDelayUntil(&xTaskGetTickCount, LIDAR_RATE);
 8000eb6:	e7ee      	b.n	8000e96 <StartPollLidarTask+0x12>
 8000eb8:	0800c395 	.word	0x0800c395
 8000ebc:	20004be4 	.word	0x20004be4
 8000ec0:	20004a4c 	.word	0x20004a4c
 8000ec4:	20004bd8 	.word	0x20004bd8

08000ec8 <StartUpdateLCDTask>:
 * @brief Function implementing the UpdateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCDTask */
void StartUpdateLCDTask(void *argument) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUpdateLCDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f009 fef1 	bl	800acb8 <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <StartUpdateLCDTask+0x8>

08000ed8 <StartMotorControlTask>:
 * @brief Function implementing the ControlMotors thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorControlTask */
void StartMotorControlTask(void *argument) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorControlTask */
	/* Infinite loop */
	for (;;) {
 8000ee0:	e7fe      	b.n	8000ee0 <StartMotorControlTask+0x8>

08000ee2 <StartChangeMetricTask>:
 * @brief Function implementing the ChangeMetric thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChangeMetricTask */
void StartChangeMetricTask(void *argument) {
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartChangeMetricTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f009 fee4 	bl	800acb8 <osDelay>
 8000ef0:	e7fb      	b.n	8000eea <StartChangeMetricTask+0x8>
	...

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f06:	f000 fc4b 	bl	80017a0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40001000 	.word	0x40001000

08000f18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a77      	ldr	r2, [pc, #476]	; (8001174 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00e      	beq.n	8000fb8 <HAL_DFSDM_ChannelMspInit+0x40>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a76      	ldr	r2, [pc, #472]	; (8001178 <HAL_DFSDM_ChannelMspInit+0x200>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d009      	beq.n	8000fb8 <HAL_DFSDM_ChannelMspInit+0x40>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a74      	ldr	r2, [pc, #464]	; (800117c <HAL_DFSDM_ChannelMspInit+0x204>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d004      	beq.n	8000fb8 <HAL_DFSDM_ChannelMspInit+0x40>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a73      	ldr	r2, [pc, #460]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x208>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d154      	bne.n	8001062 <HAL_DFSDM_ChannelMspInit+0xea>
 8000fb8:	4b72      	ldr	r3, [pc, #456]	; (8001184 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d150      	bne.n	8001062 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	4b70      	ldr	r3, [pc, #448]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	4a6f      	ldr	r2, [pc, #444]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fce:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd0:	4b6d      	ldr	r3, [pc, #436]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	4b69      	ldr	r3, [pc, #420]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a68      	ldr	r2, [pc, #416]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	4b62      	ldr	r3, [pc, #392]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a61      	ldr	r2, [pc, #388]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001026:	2306      	movs	r3, #6
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	4856      	ldr	r0, [pc, #344]	; (800118c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001032:	f000 fe2d 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001036:	2340      	movs	r3, #64	; 0x40
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001046:	2306      	movs	r3, #6
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	484f      	ldr	r0, [pc, #316]	; (8001190 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001052:	f000 fe1d 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800105e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001060:	e084      	b.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a43      	ldr	r2, [pc, #268]	; (8001174 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d07f      	beq.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a41      	ldr	r2, [pc, #260]	; (8001178 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d07a      	beq.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <HAL_DFSDM_ChannelMspInit+0x204>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d075      	beq.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d070      	beq.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d16c      	bne.n	800116c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 800109c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x210>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001112:	2307      	movs	r3, #7
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <HAL_DFSDM_ChannelMspInit+0x214>)
 800111e:	f000 fdb7 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001122:	2304      	movs	r3, #4
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001132:	2303      	movs	r3, #3
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4814      	ldr	r0, [pc, #80]	; (8001190 <HAL_DFSDM_ChannelMspInit+0x218>)
 800113e:	f000 fda7 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001152:	2306      	movs	r3, #6
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <HAL_DFSDM_ChannelMspInit+0x220>)
 800115e:	f000 fd97 	bl	8001c90 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	3738      	adds	r7, #56	; 0x38
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40016000 	.word	0x40016000
 8001178:	40016020 	.word	0x40016020
 800117c:	40016040 	.word	0x40016040
 8001180:	40016060 	.word	0x40016060
 8001184:	200000b0 	.word	0x200000b0
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020c00 	.word	0x40020c00
 8001194:	200000b4 	.word	0x200000b4
 8001198:	40020400 	.word	0x40020400

0800119c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_I2S_MspInit+0x15c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f040 8097 	bne.w	80012ee <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a45      	ldr	r2, [pc, #276]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_I2S_MspInit+0x160>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_I2S_MspInit+0x160>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <HAL_I2S_MspInit+0x160>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_I2S_MspInit+0x160>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a37      	ldr	r2, [pc, #220]	; (80012fc <HAL_I2S_MspInit+0x160>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HAL_I2S_MspInit+0x160>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_I2S_MspInit+0x160>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_I2S_MspInit+0x160>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_I2S_MspInit+0x160>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800124c:	2304      	movs	r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800125c:	2306      	movs	r3, #6
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4826      	ldr	r0, [pc, #152]	; (8001300 <HAL_I2S_MspInit+0x164>)
 8001268:	f000 fd12 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800126c:	2308      	movs	r3, #8
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127c:	2305      	movs	r3, #5
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <HAL_I2S_MspInit+0x164>)
 8001288:	f000 fd02 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800128c:	2308      	movs	r3, #8
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129c:	2305      	movs	r3, #5
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <HAL_I2S_MspInit+0x168>)
 80012a8:	f000 fcf2 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80012ac:	2308      	movs	r3, #8
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012bc:	2305      	movs	r3, #5
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <HAL_I2S_MspInit+0x16c>)
 80012c8:	f000 fce2 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80012cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012de:	2305      	movs	r3, #5
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <HAL_I2S_MspInit+0x170>)
 80012ea:	f000 fcd1 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40003800 	.word	0x40003800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <HAL_SD_MspInit+0xc0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d14a      	bne.n	80013c8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 800133c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_SD_MspInit+0xc4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001396:	230c      	movs	r3, #12
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_SD_MspInit+0xc8>)
 80013a2:	f000 fc75 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80013a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013aa:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013b8:	230c      	movs	r3, #12
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_SD_MspInit+0xcc>)
 80013c4:	f000 fc64 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_UART_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x88>)
 800140c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = LIDAR_IN_Pin|LIDAR_OUT_Pin;
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800144a:	2308      	movs	r3, #8
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0x8c>)
 8001456:	f000 fc1b 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40007800 	.word	0x40007800
 8001468:	40023800 	.word	0x40023800
 800146c:	40021400 	.word	0x40021400

08001470 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_FSMC_MspInit+0xc8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d150      	bne.n	800152e <HAL_FSMC_MspInit+0xbe>
    return;
  }
  FSMC_Initialized = 1;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_FSMC_MspInit+0xc8>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_FSMC_MspInit+0xcc>)
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_FSMC_MspInit+0xcc>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_FSMC_MspInit+0xcc>)
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 80014ae:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80014b2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014c0:	230c      	movs	r3, #12
 80014c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <HAL_FSMC_MspInit+0xd0>)
 80014ca:	f000 fbe1 	bl	8001c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80014ce:	233f      	movs	r3, #63	; 0x3f
 80014d0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4817      	ldr	r0, [pc, #92]	; (8001544 <HAL_FSMC_MspInit+0xd4>)
 80014e8:	f000 fbd2 	bl	8001c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80014ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014f0:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014fe:	230c      	movs	r3, #12
 8001500:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4810      	ldr	r0, [pc, #64]	; (8001548 <HAL_FSMC_MspInit+0xd8>)
 8001508:	f000 fbc2 	bl	8001c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 800150c:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001510:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_FSMC_MspInit+0xdc>)
 8001528:	f000 fbb2 	bl	8001c90 <HAL_GPIO_Init>
 800152c:	e000      	b.n	8001530 <HAL_FSMC_MspInit+0xc0>
    return;
 800152e:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000b8 	.word	0x200000b8
 800153c:	40023800 	.word	0x40023800
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021000 	.word	0x40021000
 800154c:	40020c00 	.word	0x40020c00

08001550 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001558:	f7ff ff8a 	bl	8001470 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2036      	movs	r0, #54	; 0x36
 800157a:	f000 fa0b 	bl	8001994 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800157e:	2036      	movs	r0, #54	; 0x36
 8001580:	f000 fa24 	bl	80019cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_InitTick+0xa0>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_InitTick+0xa0>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_InitTick+0xa0>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a0:	f107 0210 	add.w	r2, r7, #16
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f89a 	bl	80046e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b0:	f003 f870 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 80015b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_InitTick+0xa4>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3b01      	subs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_InitTick+0xa8>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_InitTick+0xac>)
 80015c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_InitTick+0xa8>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_InitTick+0xa8>)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_InitTick+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_InitTick+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_InitTick+0xa8>)
 80015e6:	f004 fc7d 	bl	8005ee4 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <HAL_InitTick+0xa8>)
 80015f2:	f004 fcac 	bl	8005f4e <HAL_TIM_Base_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	431bde83 	.word	0x431bde83
 800160c:	20004c34 	.word	0x20004c34
 8001610:	40001000 	.word	0x40001000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM6_DAC_IRQHandler+0x10>)
 800164e:	f004 fca2 	bl	8005f96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20004c34 	.word	0x20004c34

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f000 ff4f 	bl	8002504 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200050c0 	.word	0x200050c0

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f00c fcde 	bl	800e060 <__errno>
 80016a4:	4602      	mov	r2, r0
 80016a6:	230c      	movs	r3, #12
 80016a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20050000 	.word	0x20050000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200000bc 	.word	0x200000bc
 80016d8:	20005388 	.word	0x20005388

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <SystemInit+0x28>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a07      	ldr	r2, [pc, #28]	; (8001704 <SystemInit+0x28>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SystemInit+0x28>)
 80016f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f6:	609a      	str	r2, [r3, #8]
#endif
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800170c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800170e:	e003      	b.n	8001718 <LoopCopyDataInit>

08001710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001716:	3104      	adds	r1, #4

08001718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800171c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800171e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001720:	d3f6      	bcc.n	8001710 <CopyDataInit>
  ldr  r2, =_sbss
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001724:	e002      	b.n	800172c <LoopFillZerobss>

08001726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001728:	f842 3b04 	str.w	r3, [r2], #4

0800172c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001730:	d3f9      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001732:	f7ff ffd3 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f00c fc99 	bl	800e06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7fe fef1 	bl	8000520 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001740:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001744:	0800e3a0 	.word	0x0800e3a0
  ldr  r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800174c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001750:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001754:	20005388 	.word	0x20005388

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f8fa 	bl	800197e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff feea 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fbca 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20004c74 	.word	0x20004c74

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20004c74 	.word	0x20004c74

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_Delay+0x40>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000008 	.word	0x20000008

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff4c 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a6:	f7ff ff61 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7ff ffb1 	bl	8001918 <NVIC_EncodePriority>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff80 	bl	80018c4 <__NVIC_SetPriority>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff54 	bl	8001888 <__NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0cf      	b.n	8001b9a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00e      	beq.n	8001a22 <HAL_DFSDM_ChannelInit+0x3a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a67      	ldr	r2, [pc, #412]	; (8001ba8 <HAL_DFSDM_ChannelInit+0x1c0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_DFSDM_ChannelInit+0x3a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_DFSDM_ChannelInit+0x1c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_DFSDM_ChannelInit+0x3a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x1c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d106      	bne.n	8001a30 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8001a24:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8001a26:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8001a28:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8001a2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e005      	b.n	8001a3c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8001a30:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <HAL_DFSDM_ChannelInit+0x1d4>)
 8001a32:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8001a34:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8001a36:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8001a38:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_DFSDM_ChannelInit+0x1dc>)
 8001a3a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f8c1 	bl	8001bc8 <DFSDM_GetChannelFromInstance>
 8001a46:	4603      	mov	r3, r0
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0a0      	b.n	8001b9a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fa8d 	bl	8000f78 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d125      	bne.n	8001abc <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001aca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001ada:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001ae0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 020f 	bic.w	r2, r2, #15
 8001af8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b20:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f002 0207 	and.w	r2, r2, #7
 8001b4c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b78:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f81e 	bl	8001bc8 <DFSDM_GetChannelFromInstance>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40016000 	.word	0x40016000
 8001ba8:	40016020 	.word	0x40016020
 8001bac:	40016040 	.word	0x40016040
 8001bb0:	40016060 	.word	0x40016060
 8001bb4:	200000c0 	.word	0x200000c0
 8001bb8:	200000c4 	.word	0x200000c4
 8001bbc:	200000d4 	.word	0x200000d4
 8001bc0:	200000d8 	.word	0x200000d8
 8001bc4:	40016400 	.word	0x40016400

08001bc8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <DFSDM_GetChannelFromInstance+0x9c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <DFSDM_GetChannelFromInstance+0x18>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <DFSDM_GetChannelFromInstance+0xa0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e037      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <DFSDM_GetChannelFromInstance+0xa4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <DFSDM_GetChannelFromInstance+0x2e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <DFSDM_GetChannelFromInstance+0xa8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d102      	bne.n	8001bfc <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e02c      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <DFSDM_GetChannelFromInstance+0xac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <DFSDM_GetChannelFromInstance+0x44>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <DFSDM_GetChannelFromInstance+0xb0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e021      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <DFSDM_GetChannelFromInstance+0xb4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d003      	beq.n	8001c22 <DFSDM_GetChannelFromInstance+0x5a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <DFSDM_GetChannelFromInstance+0xb8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d102      	bne.n	8001c28 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8001c22:	2303      	movs	r3, #3
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e016      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <DFSDM_GetChannelFromInstance+0xbc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8001c30:	2304      	movs	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e00f      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <DFSDM_GetChannelFromInstance+0xc0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d102      	bne.n	8001c44 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e008      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <DFSDM_GetChannelFromInstance+0xc4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e001      	b.n	8001c56 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8001c52:	2307      	movs	r3, #7
 8001c54:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40016000 	.word	0x40016000
 8001c68:	40016400 	.word	0x40016400
 8001c6c:	40016020 	.word	0x40016020
 8001c70:	40016420 	.word	0x40016420
 8001c74:	40016040 	.word	0x40016040
 8001c78:	40016440 	.word	0x40016440
 8001c7c:	40016060 	.word	0x40016060
 8001c80:	40016460 	.word	0x40016460
 8001c84:	40016480 	.word	0x40016480
 8001c88:	400164a0 	.word	0x400164a0
 8001c8c:	400164c0 	.word	0x400164c0

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e165      	b.n	8001f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8154 	bne.w	8001f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00b      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cde:	2b11      	cmp	r3, #17
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0xfc>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80ae 	beq.w	8001f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a5b      	ldr	r2, [pc, #364]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x21a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4d      	ldr	r2, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x308>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x216>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4c      	ldr	r2, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x30c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_GPIO_Init+0x310>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x314>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x20a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x318>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x206>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x31c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x202>
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x21c>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eee:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f ae96 	bls.w	8001cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe8:	b08f      	sub	sp, #60	; 0x3c
 8001fea:	af0a      	add	r7, sp, #40	; 0x28
 8001fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e054      	b.n	80020a2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f00b fd76 	bl	800db04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f005 fcfe 	bl	8007a38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	687e      	ldr	r6, [r7, #4]
 8002044:	466d      	mov	r5, sp
 8002046:	f106 0410 	add.w	r4, r6, #16
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002056:	e885 0003 	stmia.w	r5, {r0, r1}
 800205a:	1d33      	adds	r3, r6, #4
 800205c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f005 fc78 	bl	8007954 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f005 fcf5 	bl	8007a5a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	687e      	ldr	r6, [r7, #4]
 8002078:	466d      	mov	r5, sp
 800207a:	f106 0410 	add.w	r4, r6, #16
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208a:	e885 0003 	stmia.w	r5, {r0, r1}
 800208e:	1d33      	adds	r3, r6, #4
 8002090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f005 fe08 	bl	8007ca8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b089      	sub	sp, #36	; 0x24
 80020ae:	af04      	add	r7, sp, #16
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	70fb      	strb	r3, [r7, #3]
 80020bc:	460b      	mov	r3, r1
 80020be:	70bb      	strb	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_HCD_HC_Init+0x28>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e07f      	b.n	80021d2 <HAL_HCD_HC_Init+0x128>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	333d      	adds	r3, #61	; 0x3d
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	787a      	ldrb	r2, [r7, #1]
 8002100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002114:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3339      	adds	r3, #57	; 0x39
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	333f      	adds	r3, #63	; 0x3f
 800213a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800213e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	78bb      	ldrb	r3, [r7, #2]
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	b2d8      	uxtb	r0, r3
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	333a      	adds	r3, #58	; 0x3a
 8002158:	4602      	mov	r2, r0
 800215a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800215c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da0a      	bge.n	800217a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	333b      	adds	r3, #59	; 0x3b
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e009      	b.n	800218e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	333b      	adds	r3, #59	; 0x3b
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	333c      	adds	r3, #60	; 0x3c
 800219e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021a2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	787c      	ldrb	r4, [r7, #1]
 80021aa:	78ba      	ldrb	r2, [r7, #2]
 80021ac:	78f9      	ldrb	r1, [r7, #3]
 80021ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f005 feee 	bl	8007fa0 <USB_HC_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}

080021da <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_HCD_HC_Halt+0x1e>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00f      	b.n	8002218 <HAL_HCD_HC_Halt+0x3e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f006 f92a 	bl	8008462 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	70fb      	strb	r3, [r7, #3]
 8002232:	460b      	mov	r3, r1
 8002234:	70bb      	strb	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	333b      	adds	r3, #59	; 0x3b
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	787a      	ldrb	r2, [r7, #1]
 8002260:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002262:	7c3b      	ldrb	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3342      	adds	r3, #66	; 0x42
 8002278:	2203      	movs	r2, #3
 800227a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	333d      	adds	r3, #61	; 0x3d
 800228c:	7f3a      	ldrb	r2, [r7, #28]
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e009      	b.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	f200 80d6 	bhi.w	800245a <HAL_HCD_HC_SubmitRequest+0x23a>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	08002445 	.word	0x08002445
 80022bc:	08002331 	.word	0x08002331
 80022c0:	080023bb 	.word	0x080023bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022c4:	7c3b      	ldrb	r3, [r7, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80c9 	bne.w	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80c5 	bne.w	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3351      	adds	r3, #81	; 0x51
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3351      	adds	r3, #81	; 0x51
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3342      	adds	r3, #66	; 0x42
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002318:	e0a1      	b.n	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3342      	adds	r3, #66	; 0x42
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
      break;
 800232e:	e096      	b.n	800245e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002330:	78bb      	ldrb	r3, [r7, #2]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d120      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3351      	adds	r3, #81	; 0x51
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3342      	adds	r3, #66	; 0x42
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002360:	e07e      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3342      	adds	r3, #66	; 0x42
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]
      break;
 8002376:	e073      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	3350      	adds	r3, #80	; 0x50
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3342      	adds	r3, #66	; 0x42
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
      break;
 80023a2:	e05d      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3342      	adds	r3, #66	; 0x42
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
      break;
 80023b8:	e052      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ba:	78bb      	ldrb	r3, [r7, #2]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d120      	bne.n	8002402 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	3351      	adds	r3, #81	; 0x51
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	3342      	adds	r3, #66	; 0x42
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ea:	e039      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	3342      	adds	r3, #66	; 0x42
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
      break;
 8002400:	e02e      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	3350      	adds	r3, #80	; 0x50
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3342      	adds	r3, #66	; 0x42
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
      break;
 800242c:	e018      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3342      	adds	r3, #66	; 0x42
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
      break;
 8002442:	e00d      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3342      	adds	r3, #66	; 0x42
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
      break;
 8002458:	e002      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800245e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	3344      	adds	r3, #68	; 0x44
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	8b39      	ldrh	r1, [r7, #24]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4403      	add	r3, r0
 8002484:	3348      	adds	r3, #72	; 0x48
 8002486:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	334c      	adds	r3, #76	; 0x4c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3339      	adds	r3, #57	; 0x39
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	335d      	adds	r3, #93	; 0x5d
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	18d1      	adds	r1, r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	f005 fe5e 	bl	80081b4 <USB_HC_StartXfer>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop

08002504 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f005 fb81 	bl	8007c22 <USB_GetMode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80ef 	bne.w	8002706 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f005 fb65 	bl	8007bfc <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80e5 	beq.w	8002704 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fb5c 	bl	8007bfc <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800254e:	d104      	bne.n	800255a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002558:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f005 fb4c 	bl	8007bfc <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d104      	bne.n	800257a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002578:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f005 fb3c 	bl	8007bfc <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800258a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258e:	d104      	bne.n	800259a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002598:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 fb2c 	bl	8007bfc <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d103      	bne.n	80025b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f005 fb1e 	bl	8007bfc <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ca:	d115      	bne.n	80025f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f00b fb0a 	bl	800dc00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fc0e 	bl	8007e14 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f005 fafd 	bl	8007bfc <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d102      	bne.n	8002614 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f001 f966 	bl	80038e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f005 faef 	bl	8007bfc <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d106      	bne.n	8002636 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f00b facd 	bl	800dbc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2208      	movs	r2, #8
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fade 	bl	8007bfc <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800264a:	d138      	bne.n	80026be <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f005 fef5 	bl	8008440 <USB_HC_ReadInterrupt>
 8002656:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e025      	b.n	80026aa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002688:	d106      	bne.n	8002698 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8cf 	bl	8002834 <HCD_HC_IN_IRQHandler>
 8002696:	e005      	b.n	80026a4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fcfd 	bl	800309e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3d4      	bcc.n	800265e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fa9a 	bl	8007bfc <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d101      	bne.n	80026d6 <HAL_HCD_IRQHandler+0x1d2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_HCD_IRQHandler+0x1d4>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 f84b 	bl	8003788 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0210 	orr.w	r2, r2, #16
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	e000      	b.n	8002706 <HAL_HCD_IRQHandler+0x202>
      return;
 8002704:	bf00      	nop
    }
  }
}
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_HCD_Start+0x16>
 800271e:	2302      	movs	r3, #2
 8002720:	e013      	b.n	800274a <HAL_HCD_Start+0x3e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f005 f971 	bl	8007a16 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fbce 	bl	8007edc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_HCD_Stop+0x16>
 8002764:	2302      	movs	r3, #2
 8002766:	e00d      	b.n	8002784 <HAL_HCD_Stop+0x32>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f005 ffaf 	bl	80086d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fb75 	bl	8007e88 <USB_ResetPort>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	334c      	adds	r3, #76	; 0x4c
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f005 fbb7 	bl	8007f7c <USB_GetCurrentFrame>
 800280e:	4603      	mov	r3, r0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fb92 	bl	8007f4e <USB_GetHostSpeed>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b04      	cmp	r3, #4
 8002862:	d119      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	2304      	movs	r3, #4
 8002874:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	440a      	add	r2, r1
 800288c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	60d3      	str	r3, [r2, #12]
 8002896:	e0ce      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d12c      	bne.n	800290a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	335d      	adds	r3, #93	; 0x5d
 80028d4:	2207      	movs	r2, #7
 80028d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fdad 	bl	8008462 <USB_HC_Halt>
 8002908:	e095      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d109      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2320      	movs	r3, #32
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	e080      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d134      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	335d      	adds	r3, #93	; 0x5d
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2310      	movs	r3, #16
 800298e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2308      	movs	r3, #8
 80029a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f005 fd58 	bl	8008462 <USB_HC_Halt>
 80029b2:	e040      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d134      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f005 fd33 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	335d      	adds	r3, #93	; 0x5d
 8002a1e:	2208      	movs	r2, #8
 8002a20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4c:	d122      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fcf2 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a90:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a92:	e300      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80fd 	bne.w	8002ca6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3348      	adds	r3, #72	; 0x48
 8002ac4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0159      	lsls	r1, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ad8:	1ad1      	subs	r1, r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4403      	add	r3, r0
 8002ae8:	334c      	adds	r3, #76	; 0x4c
 8002aea:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	335d      	adds	r3, #93	; 0x5d
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3358      	adds	r3, #88	; 0x58
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2301      	movs	r3, #1
 8002b24:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	333f      	adds	r3, #63	; 0x3f
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	333f      	adds	r3, #63	; 0x3f
 8002b4c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d121      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	0151      	lsls	r1, r2, #5
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	440a      	add	r2, r1
 8002b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f005 fc70 	bl	8008462 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2310      	movs	r3, #16
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	e070      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	333f      	adds	r3, #63	; 0x3f
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d12a      	bne.n	8002c02 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b2d8      	uxtb	r0, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f00b f80e 	bl	800dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c00:	e03a      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d12f      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3350      	adds	r3, #80	; 0x50
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3350      	adds	r3, #80	; 0x50
 8002c54:	4602      	mov	r2, r0
 8002c56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	b2d8      	uxtb	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4601      	mov	r1, r0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f00a ffd2 	bl	800dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2d8      	uxtb	r0, r3
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	701a      	strb	r2, [r3, #0]
}
 8002ca4:	e1f7      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 811a 	bne.w	8002ef2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	335d      	adds	r3, #93	; 0x5d
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10a      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e0d9      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335d      	adds	r3, #93	; 0x5d
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10a      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	2205      	movs	r2, #5
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e0c3      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	335d      	adds	r3, #93	; 0x5d
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d00a      	beq.n	8002d62 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	335d      	adds	r3, #93	; 0x5d
 8002d5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d156      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3358      	adds	r3, #88	; 0x58
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4403      	add	r3, r0
 8002d84:	3358      	adds	r3, #88	; 0x58
 8002d86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3358      	adds	r3, #88	; 0x58
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d914      	bls.n	8002dc8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	3358      	adds	r3, #88	; 0x58
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e009      	b.n	8002ddc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335c      	adds	r3, #92	; 0x5c
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e056      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	335d      	adds	r3, #93	; 0x5d
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d123      	bne.n	8002e6e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	335c      	adds	r3, #92	; 0x5c
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e50:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e58:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e027      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	335d      	adds	r3, #93	; 0x5d
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d11c      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	3358      	adds	r3, #88	; 0x58
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4403      	add	r3, r0
 8002ea6:	3358      	adds	r3, #88	; 0x58
 8002ea8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2302      	movs	r3, #2
 8002ece:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	335c      	adds	r3, #92	; 0x5c
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4601      	mov	r1, r0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f00a fe96 	bl	800dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ef0:	e0d1      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d13e      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	0151      	lsls	r1, r2, #5
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	440a      	add	r2, r1
 8002f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3358      	adds	r3, #88	; 0x58
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4403      	add	r3, r0
 8002f4a:	3358      	adds	r3, #88	; 0x58
 8002f4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	2206      	movs	r2, #6
 8002f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 fa78 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	6093      	str	r3, [r2, #8]
}
 8002f84:	e087      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d17c      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	333f      	adds	r3, #63	; 0x3f
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d122      	bne.n	8002ff8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3358      	adds	r3, #88	; 0x58
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f005 fa36 	bl	8008462 <USB_HC_Halt>
 8002ff6:	e045      	b.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	333f      	adds	r3, #63	; 0x3f
 800301e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003020:	2b02      	cmp	r3, #2
 8003022:	d12f      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3358      	adds	r3, #88	; 0x58
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d121      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	335d      	adds	r3, #93	; 0x5d
 8003050:	2203      	movs	r2, #3
 8003052:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f005 f9ef 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2310      	movs	r3, #16
 8003094:	6093      	str	r3, [r2, #8]
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d119      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2304      	movs	r3, #4
 80030de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003100:	e33e      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d141      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2320      	movs	r3, #32
 8003128:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	333d      	adds	r3, #61	; 0x3d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 831f 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	333d      	adds	r3, #61	; 0x3d
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	0151      	lsls	r1, r2, #5
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	440a      	add	r2, r1
 8003180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f005 f964 	bl	8008462 <USB_HC_Halt>
}
 800319a:	e2f1      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d13f      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	335d      	adds	r3, #93	; 0x5d
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	3358      	adds	r3, #88	; 0x58
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	0151      	lsls	r1, r2, #5
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	440a      	add	r2, r1
 8003204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f005 f922 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	461a      	mov	r2, r3
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	6093      	str	r3, [r2, #8]
}
 8003230:	e2a6      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d122      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	0151      	lsls	r1, r2, #5
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	440a      	add	r2, r1
 8003260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f005 f8f4 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	461a      	mov	r2, r3
 8003288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800328c:	6093      	str	r3, [r2, #8]
}
 800328e:	e277      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d135      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	3358      	adds	r3, #88	; 0x58
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	0151      	lsls	r1, r2, #5
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	440a      	add	r2, r1
 80032d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f005 f8bc 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2301      	movs	r3, #1
 80032fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335d      	adds	r3, #93	; 0x5d
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
}
 8003310:	e236      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d12b      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2308      	movs	r3, #8
 8003338:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	0151      	lsls	r1, r2, #5
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	440a      	add	r2, r1
 8003350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f005 f87c 	bl	8008462 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	335d      	adds	r3, #93	; 0x5d
 800337a:	2205      	movs	r2, #5
 800337c:	701a      	strb	r2, [r3, #0]
}
 800337e:	e1ff      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d155      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	3358      	adds	r3, #88	; 0x58
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	335d      	adds	r3, #93	; 0x5d
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	333d      	adds	r3, #61	; 0x3d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d114      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	333c      	adds	r3, #60	; 0x3c
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	333d      	adds	r3, #61	; 0x3d
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	0151      	lsls	r1, r2, #5
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	440a      	add	r2, r1
 8003414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f005 f81a 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	461a      	mov	r2, r3
 800343c:	2310      	movs	r3, #16
 800343e:	6093      	str	r3, [r2, #8]
}
 8003440:	e19e      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d12b      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	440a      	add	r2, r1
 800346e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f004 ffed 	bl	8008462 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	335d      	adds	r3, #93	; 0x5d
 8003498:	2206      	movs	r2, #6
 800349a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	6093      	str	r3, [r2, #8]
}
 80034ae:	e167      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d135      	bne.n	8003534 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 ffb5 	bl	8008462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2310      	movs	r3, #16
 8003508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	335d      	adds	r3, #93	; 0x5d
 800352e:	2208      	movs	r2, #8
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	e125      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	f040 811a 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	440a      	add	r2, r1
 8003562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003566:	f023 0302 	bic.w	r3, r3, #2
 800356a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	335d      	adds	r3, #93	; 0x5d
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d137      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	335c      	adds	r3, #92	; 0x5c
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	333f      	adds	r3, #63	; 0x3f
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00b      	beq.n	80035c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	333f      	adds	r3, #63	; 0x3f
 80035bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035be:	2b03      	cmp	r3, #3
 80035c0:	f040 80c5 	bne.w	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3351      	adds	r3, #81	; 0x51
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f083 0301 	eor.w	r3, r3, #1
 80035da:	b2d8      	uxtb	r0, r3
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	3351      	adds	r3, #81	; 0x51
 80035ec:	4602      	mov	r2, r0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e0ad      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	335d      	adds	r3, #93	; 0x5d
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d10a      	bne.n	800361e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	335c      	adds	r3, #92	; 0x5c
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e097      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	335d      	adds	r3, #93	; 0x5d
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d10a      	bne.n	800364a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e081      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	335d      	adds	r3, #93	; 0x5d
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b05      	cmp	r3, #5
 800365e:	d10a      	bne.n	8003676 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	440b      	add	r3, r1
 800366e:	335c      	adds	r3, #92	; 0x5c
 8003670:	2205      	movs	r2, #5
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e06b      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	335d      	adds	r3, #93	; 0x5d
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d00a      	beq.n	80036a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	335d      	adds	r3, #93	; 0x5d
 800369c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d155      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	3358      	adds	r3, #88	; 0x58
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4403      	add	r3, r0
 80036c4:	3358      	adds	r3, #88	; 0x58
 80036c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	3358      	adds	r3, #88	; 0x58
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d914      	bls.n	8003708 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	3358      	adds	r3, #88	; 0x58
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	335c      	adds	r3, #92	; 0x5c
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e009      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	335c      	adds	r3, #92	; 0x5c
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003732:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	461a      	mov	r2, r3
 800375c:	2302      	movs	r3, #2
 800375e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	b2d8      	uxtb	r0, r3
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	335c      	adds	r3, #92	; 0x5c
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4601      	mov	r1, r0
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f00a fa4e 	bl	800dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	0c5b      	lsrs	r3, r3, #17
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d003      	beq.n	80037cc <HCD_RXQLVL_IRQHandler+0x44>
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	f000 8082 	beq.w	80038ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037ca:	e083      	b.n	80038d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07f      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3344      	adds	r3, #68	; 0x44
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d074      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3344      	adds	r3, #68	; 0x44
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	b292      	uxth	r2, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f004 f9d1 	bl	8007baa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	3344      	adds	r3, #68	; 0x44
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	18d1      	adds	r1, r2, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4403      	add	r3, r0
 800382c:	3344      	adds	r3, #68	; 0x44
 800382e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	334c      	adds	r3, #76	; 0x4c
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4403      	add	r3, r0
 8003854:	334c      	adds	r3, #76	; 0x4c
 8003856:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HCD_RXQLVL_IRQHandler+0x154>)
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d031      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003884:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800388c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3350      	adds	r3, #80	; 0x50
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	f083 0301 	eor.w	r3, r3, #1
 80038b6:	b2d8      	uxtb	r0, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	3350      	adds	r3, #80	; 0x50
 80038c8:	4602      	mov	r2, r0
 80038ca:	701a      	strb	r2, [r3, #0]
      break;
 80038cc:	e001      	b.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80038d2:	bf00      	nop
  }
}
 80038d4:	bf00      	nop
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	1ff80000 	.word	0x1ff80000

080038e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800390c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d10b      	bne.n	8003930 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f00a f95e 	bl	800dbe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d132      	bne.n	80039a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d126      	bne.n	800399a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d113      	bne.n	800397c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800395a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800395e:	d106      	bne.n	800396e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f004 fa54 	bl	8007e14 <USB_InitFSLSPClkSel>
 800396c:	e011      	b.n	8003992 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f004 fa4d 	bl	8007e14 <USB_InitFSLSPClkSel>
 800397a:	e00a      	b.n	8003992 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	461a      	mov	r2, r3
 800398c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003990:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00a f954 	bl	800dc40 <HAL_HCD_PortEnabled_Callback>
 8003998:	e002      	b.n	80039a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f00a f95e 	bl	800dc5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d103      	bne.n	80039b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f043 0320 	orr.w	r3, r3, #32
 80039b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6013      	str	r3, [r2, #0]
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e154      	b.n	8003c84 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a98      	ldr	r2, [pc, #608]	; (8003c54 <HAL_I2S_Init+0x28c>)
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fd fbd1 	bl	800119c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d06f      	beq.n	8003b06 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d802      	bhi.n	8003a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a83      	ldr	r2, [pc, #524]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_I2S_Init+0x92>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <HAL_I2S_Init+0x294>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d104      	bne.n	8003a64 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f001 f900 	bl	8004c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	e003      	b.n	8003a6c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003a64:	2002      	movs	r0, #2
 8003a66:	f001 f8fb 	bl	8004c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a6a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d125      	bne.n	8003ac2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d010      	beq.n	8003aa0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	461a      	mov	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	3305      	adds	r3, #5
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e01f      	b.n	8003ae0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	3305      	adds	r3, #5
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e00e      	b.n	8003ae0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	3305      	adds	r3, #5
 8003ade:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4a5f      	ldr	r2, [pc, #380]	; (8003c60 <HAL_I2S_Init+0x298>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e003      	b.n	8003b0e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b06:	2302      	movs	r3, #2
 8003b08:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d902      	bls.n	8003b1a <HAL_I2S_Init+0x152>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d907      	bls.n	8003b2a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0ac      	b.n	8003c84 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	ea42 0103 	orr.w	r1, r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b48:	f023 030f 	bic.w	r3, r3, #15
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6851      	ldr	r1, [r2, #4]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6892      	ldr	r2, [r2, #8]
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6992      	ldr	r2, [r2, #24]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d003      	beq.n	8003b7e <HAL_I2S_Init+0x1b6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2bb0      	cmp	r3, #176	; 0xb0
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d16e      	bne.n	8003c74 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <HAL_I2S_Init+0x29c>)
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_I2S_Init+0x1e2>
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_I2S_Init+0x2a0>)
 8003ba8:	e001      	b.n	8003bae <HAL_I2S_Init+0x1e6>
 8003baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	4928      	ldr	r1, [pc, #160]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003bb6:	428a      	cmp	r2, r1
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2S_Init+0x1f6>
 8003bba:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_I2S_Init+0x2a0>)
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2S_Init+0x1fa>
 8003bbe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bc2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bc6:	f023 030f 	bic.w	r3, r3, #15
 8003bca:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2S_Init+0x212>
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_I2S_Init+0x2a0>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2S_Init+0x216>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	2202      	movs	r2, #2
 8003be0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2S_Init+0x228>
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_I2S_Init+0x2a0>)
 8003bee:	e001      	b.n	8003bf4 <HAL_I2S_Init+0x22c>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d003      	beq.n	8003c0a <HAL_I2S_Init+0x242>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e001      	b.n	8003c16 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	b299      	uxth	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c2c:	4303      	orrs	r3, r0
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	430b      	orrs	r3, r1
 8003c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	897b      	ldrh	r3, [r7, #10]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c42:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <HAL_I2S_Init+0x290>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10e      	bne.n	8003c6c <HAL_I2S_Init+0x2a4>
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_I2S_Init+0x2a0>)
 8003c50:	e00e      	b.n	8003c70 <HAL_I2S_Init+0x2a8>
 8003c52:	bf00      	nop
 8003c54:	08003d83 	.word	0x08003d83
 8003c58:	40003800 	.word	0x40003800
 8003c5c:	40003c00 	.word	0x40003c00
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	08003e99 	.word	0x08003e99
 8003c68:	40003400 	.word	0x40003400
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	897a      	ldrh	r2, [r7, #10]
 8003c72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10e      	bne.n	8003d1c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffb8 	bl	8003c8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	b292      	uxth	r2, r2
 8003d38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10e      	bne.n	8003d7a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff93 	bl	8003ca0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d13a      	bne.n	8003e14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d109      	bne.n	8003dbc <I2S_IRQHandler+0x3a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d102      	bne.n	8003dbc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffb4 	bl	8003d24 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d126      	bne.n	8003e14 <I2S_IRQHandler+0x92>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d11f      	bne.n	8003e14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003de2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff50 	bl	8003cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d136      	bne.n	8003e8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d109      	bne.n	8003e3e <I2S_IRQHandler+0xbc>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d102      	bne.n	8003e3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff45 	bl	8003cc8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d122      	bne.n	8003e8e <I2S_IRQHandler+0x10c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d11b      	bne.n	8003e8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff13 	bl	8003cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4aa2      	ldr	r2, [pc, #648]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eb2:	4ba2      	ldr	r3, [pc, #648]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a9b      	ldr	r2, [pc, #620]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ed0:	4b9a      	ldr	r3, [pc, #616]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ed2:	e001      	b.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d004      	beq.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8099 	bne.w	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d107      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f925 	bl	8004154 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f9c8 	bl	80042b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d13a      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d035      	beq.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a7e      	ldr	r2, [pc, #504]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f42:	4b7e      	ldr	r3, [pc, #504]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f44:	e001      	b.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4979      	ldr	r1, [pc, #484]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f52:	428b      	cmp	r3, r1
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f56:	4b79      	ldr	r3, [pc, #484]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fe88 	bl	8003cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	f040 80be 	bne.w	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80b8 	beq.w	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a59      	ldr	r2, [pc, #356]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fd6:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd8:	e001      	b.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4954      	ldr	r1, [pc, #336]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fe6:	428b      	cmp	r3, r1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fea:	4b54      	ldr	r3, [pc, #336]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fec:	e001      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fe4a 	bl	8003cb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004020:	e084      	b.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d107      	bne.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8be 	bl	80041b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d107      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8fd 	bl	8004250 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d12f      	bne.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02a      	beq.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004078:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2e      	ldr	r2, [pc, #184]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004086:	e001      	b.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4929      	ldr	r1, [pc, #164]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d101      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004098:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800409a:	e001      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fdfa 	bl	8003cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d131      	bne.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02c      	beq.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a17      	ldr	r2, [pc, #92]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040e0:	e001      	b.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4912      	ldr	r1, [pc, #72]	; (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ee:	428b      	cmp	r3, r1
 80040f0:	d101      	bne.n	80040f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040f4:	e001      	b.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800410e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fdc5 	bl	8003cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412a:	e000      	b.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800412c:	bf00      	nop
}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40003800 	.word	0x40003800
 800413c:	40003400 	.word	0x40003400

08004140 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c99      	adds	r1, r3, #2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6251      	str	r1, [r2, #36]	; 0x24
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d113      	bne.n	80041ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ffc9 	bl	8004140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c99      	adds	r1, r3, #2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6251      	str	r1, [r2, #36]	; 0x24
 80041ca:	8819      	ldrh	r1, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <I2SEx_TxISR_I2SExt+0x90>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <I2SEx_TxISR_I2SExt+0x22>
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <I2SEx_TxISR_I2SExt+0x94>)
 80041d8:	e001      	b.n	80041de <I2SEx_TxISR_I2SExt+0x26>
 80041da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041de:	460a      	mov	r2, r1
 80041e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <I2SEx_TxISR_I2SExt+0x90>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <I2SEx_TxISR_I2SExt+0x50>
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <I2SEx_TxISR_I2SExt+0x94>)
 8004206:	e001      	b.n	800420c <I2SEx_TxISR_I2SExt+0x54>
 8004208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <I2SEx_TxISR_I2SExt+0x90>)
 8004214:	428b      	cmp	r3, r1
 8004216:	d101      	bne.n	800421c <I2SEx_TxISR_I2SExt+0x64>
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <I2SEx_TxISR_I2SExt+0x94>)
 800421a:	e001      	b.n	8004220 <I2SEx_TxISR_I2SExt+0x68>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004224:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff81 	bl	8004140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40003800 	.word	0x40003800
 800424c:	40003400 	.word	0x40003400

08004250 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68d8      	ldr	r0, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	1c99      	adds	r1, r3, #2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004268:	b282      	uxth	r2, r0
 800426a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004292:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff4a 	bl	8004140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a20      	ldr	r2, [pc, #128]	; (8004344 <I2SEx_RxISR_I2SExt+0x90>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <I2SEx_RxISR_I2SExt+0x16>
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <I2SEx_RxISR_I2SExt+0x94>)
 80042c8:	e001      	b.n	80042ce <I2SEx_RxISR_I2SExt+0x1a>
 80042ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ce:	68d8      	ldr	r0, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	1c99      	adds	r1, r3, #2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042da:	b282      	uxth	r2, r0
 80042dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <I2SEx_RxISR_I2SExt+0x90>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <I2SEx_RxISR_I2SExt+0x50>
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <I2SEx_RxISR_I2SExt+0x94>)
 8004302:	e001      	b.n	8004308 <I2SEx_RxISR_I2SExt+0x54>
 8004304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	490d      	ldr	r1, [pc, #52]	; (8004344 <I2SEx_RxISR_I2SExt+0x90>)
 8004310:	428b      	cmp	r3, r1
 8004312:	d101      	bne.n	8004318 <I2SEx_RxISR_I2SExt+0x64>
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <I2SEx_RxISR_I2SExt+0x94>)
 8004316:	e001      	b.n	800431c <I2SEx_RxISR_I2SExt+0x68>
 8004318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004320:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff03 	bl	8004140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40003800 	.word	0x40003800
 8004348:	40003400 	.word	0x40003400

0800434c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0cc      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b68      	ldr	r3, [pc, #416]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d90c      	bls.n	8004388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b65      	ldr	r3, [pc, #404]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0b8      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a0:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a58      	ldr	r2, [pc, #352]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b8:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a52      	ldr	r2, [pc, #328]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	494d      	ldr	r1, [pc, #308]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d044      	beq.n	800446c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d107      	bne.n	80043fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d119      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d003      	beq.n	800440a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004406:	2b03      	cmp	r3, #3
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e06f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e067      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442a:	4b37      	ldr	r3, [pc, #220]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4934      	ldr	r1, [pc, #208]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800443c:	f7fd f9c4 	bl	80017c8 <HAL_GetTick>
 8004440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	e00a      	b.n	800445a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004444:	f7fd f9c0 	bl	80017c8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e04f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 020c 	and.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	429a      	cmp	r2, r3
 800446a:	d1eb      	bne.n	8004444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d20c      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e032      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4916      	ldr	r1, [pc, #88]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044d2:	f000 f821 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044d6:	4601      	mov	r1, r0
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <HAL_RCC_ClockConfig+0x1c0>)
 80044e4:	5cd3      	ldrb	r3, [r2, r3]
 80044e6:	fa21 f303 	lsr.w	r3, r1, r3
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1c8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd f836 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023c00 	.word	0x40023c00
 8004508:	40023800 	.word	0x40023800
 800450c:	0800e378 	.word	0x0800e378
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	2300      	movs	r3, #0
 8004528:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452e:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b04      	cmp	r3, #4
 8004538:	d007      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x32>
 800453a:	2b08      	cmp	r3, #8
 800453c:	d008      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x38>
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 808d 	bne.w	800465e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004546:	60bb      	str	r3, [r7, #8]
       break;
 8004548:	e08c      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800454a:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 800454c:	60bb      	str	r3, [r7, #8]
      break;
 800454e:	e089      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004550:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455a:	4b45      	ldr	r3, [pc, #276]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d023      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004566:	4b42      	ldr	r3, [pc, #264]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	f04f 0400 	mov.w	r4, #0
 8004570:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	ea03 0501 	and.w	r5, r3, r1
 800457c:	ea04 0602 	and.w	r6, r4, r2
 8004580:	4a3d      	ldr	r2, [pc, #244]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 8004582:	fb02 f106 	mul.w	r1, r2, r6
 8004586:	2200      	movs	r2, #0
 8004588:	fb02 f205 	mul.w	r2, r2, r5
 800458c:	440a      	add	r2, r1
 800458e:	493a      	ldr	r1, [pc, #232]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 8004590:	fba5 0101 	umull	r0, r1, r5, r1
 8004594:	1853      	adds	r3, r2, r1
 8004596:	4619      	mov	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe3d 	bl	8000220 <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e049      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	099b      	lsrs	r3, r3, #6
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	ea03 0501 	and.w	r5, r3, r1
 80045c4:	ea04 0602 	and.w	r6, r4, r2
 80045c8:	4629      	mov	r1, r5
 80045ca:	4632      	mov	r2, r6
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	0154      	lsls	r4, r2, #5
 80045d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045da:	014b      	lsls	r3, r1, #5
 80045dc:	4619      	mov	r1, r3
 80045de:	4622      	mov	r2, r4
 80045e0:	1b49      	subs	r1, r1, r5
 80045e2:	eb62 0206 	sbc.w	r2, r2, r6
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	0194      	lsls	r4, r2, #6
 80045f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045f4:	018b      	lsls	r3, r1, #6
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	eb64 0402 	sbc.w	r4, r4, r2
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	00e2      	lsls	r2, r4, #3
 8004606:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800460a:	00d9      	lsls	r1, r3, #3
 800460c:	460b      	mov	r3, r1
 800460e:	4614      	mov	r4, r2
 8004610:	195b      	adds	r3, r3, r5
 8004612:	eb44 0406 	adc.w	r4, r4, r6
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	02a2      	lsls	r2, r4, #10
 8004620:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004624:	0299      	lsls	r1, r3, #10
 8004626:	460b      	mov	r3, r1
 8004628:	4614      	mov	r4, r2
 800462a:	4618      	mov	r0, r3
 800462c:	4621      	mov	r1, r4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	f7fb fdf2 	bl	8000220 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_GetSysClockFreq+0x158>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	3301      	adds	r3, #1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	60bb      	str	r3, [r7, #8]
      break;
 800465c:	e002      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004660:	60bb      	str	r3, [r7, #8]
      break;
 8004662:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004664:	68bb      	ldr	r3, [r7, #8]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400
 8004678:	017d7840 	.word	0x017d7840

0800467c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <HAL_RCC_GetHCLKFreq+0x14>)
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20000000 	.word	0x20000000

08004694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004698:	f7ff fff0 	bl	800467c <HAL_RCC_GetHCLKFreq>
 800469c:	4601      	mov	r1, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0a9b      	lsrs	r3, r3, #10
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	0800e388 	.word	0x0800e388

080046bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c0:	f7ff ffdc 	bl	800467c <HAL_RCC_GetHCLKFreq>
 80046c4:	4601      	mov	r1, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0b5b      	lsrs	r3, r3, #13
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0800e388 	.word	0x0800e388

080046e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	220f      	movs	r2, #15
 80046f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCC_GetClockConfig+0x5c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_RCC_GetClockConfig+0x5c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_RCC_GetClockConfig+0x5c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RCC_GetClockConfig+0x5c>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_RCC_GetClockConfig+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
 8004744:	40023c00 	.word	0x40023c00

08004748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800476c:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800476e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004772:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4977      	ldr	r1, [pc, #476]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800478a:	2301      	movs	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	496b      	ldr	r1, [pc, #428]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d022      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80047c8:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d6:	4960      	ldr	r1, [pc, #384]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f2:	d10c      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80047f4:	4b58      	ldr	r3, [pc, #352]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	3b01      	subs	r3, #1
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4954      	ldr	r1, [pc, #336]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d022      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800481a:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004820:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004828:	494b      	ldr	r1, [pc, #300]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004838:	2301      	movs	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	3b01      	subs	r3, #1
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	493f      	ldr	r1, [pc, #252]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 808a 	beq.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a33      	ldr	r2, [pc, #204]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004896:	f7fc ff97 	bl	80017c8 <HAL_GetTick>
 800489a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fc ff93 	bl	80017c8 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e1d1      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048b0:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02f      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048da:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d114      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004902:	f7fc ff61 	bl	80017c8 <HAL_GetTick>
 8004906:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fc ff5d 	bl	80017c8 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e199      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ee      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	d114      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	4902      	ldr	r1, [pc, #8]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]
 8004954:	e00c      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	40007000 	.word	0x40007000
 8004960:	42470e40 	.word	0x42470e40
 8004964:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a88      	ldr	r2, [pc, #544]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800496a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800496e:	6093      	str	r3, [r2, #8]
 8004970:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497c:	4983      	ldr	r1, [pc, #524]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800497e:	4313      	orrs	r3, r2
 8004980:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004994:	4b7e      	ldr	r3, [pc, #504]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004996:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80049a4:	4b79      	ldr	r3, [pc, #484]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4976      	ldr	r1, [pc, #472]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049c6:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	496d      	ldr	r1, [pc, #436]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e4:	d101      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	4961      	ldr	r1, [pc, #388]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d004      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	f040 80c6 	bne.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a1c:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a22:	f7fc fed1 	bl	80017c8 <HAL_GetTick>
 8004a26:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a2a:	f7fc fecd 	bl	80017c8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e10b      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d023      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d019      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8c:	d00e      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d019      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aaa:	d110      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	4931      	ldr	r1, [pc, #196]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d026      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d122      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af6:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	019b      	lsls	r3, r3, #6
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	071b      	lsls	r3, r3, #28
 8004b1c:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2a:	f023 021f 	bic.w	r2, r3, #31
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	4915      	ldr	r1, [pc, #84]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d010      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	019b      	lsls	r3, r3, #6
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b70:	f7fc fe2a 	bl	80017c8 <HAL_GetTick>
 8004b74:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b78:	f7fc fe26 	bl	80017c8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d90a      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e064      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	424711e0 	.word	0x424711e0
 8004b94:	42470068 	.word	0x42470068
 8004b98:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0e7      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb4:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	4926      	ldr	r1, [pc, #152]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bd6:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bdc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	491d      	ldr	r1, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004bf8:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	4915      	ldr	r1, [pc, #84]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	490c      	ldr	r1, [pc, #48]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4904      	ldr	r1, [pc, #16]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800

08004c60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	f000 8098 	beq.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004c84:	e12d      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004c86:	4b9a      	ldr	r3, [pc, #616]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004c90:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c98:	d00c      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9e:	d802      	bhi.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004ca4:	e082      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004caa:	d047      	beq.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004cac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004cb0:	d06f      	beq.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8004cb2:	e07b      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cb4:	4b8f      	ldr	r3, [pc, #572]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004cb6:	617b      	str	r3, [r7, #20]
          break;
 8004cb8:	e07b      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc8:	d109      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004cca:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	4a87      	ldr	r2, [pc, #540]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e019      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cde:	4b84      	ldr	r3, [pc, #528]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cea:	d109      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004cec:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf6:	4a80      	ldr	r2, [pc, #512]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e008      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d00:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0a:	4a7c      	ldr	r2, [pc, #496]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d12:	4b77      	ldr	r3, [pc, #476]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2c:	0f1b      	lsrs	r3, r3, #28
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
          break;
 8004d3a:	e03a      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d3c:	4b6c      	ldr	r3, [pc, #432]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d48:	d108      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d4a:	4b69      	ldr	r3, [pc, #420]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d52:	4a69      	ldr	r2, [pc, #420]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	e007      	b.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d5c:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d64:	4a65      	ldr	r2, [pc, #404]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004d7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	617b      	str	r3, [r7, #20]
          break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d92:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8004da0:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004da2:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004da4:	e005      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004da6:	4b55      	ldr	r3, [pc, #340]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004da8:	617b      	str	r3, [r7, #20]
          break;
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
          break;
 8004db0:	bf00      	nop
        }
      }
      break;
 8004db2:	e096      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004db4:	4b4e      	ldr	r3, [pc, #312]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004dbe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc6:	d00c      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d802      	bhi.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004dd2:	e082      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd8:	d047      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004dda:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004dde:	d06f      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004de0:	e07b      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004de2:	4b44      	ldr	r3, [pc, #272]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004de4:	617b      	str	r3, [r7, #20]
          break;
 8004de6:	e07b      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df6:	d109      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004df8:	4b3d      	ldr	r3, [pc, #244]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e019      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e18:	d109      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e1a:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e24:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e008      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	4a30      	ldr	r2, [pc, #192]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5a:	0f1b      	lsrs	r3, r3, #28
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	617b      	str	r3, [r7, #20]
          break;
 8004e68:	e03a      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e76:	d108      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	e007      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e92:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	0f1b      	lsrs	r3, r3, #28
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
          break;
 8004ebe:	e00f      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ed0:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8004ed4:	4b09      	ldr	r3, [pc, #36]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ed6:	617b      	str	r3, [r7, #20]
          break;
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
          break;
 8004ede:	bf00      	nop
        }
      }
      break;
 8004ee0:	bf00      	nop
    }
  }
  return frequency;
 8004ee2:	697b      	ldr	r3, [r7, #20]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	00bb8000 	.word	0x00bb8000
 8004ef8:	017d7840 	.word	0x017d7840
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d075      	beq.n	8005004 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f18:	4ba2      	ldr	r3, [pc, #648]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d00c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f24:	4b9f      	ldr	r3, [pc, #636]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d112      	bne.n	8004f56 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f30:	4b9c      	ldr	r3, [pc, #624]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3e:	4b99      	ldr	r3, [pc, #612]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d05b      	beq.n	8005002 <HAL_RCC_OscConfig+0x102>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d157      	bne.n	8005002 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e20b      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_OscConfig+0x6e>
 8004f60:	4b90      	ldr	r3, [pc, #576]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8f      	ldr	r2, [pc, #572]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e01d      	b.n	8004faa <HAL_RCC_OscConfig+0xaa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f76:	d10c      	bne.n	8004f92 <HAL_RCC_OscConfig+0x92>
 8004f78:	4b8a      	ldr	r3, [pc, #552]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a89      	ldr	r2, [pc, #548]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b87      	ldr	r3, [pc, #540]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a86      	ldr	r2, [pc, #536]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e00b      	b.n	8004faa <HAL_RCC_OscConfig+0xaa>
 8004f92:	4b84      	ldr	r3, [pc, #528]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a83      	ldr	r2, [pc, #524]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a80      	ldr	r2, [pc, #512]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d013      	beq.n	8004fda <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fc fc09 	bl	80017c8 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fba:	f7fc fc05 	bl	80017c8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b64      	cmp	r3, #100	; 0x64
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1d0      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fcc:	4b75      	ldr	r3, [pc, #468]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0xba>
 8004fd8:	e014      	b.n	8005004 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fc fbf5 	bl	80017c8 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe2:	f7fc fbf1 	bl	80017c8 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b64      	cmp	r3, #100	; 0x64
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1bc      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff4:	4b6b      	ldr	r3, [pc, #428]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0xe2>
 8005000:	e000      	b.n	8005004 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005002:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d063      	beq.n	80050d8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005010:	4b64      	ldr	r3, [pc, #400]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501c:	4b61      	ldr	r3, [pc, #388]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005024:	2b08      	cmp	r3, #8
 8005026:	d11c      	bne.n	8005062 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005028:	4b5e      	ldr	r3, [pc, #376]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d116      	bne.n	8005062 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005034:	4b5b      	ldr	r3, [pc, #364]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_OscConfig+0x14c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e190      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504c:	4b55      	ldr	r3, [pc, #340]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4952      	ldr	r1, [pc, #328]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005060:	e03a      	b.n	80050d8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d020      	beq.n	80050ac <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800506a:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <HAL_RCC_OscConfig+0x2a8>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fc fbaa 	bl	80017c8 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005078:	f7fc fba6 	bl	80017c8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e171      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	493f      	ldr	r1, [pc, #252]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
 80050aa:	e015      	b.n	80050d8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ac:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <HAL_RCC_OscConfig+0x2a8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc fb89 	bl	80017c8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fc fb85 	bl	80017c8 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e150      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d030      	beq.n	8005146 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d016      	beq.n	800511a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ec:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCC_OscConfig+0x2ac>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f2:	f7fc fb69 	bl	80017c8 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050fa:	f7fc fb65 	bl	80017c8 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e130      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800510e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x1fa>
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_OscConfig+0x2ac>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fc fb52 	bl	80017c8 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005128:	f7fc fb4e 	bl	80017c8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e119      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 809f 	beq.w	8005292 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005154:	2300      	movs	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005172:	6413      	str	r3, [r2, #64]	; 0x40
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_OscConfig+0x2a4>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_RCC_OscConfig+0x2b0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d120      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <HAL_RCC_OscConfig+0x2b0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <HAL_RCC_OscConfig+0x2b0>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519c:	f7fc fb14 	bl	80017c8 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a2:	e010      	b.n	80051c6 <HAL_RCC_OscConfig+0x2c6>
 80051a4:	40023800 	.word	0x40023800
 80051a8:	42470000 	.word	0x42470000
 80051ac:	42470e80 	.word	0x42470e80
 80051b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fc fb08 	bl	80017c8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0d3      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <HAL_RCC_OscConfig+0x478>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2e8>
 80051da:	4b68      	ldr	r3, [pc, #416]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a67      	ldr	r2, [pc, #412]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	e01c      	b.n	8005222 <HAL_RCC_OscConfig+0x322>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x30a>
 80051f0:	4b62      	ldr	r3, [pc, #392]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a61      	ldr	r2, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
 80051fc:	4b5f      	ldr	r3, [pc, #380]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4a5e      	ldr	r2, [pc, #376]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	; 0x70
 8005208:	e00b      	b.n	8005222 <HAL_RCC_OscConfig+0x322>
 800520a:	4b5c      	ldr	r3, [pc, #368]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a58      	ldr	r2, [pc, #352]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fc facd 	bl	80017c8 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fc fac9 	bl	80017c8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e092      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005248:	4b4c      	ldr	r3, [pc, #304]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ee      	beq.n	8005232 <HAL_RCC_OscConfig+0x332>
 8005254:	e014      	b.n	8005280 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fc fab7 	bl	80017c8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fc fab3 	bl	80017c8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	; 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e07c      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005274:	4b41      	ldr	r3, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d068      	beq.n	800536c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800529a:	4b38      	ldr	r3, [pc, #224]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d060      	beq.n	8005368 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d145      	bne.n	800533a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCC_OscConfig+0x480>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc fa88 	bl	80017c8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fc fa84 	bl	80017c8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e04f      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	3b01      	subs	r3, #1
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	071b      	lsls	r3, r3, #28
 8005306:	491d      	ldr	r1, [pc, #116]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800530c:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <HAL_RCC_OscConfig+0x480>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fc fa59 	bl	80017c8 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531a:	f7fc fa55 	bl	80017c8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e020      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x41a>
 8005338:	e018      	b.n	800536c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_OscConfig+0x480>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fc fa42 	bl	80017c8 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005348:	f7fc fa3e 	bl	80017c8 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e009      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_OscConfig+0x47c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x448>
 8005366:	e001      	b.n	800536c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40007000 	.word	0x40007000
 800537c:	40023800 	.word	0x40023800
 8005380:	42470060 	.word	0x42470060

08005384 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e022      	b.n	80053dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d105      	bne.n	80053ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fb ffb1 	bl	8001310 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2203      	movs	r2, #3
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f814 	bl	80053e4 <HAL_SD_InitCard>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e00a      	b.n	80053dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005400:	2376      	movs	r3, #118	; 0x76
 8005402:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681d      	ldr	r5, [r3, #0]
 8005408:	466c      	mov	r4, sp
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800541c:	4628      	mov	r0, r5
 800541e:	f001 fe11 	bl	8007044 <SDIO_Init>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e031      	b.n	8005498 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_SD_InitCard+0xbc>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f001 fe38 	bl	80070b4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <HAL_SD_InitCard+0xbc>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fb18 	bl	8005a80 <SD_PowerON>
 8005450:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e013      	b.n	8005498 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa37 	bl	80058e4 <SD_InitCard>
 8005476:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bdb0      	pop	{r4, r5, r7, pc}
 80054a0:	422580a0 	.word	0x422580a0

080054a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b2:	0f9b      	lsrs	r3, r3, #30
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054be:	0e9b      	lsrs	r3, r3, #26
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005504:	0d1b      	lsrs	r3, r3, #20
 8005506:	b29a      	uxth	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	b2da      	uxtb	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005522:	0bdb      	lsrs	r3, r3, #15
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005534:	0b9b      	lsrs	r3, r3, #14
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005546:	0b5b      	lsrs	r3, r3, #13
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	0b1b      	lsrs	r3, r3, #12
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	b2da      	uxtb	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2200      	movs	r2, #0
 800556a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	2b00      	cmp	r3, #0
 8005572:	d163      	bne.n	800563c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005578:	009a      	lsls	r2, r3, #2
 800557a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800557e:	4013      	ands	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005584:	0f92      	lsrs	r2, r2, #30
 8005586:	431a      	orrs	r2, r3
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	0edb      	lsrs	r3, r3, #27
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	b2da      	uxtb	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a2:	0e1b      	lsrs	r3, r3, #24
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b4:	0d5b      	lsrs	r3, r3, #21
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c6:	0c9b      	lsrs	r3, r3, #18
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	0bdb      	lsrs	r3, r3, #15
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	7e1b      	ldrb	r3, [r3, #24]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	3302      	adds	r3, #2
 80055fc:	2201      	movs	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005606:	fb02 f203 	mul.w	r2, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	7a1b      	ldrb	r3, [r3, #8]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005628:	0a52      	lsrs	r2, r2, #9
 800562a:	fb02 f203 	mul.w	r2, r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005638:	661a      	str	r2, [r3, #96]	; 0x60
 800563a:	e031      	b.n	80056a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	2b01      	cmp	r3, #1
 8005642:	d11d      	bne.n	8005680 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	3301      	adds	r3, #1
 8005660:	029a      	lsls	r2, r3, #10
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005674:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	661a      	str	r2, [r3, #96]	; 0x60
 800567e:	e00f      	b.n	80056a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a58      	ldr	r2, [pc, #352]	; (80057e8 <HAL_SD_GetCardCSD+0x344>)
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e09d      	b.n	80057dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a4:	0b9b      	lsrs	r3, r3, #14
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	0fdb      	lsrs	r3, r3, #31
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	0f5b      	lsrs	r3, r3, #29
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	0e9b      	lsrs	r3, r3, #26
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	0d9b      	lsrs	r3, r3, #22
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	0d5b      	lsrs	r3, r3, #21
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	0bdb      	lsrs	r3, r3, #15
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	0b9b      	lsrs	r3, r3, #14
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	0b5b      	lsrs	r3, r3, #13
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	0b1b      	lsrs	r3, r3, #12
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	004005ff 	.word	0x004005ff

080057ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80057ec:	b5b0      	push	{r4, r5, r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2203      	movs	r2, #3
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	2b03      	cmp	r3, #3
 8005804:	d02e      	beq.n	8005864 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d106      	bne.n	800581c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
 800581a:	e029      	b.n	8005870 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005822:	d10a      	bne.n	800583a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f9b9 	bl	8005b9c <SD_WideBus_Enable>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
 8005838:	e01a      	b.n	8005870 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f9f6 	bl	8005c32 <SD_WideBus_Disable>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
 8005854:	e00c      	b.n	8005870 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
 8005862:	e005      	b.n	8005870 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e024      	b.n	80058d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	466c      	mov	r4, sp
 80058b4:	f107 0318 	add.w	r3, r7, #24
 80058b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058c0:	f107 030c 	add.w	r3, r7, #12
 80058c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c6:	4628      	mov	r0, r5
 80058c8:	f001 fbbc 	bl	8007044 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3728      	adds	r7, #40	; 0x28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bdb0      	pop	{r4, r5, r7, pc}
 80058de:	bf00      	nop
 80058e0:	004005ff 	.word	0x004005ff

080058e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b094      	sub	sp, #80	; 0x50
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058ec:	2301      	movs	r3, #1
 80058ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 fbec 	bl	80070d2 <SDIO_GetPowerState>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d102      	bne.n	8005906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005900:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005904:	e0b7      	b.n	8005a76 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	2b03      	cmp	r3, #3
 800590c:	d02f      	beq.n	800596e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fd6b 	bl	80073ee <SDMMC_CmdSendCID>
 8005918:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <SD_InitCard+0x40>
    {
      return errorstate;
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	e0a8      	b.n	8005a76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fc16 	bl	800715c <SDIO_GetResponse>
 8005930:	4602      	mov	r2, r0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2104      	movs	r1, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fc0d 	bl	800715c <SDIO_GetResponse>
 8005942:	4602      	mov	r2, r0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2108      	movs	r1, #8
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fc04 	bl	800715c <SDIO_GetResponse>
 8005954:	4602      	mov	r2, r0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	210c      	movs	r1, #12
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fbfb 	bl	800715c <SDIO_GetResponse>
 8005966:	4602      	mov	r2, r0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	2b03      	cmp	r3, #3
 8005974:	d00d      	beq.n	8005992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f107 020e 	add.w	r2, r7, #14
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f001 fd71 	bl	8007468 <SDMMC_CmdSetRelAdd>
 8005986:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <SD_InitCard+0xae>
    {
      return errorstate;
 800598e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005990:	e071      	b.n	8005a76 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	2b03      	cmp	r3, #3
 8005998:	d036      	beq.n	8005a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f001 fd3b 	bl	800742a <SDMMC_CmdSendCSD>
 80059b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80059bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059be:	e05a      	b.n	8005a76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fbc8 	bl	800715c <SDIO_GetResponse>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2104      	movs	r1, #4
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 fbbf 	bl	800715c <SDIO_GetResponse>
 80059de:	4602      	mov	r2, r0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2108      	movs	r1, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fbb6 	bl	800715c <SDIO_GetResponse>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	210c      	movs	r1, #12
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fbad 	bl	800715c <SDIO_GetResponse>
 8005a02:	4602      	mov	r2, r0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fba4 	bl	800715c <SDIO_GetResponse>
 8005a14:	4603      	mov	r3, r0
 8005a16:	0d1a      	lsrs	r2, r3, #20
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fd3e 	bl	80054a4 <HAL_SD_GetCardCSD>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a32:	e020      	b.n	8005a76 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	f04f 0400 	mov.w	r4, #0
 8005a42:	461a      	mov	r2, r3
 8005a44:	4623      	mov	r3, r4
 8005a46:	4608      	mov	r0, r1
 8005a48:	f001 fbe9 	bl	800721e <SDMMC_CmdSelDesel>
 8005a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <SD_InitCard+0x174>
  {
    return errorstate;
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	e00e      	b.n	8005a76 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681d      	ldr	r5, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	466c      	mov	r4, sp
 8005a60:	f103 0210 	add.w	r2, r3, #16
 8005a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f001 fae8 	bl	8007044 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3740      	adds	r7, #64	; 0x40
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fbe3 	bl	8007264 <SDMMC_CmdGoIdleState>
 8005a9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	e072      	b.n	8005b90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 fbf6 	bl	80072a0 <SDMMC_CmdOperCond>
 8005ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fbcc 	bl	8007264 <SDMMC_CmdGoIdleState>
 8005acc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <SD_PowerON+0x5e>
    {
      return errorstate;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e05b      	b.n	8005b90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d137      	bne.n	8005b56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fbf6 	bl	80072de <SDMMC_CmdAppCommand>
 8005af2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d02d      	beq.n	8005b56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005afe:	e047      	b.n	8005b90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fbe9 	bl	80072de <SDMMC_CmdAppCommand>
 8005b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <SD_PowerON+0x98>
    {
      return errorstate;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e03b      	b.n	8005b90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	491e      	ldr	r1, [pc, #120]	; (8005b98 <SD_PowerON+0x118>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fbff 	bl	8007322 <SDMMC_CmdAppOperCommand>
 8005b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b30:	e02e      	b.n	8005b90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fb0f 	bl	800715c <SDIO_GetResponse>
 8005b3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	0fdb      	lsrs	r3, r3, #31
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <SD_PowerON+0xcc>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <SD_PowerON+0xce>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]

    count++;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d802      	bhi.n	8005b66 <SD_PowerON+0xe6>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0cc      	beq.n	8005b00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d902      	bls.n	8005b76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b74:	e00c      	b.n	8005b90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
 8005b86:	e002      	b.n	8005b8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	c1100000 	.word	0xc1100000

08005b9c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fad2 	bl	800715c <SDIO_GetResponse>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc2:	d102      	bne.n	8005bca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bc8:	e02f      	b.n	8005c2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f879 	bl	8005cc8 <SD_FindSCR>
 8005bd6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	e023      	b.n	8005c2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01c      	beq.n	8005c26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f001 fb70 	bl	80072de <SDMMC_CmdAppCommand>
 8005bfe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	e00f      	b.n	8005c2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2102      	movs	r1, #2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fba9 	bl	8007368 <SDMMC_CmdBusWidth>
 8005c16:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	e003      	b.n	8005c2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e001      	b.n	8005c2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fa87 	bl	800715c <SDIO_GetResponse>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c58:	d102      	bne.n	8005c60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c5e:	e02f      	b.n	8005cc0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f82e 	bl	8005cc8 <SD_FindSCR>
 8005c6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	e023      	b.n	8005cc0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01c      	beq.n	8005cbc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f001 fb25 	bl	80072de <SDMMC_CmdAppCommand>
 8005c94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	e00f      	b.n	8005cc0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fb5e 	bl	8007368 <SDMMC_CmdBusWidth>
 8005cac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e003      	b.n	8005cc0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e001      	b.n	8005cc0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b08f      	sub	sp, #60	; 0x3c
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cd2:	f7fb fd79 	bl	80017c8 <HAL_GetTick>
 8005cd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2108      	movs	r1, #8
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fa73 	bl	80071da <SDMMC_CmdBlockLength>
 8005cf4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	e0a9      	b.n	8005e54 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f001 fae6 	bl	80072de <SDMMC_CmdAppCommand>
 8005d12:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	e09a      	b.n	8005e54 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d24:	2308      	movs	r3, #8
 8005d26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005d28:	2330      	movs	r3, #48	; 0x30
 8005d2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f107 0210 	add.w	r2, r7, #16
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fa1d 	bl	8007182 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fb2d 	bl	80073ac <SDMMC_CmdSendSCR>
 8005d52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d022      	beq.n	8005da0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	e07a      	b.n	8005e54 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	f107 0208 	add.w	r2, r7, #8
 8005d78:	18d4      	adds	r4, r2, r3
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	f001 f98d 	bl	800709a <SDIO_ReadFIFO>
 8005d80:	4603      	mov	r3, r0
 8005d82:	6023      	str	r3, [r4, #0]
      index++;
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	3301      	adds	r3, #1
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d8a:	f7fb fd1d 	bl	80017c8 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d102      	bne.n	8005da0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d9e:	e059      	b.n	8005e54 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da6:	f240 432a 	movw	r3, #1066	; 0x42a
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0d6      	beq.n	8005d5e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	e044      	b.n	8005e54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005de0:	2302      	movs	r3, #2
 8005de2:	e037      	b.n	8005e54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2220      	movs	r2, #32
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	e02a      	b.n	8005e54 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	061a      	lsls	r2, r3, #24
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e14:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0e1b      	lsrs	r3, r3, #24
 8005e24:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	601a      	str	r2, [r3, #0]
    scr++;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	061a      	lsls	r2, r3, #24
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	373c      	adds	r7, #60	; 0x3c
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd90      	pop	{r4, r7, pc}

08005e5c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e034      	b.n	8005edc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7fb fb62 	bl	8001550 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3308      	adds	r3, #8
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f000 ffd0 	bl	8006e3c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	f001 f838 	bl	8006f1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6858      	ldr	r0, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	f001 f883 	bl	8006fc4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	6892      	ldr	r2, [r2, #8]
 8005ec6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	f041 0101 	orr.w	r1, r1, #1
 8005ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e01d      	b.n	8005f32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f815 	bl	8005f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 f968 	bl	80061f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d007      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d122      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d11b      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0202 	mvn.w	r2, #2
 8005fc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8ee 	bl	80061ba <HAL_TIM_IC_CaptureCallback>
 8005fde:	e005      	b.n	8005fec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8e0 	bl	80061a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8f1 	bl	80061ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d122      	bne.n	8006046 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b04      	cmp	r3, #4
 800600c:	d11b      	bne.n	8006046 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f06f 0204 	mvn.w	r2, #4
 8006016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8c4 	bl	80061ba <HAL_TIM_IC_CaptureCallback>
 8006032:	e005      	b.n	8006040 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8b6 	bl	80061a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8c7 	bl	80061ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d122      	bne.n	800609a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b08      	cmp	r3, #8
 8006060:	d11b      	bne.n	800609a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0208 	mvn.w	r2, #8
 800606a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f89a 	bl	80061ba <HAL_TIM_IC_CaptureCallback>
 8006086:	e005      	b.n	8006094 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f88c 	bl	80061a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f89d 	bl	80061ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d122      	bne.n	80060ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d11b      	bne.n	80060ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0210 	mvn.w	r2, #16
 80060be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2208      	movs	r2, #8
 80060c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f870 	bl	80061ba <HAL_TIM_IC_CaptureCallback>
 80060da:	e005      	b.n	80060e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f862 	bl	80061a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f873 	bl	80061ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b01      	cmp	r3, #1
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0201 	mvn.w	r2, #1
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fa feed 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f903 	bl	800634c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f838 	bl	80061e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b20      	cmp	r3, #32
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0220 	mvn.w	r2, #32
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8cd 	bl	8006338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a40      	ldr	r2, [pc, #256]	; (800630c <TIM_Base_SetConfig+0x114>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d00f      	beq.n	8006238 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3d      	ldr	r2, [pc, #244]	; (8006310 <TIM_Base_SetConfig+0x118>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00b      	beq.n	8006238 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3c      	ldr	r2, [pc, #240]	; (8006314 <TIM_Base_SetConfig+0x11c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3b      	ldr	r2, [pc, #236]	; (8006318 <TIM_Base_SetConfig+0x120>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3a      	ldr	r2, [pc, #232]	; (800631c <TIM_Base_SetConfig+0x124>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d108      	bne.n	800624a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2f      	ldr	r2, [pc, #188]	; (800630c <TIM_Base_SetConfig+0x114>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02b      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d027      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <TIM_Base_SetConfig+0x118>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d023      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2b      	ldr	r2, [pc, #172]	; (8006314 <TIM_Base_SetConfig+0x11c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01f      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <TIM_Base_SetConfig+0x120>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01b      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a29      	ldr	r2, [pc, #164]	; (800631c <TIM_Base_SetConfig+0x124>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d017      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a28      	ldr	r2, [pc, #160]	; (8006320 <TIM_Base_SetConfig+0x128>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a27      	ldr	r2, [pc, #156]	; (8006324 <TIM_Base_SetConfig+0x12c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a26      	ldr	r2, [pc, #152]	; (8006328 <TIM_Base_SetConfig+0x130>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a25      	ldr	r2, [pc, #148]	; (800632c <TIM_Base_SetConfig+0x134>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a24      	ldr	r2, [pc, #144]	; (8006330 <TIM_Base_SetConfig+0x138>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a23      	ldr	r2, [pc, #140]	; (8006334 <TIM_Base_SetConfig+0x13c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a0a      	ldr	r2, [pc, #40]	; (800630c <TIM_Base_SetConfig+0x114>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_Base_SetConfig+0xf8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <TIM_Base_SetConfig+0x124>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d103      	bne.n	80062f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	615a      	str	r2, [r3, #20]
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40010400 	.word	0x40010400
 8006320:	40014000 	.word	0x40014000
 8006324:	40014400 	.word	0x40014400
 8006328:	40014800 	.word	0x40014800
 800632c:	40001800 	.word	0x40001800
 8006330:	40001c00 	.word	0x40001c00
 8006334:	40002000 	.word	0x40002000

08006338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e03f      	b.n	80063f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fb f82a 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9b1 	bl	800670c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695a      	ldr	r2, [r3, #20]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b088      	sub	sp, #32
 80063fe:	af02      	add	r7, sp, #8
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	f040 8083 	bne.w	8006522 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Transmit+0x2e>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e07b      	b.n	8006524 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Transmit+0x40>
 8006436:	2302      	movs	r3, #2
 8006438:	e074      	b.n	8006524 <HAL_UART_Transmit+0x12a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2221      	movs	r2, #33	; 0x21
 800644c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006450:	f7fb f9ba 	bl	80017c8 <HAL_GetTick>
 8006454:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800646a:	e042      	b.n	80064f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006482:	d122      	bne.n	80064ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f8f2 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e042      	b.n	8006524 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3302      	adds	r3, #2
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	e017      	b.n	80064f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	e013      	b.n	80064f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f8cf 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01f      	b.n	8006524 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	60ba      	str	r2, [r7, #8]
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1b7      	bne.n	800646c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f8b6 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e006      	b.n	8006524 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e000      	b.n	8006524 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b20      	cmp	r3, #32
 800654a:	f040 8090 	bne.w	800666e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_UART_Receive+0x2e>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e088      	b.n	8006670 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_UART_Receive+0x40>
 8006568:	2302      	movs	r3, #2
 800656a:	e081      	b.n	8006670 <HAL_UART_Receive+0x144>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2222      	movs	r2, #34	; 0x22
 800657e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006582:	f7fb f921 	bl	80017c8 <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800659c:	e05c      	b.n	8006658 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d12b      	bne.n	800660e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	2120      	movs	r1, #32
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f859 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e04f      	b.n	8006670 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10c      	bne.n	80065f6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	3302      	adds	r3, #2
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	e030      	b.n	8006658 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	b29a      	uxth	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3301      	adds	r3, #1
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	e024      	b.n	8006658 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	2120      	movs	r1, #32
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f82d 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e023      	b.n	8006670 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	60ba      	str	r2, [r7, #8]
 800663c:	b2ca      	uxtb	r2, r1
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e00a      	b.n	8006658 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d19d      	bne.n	800659e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006688:	e02c      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d028      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006698:	f7fb f896 	bl	80017c8 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d21d      	bcs.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e00f      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d0c3      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800674e:	f023 030c 	bic.w	r3, r3, #12
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	430b      	orrs	r3, r1
 800675a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	f040 8199 	bne.w	8006ab0 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4ac6      	ldr	r2, [pc, #792]	; (8006a9c <UART_SetConfig+0x390>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00f      	beq.n	80067a8 <UART_SetConfig+0x9c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4ac4      	ldr	r2, [pc, #784]	; (8006aa0 <UART_SetConfig+0x394>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00a      	beq.n	80067a8 <UART_SetConfig+0x9c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4ac3      	ldr	r2, [pc, #780]	; (8006aa4 <UART_SetConfig+0x398>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d005      	beq.n	80067a8 <UART_SetConfig+0x9c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4ac1      	ldr	r2, [pc, #772]	; (8006aa8 <UART_SetConfig+0x39c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f040 80bd 	bne.w	8006922 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067a8:	f7fd ff88 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 80067ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	461d      	mov	r5, r3
 80067b2:	f04f 0600 	mov.w	r6, #0
 80067b6:	46a8      	mov	r8, r5
 80067b8:	46b1      	mov	r9, r6
 80067ba:	eb18 0308 	adds.w	r3, r8, r8
 80067be:	eb49 0409 	adc.w	r4, r9, r9
 80067c2:	4698      	mov	r8, r3
 80067c4:	46a1      	mov	r9, r4
 80067c6:	eb18 0805 	adds.w	r8, r8, r5
 80067ca:	eb49 0906 	adc.w	r9, r9, r6
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067e2:	4688      	mov	r8, r1
 80067e4:	4691      	mov	r9, r2
 80067e6:	eb18 0005 	adds.w	r0, r8, r5
 80067ea:	eb49 0106 	adc.w	r1, r9, r6
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	461d      	mov	r5, r3
 80067f4:	f04f 0600 	mov.w	r6, #0
 80067f8:	196b      	adds	r3, r5, r5
 80067fa:	eb46 0406 	adc.w	r4, r6, r6
 80067fe:	461a      	mov	r2, r3
 8006800:	4623      	mov	r3, r4
 8006802:	f7f9 fd0d 	bl	8000220 <__aeabi_uldivmod>
 8006806:	4603      	mov	r3, r0
 8006808:	460c      	mov	r4, r1
 800680a:	461a      	mov	r2, r3
 800680c:	4ba7      	ldr	r3, [pc, #668]	; (8006aac <UART_SetConfig+0x3a0>)
 800680e:	fba3 2302 	umull	r2, r3, r3, r2
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	461d      	mov	r5, r3
 800681c:	f04f 0600 	mov.w	r6, #0
 8006820:	46a9      	mov	r9, r5
 8006822:	46b2      	mov	sl, r6
 8006824:	eb19 0309 	adds.w	r3, r9, r9
 8006828:	eb4a 040a 	adc.w	r4, sl, sl
 800682c:	4699      	mov	r9, r3
 800682e:	46a2      	mov	sl, r4
 8006830:	eb19 0905 	adds.w	r9, r9, r5
 8006834:	eb4a 0a06 	adc.w	sl, sl, r6
 8006838:	f04f 0100 	mov.w	r1, #0
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800684c:	4689      	mov	r9, r1
 800684e:	4692      	mov	sl, r2
 8006850:	eb19 0005 	adds.w	r0, r9, r5
 8006854:	eb4a 0106 	adc.w	r1, sl, r6
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	461d      	mov	r5, r3
 800685e:	f04f 0600 	mov.w	r6, #0
 8006862:	196b      	adds	r3, r5, r5
 8006864:	eb46 0406 	adc.w	r4, r6, r6
 8006868:	461a      	mov	r2, r3
 800686a:	4623      	mov	r3, r4
 800686c:	f7f9 fcd8 	bl	8000220 <__aeabi_uldivmod>
 8006870:	4603      	mov	r3, r0
 8006872:	460c      	mov	r4, r1
 8006874:	461a      	mov	r2, r3
 8006876:	4b8d      	ldr	r3, [pc, #564]	; (8006aac <UART_SetConfig+0x3a0>)
 8006878:	fba3 1302 	umull	r1, r3, r3, r2
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	2164      	movs	r1, #100	; 0x64
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	3332      	adds	r3, #50	; 0x32
 800688a:	4a88      	ldr	r2, [pc, #544]	; (8006aac <UART_SetConfig+0x3a0>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006898:	4498      	add	r8, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	461d      	mov	r5, r3
 800689e:	f04f 0600 	mov.w	r6, #0
 80068a2:	46a9      	mov	r9, r5
 80068a4:	46b2      	mov	sl, r6
 80068a6:	eb19 0309 	adds.w	r3, r9, r9
 80068aa:	eb4a 040a 	adc.w	r4, sl, sl
 80068ae:	4699      	mov	r9, r3
 80068b0:	46a2      	mov	sl, r4
 80068b2:	eb19 0905 	adds.w	r9, r9, r5
 80068b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ce:	4689      	mov	r9, r1
 80068d0:	4692      	mov	sl, r2
 80068d2:	eb19 0005 	adds.w	r0, r9, r5
 80068d6:	eb4a 0106 	adc.w	r1, sl, r6
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	461d      	mov	r5, r3
 80068e0:	f04f 0600 	mov.w	r6, #0
 80068e4:	196b      	adds	r3, r5, r5
 80068e6:	eb46 0406 	adc.w	r4, r6, r6
 80068ea:	461a      	mov	r2, r3
 80068ec:	4623      	mov	r3, r4
 80068ee:	f7f9 fc97 	bl	8000220 <__aeabi_uldivmod>
 80068f2:	4603      	mov	r3, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	461a      	mov	r2, r3
 80068f8:	4b6c      	ldr	r3, [pc, #432]	; (8006aac <UART_SetConfig+0x3a0>)
 80068fa:	fba3 1302 	umull	r1, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	2164      	movs	r1, #100	; 0x64
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	3332      	adds	r3, #50	; 0x32
 800690c:	4a67      	ldr	r2, [pc, #412]	; (8006aac <UART_SetConfig+0x3a0>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	f003 0207 	and.w	r2, r3, #7
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4442      	add	r2, r8
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	e27d      	b.n	8006e1e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006922:	f7fd feb7 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8006926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	461d      	mov	r5, r3
 800692c:	f04f 0600 	mov.w	r6, #0
 8006930:	46a8      	mov	r8, r5
 8006932:	46b1      	mov	r9, r6
 8006934:	eb18 0308 	adds.w	r3, r8, r8
 8006938:	eb49 0409 	adc.w	r4, r9, r9
 800693c:	4698      	mov	r8, r3
 800693e:	46a1      	mov	r9, r4
 8006940:	eb18 0805 	adds.w	r8, r8, r5
 8006944:	eb49 0906 	adc.w	r9, r9, r6
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800695c:	4688      	mov	r8, r1
 800695e:	4691      	mov	r9, r2
 8006960:	eb18 0005 	adds.w	r0, r8, r5
 8006964:	eb49 0106 	adc.w	r1, r9, r6
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	461d      	mov	r5, r3
 800696e:	f04f 0600 	mov.w	r6, #0
 8006972:	196b      	adds	r3, r5, r5
 8006974:	eb46 0406 	adc.w	r4, r6, r6
 8006978:	461a      	mov	r2, r3
 800697a:	4623      	mov	r3, r4
 800697c:	f7f9 fc50 	bl	8000220 <__aeabi_uldivmod>
 8006980:	4603      	mov	r3, r0
 8006982:	460c      	mov	r4, r1
 8006984:	461a      	mov	r2, r3
 8006986:	4b49      	ldr	r3, [pc, #292]	; (8006aac <UART_SetConfig+0x3a0>)
 8006988:	fba3 2302 	umull	r2, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	461d      	mov	r5, r3
 8006996:	f04f 0600 	mov.w	r6, #0
 800699a:	46a9      	mov	r9, r5
 800699c:	46b2      	mov	sl, r6
 800699e:	eb19 0309 	adds.w	r3, r9, r9
 80069a2:	eb4a 040a 	adc.w	r4, sl, sl
 80069a6:	4699      	mov	r9, r3
 80069a8:	46a2      	mov	sl, r4
 80069aa:	eb19 0905 	adds.w	r9, r9, r5
 80069ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80069b2:	f04f 0100 	mov.w	r1, #0
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069c6:	4689      	mov	r9, r1
 80069c8:	4692      	mov	sl, r2
 80069ca:	eb19 0005 	adds.w	r0, r9, r5
 80069ce:	eb4a 0106 	adc.w	r1, sl, r6
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	461d      	mov	r5, r3
 80069d8:	f04f 0600 	mov.w	r6, #0
 80069dc:	196b      	adds	r3, r5, r5
 80069de:	eb46 0406 	adc.w	r4, r6, r6
 80069e2:	461a      	mov	r2, r3
 80069e4:	4623      	mov	r3, r4
 80069e6:	f7f9 fc1b 	bl	8000220 <__aeabi_uldivmod>
 80069ea:	4603      	mov	r3, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <UART_SetConfig+0x3a0>)
 80069f2:	fba3 1302 	umull	r1, r3, r3, r2
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2164      	movs	r1, #100	; 0x64
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	3332      	adds	r3, #50	; 0x32
 8006a04:	4a29      	ldr	r2, [pc, #164]	; (8006aac <UART_SetConfig+0x3a0>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a12:	4498      	add	r8, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	461d      	mov	r5, r3
 8006a18:	f04f 0600 	mov.w	r6, #0
 8006a1c:	46a9      	mov	r9, r5
 8006a1e:	46b2      	mov	sl, r6
 8006a20:	eb19 0309 	adds.w	r3, r9, r9
 8006a24:	eb4a 040a 	adc.w	r4, sl, sl
 8006a28:	4699      	mov	r9, r3
 8006a2a:	46a2      	mov	sl, r4
 8006a2c:	eb19 0905 	adds.w	r9, r9, r5
 8006a30:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a48:	4689      	mov	r9, r1
 8006a4a:	4692      	mov	sl, r2
 8006a4c:	eb19 0005 	adds.w	r0, r9, r5
 8006a50:	eb4a 0106 	adc.w	r1, sl, r6
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	461d      	mov	r5, r3
 8006a5a:	f04f 0600 	mov.w	r6, #0
 8006a5e:	196b      	adds	r3, r5, r5
 8006a60:	eb46 0406 	adc.w	r4, r6, r6
 8006a64:	461a      	mov	r2, r3
 8006a66:	4623      	mov	r3, r4
 8006a68:	f7f9 fbda 	bl	8000220 <__aeabi_uldivmod>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	461a      	mov	r2, r3
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <UART_SetConfig+0x3a0>)
 8006a74:	fba3 1302 	umull	r1, r3, r3, r2
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	2164      	movs	r1, #100	; 0x64
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	3332      	adds	r3, #50	; 0x32
 8006a86:	4a09      	ldr	r2, [pc, #36]	; (8006aac <UART_SetConfig+0x3a0>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	f003 0207 	and.w	r2, r3, #7
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4442      	add	r2, r8
 8006a98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a9a:	e1c0      	b.n	8006e1e <UART_SetConfig+0x712>
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	40011400 	.word	0x40011400
 8006aa4:	40011800 	.word	0x40011800
 8006aa8:	40011c00 	.word	0x40011c00
 8006aac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4adc      	ldr	r2, [pc, #880]	; (8006e28 <UART_SetConfig+0x71c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <UART_SetConfig+0x3ce>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4adb      	ldr	r2, [pc, #876]	; (8006e2c <UART_SetConfig+0x720>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00a      	beq.n	8006ada <UART_SetConfig+0x3ce>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4ad9      	ldr	r2, [pc, #868]	; (8006e30 <UART_SetConfig+0x724>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d005      	beq.n	8006ada <UART_SetConfig+0x3ce>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4ad8      	ldr	r2, [pc, #864]	; (8006e34 <UART_SetConfig+0x728>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	f040 80d1 	bne.w	8006c7c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ada:	f7fd fdef 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 8006ade:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	469a      	mov	sl, r3
 8006ae4:	f04f 0b00 	mov.w	fp, #0
 8006ae8:	46d0      	mov	r8, sl
 8006aea:	46d9      	mov	r9, fp
 8006aec:	eb18 0308 	adds.w	r3, r8, r8
 8006af0:	eb49 0409 	adc.w	r4, r9, r9
 8006af4:	4698      	mov	r8, r3
 8006af6:	46a1      	mov	r9, r4
 8006af8:	eb18 080a 	adds.w	r8, r8, sl
 8006afc:	eb49 090b 	adc.w	r9, r9, fp
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b14:	4688      	mov	r8, r1
 8006b16:	4691      	mov	r9, r2
 8006b18:	eb1a 0508 	adds.w	r5, sl, r8
 8006b1c:	eb4b 0609 	adc.w	r6, fp, r9
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	f04f 0400 	mov.w	r4, #0
 8006b32:	0094      	lsls	r4, r2, #2
 8006b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b38:	008b      	lsls	r3, r1, #2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4631      	mov	r1, r6
 8006b42:	f7f9 fb6d 	bl	8000220 <__aeabi_uldivmod>
 8006b46:	4603      	mov	r3, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4bba      	ldr	r3, [pc, #744]	; (8006e38 <UART_SetConfig+0x72c>)
 8006b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	469b      	mov	fp, r3
 8006b5c:	f04f 0c00 	mov.w	ip, #0
 8006b60:	46d9      	mov	r9, fp
 8006b62:	46e2      	mov	sl, ip
 8006b64:	eb19 0309 	adds.w	r3, r9, r9
 8006b68:	eb4a 040a 	adc.w	r4, sl, sl
 8006b6c:	4699      	mov	r9, r3
 8006b6e:	46a2      	mov	sl, r4
 8006b70:	eb19 090b 	adds.w	r9, r9, fp
 8006b74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b78:	f04f 0100 	mov.w	r1, #0
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	4692      	mov	sl, r2
 8006b90:	eb1b 0509 	adds.w	r5, fp, r9
 8006b94:	eb4c 060a 	adc.w	r6, ip, sl
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	f04f 0400 	mov.w	r4, #0
 8006baa:	0094      	lsls	r4, r2, #2
 8006bac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bb0:	008b      	lsls	r3, r1, #2
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	4631      	mov	r1, r6
 8006bba:	f7f9 fb31 	bl	8000220 <__aeabi_uldivmod>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b9c      	ldr	r3, [pc, #624]	; (8006e38 <UART_SetConfig+0x72c>)
 8006bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2164      	movs	r1, #100	; 0x64
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a97      	ldr	r2, [pc, #604]	; (8006e38 <UART_SetConfig+0x72c>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006be4:	4498      	add	r8, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	469b      	mov	fp, r3
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	46d9      	mov	r9, fp
 8006bf0:	46e2      	mov	sl, ip
 8006bf2:	eb19 0309 	adds.w	r3, r9, r9
 8006bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8006bfa:	4699      	mov	r9, r3
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	eb19 090b 	adds.w	r9, r9, fp
 8006c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c1a:	4689      	mov	r9, r1
 8006c1c:	4692      	mov	sl, r2
 8006c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c22:	eb4c 060a 	adc.w	r6, ip, sl
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	0094      	lsls	r4, r2, #2
 8006c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c3e:	008b      	lsls	r3, r1, #2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	4628      	mov	r0, r5
 8006c46:	4631      	mov	r1, r6
 8006c48:	f7f9 faea 	bl	8000220 <__aeabi_uldivmod>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b79      	ldr	r3, [pc, #484]	; (8006e38 <UART_SetConfig+0x72c>)
 8006c54:	fba3 1302 	umull	r1, r3, r3, r2
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	2164      	movs	r1, #100	; 0x64
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	4a74      	ldr	r2, [pc, #464]	; (8006e38 <UART_SetConfig+0x72c>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4442      	add	r2, r8
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	e0d0      	b.n	8006e1e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7fd fd0a 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8006c80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	469a      	mov	sl, r3
 8006c86:	f04f 0b00 	mov.w	fp, #0
 8006c8a:	46d0      	mov	r8, sl
 8006c8c:	46d9      	mov	r9, fp
 8006c8e:	eb18 0308 	adds.w	r3, r8, r8
 8006c92:	eb49 0409 	adc.w	r4, r9, r9
 8006c96:	4698      	mov	r8, r3
 8006c98:	46a1      	mov	r9, r4
 8006c9a:	eb18 080a 	adds.w	r8, r8, sl
 8006c9e:	eb49 090b 	adc.w	r9, r9, fp
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cb6:	4688      	mov	r8, r1
 8006cb8:	4691      	mov	r9, r2
 8006cba:	eb1a 0508 	adds.w	r5, sl, r8
 8006cbe:	eb4b 0609 	adc.w	r6, fp, r9
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	f04f 0400 	mov.w	r4, #0
 8006cd4:	0094      	lsls	r4, r2, #2
 8006cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cda:	008b      	lsls	r3, r1, #2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4623      	mov	r3, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	f7f9 fa9c 	bl	8000220 <__aeabi_uldivmod>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b52      	ldr	r3, [pc, #328]	; (8006e38 <UART_SetConfig+0x72c>)
 8006cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	469b      	mov	fp, r3
 8006cfe:	f04f 0c00 	mov.w	ip, #0
 8006d02:	46d9      	mov	r9, fp
 8006d04:	46e2      	mov	sl, ip
 8006d06:	eb19 0309 	adds.w	r3, r9, r9
 8006d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d0e:	4699      	mov	r9, r3
 8006d10:	46a2      	mov	sl, r4
 8006d12:	eb19 090b 	adds.w	r9, r9, fp
 8006d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d2e:	4689      	mov	r9, r1
 8006d30:	4692      	mov	sl, r2
 8006d32:	eb1b 0509 	adds.w	r5, fp, r9
 8006d36:	eb4c 060a 	adc.w	r6, ip, sl
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	f04f 0400 	mov.w	r4, #0
 8006d4c:	0094      	lsls	r4, r2, #2
 8006d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d52:	008b      	lsls	r3, r1, #2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4623      	mov	r3, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	f7f9 fa60 	bl	8000220 <__aeabi_uldivmod>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <UART_SetConfig+0x72c>)
 8006d68:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	2164      	movs	r1, #100	; 0x64
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	3332      	adds	r3, #50	; 0x32
 8006d7a:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <UART_SetConfig+0x72c>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d86:	4498      	add	r8, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	469b      	mov	fp, r3
 8006d8c:	f04f 0c00 	mov.w	ip, #0
 8006d90:	46d9      	mov	r9, fp
 8006d92:	46e2      	mov	sl, ip
 8006d94:	eb19 0309 	adds.w	r3, r9, r9
 8006d98:	eb4a 040a 	adc.w	r4, sl, sl
 8006d9c:	4699      	mov	r9, r3
 8006d9e:	46a2      	mov	sl, r4
 8006da0:	eb19 090b 	adds.w	r9, r9, fp
 8006da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dbc:	4689      	mov	r9, r1
 8006dbe:	4692      	mov	sl, r2
 8006dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8006dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f04f 0300 	mov.w	r3, #0
 8006dd6:	f04f 0400 	mov.w	r4, #0
 8006dda:	0094      	lsls	r4, r2, #2
 8006ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006de0:	008b      	lsls	r3, r1, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	4623      	mov	r3, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	4631      	mov	r1, r6
 8006dea:	f7f9 fa19 	bl	8000220 <__aeabi_uldivmod>
 8006dee:	4603      	mov	r3, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	461a      	mov	r2, r3
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <UART_SetConfig+0x72c>)
 8006df6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2164      	movs	r1, #100	; 0x64
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	3332      	adds	r3, #50	; 0x32
 8006e08:	4a0b      	ldr	r2, [pc, #44]	; (8006e38 <UART_SetConfig+0x72c>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	f003 020f 	and.w	r2, r3, #15
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4442      	add	r2, r8
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	e7ff      	b.n	8006e1e <UART_SetConfig+0x712>
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	40011000 	.word	0x40011000
 8006e2c:	40011400 	.word	0x40011400
 8006e30:	40011800 	.word	0x40011800
 8006e34:	40011c00 	.word	0x40011c00
 8006e38:	51eb851f 	.word	0x51eb851f

08006e3c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e54:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4b2f      	ldr	r3, [pc, #188]	; (8006f18 <FSMC_NORSRAM_Init+0xdc>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e66:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e6c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e72:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e78:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006e7e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e84:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e8a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e90:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e96:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006e9c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006ea2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006ea8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006eae:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d103      	bne.n	8006ec6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d10a      	bne.n	8006ef2 <FSMC_NORSRAM_Init+0xb6>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d006      	beq.n	8006f08 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	ffc00480 	.word	0xffc00480

08006f1c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f3e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f4a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f52:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f5a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f64:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	3b02      	subs	r3, #2
 8006f6c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f6e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f74:	4313      	orrs	r3, r2
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d10e      	bne.n	8006fb4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f9e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	051b      	lsls	r3, r3, #20
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fdc:	d122      	bne.n	8007024 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4b15      	ldr	r3, [pc, #84]	; (8007040 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ffa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007002:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800700a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007010:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007022:	e005      	b.n	8007030 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800702c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	cff00000 	.word	0xcff00000

08007044 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007044:	b084      	sub	sp, #16
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	f107 001c 	add.w	r0, r7, #28
 8007052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800705a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800705c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800705e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007062:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007066:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800706a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800706e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800707e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	b004      	add	sp, #16
 8007098:	4770      	bx	lr

0800709a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2203      	movs	r2, #3
 80070c0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80070c2:	2002      	movs	r0, #2
 80070c4:	f7fa fb8c 	bl	80017e0 <HAL_Delay>
  
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0303 	and.w	r3, r3, #3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800710c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007112:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007118:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007128:	f023 030f 	bic.w	r3, r3, #15
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	b2db      	uxtb	r3, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3314      	adds	r3, #20
 800716a:	461a      	mov	r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	4413      	add	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
}  
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071a8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80071ae:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80071b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0

}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80071e8:	2310      	movs	r3, #16
 80071ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071ec:	2340      	movs	r3, #64	; 0x40
 80071ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff74 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	2110      	movs	r1, #16
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f975 	bl	80074fc <SDMMC_GetCmdResp1>
 8007212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007214:	69fb      	ldr	r3, [r7, #28]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b08a      	sub	sp, #40	; 0x28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800722e:	2307      	movs	r3, #7
 8007230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800723a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007240:	f107 0310 	add.w	r3, r7, #16
 8007244:	4619      	mov	r1, r3
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff ff51 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	2107      	movs	r1, #7
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f952 	bl	80074fc <SDMMC_GetCmdResp1>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800725c:	4618      	mov	r0, r3
 800725e:	3728      	adds	r7, #40	; 0x28
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800727c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff ff30 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f90c 	bl	80074ac <SDMMC_GetCmdError>
 8007294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007296:	69fb      	ldr	r3, [r7, #28]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80072a8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80072ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80072ae:	2308      	movs	r3, #8
 80072b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072b2:	2340      	movs	r3, #64	; 0x40
 80072b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff11 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 faf5 	bl	80078bc <SDMMC_GetCmdResp7>
 80072d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d4:	69fb      	ldr	r3, [r7, #28]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b088      	sub	sp, #32
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80072ec:	2337      	movs	r3, #55	; 0x37
 80072ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff fef2 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800730a:	f241 3288 	movw	r2, #5000	; 0x1388
 800730e:	2137      	movs	r1, #55	; 0x37
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8f3 	bl	80074fc <SDMMC_GetCmdResp1>
 8007316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007318:	69fb      	ldr	r3, [r7, #28]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007338:	2329      	movs	r3, #41	; 0x29
 800733a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800733c:	2340      	movs	r3, #64	; 0x40
 800733e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007348:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fecc 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa02 	bl	8007760 <SDMMC_GetCmdResp3>
 800735c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800735e:	69fb      	ldr	r3, [r7, #28]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007376:	2306      	movs	r3, #6
 8007378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800737a:	2340      	movs	r3, #64	; 0x40
 800737c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007386:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007388:	f107 0308 	add.w	r3, r7, #8
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fead 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	2106      	movs	r1, #6
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f8ae 	bl	80074fc <SDMMC_GetCmdResp1>
 80073a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073a2:	69fb      	ldr	r3, [r7, #28]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80073b8:	2333      	movs	r3, #51	; 0x33
 80073ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fe8c 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80073d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073da:	2133      	movs	r1, #51	; 0x33
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f88d 	bl	80074fc <SDMMC_GetCmdResp1>
 80073e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073e4:	69fb      	ldr	r3, [r7, #28]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b088      	sub	sp, #32
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80073fa:	2302      	movs	r3, #2
 80073fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073fe:	23c0      	movs	r3, #192	; 0xc0
 8007400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800740a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fe6b 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f95b 	bl	80076d4 <SDMMC_GetCmdResp2>
 800741e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007420:	69fb      	ldr	r3, [r7, #28]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b088      	sub	sp, #32
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007438:	2309      	movs	r3, #9
 800743a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800743c:	23c0      	movs	r3, #192	; 0xc0
 800743e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fe4c 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f93c 	bl	80076d4 <SDMMC_GetCmdResp2>
 800745c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800745e:	69fb      	ldr	r3, [r7, #28]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007476:	2303      	movs	r3, #3
 8007478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007486:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fe2d 	bl	80070ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	2103      	movs	r1, #3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f99b 	bl	80077d4 <SDMMC_GetCmdResp6>
 800749e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a0:	69fb      	ldr	r3, [r7, #28]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3720      	adds	r7, #32
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80074ac:	b490      	push	{r4, r7}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <SDMMC_GetCmdError+0x48>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a0f      	ldr	r2, [pc, #60]	; (80074f8 <SDMMC_GetCmdError+0x4c>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0a5b      	lsrs	r3, r3, #9
 80074c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80074c8:	4623      	mov	r3, r4
 80074ca:	1e5c      	subs	r4, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074d4:	e009      	b.n	80074ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0f2      	beq.n	80074c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	22c5      	movs	r2, #197	; 0xc5
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc90      	pop	{r4, r7}
 80074f2:	4770      	bx	lr
 80074f4:	20000000 	.word	0x20000000
 80074f8:	10624dd3 	.word	0x10624dd3

080074fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80074fc:	b590      	push	{r4, r7, lr}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	460b      	mov	r3, r1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800750a:	4b6f      	ldr	r3, [pc, #444]	; (80076c8 <SDMMC_GetCmdResp1+0x1cc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a6f      	ldr	r2, [pc, #444]	; (80076cc <SDMMC_GetCmdResp1+0x1d0>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	0a5b      	lsrs	r3, r3, #9
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800751c:	4623      	mov	r3, r4
 800751e:	1e5c      	subs	r4, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007528:	e0c9      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <SDMMC_GetCmdResp1+0x20>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1eb      	bne.n	800751c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2204      	movs	r2, #4
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007556:	2304      	movs	r3, #4
 8007558:	e0b1      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800756c:	2301      	movs	r3, #1
 800756e:	e0a6      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	22c5      	movs	r2, #197	; 0xc5
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fde3 	bl	8007142 <SDIO_GetCommandResponse>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	4293      	cmp	r3, r2
 8007584:	d001      	beq.n	800758a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007586:	2301      	movs	r3, #1
 8007588:	e099      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fde5 	bl	800715c <SDIO_GetResponse>
 8007592:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4b4e      	ldr	r3, [pc, #312]	; (80076d0 <SDMMC_GetCmdResp1+0x1d4>)
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
 80075a0:	e08d      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da02      	bge.n	80075ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80075a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ac:	e087      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	e080      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	e079      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075d8:	e071      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80075e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e8:	e069      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80075f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f8:	e061      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007608:	e059      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007618:	e051      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007628:	e049      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007638:	e041      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007648:	e039      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007658:	e031      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007668:	e029      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007678:	e021      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007688:	e019      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007698:	e011      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80076a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076a8:	e009      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80076b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80076b8:	e001      	b.n	80076be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000000 	.word	0x20000000
 80076cc:	10624dd3 	.word	0x10624dd3
 80076d0:	fdffe008 	.word	0xfdffe008

080076d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80076d4:	b490      	push	{r4, r7}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <SDMMC_GetCmdResp2+0x84>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <SDMMC_GetCmdResp2+0x88>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	0a5b      	lsrs	r3, r3, #9
 80076e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80076f0:	4623      	mov	r3, r4
 80076f2:	1e5c      	subs	r4, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076fc:	e026      	b.n	800774c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <SDMMC_GetCmdResp2+0x1c>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1eb      	bne.n	80076f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800772a:	2304      	movs	r3, #4
 800772c:	e00e      	b.n	800774c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007740:	2301      	movs	r3, #1
 8007742:	e003      	b.n	800774c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	22c5      	movs	r2, #197	; 0xc5
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bc90      	pop	{r4, r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000000 	.word	0x20000000
 800775c:	10624dd3 	.word	0x10624dd3

08007760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007760:	b490      	push	{r4, r7}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007768:	4b18      	ldr	r3, [pc, #96]	; (80077cc <SDMMC_GetCmdResp3+0x6c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <SDMMC_GetCmdResp3+0x70>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	0a5b      	lsrs	r3, r3, #9
 8007774:	f241 3288 	movw	r2, #5000	; 0x1388
 8007778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800777c:	4623      	mov	r3, r4
 800777e:	1e5c      	subs	r4, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007788:	e01b      	b.n	80077c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <SDMMC_GetCmdResp3+0x1c>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1eb      	bne.n	800777c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2204      	movs	r2, #4
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077b6:	2304      	movs	r3, #4
 80077b8:	e003      	b.n	80077c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	22c5      	movs	r2, #197	; 0xc5
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc90      	pop	{r4, r7}
 80077ca:	4770      	bx	lr
 80077cc:	20000000 	.word	0x20000000
 80077d0:	10624dd3 	.word	0x10624dd3

080077d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80077d4:	b590      	push	{r4, r7, lr}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	460b      	mov	r3, r1
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <SDMMC_GetCmdResp6+0xe0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a34      	ldr	r2, [pc, #208]	; (80078b8 <SDMMC_GetCmdResp6+0xe4>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	0a5b      	lsrs	r3, r3, #9
 80077ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80077f6:	4623      	mov	r3, r4
 80077f8:	1e5c      	subs	r4, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007802:	e052      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0f0      	beq.n	80077f6 <SDMMC_GetCmdResp6+0x22>
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1eb      	bne.n	80077f6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2204      	movs	r2, #4
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007830:	2304      	movs	r3, #4
 8007832:	e03a      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007846:	2301      	movs	r3, #1
 8007848:	e02f      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fc79 	bl	8007142 <SDIO_GetCommandResponse>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	4293      	cmp	r3, r2
 8007858:	d001      	beq.n	800785e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800785a:	2301      	movs	r3, #1
 800785c:	e025      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22c5      	movs	r2, #197	; 0xc5
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff fc78 	bl	800715c <SDIO_GetResponse>
 800786c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	0c1b      	lsrs	r3, r3, #16
 800787c:	b29a      	uxth	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007882:	2300      	movs	r3, #0
 8007884:	e011      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007894:	e009      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078a4:	e001      	b.n	80078aa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd90      	pop	{r4, r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000000 	.word	0x20000000
 80078b8:	10624dd3 	.word	0x10624dd3

080078bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80078bc:	b490      	push	{r4, r7}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c4:	4b21      	ldr	r3, [pc, #132]	; (800794c <SDMMC_GetCmdResp7+0x90>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a21      	ldr	r2, [pc, #132]	; (8007950 <SDMMC_GetCmdResp7+0x94>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	0a5b      	lsrs	r3, r3, #9
 80078d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80078d8:	4623      	mov	r3, r4
 80078da:	1e5c      	subs	r4, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078e4:	e02c      	b.n	8007940 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f0      	beq.n	80078d8 <SDMMC_GetCmdResp7+0x1c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1eb      	bne.n	80078d8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2204      	movs	r2, #4
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007912:	2304      	movs	r3, #4
 8007914:	e014      	b.n	8007940 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007928:	2301      	movs	r3, #1
 800792a:	e009      	b.n	8007940 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2240      	movs	r2, #64	; 0x40
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800793e:	2300      	movs	r3, #0
  
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bc90      	pop	{r4, r7}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000000 	.word	0x20000000
 8007950:	10624dd3 	.word	0x10624dd3

08007954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007954:	b084      	sub	sp, #16
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	f107 001c 	add.w	r0, r7, #28
 8007962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d122      	bne.n	80079b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d105      	bne.n	80079a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f94a 	bl	8007c40 <USB_CoreReset>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	e01a      	b.n	80079e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f93e 	bl	8007c40 <USB_CoreReset>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38
 80079da:	e005      	b.n	80079e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10b      	bne.n	8007a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f043 0206 	orr.w	r2, r3, #6
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f043 0220 	orr.w	r2, r3, #32
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a12:	b004      	add	sp, #16
 8007a14:	4770      	bx	lr

08007a16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 0201 	bic.w	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d106      	bne.n	8007a86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e00b      	b.n	8007a9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d106      	bne.n	8007a9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	e001      	b.n	8007a9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e003      	b.n	8007aa6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a9e:	2032      	movs	r0, #50	; 0x32
 8007aa0:	f7f9 fe9e 	bl	80017e0 <HAL_Delay>

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	019b      	lsls	r3, r3, #6
 8007ac2:	f043 0220 	orr.w	r2, r3, #32
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <USB_FlushTxFifo+0x48>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e006      	b.n	8007aea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d0f0      	beq.n	8007aca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00030d40 	.word	0x00030d40

08007afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2210      	movs	r2, #16
 8007b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <USB_FlushRxFifo+0x40>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d901      	bls.n	8007b20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e006      	b.n	8007b2e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f003 0310 	and.w	r3, r3, #16
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d0f0      	beq.n	8007b0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	00030d40 	.word	0x00030d40

08007b40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b089      	sub	sp, #36	; 0x24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	460b      	mov	r3, r1
 8007b50:	71fb      	strb	r3, [r7, #7]
 8007b52:	4613      	mov	r3, r2
 8007b54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d11a      	bne.n	8007b9c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b66:	88bb      	ldrh	r3, [r7, #4]
 8007b68:	3303      	adds	r3, #3
 8007b6a:	089b      	lsrs	r3, r3, #2
 8007b6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	e00f      	b.n	8007b94 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	031a      	lsls	r2, r3, #12
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	461a      	mov	r2, r3
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	3301      	adds	r3, #1
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3eb      	bcc.n	8007b74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3724      	adds	r7, #36	; 0x24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b089      	sub	sp, #36	; 0x24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	3303      	adds	r3, #3
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e00b      	b.n	8007be6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	3301      	adds	r3, #1
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d3ef      	bcc.n	8007bce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007bee:	69fb      	ldr	r3, [r7, #28]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3724      	adds	r7, #36	; 0x24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4013      	ands	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <USB_CoreReset+0x64>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e01b      	b.n	8007c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	daf2      	bge.n	8007c4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f043 0201 	orr.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <USB_CoreReset+0x64>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e006      	b.n	8007c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d0f0      	beq.n	8007c76 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	00030d40 	.word	0x00030d40

08007ca8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca8:	b084      	sub	sp, #16
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	f107 001c 	add.w	r0, r7, #28
 8007cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d018      	beq.n	8007d20 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d10a      	bne.n	8007d0a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d02:	f043 0304 	orr.w	r3, r3, #4
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e014      	b.n	8007d34 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e009      	b.n	8007d34 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d2e:	f023 0304 	bic.w	r3, r3, #4
 8007d32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007d34:	2110      	movs	r1, #16
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff feba 	bl	8007ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fedd 	bl	8007afc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e015      	b.n	8007d74 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	461a      	mov	r2, r3
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d3e5      	bcc.n	8007d48 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8ac 	bl	8007edc <USB_DriveVbus>

  HAL_Delay(200U);
 8007d84:	20c8      	movs	r0, #200	; 0xc8
 8007d86:	f7f9 fd2b 	bl	80017e0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <USB_HostInit+0x158>)
 8007db0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <USB_HostInit+0x15c>)
 8007db6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007dba:	e009      	b.n	8007dd0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	; 0x80
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <USB_HostInit+0x160>)
 8007dc6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a10      	ldr	r2, [pc, #64]	; (8007e0c <USB_HostInit+0x164>)
 8007dcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f043 0210 	orr.w	r2, r3, #16
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <USB_HostInit+0x168>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dfa:	b004      	add	sp, #16
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	01000200 	.word	0x01000200
 8007e04:	00e00300 	.word	0x00e00300
 8007e08:	00600080 	.word	0x00600080
 8007e0c:	004000e0 	.word	0x004000e0
 8007e10:	a3200008 	.word	0xa3200008

08007e14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d107      	bne.n	8007e66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e62:	6053      	str	r3, [r2, #4]
 8007e64:	e009      	b.n	8007e7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007e66:	78fb      	ldrb	r3, [r7, #3]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d106      	bne.n	8007e7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e72:	461a      	mov	r2, r3
 8007e74:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007eb8:	2064      	movs	r0, #100	; 0x64
 8007eba:	f7f9 fc91 	bl	80017e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ecc:	200a      	movs	r0, #10
 8007ece:	f7f9 fc87 	bl	80017e0 <HAL_Delay>

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d109      	bne.n	8007f20 <USB_DriveVbus+0x44>
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d106      	bne.n	8007f20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2a:	d109      	bne.n	8007f40 <USB_DriveVbus+0x64>
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	0c5b      	lsrs	r3, r3, #17
 8007f6c:	f003 0303 	and.w	r3, r3, #3
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	b29b      	uxth	r3, r3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	70fb      	strb	r3, [r7, #3]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70bb      	strb	r3, [r7, #2]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d87e      	bhi.n	80080dc <USB_HC_Init+0x13c>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <USB_HC_Init+0x44>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	0800809f 	.word	0x0800809f
 8007fec:	08007ff5 	.word	0x08007ff5
 8007ff0:	08008061 	.word	0x08008061
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008000:	461a      	mov	r2, r3
 8008002:	f240 439d 	movw	r3, #1181	; 0x49d
 8008006:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da10      	bge.n	8008032 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4413      	add	r3, r2
 8008018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	440a      	add	r2, r1
 8008026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800802a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008030:	e057      	b.n	80080e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d051      	beq.n	80080e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	440a      	add	r2, r1
 8008054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008058:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800805c:	60d3      	str	r3, [r2, #12]
      break;
 800805e:	e040      	b.n	80080e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806c:	461a      	mov	r2, r3
 800806e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008072:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008074:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	da34      	bge.n	80080e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4413      	add	r3, r2
 8008084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	440a      	add	r2, r1
 8008092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800809a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800809c:	e023      	b.n	80080e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	461a      	mov	r2, r3
 80080ac:	f240 2325 	movw	r3, #549	; 0x225
 80080b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da17      	bge.n	80080ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80080d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080da:	e006      	b.n	80080ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	75fb      	strb	r3, [r7, #23]
      break;
 80080e0:	e004      	b.n	80080ec <USB_HC_Init+0x14c>
      break;
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <USB_HC_Init+0x14c>
      break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <USB_HC_Init+0x14c>
      break;
 80080ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	2101      	movs	r1, #1
 80080fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008106:	4313      	orrs	r3, r2
 8008108:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008116:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800811a:	2b00      	cmp	r3, #0
 800811c:	da03      	bge.n	8008126 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800811e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	e001      	b.n	800812a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800812a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d103      	bne.n	800813a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e001      	b.n	800813e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800813e:	787b      	ldrb	r3, [r7, #1]
 8008140:	059b      	lsls	r3, r3, #22
 8008142:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008146:	78bb      	ldrb	r3, [r7, #2]
 8008148:	02db      	lsls	r3, r3, #11
 800814a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800814e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008154:	049b      	lsls	r3, r3, #18
 8008156:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800815a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800815c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800815e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008162:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	0159      	lsls	r1, r3, #5
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	440b      	add	r3, r1
 8008170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008174:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800817a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800817c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008180:	2b03      	cmp	r3, #3
 8008182:	d10f      	bne.n	80081a4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	440a      	add	r2, r1
 800819a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081a2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	4613      	mov	r3, r2
 80081c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80081cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d028      	beq.n	8008230 <USB_HC_StartXfer+0x7c>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	791b      	ldrb	r3, [r3, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d124      	bne.n	8008230 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10b      	bne.n	8008204 <USB_HC_StartXfer+0x50>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	795b      	ldrb	r3, [r3, #5]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d107      	bne.n	8008204 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	4619      	mov	r1, r3
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fa30 	bl	8008660 <USB_DoPing>
      return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e114      	b.n	800842e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d112      	bne.n	8008230 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	4413      	add	r3, r2
 8008212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	440a      	add	r2, r1
 8008220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008224:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008228:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2200      	movs	r2, #0
 800822e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d018      	beq.n	800826a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	8912      	ldrh	r2, [r2, #8]
 8008240:	4413      	add	r3, r2
 8008242:	3b01      	subs	r3, #1
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	8912      	ldrh	r2, [r2, #8]
 8008248:	fbb3 f3f2 	udiv	r3, r3, r2
 800824c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800824e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008250:	8b7b      	ldrh	r3, [r7, #26]
 8008252:	429a      	cmp	r2, r3
 8008254:	d90b      	bls.n	800826e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008256:	8b7b      	ldrh	r3, [r7, #26]
 8008258:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800825a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	8912      	ldrh	r2, [r2, #8]
 8008260:	fb02 f203 	mul.w	r2, r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	611a      	str	r2, [r3, #16]
 8008268:	e001      	b.n	800826e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800826a:	2301      	movs	r3, #1
 800826c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	78db      	ldrb	r3, [r3, #3]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	8912      	ldrh	r2, [r2, #8]
 800827c:	fb02 f203 	mul.w	r2, r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800828c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800828e:	04d9      	lsls	r1, r3, #19
 8008290:	4b69      	ldr	r3, [pc, #420]	; (8008438 <USB_HC_StartXfer+0x284>)
 8008292:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008294:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	7a9b      	ldrb	r3, [r3, #10]
 800829a:	075b      	lsls	r3, r3, #29
 800829c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80082a0:	69f9      	ldr	r1, [r7, #28]
 80082a2:	0148      	lsls	r0, r1, #5
 80082a4:	6a39      	ldr	r1, [r7, #32]
 80082a6:	4401      	add	r1, r0
 80082a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80082ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	68d9      	ldr	r1, [r3, #12]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c6:	460a      	mov	r2, r1
 80082c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf0c      	ite	eq
 80082da:	2301      	moveq	r3, #1
 80082dc:	2300      	movne	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008300:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	4413      	add	r3, r2
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	7e7b      	ldrb	r3, [r7, #25]
 8008312:	075b      	lsls	r3, r3, #29
 8008314:	69f9      	ldr	r1, [r7, #28]
 8008316:	0148      	lsls	r0, r1, #5
 8008318:	6a39      	ldr	r1, [r7, #32]
 800831a:	4401      	add	r1, r0
 800831c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008320:	4313      	orrs	r3, r2
 8008322:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	4413      	add	r3, r2
 800832c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a42      	ldr	r2, [pc, #264]	; (800843c <USB_HC_StartXfer+0x288>)
 8008334:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008336:	4b41      	ldr	r3, [pc, #260]	; (800843c <USB_HC_StartXfer+0x288>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800833e:	4a3f      	ldr	r2, [pc, #252]	; (800843c <USB_HC_StartXfer+0x288>)
 8008340:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	78db      	ldrb	r3, [r3, #3]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d006      	beq.n	8008358 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800834a:	4b3c      	ldr	r3, [pc, #240]	; (800843c <USB_HC_StartXfer+0x288>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008352:	4a3a      	ldr	r2, [pc, #232]	; (800843c <USB_HC_StartXfer+0x288>)
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	e005      	b.n	8008364 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008358:	4b38      	ldr	r3, [pc, #224]	; (800843c <USB_HC_StartXfer+0x288>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008360:	4a36      	ldr	r2, [pc, #216]	; (800843c <USB_HC_StartXfer+0x288>)
 8008362:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008364:	4b35      	ldr	r3, [pc, #212]	; (800843c <USB_HC_StartXfer+0x288>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800836c:	4a33      	ldr	r2, [pc, #204]	; (800843c <USB_HC_StartXfer+0x288>)
 800836e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837c:	461a      	mov	r2, r3
 800837e:	4b2f      	ldr	r3, [pc, #188]	; (800843c <USB_HC_StartXfer+0x288>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e04f      	b.n	800842e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	78db      	ldrb	r3, [r3, #3]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d14a      	bne.n	800842c <USB_HC_StartXfer+0x278>
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d046      	beq.n	800842c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	79db      	ldrb	r3, [r3, #7]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d830      	bhi.n	8008408 <USB_HC_StartXfer+0x254>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USB_HC_StartXfer+0x1f8>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083e1 	.word	0x080083e1
 80083b4:	080083bd 	.word	0x080083bd
 80083b8:	080083e1 	.word	0x080083e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	3303      	adds	r3, #3
 80083c2:	089b      	lsrs	r3, r3, #2
 80083c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80083c6:	8afa      	ldrh	r2, [r7, #22]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d91c      	bls.n	800840c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f043 0220 	orr.w	r2, r3, #32
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80083de:	e015      	b.n	800840c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	3303      	adds	r3, #3
 80083e6:	089b      	lsrs	r3, r3, #2
 80083e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80083ea:	8afa      	ldrh	r2, [r7, #22]
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90a      	bls.n	8008410 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	619a      	str	r2, [r3, #24]
        }
        break;
 8008406:	e003      	b.n	8008410 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008408:	bf00      	nop
 800840a:	e002      	b.n	8008412 <USB_HC_StartXfer+0x25e>
        break;
 800840c:	bf00      	nop
 800840e:	e000      	b.n	8008412 <USB_HC_StartXfer+0x25e>
        break;
 8008410:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785a      	ldrb	r2, [r3, #1]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	b298      	uxth	r0, r3
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4603      	mov	r3, r0
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff fb8a 	bl	8007b40 <USB_WritePacket>
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3728      	adds	r7, #40	; 0x28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	1ff80000 	.word	0x1ff80000
 800843c:	200000f8 	.word	0x200000f8

08008440 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	b29b      	uxth	r3, r3
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4413      	add	r3, r2
 8008482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	0c9b      	lsrs	r3, r3, #18
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <USB_HC_Halt+0x3a>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d16c      	bne.n	8008576 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084ba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d143      	bne.n	8008550 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008506:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	4413      	add	r3, r2
 8008510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	440a      	add	r2, r1
 800851e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008526:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	3301      	adds	r3, #1
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008534:	d81d      	bhi.n	8008572 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854c:	d0ec      	beq.n	8008528 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800854e:	e080      	b.n	8008652 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800856e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008570:	e06f      	b.n	8008652 <USB_HC_Halt+0x1f0>
          break;
 8008572:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008574:	e06d      	b.n	8008652 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4413      	add	r3, r2
 800857e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008594:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d143      	bne.n	800862e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008604:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	3301      	adds	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008612:	d81d      	bhi.n	8008650 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862a:	d0ec      	beq.n	8008606 <USB_HC_Halt+0x1a4>
 800862c:	e011      	b.n	8008652 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	440a      	add	r2, r1
 8008644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e000      	b.n	8008652 <USB_HC_Halt+0x1f0>
          break;
 8008650:	bf00      	nop
    }
  }

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008674:	2301      	movs	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	04da      	lsls	r2, r3, #19
 800867c:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <USB_DoPing+0x74>)
 800867e:	4013      	ands	r3, r2
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800868c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008690:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086be:	461a      	mov	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	1ff80000 	.word	0x1ff80000

080086d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff f9a5 	bl	8007a38 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80086ee:	2110      	movs	r1, #16
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff f9dd 	bl	8007ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fa00 	bl	8007afc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	e01f      	b.n	8008742 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008718:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008720:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008728:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008736:	461a      	mov	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	3301      	adds	r3, #1
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b0f      	cmp	r3, #15
 8008746:	d9dc      	bls.n	8008702 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008748:	2300      	movs	r3, #0
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	e034      	b.n	80087b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008764:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800876c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008774:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008782:	461a      	mov	r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3301      	adds	r3, #1
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008794:	d80c      	bhi.n	80087b0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ac:	d0ec      	beq.n	8008788 <USB_StopHost+0xb0>
 80087ae:	e000      	b.n	80087b2 <USB_StopHost+0xda>
        break;
 80087b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	3301      	adds	r3, #1
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b0f      	cmp	r3, #15
 80087bc:	d9c7      	bls.n	800874e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c4:	461a      	mov	r2, r3
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff f91e 	bl	8007a16 <USB_EnableGlobalInt>

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b089      	sub	sp, #36	; 0x24
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80087ec:	2301      	movs	r3, #1
 80087ee:	2202      	movs	r2, #2
 80087f0:	2102      	movs	r1, #2
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fcb4 	bl	8009160 <USBH_FindInterface>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2bff      	cmp	r3, #255	; 0xff
 8008800:	d002      	beq.n	8008808 <USBH_CDC_InterfaceInit+0x24>
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d901      	bls.n	800880c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	e13d      	b.n	8008a88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc89 	bl	8009128 <USBH_SelectInterface>
 8008816:	4603      	mov	r3, r0
 8008818:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008820:	2302      	movs	r3, #2
 8008822:	e131      	b.n	8008a88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800882a:	2050      	movs	r0, #80	; 0x50
 800882c:	f005 fc42 	bl	800e0b4 <malloc>
 8008830:	4603      	mov	r3, r0
 8008832:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008844:	2302      	movs	r3, #2
 8008846:	e11f      	b.n	8008a88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008848:	2250      	movs	r2, #80	; 0x50
 800884a:	2100      	movs	r1, #0
 800884c:	68b8      	ldr	r0, [r7, #8]
 800884e:	f005 fc4c 	bl	800e0ea <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	211a      	movs	r1, #26
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	4413      	add	r3, r2
 800885e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b25b      	sxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	da15      	bge.n	8008896 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	211a      	movs	r1, #26
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	4413      	add	r3, r2
 8008876:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	211a      	movs	r1, #26
 8008886:	fb01 f303 	mul.w	r3, r1, r3
 800888a:	4413      	add	r3, r2
 800888c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008890:	881a      	ldrh	r2, [r3, #0]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 f890 	bl	800a9c2 <USBH_AllocPipe>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	7819      	ldrb	r1, [r3, #0]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	7858      	ldrb	r0, [r3, #1]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	8952      	ldrh	r2, [r2, #10]
 80088c2:	9202      	str	r2, [sp, #8]
 80088c4:	2203      	movs	r2, #3
 80088c6:	9201      	str	r2, [sp, #4]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	4623      	mov	r3, r4
 80088cc:	4602      	mov	r2, r0
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f002 f848 	bl	800a964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f005 fb39 	bl	800df54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80088e2:	2300      	movs	r3, #0
 80088e4:	2200      	movs	r2, #0
 80088e6:	210a      	movs	r1, #10
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc39 	bl	8009160 <USBH_FindInterface>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2bff      	cmp	r3, #255	; 0xff
 80088f6:	d002      	beq.n	80088fe <USBH_CDC_InterfaceInit+0x11a>
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d901      	bls.n	8008902 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	e0c2      	b.n	8008a88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	211a      	movs	r1, #26
 8008908:	fb01 f303 	mul.w	r3, r1, r3
 800890c:	4413      	add	r3, r2
 800890e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b25b      	sxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	da16      	bge.n	8008948 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	211a      	movs	r1, #26
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	4413      	add	r3, r2
 8008926:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	211a      	movs	r1, #26
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	4413      	add	r3, r2
 800893c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008940:	881a      	ldrh	r2, [r3, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	835a      	strh	r2, [r3, #26]
 8008946:	e015      	b.n	8008974 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	211a      	movs	r1, #26
 800894e:	fb01 f303 	mul.w	r3, r1, r3
 8008952:	4413      	add	r3, r2
 8008954:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	211a      	movs	r1, #26
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	4413      	add	r3, r2
 800896a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800896e:	881a      	ldrh	r2, [r3, #0]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	211a      	movs	r1, #26
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	4413      	add	r3, r2
 8008980:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	b25b      	sxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	da16      	bge.n	80089ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	211a      	movs	r1, #26
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	4413      	add	r3, r2
 8008998:	f203 3356 	addw	r3, r3, #854	; 0x356
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	211a      	movs	r1, #26
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089b2:	881a      	ldrh	r2, [r3, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	835a      	strh	r2, [r3, #26]
 80089b8:	e015      	b.n	80089e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	211a      	movs	r1, #26
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	211a      	movs	r1, #26
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089e0:	881a      	ldrh	r2, [r3, #0]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	7b9b      	ldrb	r3, [r3, #14]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 ffe8 	bl	800a9c2 <USBH_AllocPipe>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	7bdb      	ldrb	r3, [r3, #15]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 ffde 	bl	800a9c2 <USBH_AllocPipe>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	7b59      	ldrb	r1, [r3, #13]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	7b98      	ldrb	r0, [r3, #14]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	8b12      	ldrh	r2, [r2, #24]
 8008a26:	9202      	str	r2, [sp, #8]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	9201      	str	r2, [sp, #4]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	4623      	mov	r3, r4
 8008a30:	4602      	mov	r2, r0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 ff96 	bl	800a964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	7b19      	ldrb	r1, [r3, #12]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	7bd8      	ldrb	r0, [r3, #15]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	8b52      	ldrh	r2, [r2, #26]
 8008a50:	9202      	str	r2, [sp, #8]
 8008a52:	2202      	movs	r2, #2
 8008a54:	9201      	str	r2, [sp, #4]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4623      	mov	r3, r4
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 ff81 	bl	800a964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7b5b      	ldrb	r3, [r3, #13]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f005 fa6e 	bl	800df54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	7b1b      	ldrb	r3, [r3, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f005 fa67 	bl	800df54 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}

08008a90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 ff76 	bl	800a9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 ffa1 	bl	800aa04 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	7b1b      	ldrb	r3, [r3, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00e      	beq.n	8008aee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	7b1b      	ldrb	r3, [r3, #12]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 ff63 	bl	800a9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	7b1b      	ldrb	r3, [r3, #12]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 ff8e 	bl	800aa04 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	7b5b      	ldrb	r3, [r3, #13]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	7b5b      	ldrb	r3, [r3, #13]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 ff50 	bl	800a9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	7b5b      	ldrb	r3, [r3, #13]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 ff7b 	bl	800aa04 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f005 facb 	bl	800e0c4 <free>
    phost->pActiveClass->pData = 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b34:	2200      	movs	r2, #0
 8008b36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3340      	adds	r3, #64	; 0x40
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f8b1 	bl	8008cc2 <GetLineCoding>
 8008b60:	4603      	mov	r3, r0
 8008b62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b70:	2102      	movs	r1, #2
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b76:	7afb      	ldrb	r3, [r7, #11]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d877      	bhi.n	8008c94 <USBH_CDC_Process+0x114>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <USBH_CDC_Process+0x2c>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc7 	.word	0x08008bc7
 8008bb4:	08008bf7 	.word	0x08008bf7
 8008bb8:	08008c6b 	.word	0x08008c6b
 8008bbc:	08008c79 	.word	0x08008c79
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc4:	e06d      	b.n	8008ca2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f897 	bl	8008d00 <SetLineCoding>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008be4:	e058      	b.n	8008c98 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d055      	beq.n	8008c98 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bf4:	e050      	b.n	8008c98 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	3340      	adds	r3, #64	; 0x40
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f860 	bl	8008cc2 <GetLineCoding>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d126      	bne.n	8008c5a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1e:	791b      	ldrb	r3, [r3, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d13b      	bne.n	8008c9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d133      	bne.n	8008c9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d12b      	bne.n	8008c9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d124      	bne.n	8008c9c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f984 	bl	8008f60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c58:	e020      	b.n	8008c9c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d01d      	beq.n	8008c9c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2204      	movs	r2, #4
 8008c64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c68:	e018      	b.n	8008c9c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f867 	bl	8008d3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8f8 	bl	8008e66 <CDC_ProcessReception>
      break;
 8008c76:	e014      	b.n	8008ca2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c78:	2100      	movs	r1, #0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f94f 	bl	8009f1e <USBH_ClrFeature>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c92:	e005      	b.n	8008ca0 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c94:	bf00      	nop
 8008c96:	e004      	b.n	8008ca2 <USBH_CDC_Process+0x122>
      break;
 8008c98:	bf00      	nop
 8008c9a:	e002      	b.n	8008ca2 <USBH_CDC_Process+0x122>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e000      	b.n	8008ca2 <USBH_CDC_Process+0x122>
      break;
 8008ca0:	bf00      	nop

  }

  return status;
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	22a1      	movs	r2, #161	; 0xa1
 8008cd0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2221      	movs	r2, #33	; 0x21
 8008cd6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2207      	movs	r2, #7
 8008ce8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2207      	movs	r2, #7
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 faf4 	bl	800a2de <USBH_CtlReq>
 8008cf6:	4603      	mov	r3, r0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2221      	movs	r2, #33	; 0x21
 8008d0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2207      	movs	r2, #7
 8008d26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2207      	movs	r2, #7
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fad5 	bl	800a2de <USBH_CtlReq>
 8008d34:	4603      	mov	r3, r0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af02      	add	r7, sp, #8
 8008d44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d002      	beq.n	8008d64 <CDC_ProcessTransmission+0x26>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d025      	beq.n	8008dae <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008d62:	e07c      	b.n	8008e5e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	8b12      	ldrh	r2, [r2, #24]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d90c      	bls.n	8008d8a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	69d9      	ldr	r1, [r3, #28]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8b1a      	ldrh	r2, [r3, #24]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	7b58      	ldrb	r0, [r3, #13]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4603      	mov	r3, r0
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fdab 	bl	800a8de <USBH_BulkSendData>
 8008d88:	e00c      	b.n	8008da4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	7b58      	ldrb	r0, [r3, #13]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fd9d 	bl	800a8de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008dac:	e057      	b.n	8008e5e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	7b5b      	ldrb	r3, [r3, #13]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f005 f8a3 	bl	800df00 <USBH_LL_GetURBState>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d136      	bne.n	8008e32 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	8b12      	ldrh	r2, [r2, #24]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d90e      	bls.n	8008dee <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	8b12      	ldrh	r2, [r2, #24]
 8008dd8:	1a9a      	subs	r2, r3, r2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	8b12      	ldrh	r2, [r2, #24]
 8008de6:	441a      	add	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	61da      	str	r2, [r3, #28]
 8008dec:	e002      	b.n	8008df4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008e04:	e006      	b.n	8008e14 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f892 	bl	8008f38 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2204      	movs	r2, #4
 8008e18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f001 fff8 	bl	800ae20 <osMessageQueuePut>
      break;
 8008e30:	e014      	b.n	8008e5c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d111      	bne.n	8008e5c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	f001 ffe2 	bl	800ae20 <osMessageQueuePut>
      break;
 8008e5c:	bf00      	nop
  }
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d002      	beq.n	8008e8c <CDC_ProcessReception+0x26>
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d00e      	beq.n	8008ea8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e8a:	e051      	b.n	8008f30 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	6a19      	ldr	r1, [r3, #32]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	8b5a      	ldrh	r2, [r3, #26]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	7b1b      	ldrb	r3, [r3, #12]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fd45 	bl	800a928 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ea6:	e043      	b.n	8008f30 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	7b1b      	ldrb	r3, [r3, #12]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f005 f826 	bl	800df00 <USBH_LL_GetURBState>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008eb8:	7cfb      	ldrb	r3, [r7, #19]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d137      	bne.n	8008f2e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	7b1b      	ldrb	r3, [r3, #12]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f004 ff89 	bl	800dddc <USBH_LL_GetLastXferSize>
 8008eca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d016      	beq.n	8008f04 <CDC_ProcessReception+0x9e>
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	8b5b      	ldrh	r3, [r3, #26]
 8008eda:	461a      	mov	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d910      	bls.n	8008f04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	1ad2      	subs	r2, r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	6a1a      	ldr	r2, [r3, #32]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008f02:	e006      	b.n	8008f12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f81d 	bl	8008f4c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2204      	movs	r2, #4
 8008f16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f26:	2300      	movs	r3, #0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f001 ff79 	bl	800ae20 <osMessageQueuePut>
      break;
 8008f2e:	bf00      	nop
  }
}
 8008f30:	bf00      	nop
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e044      	b.n	8009016 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	79fa      	ldrb	r2, [r7, #7]
 8008f90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 f841 	bl	800902c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2104      	movs	r1, #4
 8008fdc:	2010      	movs	r0, #16
 8008fde:	f001 fe99 	bl	800ad14 <osMessageQueueNew>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008fea:	4b0d      	ldr	r3, [pc, #52]	; (8009020 <USBH_Init+0xac>)
 8008fec:	4a0d      	ldr	r2, [pc, #52]	; (8009024 <USBH_Init+0xb0>)
 8008fee:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <USBH_Init+0xac>)
 8008ff2:	2280      	movs	r2, #128	; 0x80
 8008ff4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8008ff6:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <USBH_Init+0xac>)
 8008ff8:	2218      	movs	r2, #24
 8008ffa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <USBH_Init+0xac>)
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4809      	ldr	r0, [pc, #36]	; (8009028 <USBH_Init+0xb4>)
 8009002:	f001 fdb3 	bl	800ab6c <osThreadNew>
 8009006:	4602      	mov	r2, r0
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f004 fe32 	bl	800dc78 <USBH_LL_Init>

  return USBH_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20004c78 	.word	0x20004c78
 8009024:	0800e2c4 	.word	0x0800e2c4
 8009028:	08009c95 	.word	0x08009c95

0800902c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e009      	b.n	8009052 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	33e0      	adds	r3, #224	; 0xe0
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	2200      	movs	r2, #0
 800904a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b0e      	cmp	r3, #14
 8009056:	d9f2      	bls.n	800903e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e009      	b.n	8009072 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009078:	d3f1      	bcc.n	800905e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2240      	movs	r2, #64	; 0x40
 800909e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d016      	beq.n	8009116 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10e      	bne.n	8009110 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090f8:	1c59      	adds	r1, r3, #1
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	33de      	adds	r3, #222	; 0xde
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
 800910e:	e004      	b.n	800911a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	73fb      	strb	r3, [r7, #15]
 8009114:	e001      	b.n	800911a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009116:	2302      	movs	r3, #2
 8009118:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	429a      	cmp	r2, r3
 8009142:	d204      	bcs.n	800914e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800914c:	e001      	b.n	8009152 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
 800916c:	461a      	mov	r2, r3
 800916e:	4603      	mov	r3, r0
 8009170:	70fb      	strb	r3, [r7, #3]
 8009172:	460b      	mov	r3, r1
 8009174:	70bb      	strb	r3, [r7, #2]
 8009176:	4613      	mov	r3, r2
 8009178:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800917e:	2300      	movs	r3, #0
 8009180:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009188:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800918a:	e025      	b.n	80091d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	221a      	movs	r2, #26
 8009190:	fb02 f303 	mul.w	r3, r2, r3
 8009194:	3308      	adds	r3, #8
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4413      	add	r3, r2
 800919a:	3302      	adds	r3, #2
 800919c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	795b      	ldrb	r3, [r3, #5]
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d002      	beq.n	80091ae <USBH_FindInterface+0x4e>
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	2bff      	cmp	r3, #255	; 0xff
 80091ac:	d111      	bne.n	80091d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091b2:	78ba      	ldrb	r2, [r7, #2]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d002      	beq.n	80091be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091b8:	78bb      	ldrb	r3, [r7, #2]
 80091ba:	2bff      	cmp	r3, #255	; 0xff
 80091bc:	d109      	bne.n	80091d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091c2:	787a      	ldrb	r2, [r7, #1]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d002      	beq.n	80091ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2bff      	cmp	r3, #255	; 0xff
 80091cc:	d101      	bne.n	80091d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	e006      	b.n	80091e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	3301      	adds	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d9d6      	bls.n	800918c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80091de:	23ff      	movs	r3, #255	; 0xff
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f004 fd7b 	bl	800dcf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f004 fe92 	bl	800df26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af04      	add	r7, sp, #16
 8009212:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	d102      	bne.n	800922e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2203      	movs	r2, #3
 800922c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b0b      	cmp	r3, #11
 8009236:	f200 823c 	bhi.w	80096b2 <USBH_Process+0x4a6>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBH_Process+0x34>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009271 	.word	0x08009271
 8009244:	080092bf 	.word	0x080092bf
 8009248:	08009343 	.word	0x08009343
 800924c:	08009631 	.word	0x08009631
 8009250:	080096b3 	.word	0x080096b3
 8009254:	08009403 	.word	0x08009403
 8009258:	080095bb 	.word	0x080095bb
 800925c:	08009455 	.word	0x08009455
 8009260:	08009491 	.word	0x08009491
 8009264:	080094cb 	.word	0x080094cb
 8009268:	08009513 	.word	0x08009513
 800926c:	08009619 	.word	0x08009619
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 821c 	beq.w	80096b6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009284:	20c8      	movs	r0, #200	; 0xc8
 8009286:	f004 fe98 	bl	800dfba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f004 fd8b 	bl	800dda6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092b4:	2300      	movs	r3, #0
 80092b6:	2200      	movs	r2, #0
 80092b8:	f001 fdb2 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80092bc:	e1fb      	b.n	80096b6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d107      	bne.n	80092d8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e025      	b.n	8009324 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092e2:	d914      	bls.n	800930e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d903      	bls.n	8009306 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	220d      	movs	r2, #13
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e00e      	b.n	8009324 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e00a      	b.n	8009324 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009314:	f103 020a 	add.w	r2, r3, #10
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800931e:	200a      	movs	r0, #10
 8009320:	f004 fe4b 	bl	800dfba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009338:	2300      	movs	r3, #0
 800933a:	2200      	movs	r2, #0
 800933c:	f001 fd70 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 8009340:	e1c0      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009352:	2104      	movs	r1, #4
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009358:	2064      	movs	r0, #100	; 0x64
 800935a:	f004 fe2e 	bl	800dfba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f004 fcfc 	bl	800dd5c <USBH_LL_GetSpeed>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2205      	movs	r2, #5
 8009372:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fb23 	bl	800a9c2 <USBH_AllocPipe>
 800937c:	4603      	mov	r3, r0
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009384:	2180      	movs	r1, #128	; 0x80
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fb1b 	bl	800a9c2 <USBH_AllocPipe>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	7919      	ldrb	r1, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80093a8:	b292      	uxth	r2, r2
 80093aa:	9202      	str	r2, [sp, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	9201      	str	r2, [sp, #4]
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	4603      	mov	r3, r0
 80093b4:	2280      	movs	r2, #128	; 0x80
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fad4 	bl	800a964 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7959      	ldrb	r1, [r3, #5]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093d0:	b292      	uxth	r2, r2
 80093d2:	9202      	str	r2, [sp, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	4603      	mov	r3, r0
 80093dc:	2200      	movs	r2, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 fac0 	bl	800a964 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093f8:	2300      	movs	r3, #0
 80093fa:	2200      	movs	r2, #0
 80093fc:	f001 fd10 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 8009400:	e160      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f964 	bl	80096d0 <USBH_HandleEnum>
 8009408:	4603      	mov	r3, r0
 800940a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	f040 8152 	bne.w	80096ba <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009424:	2b01      	cmp	r3, #1
 8009426:	d103      	bne.n	8009430 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2208      	movs	r2, #8
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e002      	b.n	8009436 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2207      	movs	r2, #7
 8009434:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2205      	movs	r2, #5
 800943a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800944a:	2300      	movs	r3, #0
 800944c:	2200      	movs	r2, #0
 800944e:	f001 fce7 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009452:	e132      	b.n	80096ba <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 812f 	beq.w	80096be <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009466:	2101      	movs	r1, #1
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2208      	movs	r2, #8
 8009470:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2205      	movs	r2, #5
 8009476:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009486:	2300      	movs	r3, #0
 8009488:	2200      	movs	r2, #0
 800948a:	f001 fcc9 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800948e:	e116      	b.n	80096be <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009496:	b29b      	uxth	r3, r3
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fcf8 	bl	8009e90 <USBH_SetCfg>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2209      	movs	r2, #9
 80094aa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094c0:	2300      	movs	r3, #0
 80094c2:	2200      	movs	r2, #0
 80094c4:	f001 fcac 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 80094c8:	e0fc      	b.n	80096c4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fcfb 	bl	8009ed6 <USBH_SetFeature>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220a      	movs	r2, #10
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e002      	b.n	80094f4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220a      	movs	r2, #10
 80094f2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	f001 fc88 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 8009510:	e0d8      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009518:	2b00      	cmp	r3, #0
 800951a:	d03f      	beq.n	800959c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]
 8009528:	e016      	b.n	8009558 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32de      	adds	r2, #222	; 0xde
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	791a      	ldrb	r2, [r3, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800953c:	429a      	cmp	r2, r3
 800953e:	d108      	bne.n	8009552 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009540:	7bfa      	ldrb	r2, [r7, #15]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	32de      	adds	r2, #222	; 0xde
 8009546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009550:	e005      	b.n	800955e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	3301      	adds	r3, #1
 8009556:	73fb      	strb	r3, [r7, #15]
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0e5      	beq.n	800952a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d016      	beq.n	8009596 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d109      	bne.n	800958e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2206      	movs	r2, #6
 800957e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009586:	2103      	movs	r1, #3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
 800958c:	e006      	b.n	800959c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	220d      	movs	r2, #13
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	e002      	b.n	800959c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	220d      	movs	r2, #13
 800959a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2205      	movs	r2, #5
 80095a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095b0:	2300      	movs	r3, #0
 80095b2:	2200      	movs	r2, #0
 80095b4:	f001 fc34 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 80095b8:	e084      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d017      	beq.n	80095f4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	220b      	movs	r2, #11
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	e00a      	b.n	80095fa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d106      	bne.n	80095fa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	220d      	movs	r2, #13
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e002      	b.n	80095fa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	220d      	movs	r2, #13
 80095f8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2205      	movs	r2, #5
 80095fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800960e:	2300      	movs	r3, #0
 8009610:	2200      	movs	r2, #0
 8009612:	f001 fc05 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 8009616:	e055      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d04f      	beq.n	80096c2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
      }
      break;
 800962e:	e048      	b.n	80096c2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fcf7 	bl	800902c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d009      	beq.n	800965c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800966c:	2105      	movs	r1, #5
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b01      	cmp	r3, #1
 800967c:	d107      	bne.n	800968e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fdb0 	bl	80091ec <USBH_Start>
 800968c:	e002      	b.n	8009694 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f004 fb2e 	bl	800dcf0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096a8:	2300      	movs	r3, #0
 80096aa:	2200      	movs	r2, #0
 80096ac:	f001 fbb8 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      break;
 80096b0:	e008      	b.n	80096c4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80096b2:	bf00      	nop
 80096b4:	e006      	b.n	80096c4 <USBH_Process+0x4b8>
      break;
 80096b6:	bf00      	nop
 80096b8:	e004      	b.n	80096c4 <USBH_Process+0x4b8>
      break;
 80096ba:	bf00      	nop
 80096bc:	e002      	b.n	80096c4 <USBH_Process+0x4b8>
    break;
 80096be:	bf00      	nop
 80096c0:	e000      	b.n	80096c4 <USBH_Process+0x4b8>
      break;
 80096c2:	bf00      	nop
  }
  return USBH_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop

080096d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af04      	add	r7, sp, #16
 80096d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80096dc:	2301      	movs	r3, #1
 80096de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	f200 8208 	bhi.w	8009afa <USBH_HandleEnum+0x42a>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USBH_HandleEnum+0x20>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009711 	.word	0x08009711
 80096f4:	080097cf 	.word	0x080097cf
 80096f8:	08009839 	.word	0x08009839
 80096fc:	080098c7 	.word	0x080098c7
 8009700:	08009931 	.word	0x08009931
 8009704:	080099a1 	.word	0x080099a1
 8009708:	08009a3d 	.word	0x08009a3d
 800970c:	08009abb 	.word	0x08009abb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009710:	2108      	movs	r1, #8
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 faec 	bl	8009cf0 <USBH_Get_DevDesc>
 8009718:	4603      	mov	r3, r0
 800971a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d130      	bne.n	8009784 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	7919      	ldrb	r1, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009746:	b292      	uxth	r2, r2
 8009748:	9202      	str	r2, [sp, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	9201      	str	r2, [sp, #4]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4603      	mov	r3, r0
 8009752:	2280      	movs	r2, #128	; 0x80
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f905 	bl	800a964 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7959      	ldrb	r1, [r3, #5]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800976e:	b292      	uxth	r2, r2
 8009770:	9202      	str	r2, [sp, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	9201      	str	r2, [sp, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4603      	mov	r3, r0
 800977a:	2200      	movs	r2, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f8f1 	bl	800a964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009782:	e1bc      	b.n	8009afe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b03      	cmp	r3, #3
 8009788:	f040 81b9 	bne.w	8009afe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009792:	3301      	adds	r3, #1
 8009794:	b2da      	uxtb	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d903      	bls.n	80097ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	220d      	movs	r2, #13
 80097aa:	701a      	strb	r2, [r3, #0]
      break;
 80097ac:	e1a7      	b.n	8009afe <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	795b      	ldrb	r3, [r3, #5]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 f925 	bl	800aa04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	791b      	ldrb	r3, [r3, #4]
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 f91f 	bl	800aa04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
      break;
 80097cc:	e197      	b.n	8009afe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80097ce:	2112      	movs	r1, #18
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa8d 	bl	8009cf0 <USBH_Get_DevDesc>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097e6:	e18c      	b.n	8009b02 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	f040 8189 	bne.w	8009b02 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097f6:	3301      	adds	r3, #1
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009806:	2b03      	cmp	r3, #3
 8009808:	d903      	bls.n	8009812 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	220d      	movs	r2, #13
 800980e:	701a      	strb	r2, [r3, #0]
      break;
 8009810:	e177      	b.n	8009b02 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	795b      	ldrb	r3, [r3, #5]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 f8f3 	bl	800aa04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	791b      	ldrb	r3, [r3, #4]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 f8ed 	bl	800aa04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
      break;
 8009836:	e164      	b.n	8009b02 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009838:	2101      	movs	r1, #1
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fb04 	bl	8009e48 <USBH_SetAddress>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d132      	bne.n	80098b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800984a:	2002      	movs	r0, #2
 800984c:	f004 fbb5 	bl	800dfba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2203      	movs	r2, #3
 800985c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7919      	ldrb	r1, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009872:	b292      	uxth	r2, r2
 8009874:	9202      	str	r2, [sp, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4603      	mov	r3, r0
 800987e:	2280      	movs	r2, #128	; 0x80
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 f86f 	bl	800a964 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	7959      	ldrb	r1, [r3, #5]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800989a:	b292      	uxth	r2, r2
 800989c:	9202      	str	r2, [sp, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4603      	mov	r3, r0
 80098a6:	2200      	movs	r2, #0
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 f85b 	bl	800a964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80098ae:	e12a      	b.n	8009b06 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	f040 8127 	bne.w	8009b06 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	220d      	movs	r2, #13
 80098bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	705a      	strb	r2, [r3, #1]
      break;
 80098c4:	e11f      	b.n	8009b06 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80098c6:	2109      	movs	r1, #9
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa39 	bl	8009d40 <USBH_Get_CfgDesc>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d103      	bne.n	80098e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2204      	movs	r2, #4
 80098dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098de:	e114      	b.n	8009b0a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	f040 8111 	bne.w	8009b0a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d903      	bls.n	800990a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220d      	movs	r2, #13
 8009906:	701a      	strb	r2, [r3, #0]
      break;
 8009908:	e0ff      	b.n	8009b0a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	795b      	ldrb	r3, [r3, #5]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 f877 	bl	800aa04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f871 	bl	800aa04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
      break;
 800992e:	e0ec      	b.n	8009b0a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fa01 	bl	8009d40 <USBH_Get_CfgDesc>
 800993e:	4603      	mov	r3, r0
 8009940:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2205      	movs	r2, #5
 800994c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800994e:	e0de      	b.n	8009b0e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	2b03      	cmp	r3, #3
 8009954:	f040 80db 	bne.w	8009b0e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800995e:	3301      	adds	r3, #1
 8009960:	b2da      	uxtb	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800996e:	2b03      	cmp	r3, #3
 8009970:	d903      	bls.n	800997a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	220d      	movs	r2, #13
 8009976:	701a      	strb	r2, [r3, #0]
      break;
 8009978:	e0c9      	b.n	8009b0e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	795b      	ldrb	r3, [r3, #5]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f83f 	bl	800aa04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	791b      	ldrb	r3, [r3, #4]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 f839 	bl	800aa04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
      break;
 800999e:	e0b6      	b.n	8009b0e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d036      	beq.n	8009a18 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099b6:	23ff      	movs	r3, #255	; 0xff
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f9e5 	bl	8009d88 <USBH_Get_StringDesc>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d111      	bne.n	80099ec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2206      	movs	r2, #6
 80099cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2205      	movs	r2, #5
 80099d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	f001 fa1b 	bl	800ae20 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80099ea:	e092      	b.n	8009b12 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	f040 808f 	bne.w	8009b12 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2206      	movs	r2, #6
 80099f8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2205      	movs	r2, #5
 80099fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2200      	movs	r2, #0
 8009a12:	f001 fa05 	bl	800ae20 <osMessageQueuePut>
      break;
 8009a16:	e07c      	b.n	8009b12 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2205      	movs	r2, #5
 8009a22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	f001 f9f3 	bl	800ae20 <osMessageQueuePut>
      break;
 8009a3a:	e06a      	b.n	8009b12 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d027      	beq.n	8009a96 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a52:	23ff      	movs	r3, #255	; 0xff
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f997 	bl	8009d88 <USBH_Get_StringDesc>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d103      	bne.n	8009a6c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2207      	movs	r2, #7
 8009a68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a6a:	e054      	b.n	8009b16 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d151      	bne.n	8009b16 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2207      	movs	r2, #7
 8009a76:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f001 f9c6 	bl	800ae20 <osMessageQueuePut>
      break;
 8009a94:	e03f      	b.n	8009b16 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2207      	movs	r2, #7
 8009a9a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2205      	movs	r2, #5
 8009aa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f001 f9b4 	bl	800ae20 <osMessageQueuePut>
      break;
 8009ab8:	e02d      	b.n	8009b16 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d017      	beq.n	8009af4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ad0:	23ff      	movs	r3, #255	; 0xff
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f958 	bl	8009d88 <USBH_Get_StringDesc>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009ae6:	e018      	b.n	8009b1a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d115      	bne.n	8009b1a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
      break;
 8009af2:	e012      	b.n	8009b1a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
      break;
 8009af8:	e00f      	b.n	8009b1a <USBH_HandleEnum+0x44a>

    default:
      break;
 8009afa:	bf00      	nop
 8009afc:	e00e      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009afe:	bf00      	nop
 8009b00:	e00c      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b02:	bf00      	nop
 8009b04:	e00a      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b06:	bf00      	nop
 8009b08:	e008      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b0a:	bf00      	nop
 8009b0c:	e006      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b0e:	bf00      	nop
 8009b10:	e004      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b12:	bf00      	nop
 8009b14:	e002      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b16:	bf00      	nop
 8009b18:	e000      	b.n	8009b1c <USBH_HandleEnum+0x44c>
      break;
 8009b1a:	bf00      	nop
  }
  return Status;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop

08009b28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f804 	bl	8009b6a <USBH_HandleSof>
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b0b      	cmp	r3, #11
 8009b7a:	d10a      	bne.n	8009b92 <USBH_HandleSof+0x28>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4798      	blx	r3
  }
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f001 f92d 	bl	800ae20 <osMessageQueuePut>
#endif
#endif

  return;
 8009bc6:	bf00      	nop
}
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009bde:	bf00      	nop
}
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c1e:	2300      	movs	r3, #0
 8009c20:	2200      	movs	r2, #0
 8009c22:	f001 f8fd 	bl	800ae20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f004 f868 	bl	800dd26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	791b      	ldrb	r3, [r3, #4]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fed1 	bl	800aa04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	795b      	ldrb	r3, [r3, #5]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fecb 	bl	800aa04 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c82:	2300      	movs	r3, #0
 8009c84:	2200      	movs	r2, #0
 8009c86:	f001 f8cb 	bl	800ae20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cac:	2200      	movs	r2, #0
 8009cae:	f001 f92b 	bl	800af08 <osMessageQueueGet>
 8009cb2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1f0      	bne.n	8009c9c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff faa6 	bl	800920c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009cc0:	e7ec      	b.n	8009c9c <USBH_Process_OS+0x8>

08009cc2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f001 f89d 	bl	800ae20 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d0e:	2100      	movs	r1, #0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f864 	bl	8009dde <USBH_GetDescriptor>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	b292      	uxth	r2, r2
 8009d30:	4619      	mov	r1, r3
 8009d32:	f000 f918 	bl	8009f66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	331c      	adds	r3, #28
 8009d50:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d52:	887b      	ldrh	r3, [r7, #2]
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f83d 	bl	8009dde <USBH_GetDescriptor>
 8009d64:	4603      	mov	r3, r0
 8009d66:	72fb      	strb	r3, [r7, #11]
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d107      	bne.n	8009d7e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d74:	887a      	ldrh	r2, [r7, #2]
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f964 	bl	800a046 <USBH_ParseCfgDesc>
  }

  return status;
 8009d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	607a      	str	r2, [r7, #4]
 8009d92:	461a      	mov	r2, r3
 8009d94:	460b      	mov	r3, r1
 8009d96:	72fb      	strb	r3, [r7, #11]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009da4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009dac:	893b      	ldrh	r3, [r7, #8]
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	460b      	mov	r3, r1
 8009db2:	2100      	movs	r1, #0
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f812 	bl	8009dde <USBH_GetDescriptor>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d107      	bne.n	8009dd4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009dca:	893a      	ldrh	r2, [r7, #8]
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fa37 	bl	800a242 <USBH_ParseStringDesc>
  }

  return status;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	72fb      	strb	r3, [r7, #11]
 8009dec:	4613      	mov	r3, r2
 8009dee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	789b      	ldrb	r3, [r3, #2]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d11c      	bne.n	8009e32 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009df8:	7afb      	ldrb	r3, [r7, #11]
 8009dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2206      	movs	r2, #6
 8009e08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	893a      	ldrh	r2, [r7, #8]
 8009e0e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e10:	893b      	ldrh	r3, [r7, #8]
 8009e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e1a:	d104      	bne.n	8009e26 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f240 4209 	movw	r2, #1033	; 0x409
 8009e22:	829a      	strh	r2, [r3, #20]
 8009e24:	e002      	b.n	8009e2c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8b3a      	ldrh	r2, [r7, #24]
 8009e30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e32:	8b3b      	ldrh	r3, [r7, #24]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 fa50 	bl	800a2de <USBH_CtlReq>
 8009e3e:	4603      	mov	r3, r0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	789b      	ldrb	r3, [r3, #2]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d10f      	bne.n	8009e7c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2205      	movs	r2, #5
 8009e66:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa2c 	bl	800a2de <USBH_CtlReq>
 8009e86:	4603      	mov	r3, r0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	789b      	ldrb	r3, [r3, #2]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d10e      	bne.n	8009ec2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2209      	movs	r2, #9
 8009eae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	887a      	ldrh	r2, [r7, #2]
 8009eb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa09 	bl	800a2de <USBH_CtlReq>
 8009ecc:	4603      	mov	r3, r0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	789b      	ldrb	r3, [r3, #2]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d10f      	bne.n	8009f0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2203      	movs	r2, #3
 8009ef4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9e5 	bl	800a2de <USBH_CtlReq>
 8009f14:	4603      	mov	r3, r0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d10f      	bne.n	8009f52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2202      	movs	r2, #2
 8009f36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009f52:	2200      	movs	r2, #0
 8009f54:	2100      	movs	r1, #0
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f9c1 	bl	800a2de <USBH_CtlReq>
 8009f5c:	4603      	mov	r3, r0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	4613      	mov	r3, r2
 8009f72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	785a      	ldrb	r2, [r3, #1]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	3302      	adds	r3, #2
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	3303      	adds	r3, #3
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	791a      	ldrb	r2, [r3, #4]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	795a      	ldrb	r2, [r3, #5]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	799a      	ldrb	r2, [r3, #6]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	79da      	ldrb	r2, [r3, #7]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	d939      	bls.n	800a03a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	3309      	adds	r3, #9
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	330a      	adds	r3, #10
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	330b      	adds	r3, #11
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	330c      	adds	r3, #12
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	b29a      	uxth	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	330d      	adds	r3, #13
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b29b      	uxth	r3, r3
 800a012:	4313      	orrs	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7b9a      	ldrb	r2, [r3, #14]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7bda      	ldrb	r2, [r3, #15]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	7c1a      	ldrb	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	7c5a      	ldrb	r2, [r3, #17]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	745a      	strb	r2, [r3, #17]
  }
}
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b08a      	sub	sp, #40	; 0x28
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	4613      	mov	r3, r2
 800a052:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	785a      	ldrb	r2, [r3, #1]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	3302      	adds	r3, #2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	3303      	adds	r3, #3
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	4313      	orrs	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	791a      	ldrb	r2, [r3, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	795a      	ldrb	r2, [r3, #5]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	799a      	ldrb	r2, [r3, #6]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	79da      	ldrb	r2, [r3, #7]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	7a1a      	ldrb	r2, [r3, #8]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	2b09      	cmp	r3, #9
 800a0c0:	d95f      	bls.n	800a182 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0c2:	2309      	movs	r3, #9
 800a0c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0ca:	e051      	b.n	800a170 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0cc:	f107 0316 	add.w	r3, r7, #22
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0d4:	f000 f8e8 	bl	800a2a8 <USBH_GetNextDesc>
 800a0d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	785b      	ldrb	r3, [r3, #1]
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d146      	bne.n	800a170 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0e6:	221a      	movs	r2, #26
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	3302      	adds	r3, #2
 800a0f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0f8:	69f8      	ldr	r0, [r7, #28]
 800a0fa:	f000 f846 	bl	800a18a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a104:	2300      	movs	r3, #0
 800a106:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a108:	e022      	b.n	800a150 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a10a:	f107 0316 	add.w	r3, r7, #22
 800a10e:	4619      	mov	r1, r3
 800a110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a112:	f000 f8c9 	bl	800a2a8 <USBH_GetNextDesc>
 800a116:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b05      	cmp	r3, #5
 800a11e:	d117      	bne.n	800a150 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a124:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a128:	3201      	adds	r2, #1
 800a12a:	00d2      	lsls	r2, r2, #3
 800a12c:	211a      	movs	r1, #26
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	4413      	add	r3, r2
 800a134:	3308      	adds	r3, #8
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4413      	add	r3, r2
 800a13a:	3304      	adds	r3, #4
 800a13c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a13e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a140:	69b8      	ldr	r0, [r7, #24]
 800a142:	f000 f851 	bl	800a1e8 <USBH_ParseEPDesc>
            ep_ix++;
 800a146:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a14a:	3301      	adds	r3, #1
 800a14c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a158:	429a      	cmp	r2, r3
 800a15a:	d204      	bcs.n	800a166 <USBH_ParseCfgDesc+0x120>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	885a      	ldrh	r2, [r3, #2]
 800a160:	8afb      	ldrh	r3, [r7, #22]
 800a162:	429a      	cmp	r2, r3
 800a164:	d8d1      	bhi.n	800a10a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a16a:	3301      	adds	r3, #1
 800a16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a174:	2b01      	cmp	r3, #1
 800a176:	d804      	bhi.n	800a182 <USBH_ParseCfgDesc+0x13c>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	885a      	ldrh	r2, [r3, #2]
 800a17c:	8afb      	ldrh	r3, [r7, #22]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d8a4      	bhi.n	800a0cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a182:	bf00      	nop
 800a184:	3728      	adds	r7, #40	; 0x28
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	785a      	ldrb	r2, [r3, #1]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	789a      	ldrb	r2, [r3, #2]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	78da      	ldrb	r2, [r3, #3]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	791a      	ldrb	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	795a      	ldrb	r2, [r3, #5]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	799a      	ldrb	r2, [r3, #6]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	79da      	ldrb	r2, [r3, #7]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	7a1a      	ldrb	r2, [r3, #8]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	721a      	strb	r2, [r3, #8]
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	785a      	ldrb	r2, [r3, #1]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	789a      	ldrb	r2, [r3, #2]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	78da      	ldrb	r2, [r3, #3]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	3304      	adds	r3, #4
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b29a      	uxth	r2, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	3305      	adds	r3, #5
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	b29b      	uxth	r3, r3
 800a226:	4313      	orrs	r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	799a      	ldrb	r2, [r3, #6]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	719a      	strb	r2, [r3, #6]
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a242:	b480      	push	{r7}
 800a244:	b087      	sub	sp, #28
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	4613      	mov	r3, r2
 800a24e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3301      	adds	r3, #1
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b03      	cmp	r3, #3
 800a258:	d120      	bne.n	800a29c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	1e9a      	subs	r2, r3, #2
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	4293      	cmp	r3, r2
 800a264:	bf28      	it	cs
 800a266:	4613      	movcs	r3, r2
 800a268:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3302      	adds	r3, #2
 800a26e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a270:	2300      	movs	r3, #0
 800a272:	82fb      	strh	r3, [r7, #22]
 800a274:	e00b      	b.n	800a28e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a276:	8afb      	ldrh	r3, [r7, #22]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	781a      	ldrb	r2, [r3, #0]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	3301      	adds	r3, #1
 800a286:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a288:	8afb      	ldrh	r3, [r7, #22]
 800a28a:	3302      	adds	r3, #2
 800a28c:	82fb      	strh	r3, [r7, #22]
 800a28e:	8afa      	ldrh	r2, [r7, #22]
 800a290:	8abb      	ldrh	r3, [r7, #20]
 800a292:	429a      	cmp	r2, r3
 800a294:	d3ef      	bcc.n	800a276 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2200      	movs	r2, #0
 800a29a:	701a      	strb	r2, [r3, #0]
  }
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4413      	add	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	789b      	ldrb	r3, [r3, #2]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d002      	beq.n	800a2fe <USBH_CtlReq+0x20>
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d01d      	beq.n	800a338 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a2fc:	e043      	b.n	800a386 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2202      	movs	r2, #2
 800a314:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a316:	2301      	movs	r3, #1
 800a318:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2203      	movs	r2, #3
 800a31e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a32e:	2300      	movs	r3, #0
 800a330:	2200      	movs	r2, #0
 800a332:	f000 fd75 	bl	800ae20 <osMessageQueuePut>
      break;
 800a336:	e026      	b.n	800a386 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f829 	bl	800a390 <USBH_HandleControl>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <USBH_CtlReq+0x70>
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d106      	bne.n	800a35c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	761a      	strb	r2, [r3, #24]
 800a35a:	e005      	b.n	800a368 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d102      	bne.n	800a368 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2203      	movs	r2, #3
 800a36c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a37c:	2300      	movs	r3, #0
 800a37e:	2200      	movs	r2, #0
 800a380:	f000 fd4e 	bl	800ae20 <osMessageQueuePut>
      break;
 800a384:	bf00      	nop
  }
  return status;
 800a386:	7dfb      	ldrb	r3, [r7, #23]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af02      	add	r7, sp, #8
 800a396:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7e1b      	ldrb	r3, [r3, #24]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	2b0a      	cmp	r3, #10
 800a3a8:	f200 822b 	bhi.w	800a802 <USBH_HandleControl+0x472>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <USBH_HandleControl+0x24>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	0800a3fb 	.word	0x0800a3fb
 800a3bc:	0800a49d 	.word	0x0800a49d
 800a3c0:	0800a4c3 	.word	0x0800a4c3
 800a3c4:	0800a54f 	.word	0x0800a54f
 800a3c8:	0800a57b 	.word	0x0800a57b
 800a3cc:	0800a63d 	.word	0x0800a63d
 800a3d0:	0800a65f 	.word	0x0800a65f
 800a3d4:	0800a6f1 	.word	0x0800a6f1
 800a3d8:	0800a719 	.word	0x0800a719
 800a3dc:	0800a7ab 	.word	0x0800a7ab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f103 0110 	add.w	r1, r3, #16
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	795b      	ldrb	r3, [r3, #5]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fa19 	bl	800a824 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	761a      	strb	r2, [r3, #24]
      break;
 800a3f8:	e20e      	b.n	800a818 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	795b      	ldrb	r3, [r3, #5]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f003 fd7d 	bl	800df00 <USBH_LL_GetURBState>
 800a406:	4603      	mov	r3, r0
 800a408:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d12c      	bne.n	800a46a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7c1b      	ldrb	r3, [r3, #16]
 800a414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a418:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	8adb      	ldrh	r3, [r3, #22]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a422:	7b7b      	ldrb	r3, [r7, #13]
 800a424:	2b80      	cmp	r3, #128	; 0x80
 800a426:	d103      	bne.n	800a430 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2203      	movs	r2, #3
 800a42c:	761a      	strb	r2, [r3, #24]
 800a42e:	e00d      	b.n	800a44c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2205      	movs	r2, #5
 800a434:	761a      	strb	r2, [r3, #24]
 800a436:	e009      	b.n	800a44c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a438:	7b7b      	ldrb	r3, [r7, #13]
 800a43a:	2b80      	cmp	r3, #128	; 0x80
 800a43c:	d103      	bne.n	800a446 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2209      	movs	r2, #9
 800a442:	761a      	strb	r2, [r3, #24]
 800a444:	e002      	b.n	800a44c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2207      	movs	r2, #7
 800a44a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2203      	movs	r2, #3
 800a450:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a460:	2300      	movs	r3, #0
 800a462:	2200      	movs	r2, #0
 800a464:	f000 fcdc 	bl	800ae20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a468:	e1cd      	b.n	800a806 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d003      	beq.n	800a478 <USBH_HandleControl+0xe8>
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	2b02      	cmp	r3, #2
 800a474:	f040 81c7 	bne.w	800a806 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	220b      	movs	r2, #11
 800a47c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2203      	movs	r2, #3
 800a482:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a492:	2300      	movs	r3, #0
 800a494:	2200      	movs	r2, #0
 800a496:	f000 fcc3 	bl	800ae20 <osMessageQueuePut>
      break;
 800a49a:	e1b4      	b.n	800a806 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6899      	ldr	r1, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	899a      	ldrh	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	791b      	ldrb	r3, [r3, #4]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f9f4 	bl	800a8a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	761a      	strb	r2, [r3, #24]
      break;
 800a4c0:	e1aa      	b.n	800a818 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	791b      	ldrb	r3, [r3, #4]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f003 fd19 	bl	800df00 <USBH_LL_GetURBState>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d110      	bne.n	800a4fa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2209      	movs	r2, #9
 800a4dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f000 fc93 	bl	800ae20 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b05      	cmp	r3, #5
 800a4fe:	d110      	bne.n	800a522 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a500:	2303      	movs	r3, #3
 800a502:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2203      	movs	r2, #3
 800a508:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	f000 fc80 	bl	800ae20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a520:	e173      	b.n	800a80a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	2b04      	cmp	r3, #4
 800a526:	f040 8170 	bne.w	800a80a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	220b      	movs	r2, #11
 800a52e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2203      	movs	r2, #3
 800a534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a544:	2300      	movs	r3, #0
 800a546:	2200      	movs	r2, #0
 800a548:	f000 fc6a 	bl	800ae20 <osMessageQueuePut>
      break;
 800a54c:	e15d      	b.n	800a80a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6899      	ldr	r1, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	899a      	ldrh	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7958      	ldrb	r0, [r3, #5]
 800a55a:	2301      	movs	r3, #1
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	4603      	mov	r3, r0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f979 	bl	800a858 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2206      	movs	r2, #6
 800a576:	761a      	strb	r2, [r3, #24]
      break;
 800a578:	e14e      	b.n	800a818 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	795b      	ldrb	r3, [r3, #5]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f003 fcbd 	bl	800df00 <USBH_LL_GetURBState>
 800a586:	4603      	mov	r3, r0
 800a588:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d111      	bne.n	800a5b4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2207      	movs	r2, #7
 800a594:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2203      	movs	r2, #3
 800a59a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f000 fc37 	bl	800ae20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5b2:	e12c      	b.n	800a80e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d113      	bne.n	800a5e2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	220c      	movs	r2, #12
 800a5be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2203      	movs	r2, #3
 800a5c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f000 fc20 	bl	800ae20 <osMessageQueuePut>
      break;
 800a5e0:	e115      	b.n	800a80e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d111      	bne.n	800a60c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a602:	2300      	movs	r3, #0
 800a604:	2200      	movs	r2, #0
 800a606:	f000 fc0b 	bl	800ae20 <osMessageQueuePut>
      break;
 800a60a:	e100      	b.n	800a80e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b04      	cmp	r3, #4
 800a610:	f040 80fd 	bne.w	800a80e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	220b      	movs	r2, #11
 800a618:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a61a:	2302      	movs	r3, #2
 800a61c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2203      	movs	r2, #3
 800a622:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a632:	2300      	movs	r3, #0
 800a634:	2200      	movs	r2, #0
 800a636:	f000 fbf3 	bl	800ae20 <osMessageQueuePut>
      break;
 800a63a:	e0e8      	b.n	800a80e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	791b      	ldrb	r3, [r3, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f92c 	bl	800a8a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2208      	movs	r2, #8
 800a65a:	761a      	strb	r2, [r3, #24]

      break;
 800a65c:	e0dc      	b.n	800a818 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	791b      	ldrb	r3, [r3, #4]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f003 fc4b 	bl	800df00 <USBH_LL_GetURBState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d113      	bne.n	800a69c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220d      	movs	r2, #13
 800a678:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2203      	movs	r2, #3
 800a682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a692:	2300      	movs	r3, #0
 800a694:	2200      	movs	r2, #0
 800a696:	f000 fbc3 	bl	800ae20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a69a:	e0ba      	b.n	800a812 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d111      	bne.n	800a6c6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	220b      	movs	r2, #11
 800a6a6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f000 fbae 	bl	800ae20 <osMessageQueuePut>
      break;
 800a6c4:	e0a5      	b.n	800a812 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	2b05      	cmp	r3, #5
 800a6ca:	f040 80a2 	bne.w	800a812 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2203      	movs	r2, #3
 800a6d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f000 fb99 	bl	800ae20 <osMessageQueuePut>
      break;
 800a6ee:	e090      	b.n	800a812 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	795a      	ldrb	r2, [r3, #5]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f8aa 	bl	800a858 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	220a      	movs	r2, #10
 800a714:	761a      	strb	r2, [r3, #24]
      break;
 800a716:	e07f      	b.n	800a818 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	795b      	ldrb	r3, [r3, #5]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f003 fbee 	bl	800df00 <USBH_LL_GetURBState>
 800a724:	4603      	mov	r3, r0
 800a726:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d113      	bne.n	800a756 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	220d      	movs	r2, #13
 800a736:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2203      	movs	r2, #3
 800a73c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a74c:	2300      	movs	r3, #0
 800a74e:	2200      	movs	r2, #0
 800a750:	f000 fb66 	bl	800ae20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a754:	e05f      	b.n	800a816 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d111      	bne.n	800a780 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2209      	movs	r2, #9
 800a760:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2203      	movs	r2, #3
 800a766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a776:	2300      	movs	r3, #0
 800a778:	2200      	movs	r2, #0
 800a77a:	f000 fb51 	bl	800ae20 <osMessageQueuePut>
      break;
 800a77e:	e04a      	b.n	800a816 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b04      	cmp	r3, #4
 800a784:	d147      	bne.n	800a816 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	220b      	movs	r2, #11
 800a78a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f000 fb3c 	bl	800ae20 <osMessageQueuePut>
      break;
 800a7a8:	e035      	b.n	800a816 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	7e5b      	ldrb	r3, [r3, #25]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	765a      	strb	r2, [r3, #25]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	7e5b      	ldrb	r3, [r3, #25]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d806      	bhi.n	800a7cc <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a7ca:	e025      	b.n	800a818 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7d2:	2106      	movs	r1, #6
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	795b      	ldrb	r3, [r3, #5]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f90d 	bl	800aa04 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	791b      	ldrb	r3, [r3, #4]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f907 	bl	800aa04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e00a      	b.n	800a818 <USBH_HandleControl+0x488>

    default:
      break;
 800a802:	bf00      	nop
 800a804:	e008      	b.n	800a818 <USBH_HandleControl+0x488>
      break;
 800a806:	bf00      	nop
 800a808:	e006      	b.n	800a818 <USBH_HandleControl+0x488>
      break;
 800a80a:	bf00      	nop
 800a80c:	e004      	b.n	800a818 <USBH_HandleControl+0x488>
      break;
 800a80e:	bf00      	nop
 800a810:	e002      	b.n	800a818 <USBH_HandleControl+0x488>
      break;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <USBH_HandleControl+0x488>
      break;
 800a816:	bf00      	nop
  }

  return status;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop

0800a824 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af04      	add	r7, sp, #16
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a832:	79f9      	ldrb	r1, [r7, #7]
 800a834:	2300      	movs	r3, #0
 800a836:	9303      	str	r3, [sp, #12]
 800a838:	2308      	movs	r3, #8
 800a83a:	9302      	str	r3, [sp, #8]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	2300      	movs	r3, #0
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	2300      	movs	r3, #0
 800a846:	2200      	movs	r2, #0
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f003 fb28 	bl	800de9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af04      	add	r7, sp, #16
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4611      	mov	r1, r2
 800a864:	461a      	mov	r2, r3
 800a866:	460b      	mov	r3, r1
 800a868:	80fb      	strh	r3, [r7, #6]
 800a86a:	4613      	mov	r3, r2
 800a86c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a87c:	7979      	ldrb	r1, [r7, #5]
 800a87e:	7e3b      	ldrb	r3, [r7, #24]
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	9302      	str	r3, [sp, #8]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	2301      	movs	r3, #1
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	2300      	movs	r3, #0
 800a890:	2200      	movs	r2, #0
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f003 fb03 	bl	800de9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af04      	add	r7, sp, #16
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	80fb      	strh	r3, [r7, #6]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8b8:	7979      	ldrb	r1, [r7, #5]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9303      	str	r3, [sp, #12]
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	9302      	str	r3, [sp, #8]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	9301      	str	r3, [sp, #4]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f003 fae5 	bl	800de9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a8d4:	2300      	movs	r3, #0

}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b088      	sub	sp, #32
 800a8e2:	af04      	add	r7, sp, #16
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	80fb      	strh	r3, [r7, #6]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a902:	7979      	ldrb	r1, [r7, #5]
 800a904:	7e3b      	ldrb	r3, [r7, #24]
 800a906:	9303      	str	r3, [sp, #12]
 800a908:	88fb      	ldrh	r3, [r7, #6]
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	2301      	movs	r3, #1
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2302      	movs	r3, #2
 800a916:	2200      	movs	r2, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f003 fac0 	bl	800de9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af04      	add	r7, sp, #16
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4611      	mov	r1, r2
 800a934:	461a      	mov	r2, r3
 800a936:	460b      	mov	r3, r1
 800a938:	80fb      	strh	r3, [r7, #6]
 800a93a:	4613      	mov	r3, r2
 800a93c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a93e:	7979      	ldrb	r1, [r7, #5]
 800a940:	2300      	movs	r3, #0
 800a942:	9303      	str	r3, [sp, #12]
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	9302      	str	r3, [sp, #8]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	2301      	movs	r3, #1
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2302      	movs	r3, #2
 800a952:	2201      	movs	r2, #1
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f003 faa2 	bl	800de9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af04      	add	r7, sp, #16
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	461a      	mov	r2, r3
 800a972:	4603      	mov	r3, r0
 800a974:	70fb      	strb	r3, [r7, #3]
 800a976:	460b      	mov	r3, r1
 800a978:	70bb      	strb	r3, [r7, #2]
 800a97a:	4613      	mov	r3, r2
 800a97c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a97e:	7878      	ldrb	r0, [r7, #1]
 800a980:	78ba      	ldrb	r2, [r7, #2]
 800a982:	78f9      	ldrb	r1, [r7, #3]
 800a984:	8b3b      	ldrh	r3, [r7, #24]
 800a986:	9302      	str	r3, [sp, #8]
 800a988:	7d3b      	ldrb	r3, [r7, #20]
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	7c3b      	ldrb	r3, [r7, #16]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4603      	mov	r3, r0
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f003 fa35 	bl	800de02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a9ae:	78fb      	ldrb	r3, [r7, #3]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f003 fa54 	bl	800de60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f836 	bl	800aa40 <USBH_GetFreePipe>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a9d8:	89fb      	ldrh	r3, [r7, #14]
 800a9da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d00a      	beq.n	800a9f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	89fb      	ldrh	r3, [r7, #14]
 800a9e6:	f003 030f 	and.w	r3, r3, #15
 800a9ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	33e0      	adds	r3, #224	; 0xe0
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a9f8:	89fb      	ldrh	r3, [r7, #14]
 800a9fa:	b2db      	uxtb	r3, r3
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	2b0a      	cmp	r3, #10
 800aa14:	d80d      	bhi.n	800aa32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	33e0      	adds	r3, #224	; 0xe0
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aa28:	6879      	ldr	r1, [r7, #4]
 800aa2a:	33e0      	adds	r3, #224	; 0xe0
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	440b      	add	r3, r1
 800aa30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	e00f      	b.n	800aa72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	33e0      	adds	r3, #224	; 0xe0
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	e007      	b.n	800aa7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	73fb      	strb	r3, [r7, #15]
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b0a      	cmp	r3, #10
 800aa76:	d9ec      	bls.n	800aa52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800aa8c:	bf00      	nop
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
	...

0800aa98 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa9e:	f3ef 8305 	mrs	r3, IPSR
 800aaa2:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10f      	bne.n	800aaca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaaa:	f3ef 8310 	mrs	r3, PRIMASK
 800aaae:	607b      	str	r3, [r7, #4]
  return(result);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d105      	bne.n	800aac2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aab6:	f3ef 8311 	mrs	r3, BASEPRI
 800aaba:	603b      	str	r3, [r7, #0]
  return(result);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <osKernelInitialize+0x3a>
 800aac2:	4b0e      	ldr	r3, [pc, #56]	; (800aafc <osKernelInitialize+0x64>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d103      	bne.n	800aad2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aaca:	f06f 0305 	mvn.w	r3, #5
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	e00c      	b.n	800aaec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <osKernelInitialize+0x64>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aada:	4b08      	ldr	r3, [pc, #32]	; (800aafc <osKernelInitialize+0x64>)
 800aadc:	2201      	movs	r2, #1
 800aade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e002      	b.n	800aaec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800aae6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aaec:	68fb      	ldr	r3, [r7, #12]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	200000fc 	.word	0x200000fc

0800ab00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab06:	f3ef 8305 	mrs	r3, IPSR
 800ab0a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10f      	bne.n	800ab32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab12:	f3ef 8310 	mrs	r3, PRIMASK
 800ab16:	607b      	str	r3, [r7, #4]
  return(result);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d105      	bne.n	800ab2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab1e:	f3ef 8311 	mrs	r3, BASEPRI
 800ab22:	603b      	str	r3, [r7, #0]
  return(result);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <osKernelStart+0x3a>
 800ab2a:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <osKernelStart+0x68>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d103      	bne.n	800ab3a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ab32:	f06f 0305 	mvn.w	r3, #5
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	e010      	b.n	800ab5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <osKernelStart+0x68>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d109      	bne.n	800ab56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab42:	f7ff ffa1 	bl	800aa88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab46:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <osKernelStart+0x68>)
 800ab48:	2202      	movs	r2, #2
 800ab4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab4c:	f001 fb14 	bl	800c178 <vTaskStartScheduler>
      stat = osOK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	e002      	b.n	800ab5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ab56:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200000fc 	.word	0x200000fc

0800ab6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b090      	sub	sp, #64	; 0x40
 800ab70:	af04      	add	r7, sp, #16
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab7c:	f3ef 8305 	mrs	r3, IPSR
 800ab80:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f040 808f 	bne.w	800aca8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab8e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d105      	bne.n	800aba2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab96:	f3ef 8311 	mrs	r3, BASEPRI
 800ab9a:	617b      	str	r3, [r7, #20]
  return(result);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <osThreadNew+0x3e>
 800aba2:	4b44      	ldr	r3, [pc, #272]	; (800acb4 <osThreadNew+0x148>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d07e      	beq.n	800aca8 <osThreadNew+0x13c>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d07b      	beq.n	800aca8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800abb0:	2380      	movs	r3, #128	; 0x80
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800abb4:	2318      	movs	r3, #24
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d045      	beq.n	800ac54 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <osThreadNew+0x6a>
        name = attr->name;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d008      	beq.n	800abfc <osThreadNew+0x90>
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	2b38      	cmp	r3, #56	; 0x38
 800abee:	d805      	bhi.n	800abfc <osThreadNew+0x90>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <osThreadNew+0x94>
        return (NULL);
 800abfc:	2300      	movs	r3, #0
 800abfe:	e054      	b.n	800acaa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	089b      	lsrs	r3, r3, #2
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00e      	beq.n	800ac36 <osThreadNew+0xca>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	2b5b      	cmp	r3, #91	; 0x5b
 800ac1e:	d90a      	bls.n	800ac36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d006      	beq.n	800ac36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <osThreadNew+0xca>
        mem = 1;
 800ac30:	2301      	movs	r3, #1
 800ac32:	623b      	str	r3, [r7, #32]
 800ac34:	e010      	b.n	800ac58 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10c      	bne.n	800ac58 <osThreadNew+0xec>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d108      	bne.n	800ac58 <osThreadNew+0xec>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d104      	bne.n	800ac58 <osThreadNew+0xec>
          mem = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	623b      	str	r3, [r7, #32]
 800ac52:	e001      	b.n	800ac58 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d110      	bne.n	800ac80 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac66:	9202      	str	r2, [sp, #8]
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f001 f833 	bl	800bce0 <xTaskCreateStatic>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	613b      	str	r3, [r7, #16]
 800ac7e:	e013      	b.n	800aca8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d110      	bne.n	800aca8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	f107 0310 	add.w	r3, r7, #16
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f001 f87b 	bl	800bd94 <xTaskCreate>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d001      	beq.n	800aca8 <osThreadNew+0x13c>
          hTask = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aca8:	693b      	ldr	r3, [r7, #16]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3730      	adds	r7, #48	; 0x30
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200000fc 	.word	0x200000fc

0800acb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acc0:	f3ef 8305 	mrs	r3, IPSR
 800acc4:	613b      	str	r3, [r7, #16]
  return(result);
 800acc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10f      	bne.n	800acec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800accc:	f3ef 8310 	mrs	r3, PRIMASK
 800acd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d105      	bne.n	800ace4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acd8:	f3ef 8311 	mrs	r3, BASEPRI
 800acdc:	60bb      	str	r3, [r7, #8]
  return(result);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d007      	beq.n	800acf4 <osDelay+0x3c>
 800ace4:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <osDelay+0x58>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d103      	bne.n	800acf4 <osDelay+0x3c>
    stat = osErrorISR;
 800acec:	f06f 0305 	mvn.w	r3, #5
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	e007      	b.n	800ad04 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <osDelay+0x4c>
      vTaskDelay(ticks);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 fa06 	bl	800c110 <vTaskDelay>
    }
  }

  return (stat);
 800ad04:	697b      	ldr	r3, [r7, #20]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	200000fc 	.word	0x200000fc

0800ad14 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08c      	sub	sp, #48	; 0x30
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad24:	f3ef 8305 	mrs	r3, IPSR
 800ad28:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d170      	bne.n	800ae12 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad30:	f3ef 8310 	mrs	r3, PRIMASK
 800ad34:	617b      	str	r3, [r7, #20]
  return(result);
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d105      	bne.n	800ad48 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad3c:	f3ef 8311 	mrs	r3, BASEPRI
 800ad40:	613b      	str	r3, [r7, #16]
  return(result);
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <osMessageQueueNew+0x3c>
 800ad48:	4b34      	ldr	r3, [pc, #208]	; (800ae1c <osMessageQueueNew+0x108>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d060      	beq.n	800ae12 <osMessageQueueNew+0xfe>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d05d      	beq.n	800ae12 <osMessageQueueNew+0xfe>
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d05a      	beq.n	800ae12 <osMessageQueueNew+0xfe>
    mem = -1;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d029      	beq.n	800adbc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d012      	beq.n	800ad96 <osMessageQueueNew+0x82>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b4f      	cmp	r3, #79	; 0x4f
 800ad76:	d90e      	bls.n	800ad96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00a      	beq.n	800ad96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	695a      	ldr	r2, [r3, #20]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	fb01 f303 	mul.w	r3, r1, r3
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d302      	bcc.n	800ad96 <osMessageQueueNew+0x82>
        mem = 1;
 800ad90:	2301      	movs	r3, #1
 800ad92:	623b      	str	r3, [r7, #32]
 800ad94:	e014      	b.n	800adc0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d110      	bne.n	800adc0 <osMessageQueueNew+0xac>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10c      	bne.n	800adc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d108      	bne.n	800adc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d104      	bne.n	800adc0 <osMessageQueueNew+0xac>
          mem = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	623b      	str	r3, [r7, #32]
 800adba:	e001      	b.n	800adc0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d10c      	bne.n	800ade0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691a      	ldr	r2, [r3, #16]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6899      	ldr	r1, [r3, #8]
 800adce:	2300      	movs	r3, #0
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	460b      	mov	r3, r1
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 fa58 	bl	800b28c <xQueueGenericCreateStatic>
 800addc:	6278      	str	r0, [r7, #36]	; 0x24
 800adde:	e008      	b.n	800adf2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d105      	bne.n	800adf2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ade6:	2200      	movs	r2, #0
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fac1 	bl	800b372 <xQueueGenericCreate>
 800adf0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00c      	beq.n	800ae12 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <osMessageQueueNew+0xf2>
        name = attr->name;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	e001      	b.n	800ae0a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ae0a:	69f9      	ldr	r1, [r7, #28]
 800ae0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae0e:	f000 ff0b 	bl	800bc28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3728      	adds	r7, #40	; 0x28
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200000fc 	.word	0x200000fc

0800ae20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae38:	f3ef 8305 	mrs	r3, IPSR
 800ae3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ae3e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10f      	bne.n	800ae64 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae44:	f3ef 8310 	mrs	r3, PRIMASK
 800ae48:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d105      	bne.n	800ae5c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae50:	f3ef 8311 	mrs	r3, BASEPRI
 800ae54:	617b      	str	r3, [r7, #20]
  return(result);
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d02c      	beq.n	800aeb6 <osMessageQueuePut+0x96>
 800ae5c:	4b28      	ldr	r3, [pc, #160]	; (800af00 <osMessageQueuePut+0xe0>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d128      	bne.n	800aeb6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <osMessageQueuePut+0x56>
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <osMessageQueuePut+0x56>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ae76:	f06f 0303 	mvn.w	r3, #3
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae7c:	e039      	b.n	800aef2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ae82:	f107 0210 	add.w	r2, r7, #16
 800ae86:	2300      	movs	r3, #0
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	6a38      	ldr	r0, [r7, #32]
 800ae8c:	f000 fbce 	bl	800b62c <xQueueGenericSendFromISR>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d003      	beq.n	800ae9e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ae96:	f06f 0302 	mvn.w	r3, #2
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae9c:	e029      	b.n	800aef2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d026      	beq.n	800aef2 <osMessageQueuePut+0xd2>
 800aea4:	4b17      	ldr	r3, [pc, #92]	; (800af04 <osMessageQueuePut+0xe4>)
 800aea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aeb4:	e01d      	b.n	800aef2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <osMessageQueuePut+0xa2>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800aec2:	f06f 0303 	mvn.w	r3, #3
 800aec6:	627b      	str	r3, [r7, #36]	; 0x24
 800aec8:	e014      	b.n	800aef4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aeca:	2300      	movs	r3, #0
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	6a38      	ldr	r0, [r7, #32]
 800aed2:	f000 fab1 	bl	800b438 <xQueueGenericSend>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d00b      	beq.n	800aef4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800aee2:	f06f 0301 	mvn.w	r3, #1
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
 800aee8:	e004      	b.n	800aef4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800aeea:	f06f 0302 	mvn.w	r3, #2
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
 800aef0:	e000      	b.n	800aef4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aef2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3728      	adds	r7, #40	; 0x28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200000fc 	.word	0x200000fc
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1e:	f3ef 8305 	mrs	r3, IPSR
 800af22:	61fb      	str	r3, [r7, #28]
  return(result);
 800af24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10f      	bne.n	800af4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af2a:	f3ef 8310 	mrs	r3, PRIMASK
 800af2e:	61bb      	str	r3, [r7, #24]
  return(result);
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d105      	bne.n	800af42 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af36:	f3ef 8311 	mrs	r3, BASEPRI
 800af3a:	617b      	str	r3, [r7, #20]
  return(result);
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d02c      	beq.n	800af9c <osMessageQueueGet+0x94>
 800af42:	4b28      	ldr	r3, [pc, #160]	; (800afe4 <osMessageQueueGet+0xdc>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d128      	bne.n	800af9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <osMessageQueueGet+0x54>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <osMessageQueueGet+0x54>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800af5c:	f06f 0303 	mvn.w	r3, #3
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af62:	e038      	b.n	800afd6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800af64:	2300      	movs	r3, #0
 800af66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800af68:	f107 0310 	add.w	r3, r7, #16
 800af6c:	461a      	mov	r2, r3
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	6a38      	ldr	r0, [r7, #32]
 800af72:	f000 fccb 	bl	800b90c <xQueueReceiveFromISR>
 800af76:	4603      	mov	r3, r0
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d003      	beq.n	800af84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800af7c:	f06f 0302 	mvn.w	r3, #2
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af82:	e028      	b.n	800afd6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d025      	beq.n	800afd6 <osMessageQueueGet+0xce>
 800af8a:	4b17      	ldr	r3, [pc, #92]	; (800afe8 <osMessageQueueGet+0xe0>)
 800af8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af9a:	e01c      	b.n	800afd6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <osMessageQueueGet+0xa0>
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d103      	bne.n	800afb0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800afa8:	f06f 0303 	mvn.w	r3, #3
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
 800afae:	e013      	b.n	800afd8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	68b9      	ldr	r1, [r7, #8]
 800afb4:	6a38      	ldr	r0, [r7, #32]
 800afb6:	f000 fbcd 	bl	800b754 <xQueueReceive>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d00b      	beq.n	800afd8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800afc6:	f06f 0301 	mvn.w	r3, #1
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
 800afcc:	e004      	b.n	800afd8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800afce:	f06f 0302 	mvn.w	r3, #2
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
 800afd4:	e000      	b.n	800afd8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afd6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3728      	adds	r7, #40	; 0x28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200000fc 	.word	0x200000fc
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4a07      	ldr	r2, [pc, #28]	; (800b018 <vApplicationGetIdleTaskMemory+0x2c>)
 800affc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	4a06      	ldr	r2, [pc, #24]	; (800b01c <vApplicationGetIdleTaskMemory+0x30>)
 800b002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2280      	movs	r2, #128	; 0x80
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000100 	.word	0x20000100
 800b01c:	2000015c 	.word	0x2000015c

0800b020 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <vApplicationGetTimerTaskMemory+0x2c>)
 800b030:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vApplicationGetTimerTaskMemory+0x30>)
 800b036:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b03e:	601a      	str	r2, [r3, #0]
}
 800b040:	bf00      	nop
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	2000035c 	.word	0x2000035c
 800b050:	200003b8 	.word	0x200003b8

0800b054 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f103 0208 	add.w	r2, r3, #8
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f04f 32ff 	mov.w	r2, #4294967295
 800b06c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f103 0208 	add.w	r2, r3, #8
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f103 0208 	add.w	r2, r3, #8
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	601a      	str	r2, [r3, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10c:	d103      	bne.n	800b116 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e00c      	b.n	800b130 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3308      	adds	r3, #8
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	e002      	b.n	800b124 <vListInsert+0x2e>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d2f6      	bcs.n	800b11e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	601a      	str	r2, [r3, #0]
}
 800b15c:	bf00      	nop
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6892      	ldr	r2, [r2, #8]
 800b17e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6852      	ldr	r2, [r2, #4]
 800b188:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d103      	bne.n	800b19c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689a      	ldr	r2, [r3, #8]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	1e5a      	subs	r2, r3, #1
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	e7fe      	b.n	800b1e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b1e4:	f002 f94a 	bl	800d47c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1f4:	fb01 f303 	mul.w	r3, r1, r3
 800b1f8:	441a      	add	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b214:	3b01      	subs	r3, #1
 800b216:	68f9      	ldr	r1, [r7, #12]
 800b218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b21a:	fb01 f303 	mul.w	r3, r1, r3
 800b21e:	441a      	add	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	22ff      	movs	r2, #255	; 0xff
 800b228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	22ff      	movs	r2, #255	; 0xff
 800b230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d114      	bne.n	800b264 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d01a      	beq.n	800b278 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3310      	adds	r3, #16
 800b246:	4618      	mov	r0, r3
 800b248:	f001 fa16 	bl	800c678 <xTaskRemoveFromEventList>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d012      	beq.n	800b278 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <xQueueGenericReset+0xcc>)
 800b254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	e009      	b.n	800b278 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3310      	adds	r3, #16
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fef3 	bl	800b054 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3324      	adds	r3, #36	; 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff feee 	bl	800b054 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b278:	f002 f92e 	bl	800d4d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b27c:	2301      	movs	r3, #1
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08e      	sub	sp, #56	; 0x38
 800b290:	af02      	add	r7, sp, #8
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <xQueueGenericCreateStatic+0x28>
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2b2:	e7fe      	b.n	800b2b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d109      	bne.n	800b2ce <xQueueGenericCreateStatic+0x42>
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b2cc:	e7fe      	b.n	800b2cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <xQueueGenericCreateStatic+0x4e>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <xQueueGenericCreateStatic+0x52>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueGenericCreateStatic+0x54>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d109      	bne.n	800b2f8 <xQueueGenericCreateStatic+0x6c>
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	623b      	str	r3, [r7, #32]
 800b2f6:	e7fe      	b.n	800b2f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <xQueueGenericCreateStatic+0x78>
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <xQueueGenericCreateStatic+0x7c>
 800b304:	2301      	movs	r3, #1
 800b306:	e000      	b.n	800b30a <xQueueGenericCreateStatic+0x7e>
 800b308:	2300      	movs	r3, #0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <xQueueGenericCreateStatic+0x96>
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	61fb      	str	r3, [r7, #28]
 800b320:	e7fe      	b.n	800b320 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b322:	2350      	movs	r3, #80	; 0x50
 800b324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b50      	cmp	r3, #80	; 0x50
 800b32a:	d009      	beq.n	800b340 <xQueueGenericCreateStatic+0xb4>
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	e7fe      	b.n	800b33e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00d      	beq.n	800b368 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b354:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	68b9      	ldr	r1, [r7, #8]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 f844 	bl	800b3f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3730      	adds	r7, #48	; 0x30
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b372:	b580      	push	{r7, lr}
 800b374:	b08a      	sub	sp, #40	; 0x28
 800b376:	af02      	add	r7, sp, #8
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	4613      	mov	r3, r2
 800b37e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d109      	bne.n	800b39a <xQueueGenericCreate+0x28>
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	613b      	str	r3, [r7, #16]
 800b398:	e7fe      	b.n	800b398 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	e004      	b.n	800b3b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	fb02 f303 	mul.w	r3, r2, r3
 800b3ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	3350      	adds	r3, #80	; 0x50
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f002 f97b 	bl	800d6b0 <pvPortMalloc>
 800b3ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d011      	beq.n	800b3e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	3350      	adds	r3, #80	; 0x50
 800b3ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3d4:	79fa      	ldrb	r2, [r7, #7]
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f805 	bl	800b3f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3e6:	69bb      	ldr	r3, [r7, #24]
	}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3720      	adds	r7, #32
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d103      	bne.n	800b40c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	e002      	b.n	800b412 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b41e:	2101      	movs	r1, #1
 800b420:	69b8      	ldr	r0, [r7, #24]
 800b422:	f7ff fecb 	bl	800b1bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	78fa      	ldrb	r2, [r7, #3]
 800b42a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b42e:	bf00      	nop
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08e      	sub	sp, #56	; 0x38
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b446:	2300      	movs	r3, #0
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <xQueueGenericSend+0x30>
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	62bb      	str	r3, [r7, #40]	; 0x28
 800b466:	e7fe      	b.n	800b466 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d103      	bne.n	800b476 <xQueueGenericSend+0x3e>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <xQueueGenericSend+0x42>
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <xQueueGenericSend+0x44>
 800b47a:	2300      	movs	r3, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d109      	bne.n	800b494 <xQueueGenericSend+0x5c>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
 800b492:	e7fe      	b.n	800b492 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d103      	bne.n	800b4a2 <xQueueGenericSend+0x6a>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d101      	bne.n	800b4a6 <xQueueGenericSend+0x6e>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <xQueueGenericSend+0x70>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <xQueueGenericSend+0x88>
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	623b      	str	r3, [r7, #32]
 800b4be:	e7fe      	b.n	800b4be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4c0:	f001 fa90 	bl	800c9e4 <xTaskGetSchedulerState>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <xQueueGenericSend+0x98>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <xQueueGenericSend+0x9c>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e000      	b.n	800b4d6 <xQueueGenericSend+0x9e>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d109      	bne.n	800b4ee <xQueueGenericSend+0xb6>
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	61fb      	str	r3, [r7, #28]
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ee:	f001 ffc5 	bl	800d47c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d302      	bcc.n	800b504 <xQueueGenericSend+0xcc>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b02      	cmp	r3, #2
 800b502:	d129      	bne.n	800b558 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b50a:	f000 fa7c 	bl	800ba06 <prvCopyDataToQueue>
 800b50e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	2b00      	cmp	r3, #0
 800b516:	d010      	beq.n	800b53a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	3324      	adds	r3, #36	; 0x24
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 f8ab 	bl	800c678 <xTaskRemoveFromEventList>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d013      	beq.n	800b550 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b528:	4b3f      	ldr	r3, [pc, #252]	; (800b628 <xQueueGenericSend+0x1f0>)
 800b52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	e00a      	b.n	800b550 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b540:	4b39      	ldr	r3, [pc, #228]	; (800b628 <xQueueGenericSend+0x1f0>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b550:	f001 ffc2 	bl	800d4d8 <vPortExitCritical>
				return pdPASS;
 800b554:	2301      	movs	r3, #1
 800b556:	e063      	b.n	800b620 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d103      	bne.n	800b566 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b55e:	f001 ffbb 	bl	800d4d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b562:	2300      	movs	r3, #0
 800b564:	e05c      	b.n	800b620 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b56c:	f107 0314 	add.w	r3, r7, #20
 800b570:	4618      	mov	r0, r3
 800b572:	f001 f8e3 	bl	800c73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b576:	2301      	movs	r3, #1
 800b578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b57a:	f001 ffad 	bl	800d4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b57e:	f000 fe5f 	bl	800c240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b582:	f001 ff7b 	bl	800d47c <vPortEnterCritical>
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b58c:	b25b      	sxtb	r3, r3
 800b58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b592:	d103      	bne.n	800b59c <xQueueGenericSend+0x164>
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a8:	d103      	bne.n	800b5b2 <xQueueGenericSend+0x17a>
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5b2:	f001 ff91 	bl	800d4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5b6:	1d3a      	adds	r2, r7, #4
 800b5b8:	f107 0314 	add.w	r3, r7, #20
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f001 f8d2 	bl	800c768 <xTaskCheckForTimeOut>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d124      	bne.n	800b614 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5cc:	f000 fb13 	bl	800bbf6 <prvIsQueueFull>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d018      	beq.n	800b608 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	3310      	adds	r3, #16
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 fffc 	bl	800c5dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5e6:	f000 fa9e 	bl	800bb26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5ea:	f000 fe37 	bl	800c25c <xTaskResumeAll>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f47f af7c 	bne.w	800b4ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b5f6:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <xQueueGenericSend+0x1f0>)
 800b5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	e772      	b.n	800b4ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b60a:	f000 fa8c 	bl	800bb26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b60e:	f000 fe25 	bl	800c25c <xTaskResumeAll>
 800b612:	e76c      	b.n	800b4ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b616:	f000 fa86 	bl	800bb26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b61a:	f000 fe1f 	bl	800c25c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b61e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b620:	4618      	mov	r0, r3
 800b622:	3738      	adds	r7, #56	; 0x38
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08e      	sub	sp, #56	; 0x38
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	2b00      	cmp	r3, #0
 800b642:	d109      	bne.n	800b658 <xQueueGenericSendFromISR+0x2c>
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
 800b656:	e7fe      	b.n	800b656 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d103      	bne.n	800b666 <xQueueGenericSendFromISR+0x3a>
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <xQueueGenericSendFromISR+0x3e>
 800b666:	2301      	movs	r3, #1
 800b668:	e000      	b.n	800b66c <xQueueGenericSendFromISR+0x40>
 800b66a:	2300      	movs	r3, #0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <xQueueGenericSendFromISR+0x58>
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	623b      	str	r3, [r7, #32]
 800b682:	e7fe      	b.n	800b682 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b02      	cmp	r3, #2
 800b688:	d103      	bne.n	800b692 <xQueueGenericSendFromISR+0x66>
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <xQueueGenericSendFromISR+0x6a>
 800b692:	2301      	movs	r3, #1
 800b694:	e000      	b.n	800b698 <xQueueGenericSendFromISR+0x6c>
 800b696:	2300      	movs	r3, #0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d109      	bne.n	800b6b0 <xQueueGenericSendFromISR+0x84>
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	e7fe      	b.n	800b6ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6b0:	f001 ffc0 	bl	800d634 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	61ba      	str	r2, [r7, #24]
 800b6ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d302      	bcc.n	800b6e2 <xQueueGenericSendFromISR+0xb6>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d12c      	bne.n	800b73c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6f2:	f000 f988 	bl	800ba06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fe:	d112      	bne.n	800b726 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	d016      	beq.n	800b736 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	3324      	adds	r3, #36	; 0x24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 ffb3 	bl	800c678 <xTaskRemoveFromEventList>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	e007      	b.n	800b736 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b72a:	3301      	adds	r3, #1
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	b25a      	sxtb	r2, r3
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b736:	2301      	movs	r3, #1
 800b738:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b73a:	e001      	b.n	800b740 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	637b      	str	r3, [r7, #52]	; 0x34
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3738      	adds	r7, #56	; 0x38
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08c      	sub	sp, #48	; 0x30
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b760:	2300      	movs	r3, #0
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d109      	bne.n	800b782 <xQueueReceive+0x2e>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	623b      	str	r3, [r7, #32]
 800b780:	e7fe      	b.n	800b780 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <xQueueReceive+0x3c>
 800b788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <xQueueReceive+0x40>
 800b790:	2301      	movs	r3, #1
 800b792:	e000      	b.n	800b796 <xQueueReceive+0x42>
 800b794:	2300      	movs	r3, #0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d109      	bne.n	800b7ae <xQueueReceive+0x5a>
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	61fb      	str	r3, [r7, #28]
 800b7ac:	e7fe      	b.n	800b7ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ae:	f001 f919 	bl	800c9e4 <xTaskGetSchedulerState>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <xQueueReceive+0x6a>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <xQueueReceive+0x6e>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <xQueueReceive+0x70>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d109      	bne.n	800b7dc <xQueueReceive+0x88>
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	61bb      	str	r3, [r7, #24]
 800b7da:	e7fe      	b.n	800b7da <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7dc:	f001 fe4e 	bl	800d47c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01f      	beq.n	800b82c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f0:	f000 f973 	bl	800bada <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	1e5a      	subs	r2, r3, #1
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00f      	beq.n	800b824 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	3310      	adds	r3, #16
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 ff35 	bl	800c678 <xTaskRemoveFromEventList>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b814:	4b3c      	ldr	r3, [pc, #240]	; (800b908 <xQueueReceive+0x1b4>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b824:	f001 fe58 	bl	800d4d8 <vPortExitCritical>
				return pdPASS;
 800b828:	2301      	movs	r3, #1
 800b82a:	e069      	b.n	800b900 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d103      	bne.n	800b83a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b832:	f001 fe51 	bl	800d4d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b836:	2300      	movs	r3, #0
 800b838:	e062      	b.n	800b900 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b840:	f107 0310 	add.w	r3, r7, #16
 800b844:	4618      	mov	r0, r3
 800b846:	f000 ff79 	bl	800c73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b84a:	2301      	movs	r3, #1
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b84e:	f001 fe43 	bl	800d4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b852:	f000 fcf5 	bl	800c240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b856:	f001 fe11 	bl	800d47c <vPortEnterCritical>
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b860:	b25b      	sxtb	r3, r3
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d103      	bne.n	800b870 <xQueueReceive+0x11c>
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b876:	b25b      	sxtb	r3, r3
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d103      	bne.n	800b886 <xQueueReceive+0x132>
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b886:	f001 fe27 	bl	800d4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b88a:	1d3a      	adds	r2, r7, #4
 800b88c:	f107 0310 	add.w	r3, r7, #16
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f000 ff68 	bl	800c768 <xTaskCheckForTimeOut>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d123      	bne.n	800b8e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8a0:	f000 f993 	bl	800bbca <prvIsQueueEmpty>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d017      	beq.n	800b8da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	3324      	adds	r3, #36	; 0x24
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fe92 	bl	800c5dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ba:	f000 f934 	bl	800bb26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8be:	f000 fccd 	bl	800c25c <xTaskResumeAll>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d189      	bne.n	800b7dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <xQueueReceive+0x1b4>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	e780      	b.n	800b7dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8dc:	f000 f923 	bl	800bb26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8e0:	f000 fcbc 	bl	800c25c <xTaskResumeAll>
 800b8e4:	e77a      	b.n	800b7dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e8:	f000 f91d 	bl	800bb26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8ec:	f000 fcb6 	bl	800c25c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8f2:	f000 f96a 	bl	800bbca <prvIsQueueEmpty>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f43f af6f 	beq.w	800b7dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b900:	4618      	mov	r0, r3
 800b902:	3730      	adds	r7, #48	; 0x30
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08e      	sub	sp, #56	; 0x38
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d109      	bne.n	800b936 <xQueueReceiveFromISR+0x2a>
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	623b      	str	r3, [r7, #32]
 800b934:	e7fe      	b.n	800b934 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d103      	bne.n	800b944 <xQueueReceiveFromISR+0x38>
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <xQueueReceiveFromISR+0x3c>
 800b944:	2301      	movs	r3, #1
 800b946:	e000      	b.n	800b94a <xQueueReceiveFromISR+0x3e>
 800b948:	2300      	movs	r3, #0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d109      	bne.n	800b962 <xQueueReceiveFromISR+0x56>
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	61fb      	str	r3, [r7, #28]
 800b960:	e7fe      	b.n	800b960 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b962:	f001 fe67 	bl	800d634 <vPortValidateInterruptPriority>
	__asm volatile
 800b966:	f3ef 8211 	mrs	r2, BASEPRI
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	61ba      	str	r2, [r7, #24]
 800b97c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b97e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b980:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d02f      	beq.n	800b9ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b99c:	f000 f89d 	bl	800bada <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	1e5a      	subs	r2, r3, #1
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b9a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b0:	d112      	bne.n	800b9d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d016      	beq.n	800b9e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	3310      	adds	r3, #16
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f000 fe5a 	bl	800c678 <xTaskRemoveFromEventList>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00e      	beq.n	800b9e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	e007      	b.n	800b9e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9dc:	3301      	adds	r3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	b25a      	sxtb	r2, r3
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ec:	e001      	b.n	800b9f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3738      	adds	r7, #56	; 0x38
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b086      	sub	sp, #24
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba12:	2300      	movs	r3, #0
 800ba14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10d      	bne.n	800ba40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d14d      	bne.n	800bac8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 fff5 	bl	800ca20 <xTaskPriorityDisinherit>
 800ba36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	609a      	str	r2, [r3, #8]
 800ba3e:	e043      	b.n	800bac8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d119      	bne.n	800ba7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6858      	ldr	r0, [r3, #4]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4e:	461a      	mov	r2, r3
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	f002 fb3f 	bl	800e0d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	441a      	add	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d32b      	bcc.n	800bac8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	605a      	str	r2, [r3, #4]
 800ba78:	e026      	b.n	800bac8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	68d8      	ldr	r0, [r3, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	461a      	mov	r2, r3
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	f002 fb25 	bl	800e0d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	425b      	negs	r3, r3
 800ba94:	441a      	add	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	68da      	ldr	r2, [r3, #12]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d207      	bcs.n	800bab6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	425b      	negs	r3, r3
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d105      	bne.n	800bac8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bad0:	697b      	ldr	r3, [r7, #20]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d018      	beq.n	800bb1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf4:	441a      	add	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d303      	bcc.n	800bb0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68d9      	ldr	r1, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb16:	461a      	mov	r2, r3
 800bb18:	6838      	ldr	r0, [r7, #0]
 800bb1a:	f002 fadb 	bl	800e0d4 <memcpy>
	}
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb2e:	f001 fca5 	bl	800d47c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb3a:	e011      	b.n	800bb60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d012      	beq.n	800bb6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3324      	adds	r3, #36	; 0x24
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fd95 	bl	800c678 <xTaskRemoveFromEventList>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb54:	f000 fe68 	bl	800c828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dce9      	bgt.n	800bb3c <prvUnlockQueue+0x16>
 800bb68:	e000      	b.n	800bb6c <prvUnlockQueue+0x46>
					break;
 800bb6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	22ff      	movs	r2, #255	; 0xff
 800bb70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb74:	f001 fcb0 	bl	800d4d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb78:	f001 fc80 	bl	800d47c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb84:	e011      	b.n	800bbaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d012      	beq.n	800bbb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3310      	adds	r3, #16
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fd70 	bl	800c678 <xTaskRemoveFromEventList>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb9e:	f000 fe43 	bl	800c828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dce9      	bgt.n	800bb86 <prvUnlockQueue+0x60>
 800bbb2:	e000      	b.n	800bbb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	22ff      	movs	r2, #255	; 0xff
 800bbba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bbbe:	f001 fc8b 	bl	800d4d8 <vPortExitCritical>
}
 800bbc2:	bf00      	nop
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbd2:	f001 fc53 	bl	800d47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d102      	bne.n	800bbe4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	e001      	b.n	800bbe8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbe8:	f001 fc76 	bl	800d4d8 <vPortExitCritical>

	return xReturn;
 800bbec:	68fb      	ldr	r3, [r7, #12]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbfe:	f001 fc3d 	bl	800d47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d102      	bne.n	800bc14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e001      	b.n	800bc18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc14:	2300      	movs	r3, #0
 800bc16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc18:	f001 fc5e 	bl	800d4d8 <vPortExitCritical>

	return xReturn;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc32:	2300      	movs	r3, #0
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	e014      	b.n	800bc62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc38:	4a0e      	ldr	r2, [pc, #56]	; (800bc74 <vQueueAddToRegistry+0x4c>)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10b      	bne.n	800bc5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc44:	490b      	ldr	r1, [pc, #44]	; (800bc74 <vQueueAddToRegistry+0x4c>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <vQueueAddToRegistry+0x4c>)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	4413      	add	r3, r2
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc5a:	e005      	b.n	800bc68 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b07      	cmp	r3, #7
 800bc66:	d9e7      	bls.n	800bc38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc68:	bf00      	nop
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	20004c9c 	.word	0x20004c9c

0800bc78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc88:	f001 fbf8 	bl	800d47c <vPortEnterCritical>
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc92:	b25b      	sxtb	r3, r3
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d103      	bne.n	800bca2 <vQueueWaitForMessageRestricted+0x2a>
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca8:	b25b      	sxtb	r3, r3
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcae:	d103      	bne.n	800bcb8 <vQueueWaitForMessageRestricted+0x40>
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb8:	f001 fc0e 	bl	800d4d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	3324      	adds	r3, #36	; 0x24
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 fca9 	bl	800c624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcd2:	6978      	ldr	r0, [r7, #20]
 800bcd4:	f7ff ff27 	bl	800bb26 <prvUnlockQueue>
	}
 800bcd8:	bf00      	nop
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08e      	sub	sp, #56	; 0x38
 800bce4:	af04      	add	r7, sp, #16
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d109      	bne.n	800bd08 <xTaskCreateStatic+0x28>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	623b      	str	r3, [r7, #32]
 800bd06:	e7fe      	b.n	800bd06 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d109      	bne.n	800bd22 <xTaskCreateStatic+0x42>
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	e7fe      	b.n	800bd20 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd22:	235c      	movs	r3, #92	; 0x5c
 800bd24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b5c      	cmp	r3, #92	; 0x5c
 800bd2a:	d009      	beq.n	800bd40 <xTaskCreateStatic+0x60>
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	61bb      	str	r3, [r7, #24]
 800bd3e:	e7fe      	b.n	800bd3e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01e      	beq.n	800bd86 <xTaskCreateStatic+0xa6>
 800bd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01b      	beq.n	800bd86 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	f107 0314 	add.w	r3, r7, #20
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f850 	bl	800be1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd80:	f000 f8dc 	bl	800bf3c <prvAddNewTaskToReadyList>
 800bd84:	e001      	b.n	800bd8a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd8a:	697b      	ldr	r3, [r7, #20]
	}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	; 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08c      	sub	sp, #48	; 0x30
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	4613      	mov	r3, r2
 800bda2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 fc81 	bl	800d6b0 <pvPortMalloc>
 800bdae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00e      	beq.n	800bdd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdb6:	205c      	movs	r0, #92	; 0x5c
 800bdb8:	f001 fc7a 	bl	800d6b0 <pvPortMalloc>
 800bdbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	631a      	str	r2, [r3, #48]	; 0x30
 800bdca:	e005      	b.n	800bdd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdcc:	6978      	ldr	r0, [r7, #20]
 800bdce:	f001 fd31 	bl	800d834 <vPortFree>
 800bdd2:	e001      	b.n	800bdd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d017      	beq.n	800be0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bde6:	88fa      	ldrh	r2, [r7, #6]
 800bde8:	2300      	movs	r3, #0
 800bdea:	9303      	str	r3, [sp, #12]
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	9302      	str	r3, [sp, #8]
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	9301      	str	r3, [sp, #4]
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 f80e 	bl	800be1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be02:	69f8      	ldr	r0, [r7, #28]
 800be04:	f000 f89a 	bl	800bf3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be08:	2301      	movs	r3, #1
 800be0a:	61bb      	str	r3, [r7, #24]
 800be0c:	e002      	b.n	800be14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be0e:	f04f 33ff 	mov.w	r3, #4294967295
 800be12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be14:	69bb      	ldr	r3, [r7, #24]
	}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b088      	sub	sp, #32
 800be22:	af00      	add	r7, sp, #0
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	60b9      	str	r1, [r7, #8]
 800be28:	607a      	str	r2, [r7, #4]
 800be2a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	461a      	mov	r2, r3
 800be36:	21a5      	movs	r1, #165	; 0xa5
 800be38:	f002 f957 	bl	800e0ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be46:	3b01      	subs	r3, #1
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	f023 0307 	bic.w	r3, r3, #7
 800be54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	f003 0307 	and.w	r3, r3, #7
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <prvInitialiseNewTask+0x56>
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	617b      	str	r3, [r7, #20]
 800be72:	e7fe      	b.n	800be72 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d01f      	beq.n	800beba <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
 800be7e:	e012      	b.n	800bea6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	7819      	ldrb	r1, [r3, #0]
 800be88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	4413      	add	r3, r2
 800be8e:	3334      	adds	r3, #52	; 0x34
 800be90:	460a      	mov	r2, r1
 800be92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	4413      	add	r3, r2
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d006      	beq.n	800beae <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	3301      	adds	r3, #1
 800bea4:	61fb      	str	r3, [r7, #28]
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	2b0f      	cmp	r3, #15
 800beaa:	d9e9      	bls.n	800be80 <prvInitialiseNewTask+0x62>
 800beac:	e000      	b.n	800beb0 <prvInitialiseNewTask+0x92>
			{
				break;
 800beae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800beb8:	e003      	b.n	800bec2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	2b37      	cmp	r3, #55	; 0x37
 800bec6:	d901      	bls.n	800becc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bec8:	2337      	movs	r3, #55	; 0x37
 800beca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bed0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bed6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	2200      	movs	r2, #0
 800bedc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	3304      	adds	r3, #4
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff f8d6 	bl	800b094 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	3318      	adds	r3, #24
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff f8d1 	bl	800b094 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	68f9      	ldr	r1, [r7, #12]
 800bf1a:	69b8      	ldr	r0, [r7, #24]
 800bf1c:	f001 f986 	bl	800d22c <pxPortInitialiseStack>
 800bf20:	4602      	mov	r2, r0
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf32:	bf00      	nop
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf44:	f001 fa9a 	bl	800d47c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf48:	4b2d      	ldr	r3, [pc, #180]	; (800c000 <prvAddNewTaskToReadyList+0xc4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	4a2c      	ldr	r2, [pc, #176]	; (800c000 <prvAddNewTaskToReadyList+0xc4>)
 800bf50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf52:	4b2c      	ldr	r3, [pc, #176]	; (800c004 <prvAddNewTaskToReadyList+0xc8>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d109      	bne.n	800bf6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf5a:	4a2a      	ldr	r2, [pc, #168]	; (800c004 <prvAddNewTaskToReadyList+0xc8>)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf60:	4b27      	ldr	r3, [pc, #156]	; (800c000 <prvAddNewTaskToReadyList+0xc4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d110      	bne.n	800bf8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf68:	f000 fc82 	bl	800c870 <prvInitialiseTaskLists>
 800bf6c:	e00d      	b.n	800bf8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf6e:	4b26      	ldr	r3, [pc, #152]	; (800c008 <prvAddNewTaskToReadyList+0xcc>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d109      	bne.n	800bf8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf76:	4b23      	ldr	r3, [pc, #140]	; (800c004 <prvAddNewTaskToReadyList+0xc8>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d802      	bhi.n	800bf8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf84:	4a1f      	ldr	r2, [pc, #124]	; (800c004 <prvAddNewTaskToReadyList+0xc8>)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf8a:	4b20      	ldr	r3, [pc, #128]	; (800c00c <prvAddNewTaskToReadyList+0xd0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	4a1e      	ldr	r2, [pc, #120]	; (800c00c <prvAddNewTaskToReadyList+0xd0>)
 800bf92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf94:	4b1d      	ldr	r3, [pc, #116]	; (800c00c <prvAddNewTaskToReadyList+0xd0>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa0:	4b1b      	ldr	r3, [pc, #108]	; (800c010 <prvAddNewTaskToReadyList+0xd4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d903      	bls.n	800bfb0 <prvAddNewTaskToReadyList+0x74>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	4a18      	ldr	r2, [pc, #96]	; (800c010 <prvAddNewTaskToReadyList+0xd4>)
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4a15      	ldr	r2, [pc, #84]	; (800c014 <prvAddNewTaskToReadyList+0xd8>)
 800bfbe:	441a      	add	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	f7ff f871 	bl	800b0ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfcc:	f001 fa84 	bl	800d4d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <prvAddNewTaskToReadyList+0xcc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00e      	beq.n	800bff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <prvAddNewTaskToReadyList+0xc8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d207      	bcs.n	800bff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <prvAddNewTaskToReadyList+0xdc>)
 800bfe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20000c8c 	.word	0x20000c8c
 800c004:	200007b8 	.word	0x200007b8
 800c008:	20000c98 	.word	0x20000c98
 800c00c:	20000ca8 	.word	0x20000ca8
 800c010:	20000c94 	.word	0x20000c94
 800c014:	200007bc 	.word	0x200007bc
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08a      	sub	sp, #40	; 0x28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c026:	2300      	movs	r3, #0
 800c028:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d109      	bne.n	800c044 <vTaskDelayUntil+0x28>
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	617b      	str	r3, [r7, #20]
 800c042:	e7fe      	b.n	800c042 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d109      	bne.n	800c05e <vTaskDelayUntil+0x42>
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	613b      	str	r3, [r7, #16]
 800c05c:	e7fe      	b.n	800c05c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800c05e:	4b29      	ldr	r3, [pc, #164]	; (800c104 <vTaskDelayUntil+0xe8>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d009      	beq.n	800c07a <vTaskDelayUntil+0x5e>
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	e7fe      	b.n	800c078 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800c07a:	f000 f8e1 	bl	800c240 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c07e:	4b22      	ldr	r3, [pc, #136]	; (800c108 <vTaskDelayUntil+0xec>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	4413      	add	r3, r2
 800c08c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6a3a      	ldr	r2, [r7, #32]
 800c094:	429a      	cmp	r2, r3
 800c096:	d20b      	bcs.n	800c0b0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d211      	bcs.n	800c0c6 <vTaskDelayUntil+0xaa>
 800c0a2:	69fa      	ldr	r2, [r7, #28]
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d90d      	bls.n	800c0c6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ae:	e00a      	b.n	800c0c6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d303      	bcc.n	800c0c2 <vTaskDelayUntil+0xa6>
 800c0ba:	69fa      	ldr	r2, [r7, #28]
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d901      	bls.n	800c0c6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d006      	beq.n	800c0e0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c0d2:	69fa      	ldr	r2, [r7, #28]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	2100      	movs	r1, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fd0c 	bl	800caf8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c0e0:	f000 f8bc 	bl	800c25c <xTaskResumeAll>
 800c0e4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d107      	bne.n	800c0fc <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <vTaskDelayUntil+0xf0>)
 800c0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0fc:	bf00      	nop
 800c0fe:	3728      	adds	r7, #40	; 0x28
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20000cb4 	.word	0x20000cb4
 800c108:	20000c90 	.word	0x20000c90
 800c10c:	e000ed04 	.word	0xe000ed04

0800c110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c118:	2300      	movs	r3, #0
 800c11a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d016      	beq.n	800c150 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c122:	4b13      	ldr	r3, [pc, #76]	; (800c170 <vTaskDelay+0x60>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d009      	beq.n	800c13e <vTaskDelay+0x2e>
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	60bb      	str	r3, [r7, #8]
 800c13c:	e7fe      	b.n	800c13c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c13e:	f000 f87f 	bl	800c240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c142:	2100      	movs	r1, #0
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fcd7 	bl	800caf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c14a:	f000 f887 	bl	800c25c <xTaskResumeAll>
 800c14e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d107      	bne.n	800c166 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c156:	4b07      	ldr	r3, [pc, #28]	; (800c174 <vTaskDelay+0x64>)
 800c158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c166:	bf00      	nop
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20000cb4 	.word	0x20000cb4
 800c174:	e000ed04 	.word	0xe000ed04

0800c178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b08a      	sub	sp, #40	; 0x28
 800c17c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c186:	463a      	mov	r2, r7
 800c188:	1d39      	adds	r1, r7, #4
 800c18a:	f107 0308 	add.w	r3, r7, #8
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe ff2c 	bl	800afec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	9202      	str	r2, [sp, #8]
 800c19c:	9301      	str	r3, [sp, #4]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	460a      	mov	r2, r1
 800c1a6:	4920      	ldr	r1, [pc, #128]	; (800c228 <vTaskStartScheduler+0xb0>)
 800c1a8:	4820      	ldr	r0, [pc, #128]	; (800c22c <vTaskStartScheduler+0xb4>)
 800c1aa:	f7ff fd99 	bl	800bce0 <xTaskCreateStatic>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	4b1f      	ldr	r3, [pc, #124]	; (800c230 <vTaskStartScheduler+0xb8>)
 800c1b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1b4:	4b1e      	ldr	r3, [pc, #120]	; (800c230 <vTaskStartScheduler+0xb8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	e001      	b.n	800c1c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d102      	bne.n	800c1d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1cc:	f000 fce8 	bl	800cba0 <xTimerCreateTimerTask>
 800c1d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d115      	bne.n	800c204 <vTaskStartScheduler+0x8c>
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1ea:	4b12      	ldr	r3, [pc, #72]	; (800c234 <vTaskStartScheduler+0xbc>)
 800c1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1f2:	4b11      	ldr	r3, [pc, #68]	; (800c238 <vTaskStartScheduler+0xc0>)
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1f8:	4b10      	ldr	r3, [pc, #64]	; (800c23c <vTaskStartScheduler+0xc4>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1fe:	f001 f89f 	bl	800d340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c202:	e00d      	b.n	800c220 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d109      	bne.n	800c220 <vTaskStartScheduler+0xa8>
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	e7fe      	b.n	800c21e <vTaskStartScheduler+0xa6>
}
 800c220:	bf00      	nop
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0800e2d0 	.word	0x0800e2d0
 800c22c:	0800c841 	.word	0x0800c841
 800c230:	20000cb0 	.word	0x20000cb0
 800c234:	20000cac 	.word	0x20000cac
 800c238:	20000c98 	.word	0x20000c98
 800c23c:	20000c90 	.word	0x20000c90

0800c240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c240:	b480      	push	{r7}
 800c242:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <vTaskSuspendAll+0x18>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	4a03      	ldr	r2, [pc, #12]	; (800c258 <vTaskSuspendAll+0x18>)
 800c24c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c24e:	bf00      	nop
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	20000cb4 	.word	0x20000cb4

0800c25c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c266:	2300      	movs	r3, #0
 800c268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c26a:	4b41      	ldr	r3, [pc, #260]	; (800c370 <xTaskResumeAll+0x114>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d109      	bne.n	800c286 <xTaskResumeAll+0x2a>
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	e7fe      	b.n	800c284 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c286:	f001 f8f9 	bl	800d47c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c28a:	4b39      	ldr	r3, [pc, #228]	; (800c370 <xTaskResumeAll+0x114>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3b01      	subs	r3, #1
 800c290:	4a37      	ldr	r2, [pc, #220]	; (800c370 <xTaskResumeAll+0x114>)
 800c292:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c294:	4b36      	ldr	r3, [pc, #216]	; (800c370 <xTaskResumeAll+0x114>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d162      	bne.n	800c362 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c29c:	4b35      	ldr	r3, [pc, #212]	; (800c374 <xTaskResumeAll+0x118>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d05e      	beq.n	800c362 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2a4:	e02f      	b.n	800c306 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2a6:	4b34      	ldr	r3, [pc, #208]	; (800c378 <xTaskResumeAll+0x11c>)
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3318      	adds	r3, #24
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe ff58 	bl	800b168 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe ff53 	bl	800b168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c6:	4b2d      	ldr	r3, [pc, #180]	; (800c37c <xTaskResumeAll+0x120>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d903      	bls.n	800c2d6 <xTaskResumeAll+0x7a>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d2:	4a2a      	ldr	r2, [pc, #168]	; (800c37c <xTaskResumeAll+0x120>)
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4a27      	ldr	r2, [pc, #156]	; (800c380 <xTaskResumeAll+0x124>)
 800c2e4:	441a      	add	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	f7fe fede 	bl	800b0ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <xTaskResumeAll+0x128>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d302      	bcc.n	800c306 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c300:	4b21      	ldr	r3, [pc, #132]	; (800c388 <xTaskResumeAll+0x12c>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c306:	4b1c      	ldr	r3, [pc, #112]	; (800c378 <xTaskResumeAll+0x11c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1cb      	bne.n	800c2a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c314:	f000 fb46 	bl	800c9a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c318:	4b1c      	ldr	r3, [pc, #112]	; (800c38c <xTaskResumeAll+0x130>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d010      	beq.n	800c346 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c324:	f000 f846 	bl	800c3b4 <xTaskIncrementTick>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c32e:	4b16      	ldr	r3, [pc, #88]	; (800c388 <xTaskResumeAll+0x12c>)
 800c330:	2201      	movs	r2, #1
 800c332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3b01      	subs	r3, #1
 800c338:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1f1      	bne.n	800c324 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c340:	4b12      	ldr	r3, [pc, #72]	; (800c38c <xTaskResumeAll+0x130>)
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c346:	4b10      	ldr	r3, [pc, #64]	; (800c388 <xTaskResumeAll+0x12c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c34e:	2301      	movs	r3, #1
 800c350:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c352:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <xTaskResumeAll+0x134>)
 800c354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c362:	f001 f8b9 	bl	800d4d8 <vPortExitCritical>

	return xAlreadyYielded;
 800c366:	68bb      	ldr	r3, [r7, #8]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20000cb4 	.word	0x20000cb4
 800c374:	20000c8c 	.word	0x20000c8c
 800c378:	20000c4c 	.word	0x20000c4c
 800c37c:	20000c94 	.word	0x20000c94
 800c380:	200007bc 	.word	0x200007bc
 800c384:	200007b8 	.word	0x200007b8
 800c388:	20000ca0 	.word	0x20000ca0
 800c38c:	20000c9c 	.word	0x20000c9c
 800c390:	e000ed04 	.word	0xe000ed04

0800c394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <xTaskGetTickCount+0x1c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3a0:	687b      	ldr	r3, [r7, #4]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	20000c90 	.word	0x20000c90

0800c3b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3be:	4b4e      	ldr	r3, [pc, #312]	; (800c4f8 <xTaskIncrementTick+0x144>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f040 8088 	bne.w	800c4d8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3c8:	4b4c      	ldr	r3, [pc, #304]	; (800c4fc <xTaskIncrementTick+0x148>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3d0:	4a4a      	ldr	r2, [pc, #296]	; (800c4fc <xTaskIncrementTick+0x148>)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d11f      	bne.n	800c41c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3dc:	4b48      	ldr	r3, [pc, #288]	; (800c500 <xTaskIncrementTick+0x14c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d009      	beq.n	800c3fa <xTaskIncrementTick+0x46>
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	e7fe      	b.n	800c3f8 <xTaskIncrementTick+0x44>
 800c3fa:	4b41      	ldr	r3, [pc, #260]	; (800c500 <xTaskIncrementTick+0x14c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	4b40      	ldr	r3, [pc, #256]	; (800c504 <xTaskIncrementTick+0x150>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a3e      	ldr	r2, [pc, #248]	; (800c500 <xTaskIncrementTick+0x14c>)
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	4a3e      	ldr	r2, [pc, #248]	; (800c504 <xTaskIncrementTick+0x150>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	4b3e      	ldr	r3, [pc, #248]	; (800c508 <xTaskIncrementTick+0x154>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3301      	adds	r3, #1
 800c414:	4a3c      	ldr	r2, [pc, #240]	; (800c508 <xTaskIncrementTick+0x154>)
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	f000 fac4 	bl	800c9a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c41c:	4b3b      	ldr	r3, [pc, #236]	; (800c50c <xTaskIncrementTick+0x158>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d349      	bcc.n	800c4ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c426:	4b36      	ldr	r3, [pc, #216]	; (800c500 <xTaskIncrementTick+0x14c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d104      	bne.n	800c43a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c430:	4b36      	ldr	r3, [pc, #216]	; (800c50c <xTaskIncrementTick+0x158>)
 800c432:	f04f 32ff 	mov.w	r2, #4294967295
 800c436:	601a      	str	r2, [r3, #0]
					break;
 800c438:	e03f      	b.n	800c4ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43a:	4b31      	ldr	r3, [pc, #196]	; (800c500 <xTaskIncrementTick+0x14c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d203      	bcs.n	800c45a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c452:	4a2e      	ldr	r2, [pc, #184]	; (800c50c <xTaskIncrementTick+0x158>)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c458:	e02f      	b.n	800c4ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fe82 	bl	800b168 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d004      	beq.n	800c476 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	3318      	adds	r3, #24
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe fe79 	bl	800b168 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	4b25      	ldr	r3, [pc, #148]	; (800c510 <xTaskIncrementTick+0x15c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d903      	bls.n	800c48a <xTaskIncrementTick+0xd6>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	4a22      	ldr	r2, [pc, #136]	; (800c510 <xTaskIncrementTick+0x15c>)
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4a1f      	ldr	r2, [pc, #124]	; (800c514 <xTaskIncrementTick+0x160>)
 800c498:	441a      	add	r2, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	3304      	adds	r3, #4
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7fe fe04 	bl	800b0ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	; (800c518 <xTaskIncrementTick+0x164>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d3b8      	bcc.n	800c426 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b8:	e7b5      	b.n	800c426 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4ba:	4b17      	ldr	r3, [pc, #92]	; (800c518 <xTaskIncrementTick+0x164>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4914      	ldr	r1, [pc, #80]	; (800c514 <xTaskIncrementTick+0x160>)
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d907      	bls.n	800c4e2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	e004      	b.n	800c4e2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <xTaskIncrementTick+0x168>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	4a0f      	ldr	r2, [pc, #60]	; (800c51c <xTaskIncrementTick+0x168>)
 800c4e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	; (800c520 <xTaskIncrementTick+0x16c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c4ee:	697b      	ldr	r3, [r7, #20]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20000cb4 	.word	0x20000cb4
 800c4fc:	20000c90 	.word	0x20000c90
 800c500:	20000c44 	.word	0x20000c44
 800c504:	20000c48 	.word	0x20000c48
 800c508:	20000ca4 	.word	0x20000ca4
 800c50c:	20000cac 	.word	0x20000cac
 800c510:	20000c94 	.word	0x20000c94
 800c514:	200007bc 	.word	0x200007bc
 800c518:	200007b8 	.word	0x200007b8
 800c51c:	20000c9c 	.word	0x20000c9c
 800c520:	20000ca0 	.word	0x20000ca0

0800c524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c52a:	4b27      	ldr	r3, [pc, #156]	; (800c5c8 <vTaskSwitchContext+0xa4>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c532:	4b26      	ldr	r3, [pc, #152]	; (800c5cc <vTaskSwitchContext+0xa8>)
 800c534:	2201      	movs	r2, #1
 800c536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c538:	e040      	b.n	800c5bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c53a:	4b24      	ldr	r3, [pc, #144]	; (800c5cc <vTaskSwitchContext+0xa8>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c540:	4b23      	ldr	r3, [pc, #140]	; (800c5d0 <vTaskSwitchContext+0xac>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e00f      	b.n	800c568 <vTaskSwitchContext+0x44>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d109      	bne.n	800c562 <vTaskSwitchContext+0x3e>
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
 800c560:	e7fe      	b.n	800c560 <vTaskSwitchContext+0x3c>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	3b01      	subs	r3, #1
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	491a      	ldr	r1, [pc, #104]	; (800c5d4 <vTaskSwitchContext+0xb0>)
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0e5      	beq.n	800c548 <vTaskSwitchContext+0x24>
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4a13      	ldr	r2, [pc, #76]	; (800c5d4 <vTaskSwitchContext+0xb0>)
 800c588:	4413      	add	r3, r2
 800c58a:	60bb      	str	r3, [r7, #8]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	685a      	ldr	r2, [r3, #4]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	605a      	str	r2, [r3, #4]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	3308      	adds	r3, #8
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d104      	bne.n	800c5ac <vTaskSwitchContext+0x88>
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	605a      	str	r2, [r3, #4]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	4a09      	ldr	r2, [pc, #36]	; (800c5d8 <vTaskSwitchContext+0xb4>)
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <vTaskSwitchContext+0xac>)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6013      	str	r3, [r2, #0]
}
 800c5bc:	bf00      	nop
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	20000cb4 	.word	0x20000cb4
 800c5cc:	20000ca0 	.word	0x20000ca0
 800c5d0:	20000c94 	.word	0x20000c94
 800c5d4:	200007bc 	.word	0x200007bc
 800c5d8:	200007b8 	.word	0x200007b8

0800c5dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d109      	bne.n	800c600 <vTaskPlaceOnEventList+0x24>
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e7fe      	b.n	800c5fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c600:	4b07      	ldr	r3, [pc, #28]	; (800c620 <vTaskPlaceOnEventList+0x44>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3318      	adds	r3, #24
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7fe fd74 	bl	800b0f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c60e:	2101      	movs	r1, #1
 800c610:	6838      	ldr	r0, [r7, #0]
 800c612:	f000 fa71 	bl	800caf8 <prvAddCurrentTaskToDelayedList>
}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	200007b8 	.word	0x200007b8

0800c624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d109      	bne.n	800c64a <vTaskPlaceOnEventListRestricted+0x26>
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	e7fe      	b.n	800c648 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c64a:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <vTaskPlaceOnEventListRestricted+0x50>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3318      	adds	r3, #24
 800c650:	4619      	mov	r1, r3
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7fe fd2b 	bl	800b0ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
 800c662:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	68b8      	ldr	r0, [r7, #8]
 800c668:	f000 fa46 	bl	800caf8 <prvAddCurrentTaskToDelayedList>
	}
 800c66c:	bf00      	nop
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	200007b8 	.word	0x200007b8

0800c678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d109      	bne.n	800c6a2 <xTaskRemoveFromEventList+0x2a>
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	e7fe      	b.n	800c6a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	3318      	adds	r3, #24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fd5e 	bl	800b168 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	; (800c724 <xTaskRemoveFromEventList+0xac>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d11d      	bne.n	800c6f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fd55 	bl	800b168 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c2:	4b19      	ldr	r3, [pc, #100]	; (800c728 <xTaskRemoveFromEventList+0xb0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d903      	bls.n	800c6d2 <xTaskRemoveFromEventList+0x5a>
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	4a16      	ldr	r2, [pc, #88]	; (800c728 <xTaskRemoveFromEventList+0xb0>)
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4a13      	ldr	r2, [pc, #76]	; (800c72c <xTaskRemoveFromEventList+0xb4>)
 800c6e0:	441a      	add	r2, r3
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	f7fe fce0 	bl	800b0ae <vListInsertEnd>
 800c6ee:	e005      	b.n	800c6fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	3318      	adds	r3, #24
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	480e      	ldr	r0, [pc, #56]	; (800c730 <xTaskRemoveFromEventList+0xb8>)
 800c6f8:	f7fe fcd9 	bl	800b0ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c700:	4b0c      	ldr	r3, [pc, #48]	; (800c734 <xTaskRemoveFromEventList+0xbc>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c706:	429a      	cmp	r2, r3
 800c708:	d905      	bls.n	800c716 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c70a:	2301      	movs	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c70e:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <xTaskRemoveFromEventList+0xc0>)
 800c710:	2201      	movs	r2, #1
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	e001      	b.n	800c71a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c71a:	697b      	ldr	r3, [r7, #20]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000cb4 	.word	0x20000cb4
 800c728:	20000c94 	.word	0x20000c94
 800c72c:	200007bc 	.word	0x200007bc
 800c730:	20000c4c 	.word	0x20000c4c
 800c734:	200007b8 	.word	0x200007b8
 800c738:	20000ca0 	.word	0x20000ca0

0800c73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c744:	4b06      	ldr	r3, [pc, #24]	; (800c760 <vTaskInternalSetTimeOutState+0x24>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <vTaskInternalSetTimeOutState+0x28>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	605a      	str	r2, [r3, #4]
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	20000ca4 	.word	0x20000ca4
 800c764:	20000c90 	.word	0x20000c90

0800c768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b088      	sub	sp, #32
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d109      	bne.n	800c78c <xTaskCheckForTimeOut+0x24>
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	613b      	str	r3, [r7, #16]
 800c78a:	e7fe      	b.n	800c78a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <xTaskCheckForTimeOut+0x3e>
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e7fe      	b.n	800c7a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c7a6:	f000 fe69 	bl	800d47c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7aa:	4b1d      	ldr	r3, [pc, #116]	; (800c820 <xTaskCheckForTimeOut+0xb8>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	69ba      	ldr	r2, [r7, #24]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d102      	bne.n	800c7ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]
 800c7c8:	e023      	b.n	800c812 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	4b15      	ldr	r3, [pc, #84]	; (800c824 <xTaskCheckForTimeOut+0xbc>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d007      	beq.n	800c7e6 <xTaskCheckForTimeOut+0x7e>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d302      	bcc.n	800c7e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	e015      	b.n	800c812 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d20b      	bcs.n	800c808 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ff9d 	bl	800c73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c802:	2300      	movs	r3, #0
 800c804:	61fb      	str	r3, [r7, #28]
 800c806:	e004      	b.n	800c812 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c80e:	2301      	movs	r3, #1
 800c810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c812:	f000 fe61 	bl	800d4d8 <vPortExitCritical>

	return xReturn;
 800c816:	69fb      	ldr	r3, [r7, #28]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3720      	adds	r7, #32
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20000c90 	.word	0x20000c90
 800c824:	20000ca4 	.word	0x20000ca4

0800c828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c82c:	4b03      	ldr	r3, [pc, #12]	; (800c83c <vTaskMissedYield+0x14>)
 800c82e:	2201      	movs	r2, #1
 800c830:	601a      	str	r2, [r3, #0]
}
 800c832:	bf00      	nop
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	20000ca0 	.word	0x20000ca0

0800c840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c848:	f000 f852 	bl	800c8f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c84c:	4b06      	ldr	r3, [pc, #24]	; (800c868 <prvIdleTask+0x28>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d9f9      	bls.n	800c848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <prvIdleTask+0x2c>)
 800c856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c864:	e7f0      	b.n	800c848 <prvIdleTask+0x8>
 800c866:	bf00      	nop
 800c868:	200007bc 	.word	0x200007bc
 800c86c:	e000ed04 	.word	0xe000ed04

0800c870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c876:	2300      	movs	r3, #0
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	e00c      	b.n	800c896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	4613      	mov	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4413      	add	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4a12      	ldr	r2, [pc, #72]	; (800c8d0 <prvInitialiseTaskLists+0x60>)
 800c888:	4413      	add	r3, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fbe2 	bl	800b054 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3301      	adds	r3, #1
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b37      	cmp	r3, #55	; 0x37
 800c89a:	d9ef      	bls.n	800c87c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c89c:	480d      	ldr	r0, [pc, #52]	; (800c8d4 <prvInitialiseTaskLists+0x64>)
 800c89e:	f7fe fbd9 	bl	800b054 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8a2:	480d      	ldr	r0, [pc, #52]	; (800c8d8 <prvInitialiseTaskLists+0x68>)
 800c8a4:	f7fe fbd6 	bl	800b054 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8a8:	480c      	ldr	r0, [pc, #48]	; (800c8dc <prvInitialiseTaskLists+0x6c>)
 800c8aa:	f7fe fbd3 	bl	800b054 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8ae:	480c      	ldr	r0, [pc, #48]	; (800c8e0 <prvInitialiseTaskLists+0x70>)
 800c8b0:	f7fe fbd0 	bl	800b054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8b4:	480b      	ldr	r0, [pc, #44]	; (800c8e4 <prvInitialiseTaskLists+0x74>)
 800c8b6:	f7fe fbcd 	bl	800b054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <prvInitialiseTaskLists+0x78>)
 800c8bc:	4a05      	ldr	r2, [pc, #20]	; (800c8d4 <prvInitialiseTaskLists+0x64>)
 800c8be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8c0:	4b0a      	ldr	r3, [pc, #40]	; (800c8ec <prvInitialiseTaskLists+0x7c>)
 800c8c2:	4a05      	ldr	r2, [pc, #20]	; (800c8d8 <prvInitialiseTaskLists+0x68>)
 800c8c4:	601a      	str	r2, [r3, #0]
}
 800c8c6:	bf00      	nop
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	200007bc 	.word	0x200007bc
 800c8d4:	20000c1c 	.word	0x20000c1c
 800c8d8:	20000c30 	.word	0x20000c30
 800c8dc:	20000c4c 	.word	0x20000c4c
 800c8e0:	20000c60 	.word	0x20000c60
 800c8e4:	20000c78 	.word	0x20000c78
 800c8e8:	20000c44 	.word	0x20000c44
 800c8ec:	20000c48 	.word	0x20000c48

0800c8f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8f6:	e019      	b.n	800c92c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8f8:	f000 fdc0 	bl	800d47c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8fc:	4b0f      	ldr	r3, [pc, #60]	; (800c93c <prvCheckTasksWaitingTermination+0x4c>)
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3304      	adds	r3, #4
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe fc2d 	bl	800b168 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c90e:	4b0c      	ldr	r3, [pc, #48]	; (800c940 <prvCheckTasksWaitingTermination+0x50>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3b01      	subs	r3, #1
 800c914:	4a0a      	ldr	r2, [pc, #40]	; (800c940 <prvCheckTasksWaitingTermination+0x50>)
 800c916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c918:	4b0a      	ldr	r3, [pc, #40]	; (800c944 <prvCheckTasksWaitingTermination+0x54>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	4a09      	ldr	r2, [pc, #36]	; (800c944 <prvCheckTasksWaitingTermination+0x54>)
 800c920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c922:	f000 fdd9 	bl	800d4d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f80e 	bl	800c948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c92c:	4b05      	ldr	r3, [pc, #20]	; (800c944 <prvCheckTasksWaitingTermination+0x54>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e1      	bne.n	800c8f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000c60 	.word	0x20000c60
 800c940:	20000c8c 	.word	0x20000c8c
 800c944:	20000c74 	.word	0x20000c74

0800c948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c956:	2b00      	cmp	r3, #0
 800c958:	d108      	bne.n	800c96c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 ff68 	bl	800d834 <vPortFree>
				vPortFree( pxTCB );
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 ff65 	bl	800d834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c96a:	e017      	b.n	800c99c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c972:	2b01      	cmp	r3, #1
 800c974:	d103      	bne.n	800c97e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 ff5c 	bl	800d834 <vPortFree>
	}
 800c97c:	e00e      	b.n	800c99c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c984:	2b02      	cmp	r3, #2
 800c986:	d009      	beq.n	800c99c <prvDeleteTCB+0x54>
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	e7fe      	b.n	800c99a <prvDeleteTCB+0x52>
	}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9aa:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <prvResetNextTaskUnblockTime+0x38>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9bc:	e008      	b.n	800c9d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9be:	4b07      	ldr	r3, [pc, #28]	; (800c9dc <prvResetNextTaskUnblockTime+0x38>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c9ce:	6013      	str	r3, [r2, #0]
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	20000c44 	.word	0x20000c44
 800c9e0:	20000cac 	.word	0x20000cac

0800c9e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <xTaskGetSchedulerState+0x34>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	607b      	str	r3, [r7, #4]
 800c9f6:	e008      	b.n	800ca0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9f8:	4b08      	ldr	r3, [pc, #32]	; (800ca1c <xTaskGetSchedulerState+0x38>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca00:	2302      	movs	r3, #2
 800ca02:	607b      	str	r3, [r7, #4]
 800ca04:	e001      	b.n	800ca0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca06:	2300      	movs	r3, #0
 800ca08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca0a:	687b      	ldr	r3, [r7, #4]
	}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20000c98 	.word	0x20000c98
 800ca1c:	20000cb4 	.word	0x20000cb4

0800ca20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d054      	beq.n	800cae0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca36:	4b2d      	ldr	r3, [pc, #180]	; (800caec <xTaskPriorityDisinherit+0xcc>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d009      	beq.n	800ca54 <xTaskPriorityDisinherit+0x34>
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	e7fe      	b.n	800ca52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d109      	bne.n	800ca70 <xTaskPriorityDisinherit+0x50>
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	60bb      	str	r3, [r7, #8]
 800ca6e:	e7fe      	b.n	800ca6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca74:	1e5a      	subs	r2, r3, #1
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d02c      	beq.n	800cae0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d128      	bne.n	800cae0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	3304      	adds	r3, #4
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fb68 	bl	800b168 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab0:	4b0f      	ldr	r3, [pc, #60]	; (800caf0 <xTaskPriorityDisinherit+0xd0>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d903      	bls.n	800cac0 <xTaskPriorityDisinherit+0xa0>
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	4a0c      	ldr	r2, [pc, #48]	; (800caf0 <xTaskPriorityDisinherit+0xd0>)
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4a09      	ldr	r2, [pc, #36]	; (800caf4 <xTaskPriorityDisinherit+0xd4>)
 800cace:	441a      	add	r2, r3
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	3304      	adds	r3, #4
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f7fe fae9 	bl	800b0ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cadc:	2301      	movs	r3, #1
 800cade:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cae0:	697b      	ldr	r3, [r7, #20]
	}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	200007b8 	.word	0x200007b8
 800caf0:	20000c94 	.word	0x20000c94
 800caf4:	200007bc 	.word	0x200007bc

0800caf8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb02:	4b21      	ldr	r3, [pc, #132]	; (800cb88 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb08:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fb2a 	bl	800b168 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d10a      	bne.n	800cb32 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb22:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3304      	adds	r3, #4
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4819      	ldr	r0, [pc, #100]	; (800cb90 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb2c:	f7fe fabf 	bl	800b0ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb30:	e026      	b.n	800cb80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4413      	add	r3, r2
 800cb38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb3a:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d209      	bcs.n	800cb5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb4a:	4b12      	ldr	r3, [pc, #72]	; (800cb94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3304      	adds	r3, #4
 800cb54:	4619      	mov	r1, r3
 800cb56:	4610      	mov	r0, r2
 800cb58:	f7fe facd 	bl	800b0f6 <vListInsert>
}
 800cb5c:	e010      	b.n	800cb80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb5e:	4b0e      	ldr	r3, [pc, #56]	; (800cb98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3304      	adds	r3, #4
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	f7fe fac3 	bl	800b0f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb70:	4b0a      	ldr	r3, [pc, #40]	; (800cb9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d202      	bcs.n	800cb80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb7a:	4a08      	ldr	r2, [pc, #32]	; (800cb9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	6013      	str	r3, [r2, #0]
}
 800cb80:	bf00      	nop
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	20000c90 	.word	0x20000c90
 800cb8c:	200007b8 	.word	0x200007b8
 800cb90:	20000c78 	.word	0x20000c78
 800cb94:	20000c48 	.word	0x20000c48
 800cb98:	20000c44 	.word	0x20000c44
 800cb9c:	20000cac 	.word	0x20000cac

0800cba0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08a      	sub	sp, #40	; 0x28
 800cba4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbaa:	f000 faff 	bl	800d1ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cbae:	4b1c      	ldr	r3, [pc, #112]	; (800cc20 <xTimerCreateTimerTask+0x80>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d021      	beq.n	800cbfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cbbe:	1d3a      	adds	r2, r7, #4
 800cbc0:	f107 0108 	add.w	r1, r7, #8
 800cbc4:	f107 030c 	add.w	r3, r7, #12
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fa29 	bl	800b020 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	9202      	str	r2, [sp, #8]
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	2302      	movs	r3, #2
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	460a      	mov	r2, r1
 800cbe0:	4910      	ldr	r1, [pc, #64]	; (800cc24 <xTimerCreateTimerTask+0x84>)
 800cbe2:	4811      	ldr	r0, [pc, #68]	; (800cc28 <xTimerCreateTimerTask+0x88>)
 800cbe4:	f7ff f87c 	bl	800bce0 <xTaskCreateStatic>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	4b10      	ldr	r3, [pc, #64]	; (800cc2c <xTimerCreateTimerTask+0x8c>)
 800cbec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbee:	4b0f      	ldr	r3, [pc, #60]	; (800cc2c <xTimerCreateTimerTask+0x8c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d109      	bne.n	800cc14 <xTimerCreateTimerTask+0x74>
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	613b      	str	r3, [r7, #16]
 800cc12:	e7fe      	b.n	800cc12 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800cc14:	697b      	ldr	r3, [r7, #20]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20000ce8 	.word	0x20000ce8
 800cc24:	0800e2d8 	.word	0x0800e2d8
 800cc28:	0800cd61 	.word	0x0800cd61
 800cc2c:	20000cec 	.word	0x20000cec

0800cc30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d109      	bne.n	800cc5c <xTimerGenericCommand+0x2c>
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	623b      	str	r3, [r7, #32]
 800cc5a:	e7fe      	b.n	800cc5a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc5c:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <xTimerGenericCommand+0x94>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d02a      	beq.n	800ccba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b05      	cmp	r3, #5
 800cc74:	dc18      	bgt.n	800cca8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc76:	f7ff feb5 	bl	800c9e4 <xTaskGetSchedulerState>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d109      	bne.n	800cc94 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc80:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <xTimerGenericCommand+0x94>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	f107 0110 	add.w	r1, r7, #16
 800cc88:	2300      	movs	r3, #0
 800cc8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc8c:	f7fe fbd4 	bl	800b438 <xQueueGenericSend>
 800cc90:	6278      	str	r0, [r7, #36]	; 0x24
 800cc92:	e012      	b.n	800ccba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc94:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <xTimerGenericCommand+0x94>)
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	f107 0110 	add.w	r1, r7, #16
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f7fe fbca 	bl	800b438 <xQueueGenericSend>
 800cca4:	6278      	str	r0, [r7, #36]	; 0x24
 800cca6:	e008      	b.n	800ccba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cca8:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <xTimerGenericCommand+0x94>)
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	f107 0110 	add.w	r1, r7, #16
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	f7fe fcba 	bl	800b62c <xQueueGenericSendFromISR>
 800ccb8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3728      	adds	r7, #40	; 0x28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20000ce8 	.word	0x20000ce8

0800ccc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd2:	4b22      	ldr	r3, [pc, #136]	; (800cd5c <prvProcessExpiredTimer+0x94>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fa41 	bl	800b168 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d021      	beq.n	800cd38 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	699a      	ldr	r2, [r3, #24]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	18d1      	adds	r1, r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	6978      	ldr	r0, [r7, #20]
 800cd02:	f000 f8d1 	bl	800cea8 <prvInsertTimerInActiveList>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01e      	beq.n	800cd4a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2300      	movs	r3, #0
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	2100      	movs	r1, #0
 800cd16:	6978      	ldr	r0, [r7, #20]
 800cd18:	f7ff ff8a 	bl	800cc30 <xTimerGenericCommand>
 800cd1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d112      	bne.n	800cd4a <prvProcessExpiredTimer+0x82>
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e7fe      	b.n	800cd36 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd3e:	f023 0301 	bic.w	r3, r3, #1
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	6978      	ldr	r0, [r7, #20]
 800cd50:	4798      	blx	r3
}
 800cd52:	bf00      	nop
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20000ce0 	.word	0x20000ce0

0800cd60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd68:	f107 0308 	add.w	r3, r7, #8
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f857 	bl	800ce20 <prvGetNextExpireTime>
 800cd72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	4619      	mov	r1, r3
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 f803 	bl	800cd84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd7e:	f000 f8d5 	bl	800cf2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd82:	e7f1      	b.n	800cd68 <prvTimerTask+0x8>

0800cd84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd8e:	f7ff fa57 	bl	800c240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f866 	bl	800ce68 <prvSampleTimeNow>
 800cd9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d130      	bne.n	800ce06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <prvProcessTimerOrBlockTask+0x3c>
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d806      	bhi.n	800cdc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdb2:	f7ff fa53 	bl	800c25c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cdb6:	68f9      	ldr	r1, [r7, #12]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff ff85 	bl	800ccc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cdbe:	e024      	b.n	800ce0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d008      	beq.n	800cdd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cdc6:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <prvProcessTimerOrBlockTask+0x90>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <prvProcessTimerOrBlockTask+0x50>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e000      	b.n	800cdd6 <prvProcessTimerOrBlockTask+0x52>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <prvProcessTimerOrBlockTask+0x94>)
 800cdda:	6818      	ldr	r0, [r3, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f7fe ff47 	bl	800bc78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdea:	f7ff fa37 	bl	800c25c <xTaskResumeAll>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <prvProcessTimerOrBlockTask+0x98>)
 800cdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	f3bf 8f6f 	isb	sy
}
 800ce04:	e001      	b.n	800ce0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce06:	f7ff fa29 	bl	800c25c <xTaskResumeAll>
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20000ce4 	.word	0x20000ce4
 800ce18:	20000ce8 	.word	0x20000ce8
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce28:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <prvGetNextExpireTime+0x44>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <prvGetNextExpireTime+0x16>
 800ce32:	2201      	movs	r2, #1
 800ce34:	e000      	b.n	800ce38 <prvGetNextExpireTime+0x18>
 800ce36:	2200      	movs	r2, #0
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d105      	bne.n	800ce50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce44:	4b07      	ldr	r3, [pc, #28]	; (800ce64 <prvGetNextExpireTime+0x44>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	e001      	b.n	800ce54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce54:	68fb      	ldr	r3, [r7, #12]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20000ce0 	.word	0x20000ce0

0800ce68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce70:	f7ff fa90 	bl	800c394 <xTaskGetTickCount>
 800ce74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce76:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <prvSampleTimeNow+0x3c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d205      	bcs.n	800ce8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce80:	f000 f930 	bl	800d0e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	e002      	b.n	800ce92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce92:	4a04      	ldr	r2, [pc, #16]	; (800cea4 <prvSampleTimeNow+0x3c>)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce98:	68fb      	ldr	r3, [r7, #12]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20000cf0 	.word	0x20000cf0

0800cea8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d812      	bhi.n	800cef4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d302      	bcc.n	800cee2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cedc:	2301      	movs	r3, #1
 800cede:	617b      	str	r3, [r7, #20]
 800cee0:	e01b      	b.n	800cf1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cee2:	4b10      	ldr	r3, [pc, #64]	; (800cf24 <prvInsertTimerInActiveList+0x7c>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3304      	adds	r3, #4
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	f7fe f902 	bl	800b0f6 <vListInsert>
 800cef2:	e012      	b.n	800cf1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d206      	bcs.n	800cf0a <prvInsertTimerInActiveList+0x62>
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d302      	bcc.n	800cf0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e007      	b.n	800cf1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <prvInsertTimerInActiveList+0x80>)
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3304      	adds	r3, #4
 800cf12:	4619      	mov	r1, r3
 800cf14:	4610      	mov	r0, r2
 800cf16:	f7fe f8ee 	bl	800b0f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf1a:	697b      	ldr	r3, [r7, #20]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20000ce4 	.word	0x20000ce4
 800cf28:	20000ce0 	.word	0x20000ce0

0800cf2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08e      	sub	sp, #56	; 0x38
 800cf30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf32:	e0c6      	b.n	800d0c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da17      	bge.n	800cf6a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf3a:	1d3b      	adds	r3, r7, #4
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d109      	bne.n	800cf5a <prvProcessReceivedCommands+0x2e>
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	61fb      	str	r3, [r7, #28]
 800cf58:	e7fe      	b.n	800cf58 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf60:	6850      	ldr	r0, [r2, #4]
 800cf62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf64:	6892      	ldr	r2, [r2, #8]
 800cf66:	4611      	mov	r1, r2
 800cf68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f2c0 80a7 	blt.w	800d0c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d004      	beq.n	800cf88 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe f8f0 	bl	800b168 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf88:	463b      	mov	r3, r7
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff ff6c 	bl	800ce68 <prvSampleTimeNow>
 800cf90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	f200 8094 	bhi.w	800d0c2 <prvProcessReceivedCommands+0x196>
 800cf9a:	a201      	add	r2, pc, #4	; (adr r2, 800cfa0 <prvProcessReceivedCommands+0x74>)
 800cf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa0:	0800cfc9 	.word	0x0800cfc9
 800cfa4:	0800cfc9 	.word	0x0800cfc9
 800cfa8:	0800cfc9 	.word	0x0800cfc9
 800cfac:	0800d03b 	.word	0x0800d03b
 800cfb0:	0800d04f 	.word	0x0800d04f
 800cfb4:	0800d097 	.word	0x0800d097
 800cfb8:	0800cfc9 	.word	0x0800cfc9
 800cfbc:	0800cfc9 	.word	0x0800cfc9
 800cfc0:	0800d03b 	.word	0x0800d03b
 800cfc4:	0800d04f 	.word	0x0800d04f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfce:	f043 0301 	orr.w	r3, r3, #1
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	18d1      	adds	r1, r2, r3
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe8:	f7ff ff5e 	bl	800cea8 <prvInsertTimerInActiveList>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d067      	beq.n	800d0c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05c      	beq.n	800d0c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	441a      	add	r2, r3
 800d010:	2300      	movs	r3, #0
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	2300      	movs	r3, #0
 800d016:	2100      	movs	r1, #0
 800d018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d01a:	f7ff fe09 	bl	800cc30 <xTimerGenericCommand>
 800d01e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d14d      	bne.n	800d0c2 <prvProcessReceivedCommands+0x196>
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	61bb      	str	r3, [r7, #24]
 800d038:	e7fe      	b.n	800d038 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d040:	f023 0301 	bic.w	r3, r3, #1
 800d044:	b2da      	uxtb	r2, r3
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d04c:	e039      	b.n	800d0c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d054:	f043 0301 	orr.w	r3, r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d064:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <prvProcessReceivedCommands+0x156>
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
 800d080:	e7fe      	b.n	800d080 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d084:	699a      	ldr	r2, [r3, #24]
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	18d1      	adds	r1, r2, r3
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d090:	f7ff ff0a 	bl	800cea8 <prvInsertTimerInActiveList>
					break;
 800d094:	e015      	b.n	800d0c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d09c:	f003 0302 	and.w	r3, r3, #2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0a6:	f000 fbc5 	bl	800d834 <vPortFree>
 800d0aa:	e00a      	b.n	800d0c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0be:	e000      	b.n	800d0c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d0c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0c2:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <prvProcessReceivedCommands+0x1b4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	1d39      	adds	r1, r7, #4
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fe fb42 	bl	800b754 <xQueueReceive>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f47f af2e 	bne.w	800cf34 <prvProcessReceivedCommands+0x8>
	}
}
 800d0d8:	bf00      	nop
 800d0da:	3730      	adds	r7, #48	; 0x30
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20000ce8 	.word	0x20000ce8

0800d0e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b088      	sub	sp, #32
 800d0e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0ea:	e047      	b.n	800d17c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0ec:	4b2d      	ldr	r3, [pc, #180]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f6:	4b2b      	ldr	r3, [pc, #172]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3304      	adds	r3, #4
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe f82f 	bl	800b168 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d02d      	beq.n	800d17c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	4413      	add	r3, r2
 800d128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d90e      	bls.n	800d150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d13e:	4b19      	ldr	r3, [pc, #100]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3304      	adds	r3, #4
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f7fd ffd4 	bl	800b0f6 <vListInsert>
 800d14e:	e015      	b.n	800d17c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d150:	2300      	movs	r3, #0
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	2300      	movs	r3, #0
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	2100      	movs	r1, #0
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f7ff fd68 	bl	800cc30 <xTimerGenericCommand>
 800d160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d109      	bne.n	800d17c <prvSwitchTimerLists+0x98>
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	e7fe      	b.n	800d17a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1b2      	bne.n	800d0ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d186:	4b07      	ldr	r3, [pc, #28]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d18c:	4b06      	ldr	r3, [pc, #24]	; (800d1a8 <prvSwitchTimerLists+0xc4>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a04      	ldr	r2, [pc, #16]	; (800d1a4 <prvSwitchTimerLists+0xc0>)
 800d192:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d194:	4a04      	ldr	r2, [pc, #16]	; (800d1a8 <prvSwitchTimerLists+0xc4>)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	6013      	str	r3, [r2, #0]
}
 800d19a:	bf00      	nop
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20000ce0 	.word	0x20000ce0
 800d1a8:	20000ce4 	.word	0x20000ce4

0800d1ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d1b2:	f000 f963 	bl	800d47c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d1b6:	4b15      	ldr	r3, [pc, #84]	; (800d20c <prvCheckForValidListAndQueue+0x60>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d120      	bne.n	800d200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d1be:	4814      	ldr	r0, [pc, #80]	; (800d210 <prvCheckForValidListAndQueue+0x64>)
 800d1c0:	f7fd ff48 	bl	800b054 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1c4:	4813      	ldr	r0, [pc, #76]	; (800d214 <prvCheckForValidListAndQueue+0x68>)
 800d1c6:	f7fd ff45 	bl	800b054 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1ca:	4b13      	ldr	r3, [pc, #76]	; (800d218 <prvCheckForValidListAndQueue+0x6c>)
 800d1cc:	4a10      	ldr	r2, [pc, #64]	; (800d210 <prvCheckForValidListAndQueue+0x64>)
 800d1ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1d0:	4b12      	ldr	r3, [pc, #72]	; (800d21c <prvCheckForValidListAndQueue+0x70>)
 800d1d2:	4a10      	ldr	r2, [pc, #64]	; (800d214 <prvCheckForValidListAndQueue+0x68>)
 800d1d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	4b11      	ldr	r3, [pc, #68]	; (800d220 <prvCheckForValidListAndQueue+0x74>)
 800d1dc:	4a11      	ldr	r2, [pc, #68]	; (800d224 <prvCheckForValidListAndQueue+0x78>)
 800d1de:	2110      	movs	r1, #16
 800d1e0:	200a      	movs	r0, #10
 800d1e2:	f7fe f853 	bl	800b28c <xQueueGenericCreateStatic>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	4b08      	ldr	r3, [pc, #32]	; (800d20c <prvCheckForValidListAndQueue+0x60>)
 800d1ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1ec:	4b07      	ldr	r3, [pc, #28]	; (800d20c <prvCheckForValidListAndQueue+0x60>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d005      	beq.n	800d200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <prvCheckForValidListAndQueue+0x60>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	490b      	ldr	r1, [pc, #44]	; (800d228 <prvCheckForValidListAndQueue+0x7c>)
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fd14 	bl	800bc28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d200:	f000 f96a 	bl	800d4d8 <vPortExitCritical>
}
 800d204:	bf00      	nop
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	20000ce8 	.word	0x20000ce8
 800d210:	20000cb8 	.word	0x20000cb8
 800d214:	20000ccc 	.word	0x20000ccc
 800d218:	20000ce0 	.word	0x20000ce0
 800d21c:	20000ce4 	.word	0x20000ce4
 800d220:	20000d94 	.word	0x20000d94
 800d224:	20000cf4 	.word	0x20000cf4
 800d228:	0800e2e0 	.word	0x0800e2e0

0800d22c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	3b04      	subs	r3, #4
 800d23c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3b04      	subs	r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	f023 0201 	bic.w	r2, r3, #1
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	3b04      	subs	r3, #4
 800d25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d25c:	4a0c      	ldr	r2, [pc, #48]	; (800d290 <pxPortInitialiseStack+0x64>)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	3b14      	subs	r3, #20
 800d266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3b04      	subs	r3, #4
 800d272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f06f 0202 	mvn.w	r2, #2
 800d27a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	3b20      	subs	r3, #32
 800d280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d282:	68fb      	ldr	r3, [r7, #12]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	0800d295 	.word	0x0800d295

0800d294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d29e:	4b11      	ldr	r3, [pc, #68]	; (800d2e4 <prvTaskExitError+0x50>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d009      	beq.n	800d2bc <prvTaskExitError+0x28>
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	e7fe      	b.n	800d2ba <prvTaskExitError+0x26>
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2ce:	bf00      	nop
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0fc      	beq.n	800d2d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	2000002c 	.word	0x2000002c
	...

0800d2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2f0:	4b07      	ldr	r3, [pc, #28]	; (800d310 <pxCurrentTCBConst2>)
 800d2f2:	6819      	ldr	r1, [r3, #0]
 800d2f4:	6808      	ldr	r0, [r1, #0]
 800d2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fa:	f380 8809 	msr	PSP, r0
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8811 	msr	BASEPRI, r0
 800d30a:	4770      	bx	lr
 800d30c:	f3af 8000 	nop.w

0800d310 <pxCurrentTCBConst2>:
 800d310:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d314:	bf00      	nop
 800d316:	bf00      	nop

0800d318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d318:	4808      	ldr	r0, [pc, #32]	; (800d33c <prvPortStartFirstTask+0x24>)
 800d31a:	6800      	ldr	r0, [r0, #0]
 800d31c:	6800      	ldr	r0, [r0, #0]
 800d31e:	f380 8808 	msr	MSP, r0
 800d322:	f04f 0000 	mov.w	r0, #0
 800d326:	f380 8814 	msr	CONTROL, r0
 800d32a:	b662      	cpsie	i
 800d32c:	b661      	cpsie	f
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	df00      	svc	0
 800d338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d33a:	bf00      	nop
 800d33c:	e000ed08 	.word	0xe000ed08

0800d340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d346:	4b44      	ldr	r3, [pc, #272]	; (800d458 <xPortStartScheduler+0x118>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a44      	ldr	r2, [pc, #272]	; (800d45c <xPortStartScheduler+0x11c>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d109      	bne.n	800d364 <xPortStartScheduler+0x24>
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	613b      	str	r3, [r7, #16]
 800d362:	e7fe      	b.n	800d362 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d364:	4b3c      	ldr	r3, [pc, #240]	; (800d458 <xPortStartScheduler+0x118>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a3d      	ldr	r2, [pc, #244]	; (800d460 <xPortStartScheduler+0x120>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d109      	bne.n	800d382 <xPortStartScheduler+0x42>
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	e7fe      	b.n	800d380 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d382:	4b38      	ldr	r3, [pc, #224]	; (800d464 <xPortStartScheduler+0x124>)
 800d384:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	22ff      	movs	r2, #255	; 0xff
 800d392:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d39c:	78fb      	ldrb	r3, [r7, #3]
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	4b30      	ldr	r3, [pc, #192]	; (800d468 <xPortStartScheduler+0x128>)
 800d3a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3aa:	4b30      	ldr	r3, [pc, #192]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3ac:	2207      	movs	r2, #7
 800d3ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3b0:	e009      	b.n	800d3c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d3b2:	4b2e      	ldr	r3, [pc, #184]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	4a2c      	ldr	r2, [pc, #176]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3bc:	78fb      	ldrb	r3, [r7, #3]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3c6:	78fb      	ldrb	r3, [r7, #3]
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ce:	2b80      	cmp	r3, #128	; 0x80
 800d3d0:	d0ef      	beq.n	800d3b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3d2:	4b26      	ldr	r3, [pc, #152]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f1c3 0307 	rsb	r3, r3, #7
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d009      	beq.n	800d3f2 <xPortStartScheduler+0xb2>
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	60bb      	str	r3, [r7, #8]
 800d3f0:	e7fe      	b.n	800d3f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3f2:	4b1e      	ldr	r3, [pc, #120]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	021b      	lsls	r3, r3, #8
 800d3f8:	4a1c      	ldr	r2, [pc, #112]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3fc:	4b1b      	ldr	r3, [pc, #108]	; (800d46c <xPortStartScheduler+0x12c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d404:	4a19      	ldr	r2, [pc, #100]	; (800d46c <xPortStartScheduler+0x12c>)
 800d406:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d410:	4b17      	ldr	r3, [pc, #92]	; (800d470 <xPortStartScheduler+0x130>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a16      	ldr	r2, [pc, #88]	; (800d470 <xPortStartScheduler+0x130>)
 800d416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d41a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d41c:	4b14      	ldr	r3, [pc, #80]	; (800d470 <xPortStartScheduler+0x130>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a13      	ldr	r2, [pc, #76]	; (800d470 <xPortStartScheduler+0x130>)
 800d422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d428:	f000 f8d6 	bl	800d5d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d42c:	4b11      	ldr	r3, [pc, #68]	; (800d474 <xPortStartScheduler+0x134>)
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d432:	f000 f8f5 	bl	800d620 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d436:	4b10      	ldr	r3, [pc, #64]	; (800d478 <xPortStartScheduler+0x138>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a0f      	ldr	r2, [pc, #60]	; (800d478 <xPortStartScheduler+0x138>)
 800d43c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d442:	f7ff ff69 	bl	800d318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d446:	f7ff f86d 	bl	800c524 <vTaskSwitchContext>
	prvTaskExitError();
 800d44a:	f7ff ff23 	bl	800d294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	e000ed00 	.word	0xe000ed00
 800d45c:	410fc271 	.word	0x410fc271
 800d460:	410fc270 	.word	0x410fc270
 800d464:	e000e400 	.word	0xe000e400
 800d468:	20000de4 	.word	0x20000de4
 800d46c:	20000de8 	.word	0x20000de8
 800d470:	e000ed20 	.word	0xe000ed20
 800d474:	2000002c 	.word	0x2000002c
 800d478:	e000ef34 	.word	0xe000ef34

0800d47c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d494:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <vPortEnterCritical+0x54>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3301      	adds	r3, #1
 800d49a:	4a0d      	ldr	r2, [pc, #52]	; (800d4d0 <vPortEnterCritical+0x54>)
 800d49c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d49e:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <vPortEnterCritical+0x54>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d10e      	bne.n	800d4c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	; (800d4d4 <vPortEnterCritical+0x58>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <vPortEnterCritical+0x48>
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	603b      	str	r3, [r7, #0]
 800d4c2:	e7fe      	b.n	800d4c2 <vPortEnterCritical+0x46>
	}
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	2000002c 	.word	0x2000002c
 800d4d4:	e000ed04 	.word	0xe000ed04

0800d4d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4de:	4b11      	ldr	r3, [pc, #68]	; (800d524 <vPortExitCritical+0x4c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d109      	bne.n	800d4fa <vPortExitCritical+0x22>
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	e7fe      	b.n	800d4f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d4fa:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <vPortExitCritical+0x4c>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	4a08      	ldr	r2, [pc, #32]	; (800d524 <vPortExitCritical+0x4c>)
 800d502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d504:	4b07      	ldr	r3, [pc, #28]	; (800d524 <vPortExitCritical+0x4c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d104      	bne.n	800d516 <vPortExitCritical+0x3e>
 800d50c:	2300      	movs	r3, #0
 800d50e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d516:	bf00      	nop
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	2000002c 	.word	0x2000002c
	...

0800d530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d530:	f3ef 8009 	mrs	r0, PSP
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	4b15      	ldr	r3, [pc, #84]	; (800d590 <pxCurrentTCBConst>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	f01e 0f10 	tst.w	lr, #16
 800d540:	bf08      	it	eq
 800d542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	6010      	str	r0, [r2, #0]
 800d54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d554:	f380 8811 	msr	BASEPRI, r0
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f7fe ffe0 	bl	800c524 <vTaskSwitchContext>
 800d564:	f04f 0000 	mov.w	r0, #0
 800d568:	f380 8811 	msr	BASEPRI, r0
 800d56c:	bc09      	pop	{r0, r3}
 800d56e:	6819      	ldr	r1, [r3, #0]
 800d570:	6808      	ldr	r0, [r1, #0]
 800d572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d576:	f01e 0f10 	tst.w	lr, #16
 800d57a:	bf08      	it	eq
 800d57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d580:	f380 8809 	msr	PSP, r0
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	f3af 8000 	nop.w

0800d590 <pxCurrentTCBConst>:
 800d590:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop

0800d598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5b0:	f7fe ff00 	bl	800c3b4 <xTaskIncrementTick>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <SysTick_Handler+0x3c>)
 800d5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	e000ed04 	.word	0xe000ed04

0800d5d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <vPortSetupTimerInterrupt+0x34>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5e2:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <vPortSetupTimerInterrupt+0x38>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5e8:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <vPortSetupTimerInterrupt+0x3c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <vPortSetupTimerInterrupt+0x40>)
 800d5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d5f2:	099b      	lsrs	r3, r3, #6
 800d5f4:	4a09      	ldr	r2, [pc, #36]	; (800d61c <vPortSetupTimerInterrupt+0x44>)
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5fa:	4b04      	ldr	r3, [pc, #16]	; (800d60c <vPortSetupTimerInterrupt+0x34>)
 800d5fc:	2207      	movs	r2, #7
 800d5fe:	601a      	str	r2, [r3, #0]
}
 800d600:	bf00      	nop
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	e000e010 	.word	0xe000e010
 800d610:	e000e018 	.word	0xe000e018
 800d614:	20000000 	.word	0x20000000
 800d618:	10624dd3 	.word	0x10624dd3
 800d61c:	e000e014 	.word	0xe000e014

0800d620 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d620:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d630 <vPortEnableVFP+0x10>
 800d624:	6801      	ldr	r1, [r0, #0]
 800d626:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d62a:	6001      	str	r1, [r0, #0]
 800d62c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d62e:	bf00      	nop
 800d630:	e000ed88 	.word	0xe000ed88

0800d634 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d63a:	f3ef 8305 	mrs	r3, IPSR
 800d63e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b0f      	cmp	r3, #15
 800d644:	d913      	bls.n	800d66e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d646:	4a16      	ldr	r2, [pc, #88]	; (800d6a0 <vPortValidateInterruptPriority+0x6c>)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	4413      	add	r3, r2
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d650:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <vPortValidateInterruptPriority+0x70>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	7afa      	ldrb	r2, [r7, #11]
 800d656:	429a      	cmp	r2, r3
 800d658:	d209      	bcs.n	800d66e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	e7fe      	b.n	800d66c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d66e:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <vPortValidateInterruptPriority+0x74>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d676:	4b0d      	ldr	r3, [pc, #52]	; (800d6ac <vPortValidateInterruptPriority+0x78>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d909      	bls.n	800d692 <vPortValidateInterruptPriority+0x5e>
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	603b      	str	r3, [r7, #0]
 800d690:	e7fe      	b.n	800d690 <vPortValidateInterruptPriority+0x5c>
	}
 800d692:	bf00      	nop
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	e000e3f0 	.word	0xe000e3f0
 800d6a4:	20000de4 	.word	0x20000de4
 800d6a8:	e000ed0c 	.word	0xe000ed0c
 800d6ac:	20000de8 	.word	0x20000de8

0800d6b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	; 0x28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6bc:	f7fe fdc0 	bl	800c240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6c0:	4b57      	ldr	r3, [pc, #348]	; (800d820 <pvPortMalloc+0x170>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6c8:	f000 f90c 	bl	800d8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6cc:	4b55      	ldr	r3, [pc, #340]	; (800d824 <pvPortMalloc+0x174>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 808c 	bne.w	800d7f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01c      	beq.n	800d71a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d6e0:	2208      	movs	r2, #8
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f003 0307 	and.w	r3, r3, #7
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d013      	beq.n	800d71a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f023 0307 	bic.w	r3, r3, #7
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f003 0307 	and.w	r3, r3, #7
 800d702:	2b00      	cmp	r3, #0
 800d704:	d009      	beq.n	800d71a <pvPortMalloc+0x6a>
 800d706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	617b      	str	r3, [r7, #20]
 800d718:	e7fe      	b.n	800d718 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d068      	beq.n	800d7f2 <pvPortMalloc+0x142>
 800d720:	4b41      	ldr	r3, [pc, #260]	; (800d828 <pvPortMalloc+0x178>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	429a      	cmp	r2, r3
 800d728:	d863      	bhi.n	800d7f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d72a:	4b40      	ldr	r3, [pc, #256]	; (800d82c <pvPortMalloc+0x17c>)
 800d72c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d72e:	4b3f      	ldr	r3, [pc, #252]	; (800d82c <pvPortMalloc+0x17c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d734:	e004      	b.n	800d740 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	429a      	cmp	r2, r3
 800d748:	d903      	bls.n	800d752 <pvPortMalloc+0xa2>
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1f1      	bne.n	800d736 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d752:	4b33      	ldr	r3, [pc, #204]	; (800d820 <pvPortMalloc+0x170>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d758:	429a      	cmp	r2, r3
 800d75a:	d04a      	beq.n	800d7f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2208      	movs	r2, #8
 800d762:	4413      	add	r3, r2
 800d764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	685a      	ldr	r2, [r3, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	1ad2      	subs	r2, r2, r3
 800d776:	2308      	movs	r3, #8
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d91e      	bls.n	800d7bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4413      	add	r3, r2
 800d784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	f003 0307 	and.w	r3, r3, #7
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d009      	beq.n	800d7a4 <pvPortMalloc+0xf4>
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	e7fe      	b.n	800d7a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	685a      	ldr	r2, [r3, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7b6:	69b8      	ldr	r0, [r7, #24]
 800d7b8:	f000 f8f6 	bl	800d9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7bc:	4b1a      	ldr	r3, [pc, #104]	; (800d828 <pvPortMalloc+0x178>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	4a18      	ldr	r2, [pc, #96]	; (800d828 <pvPortMalloc+0x178>)
 800d7c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7ca:	4b17      	ldr	r3, [pc, #92]	; (800d828 <pvPortMalloc+0x178>)
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	4b18      	ldr	r3, [pc, #96]	; (800d830 <pvPortMalloc+0x180>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d203      	bcs.n	800d7de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7d6:	4b14      	ldr	r3, [pc, #80]	; (800d828 <pvPortMalloc+0x178>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a15      	ldr	r2, [pc, #84]	; (800d830 <pvPortMalloc+0x180>)
 800d7dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	685a      	ldr	r2, [r3, #4]
 800d7e2:	4b10      	ldr	r3, [pc, #64]	; (800d824 <pvPortMalloc+0x174>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7f2:	f7fe fd33 	bl	800c25c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	f003 0307 	and.w	r3, r3, #7
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <pvPortMalloc+0x164>
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	60fb      	str	r3, [r7, #12]
 800d812:	e7fe      	b.n	800d812 <pvPortMalloc+0x162>
	return pvReturn;
 800d814:	69fb      	ldr	r3, [r7, #28]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3728      	adds	r7, #40	; 0x28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	200049f4 	.word	0x200049f4
 800d824:	20004a00 	.word	0x20004a00
 800d828:	200049f8 	.word	0x200049f8
 800d82c:	200049ec 	.word	0x200049ec
 800d830:	200049fc 	.word	0x200049fc

0800d834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d046      	beq.n	800d8d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d846:	2308      	movs	r3, #8
 800d848:	425b      	negs	r3, r3
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	4413      	add	r3, r2
 800d84e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	4b20      	ldr	r3, [pc, #128]	; (800d8dc <vPortFree+0xa8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4013      	ands	r3, r2
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d109      	bne.n	800d876 <vPortFree+0x42>
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	e7fe      	b.n	800d874 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d009      	beq.n	800d892 <vPortFree+0x5e>
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60bb      	str	r3, [r7, #8]
 800d890:	e7fe      	b.n	800d890 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	4b11      	ldr	r3, [pc, #68]	; (800d8dc <vPortFree+0xa8>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4013      	ands	r3, r2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d019      	beq.n	800d8d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d115      	bne.n	800d8d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	4b0b      	ldr	r3, [pc, #44]	; (800d8dc <vPortFree+0xa8>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	43db      	mvns	r3, r3
 800d8b2:	401a      	ands	r2, r3
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8b8:	f7fe fcc2 	bl	800c240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <vPortFree+0xac>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <vPortFree+0xac>)
 800d8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ca:	6938      	ldr	r0, [r7, #16]
 800d8cc:	f000 f86c 	bl	800d9a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d8d0:	f7fe fcc4 	bl	800c25c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8d4:	bf00      	nop
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	20004a00 	.word	0x20004a00
 800d8e0:	200049f8 	.word	0x200049f8

0800d8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8f0:	4b27      	ldr	r3, [pc, #156]	; (800d990 <prvHeapInit+0xac>)
 800d8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00c      	beq.n	800d918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3307      	adds	r3, #7
 800d902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0307 	bic.w	r3, r3, #7
 800d90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	4a1f      	ldr	r2, [pc, #124]	; (800d990 <prvHeapInit+0xac>)
 800d914:	4413      	add	r3, r2
 800d916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d91c:	4a1d      	ldr	r2, [pc, #116]	; (800d994 <prvHeapInit+0xb0>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d922:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <prvHeapInit+0xb0>)
 800d924:	2200      	movs	r2, #0
 800d926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	4413      	add	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d930:	2208      	movs	r2, #8
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	4a15      	ldr	r2, [pc, #84]	; (800d998 <prvHeapInit+0xb4>)
 800d944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <prvHeapInit+0xb4>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d94e:	4b12      	ldr	r3, [pc, #72]	; (800d998 <prvHeapInit+0xb4>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	1ad2      	subs	r2, r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <prvHeapInit+0xb4>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4a0a      	ldr	r2, [pc, #40]	; (800d99c <prvHeapInit+0xb8>)
 800d972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4a09      	ldr	r2, [pc, #36]	; (800d9a0 <prvHeapInit+0xbc>)
 800d97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d97c:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <prvHeapInit+0xc0>)
 800d97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d982:	601a      	str	r2, [r3, #0]
}
 800d984:	bf00      	nop
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	20000dec 	.word	0x20000dec
 800d994:	200049ec 	.word	0x200049ec
 800d998:	200049f4 	.word	0x200049f4
 800d99c:	200049fc 	.word	0x200049fc
 800d9a0:	200049f8 	.word	0x200049f8
 800d9a4:	20004a00 	.word	0x20004a00

0800d9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9b0:	4b28      	ldr	r3, [pc, #160]	; (800da54 <prvInsertBlockIntoFreeList+0xac>)
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e002      	b.n	800d9bc <prvInsertBlockIntoFreeList+0x14>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d8f7      	bhi.n	800d9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d108      	bne.n	800d9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	441a      	add	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d118      	bne.n	800da30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b15      	ldr	r3, [pc, #84]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d00d      	beq.n	800da26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	441a      	add	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	e008      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da26:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	e003      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d002      	beq.n	800da46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	200049ec 	.word	0x200049ec
 800da58:	200049f4 	.word	0x200049f4

0800da5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800da60:	2201      	movs	r2, #1
 800da62:	490e      	ldr	r1, [pc, #56]	; (800da9c <MX_USB_HOST_Init+0x40>)
 800da64:	480e      	ldr	r0, [pc, #56]	; (800daa0 <MX_USB_HOST_Init+0x44>)
 800da66:	f7fb fa85 	bl	8008f74 <USBH_Init>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800da70:	f7f3 fa52 	bl	8000f18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800da74:	490b      	ldr	r1, [pc, #44]	; (800daa4 <MX_USB_HOST_Init+0x48>)
 800da76:	480a      	ldr	r0, [pc, #40]	; (800daa0 <MX_USB_HOST_Init+0x44>)
 800da78:	f7fb fb2c 	bl	80090d4 <USBH_RegisterClass>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800da82:	f7f3 fa49 	bl	8000f18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800da86:	4806      	ldr	r0, [pc, #24]	; (800daa0 <MX_USB_HOST_Init+0x44>)
 800da88:	f7fb fbb0 	bl	80091ec <USBH_Start>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800da92:	f7f3 fa41 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800da96:	bf00      	nop
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	0800daa9 	.word	0x0800daa9
 800daa0:	20004cdc 	.word	0x20004cdc
 800daa4:	2000000c 	.word	0x2000000c

0800daa8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dab4:	78fb      	ldrb	r3, [r7, #3]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	2b04      	cmp	r3, #4
 800daba:	d819      	bhi.n	800daf0 <USBH_UserProcess+0x48>
 800dabc:	a201      	add	r2, pc, #4	; (adr r2, 800dac4 <USBH_UserProcess+0x1c>)
 800dabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac2:	bf00      	nop
 800dac4:	0800daf1 	.word	0x0800daf1
 800dac8:	0800dae1 	.word	0x0800dae1
 800dacc:	0800daf1 	.word	0x0800daf1
 800dad0:	0800dae9 	.word	0x0800dae9
 800dad4:	0800dad9 	.word	0x0800dad9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dad8:	4b09      	ldr	r3, [pc, #36]	; (800db00 <USBH_UserProcess+0x58>)
 800dada:	2203      	movs	r2, #3
 800dadc:	701a      	strb	r2, [r3, #0]
  break;
 800dade:	e008      	b.n	800daf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dae0:	4b07      	ldr	r3, [pc, #28]	; (800db00 <USBH_UserProcess+0x58>)
 800dae2:	2202      	movs	r2, #2
 800dae4:	701a      	strb	r2, [r3, #0]
  break;
 800dae6:	e004      	b.n	800daf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dae8:	4b05      	ldr	r3, [pc, #20]	; (800db00 <USBH_UserProcess+0x58>)
 800daea:	2201      	movs	r2, #1
 800daec:	701a      	strb	r2, [r3, #0]
  break;
 800daee:	e000      	b.n	800daf2 <USBH_UserProcess+0x4a>

  default:
  break;
 800daf0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800daf2:	bf00      	nop
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	20004a04 	.word	0x20004a04

0800db04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b08a      	sub	sp, #40	; 0x28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db0c:	f107 0314 	add.w	r3, r7, #20
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	605a      	str	r2, [r3, #4]
 800db16:	609a      	str	r2, [r3, #8]
 800db18:	60da      	str	r2, [r3, #12]
 800db1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db24:	d147      	bne.n	800dbb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]
 800db2a:	4b25      	ldr	r3, [pc, #148]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db2e:	4a24      	ldr	r2, [pc, #144]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db30:	f043 0301 	orr.w	r3, r3, #1
 800db34:	6313      	str	r3, [r2, #48]	; 0x30
 800db36:	4b22      	ldr	r3, [pc, #136]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	613b      	str	r3, [r7, #16]
 800db40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800db42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db48:	2300      	movs	r3, #0
 800db4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db4c:	2300      	movs	r3, #0
 800db4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800db50:	f107 0314 	add.w	r3, r7, #20
 800db54:	4619      	mov	r1, r3
 800db56:	481b      	ldr	r0, [pc, #108]	; (800dbc4 <HAL_HCD_MspInit+0xc0>)
 800db58:	f7f4 f89a 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800db5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800db60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db62:	2302      	movs	r3, #2
 800db64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db66:	2300      	movs	r3, #0
 800db68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db6a:	2303      	movs	r3, #3
 800db6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db6e:	230a      	movs	r3, #10
 800db70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db72:	f107 0314 	add.w	r3, r7, #20
 800db76:	4619      	mov	r1, r3
 800db78:	4812      	ldr	r0, [pc, #72]	; (800dbc4 <HAL_HCD_MspInit+0xc0>)
 800db7a:	f7f4 f889 	bl	8001c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db7e:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db82:	4a0f      	ldr	r2, [pc, #60]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db88:	6353      	str	r3, [r2, #52]	; 0x34
 800db8a:	2300      	movs	r3, #0
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	4b0c      	ldr	r3, [pc, #48]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db92:	4a0b      	ldr	r2, [pc, #44]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db98:	6453      	str	r3, [r2, #68]	; 0x44
 800db9a:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <HAL_HCD_MspInit+0xbc>)
 800db9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dba6:	2200      	movs	r2, #0
 800dba8:	2100      	movs	r1, #0
 800dbaa:	2043      	movs	r0, #67	; 0x43
 800dbac:	f7f3 fef2 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dbb0:	2043      	movs	r0, #67	; 0x43
 800dbb2:	f7f3 ff0b 	bl	80019cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dbb6:	bf00      	nop
 800dbb8:	3728      	adds	r7, #40	; 0x28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	40023800 	.word	0x40023800
 800dbc4:	40020000 	.word	0x40020000

0800dbc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fb ffb5 	bl	8009b46 <USBH_LL_IncTimer>
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fb fff9 	bl	8009bea <USBH_LL_Connect>
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fc f80e 	bl	8009c30 <USBH_LL_Disconnect>
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70fb      	strb	r3, [r7, #3]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fc f845 	bl	8009cc2 <USBH_LL_NotifyURBChange>
#endif
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb ffa3 	bl	8009b9a <USBH_LL_PortEnabled>
}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fb ffaf 	bl	8009bce <USBH_LL_PortDisabled>
}
 800dc70:	bf00      	nop
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d12a      	bne.n	800dce0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dc8a:	4a18      	ldr	r2, [pc, #96]	; (800dcec <USBH_LL_Init+0x74>)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a15      	ldr	r2, [pc, #84]	; (800dcec <USBH_LL_Init+0x74>)
 800dc96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc9a:	4b14      	ldr	r3, [pc, #80]	; (800dcec <USBH_LL_Init+0x74>)
 800dc9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dca0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800dca2:	4b12      	ldr	r3, [pc, #72]	; (800dcec <USBH_LL_Init+0x74>)
 800dca4:	220c      	movs	r2, #12
 800dca6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dca8:	4b10      	ldr	r3, [pc, #64]	; (800dcec <USBH_LL_Init+0x74>)
 800dcaa:	2201      	movs	r2, #1
 800dcac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <USBH_LL_Init+0x74>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dcb4:	4b0d      	ldr	r3, [pc, #52]	; (800dcec <USBH_LL_Init+0x74>)
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <USBH_LL_Init+0x74>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dcc0:	480a      	ldr	r0, [pc, #40]	; (800dcec <USBH_LL_Init+0x74>)
 800dcc2:	f7f4 f990 	bl	8001fe6 <HAL_HCD_Init>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dccc:	f7f3 f924 	bl	8000f18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dcd0:	4806      	ldr	r0, [pc, #24]	; (800dcec <USBH_LL_Init+0x74>)
 800dcd2:	f7f4 fd93 	bl	80027fc <HAL_HCD_GetCurrentFrame>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7fb ff24 	bl	8009b28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200050c0 	.word	0x200050c0

0800dcf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f4 fd00 	bl	800270c <HAL_HCD_Start>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 f95c 	bl	800dfd0 <USBH_Get_USB_Status>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7f4 fd08 	bl	8002752 <HAL_HCD_Stop>
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 f941 	bl	800dfd0 <USBH_Get_USB_Status>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dd64:	2301      	movs	r3, #1
 800dd66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7f4 fd52 	bl	8002818 <HAL_HCD_GetCurrentSpeed>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d007      	beq.n	800dd8a <USBH_LL_GetSpeed+0x2e>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d302      	bcc.n	800dd84 <USBH_LL_GetSpeed+0x28>
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d006      	beq.n	800dd90 <USBH_LL_GetSpeed+0x34>
 800dd82:	e008      	b.n	800dd96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73fb      	strb	r3, [r7, #15]
    break;
 800dd88:	e008      	b.n	800dd9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd8e:	e005      	b.n	800dd9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dd90:	2302      	movs	r3, #2
 800dd92:	73fb      	strb	r3, [r7, #15]
    break;
 800dd94:	e002      	b.n	800dd9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800dd96:	2301      	movs	r3, #1
 800dd98:	73fb      	strb	r3, [r7, #15]
    break;
 800dd9a:	bf00      	nop
  }
  return  speed;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7f4 fce5 	bl	800278c <HAL_HCD_ResetPort>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 f901 	bl	800dfd0 <USBH_Get_USB_Status>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddee:	78fa      	ldrb	r2, [r7, #3]
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f4 fced 	bl	80027d2 <HAL_HCD_HC_GetXferCount>
 800ddf8:	4603      	mov	r3, r0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800de02:	b590      	push	{r4, r7, lr}
 800de04:	b089      	sub	sp, #36	; 0x24
 800de06:	af04      	add	r7, sp, #16
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	4608      	mov	r0, r1
 800de0c:	4611      	mov	r1, r2
 800de0e:	461a      	mov	r2, r3
 800de10:	4603      	mov	r3, r0
 800de12:	70fb      	strb	r3, [r7, #3]
 800de14:	460b      	mov	r3, r1
 800de16:	70bb      	strb	r3, [r7, #2]
 800de18:	4613      	mov	r3, r2
 800de1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800de2a:	787c      	ldrb	r4, [r7, #1]
 800de2c:	78ba      	ldrb	r2, [r7, #2]
 800de2e:	78f9      	ldrb	r1, [r7, #3]
 800de30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de32:	9302      	str	r3, [sp, #8]
 800de34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	4623      	mov	r3, r4
 800de42:	f7f4 f932 	bl	80020aa <HAL_HCD_HC_Init>
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f8bf 	bl	800dfd0 <USBH_Get_USB_Status>
 800de52:	4603      	mov	r3, r0
 800de54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de56:	7bbb      	ldrb	r3, [r7, #14]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd90      	pop	{r4, r7, pc}

0800de60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de7a:	78fa      	ldrb	r2, [r7, #3]
 800de7c:	4611      	mov	r1, r2
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f4 f9ab 	bl	80021da <HAL_HCD_HC_Halt>
 800de84:	4603      	mov	r3, r0
 800de86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f8a0 	bl	800dfd0 <USBH_Get_USB_Status>
 800de90:	4603      	mov	r3, r0
 800de92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de94:	7bbb      	ldrb	r3, [r7, #14]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de9e:	b590      	push	{r4, r7, lr}
 800dea0:	b089      	sub	sp, #36	; 0x24
 800dea2:	af04      	add	r7, sp, #16
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	4608      	mov	r0, r1
 800dea8:	4611      	mov	r1, r2
 800deaa:	461a      	mov	r2, r3
 800deac:	4603      	mov	r3, r0
 800deae:	70fb      	strb	r3, [r7, #3]
 800deb0:	460b      	mov	r3, r1
 800deb2:	70bb      	strb	r3, [r7, #2]
 800deb4:	4613      	mov	r3, r2
 800deb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800debc:	2300      	movs	r3, #0
 800debe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dec6:	787c      	ldrb	r4, [r7, #1]
 800dec8:	78ba      	ldrb	r2, [r7, #2]
 800deca:	78f9      	ldrb	r1, [r7, #3]
 800decc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ded0:	9303      	str	r3, [sp, #12]
 800ded2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ded4:	9302      	str	r3, [sp, #8]
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	4623      	mov	r3, r4
 800dee2:	f7f4 f99d 	bl	8002220 <HAL_HCD_HC_SubmitRequest>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800deea:	7bfb      	ldrb	r3, [r7, #15]
 800deec:	4618      	mov	r0, r3
 800deee:	f000 f86f 	bl	800dfd0 <USBH_Get_USB_Status>
 800def2:	4603      	mov	r3, r0
 800def4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def6:	7bbb      	ldrb	r3, [r7, #14]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	bd90      	pop	{r4, r7, pc}

0800df00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df12:	78fa      	ldrb	r2, [r7, #3]
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7f4 fc46 	bl	80027a8 <HAL_HCD_HC_GetURBState>
 800df1c:	4603      	mov	r3, r0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b082      	sub	sp, #8
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	460b      	mov	r3, r1
 800df30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d103      	bne.n	800df44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800df3c:	78fb      	ldrb	r3, [r7, #3]
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f872 	bl	800e028 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800df44:	20c8      	movs	r0, #200	; 0xc8
 800df46:	f7f3 fc4b 	bl	80017e0 <HAL_Delay>
  return USBH_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	460b      	mov	r3, r1
 800df5e:	70fb      	strb	r3, [r7, #3]
 800df60:	4613      	mov	r3, r2
 800df62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800df6c:	78fa      	ldrb	r2, [r7, #3]
 800df6e:	68f9      	ldr	r1, [r7, #12]
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	440b      	add	r3, r1
 800df7a:	333b      	adds	r3, #59	; 0x3b
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00a      	beq.n	800df98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800df82:	78fa      	ldrb	r2, [r7, #3]
 800df84:	68f9      	ldr	r1, [r7, #12]
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	440b      	add	r3, r1
 800df90:	3350      	adds	r3, #80	; 0x50
 800df92:	78ba      	ldrb	r2, [r7, #2]
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	e009      	b.n	800dfac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800df98:	78fa      	ldrb	r2, [r7, #3]
 800df9a:	68f9      	ldr	r1, [r7, #12]
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3351      	adds	r3, #81	; 0x51
 800dfa8:	78ba      	ldrb	r2, [r7, #2]
 800dfaa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f7f3 fc0c 	bl	80017e0 <HAL_Delay>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d817      	bhi.n	800e014 <USBH_Get_USB_Status+0x44>
 800dfe4:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <USBH_Get_USB_Status+0x1c>)
 800dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfea:	bf00      	nop
 800dfec:	0800dffd 	.word	0x0800dffd
 800dff0:	0800e003 	.word	0x0800e003
 800dff4:	0800e009 	.word	0x0800e009
 800dff8:	0800e00f 	.word	0x0800e00f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73fb      	strb	r3, [r7, #15]
    break;
 800e000:	e00b      	b.n	800e01a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e002:	2302      	movs	r3, #2
 800e004:	73fb      	strb	r3, [r7, #15]
    break;
 800e006:	e008      	b.n	800e01a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e008:	2301      	movs	r3, #1
 800e00a:	73fb      	strb	r3, [r7, #15]
    break;
 800e00c:	e005      	b.n	800e01a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e00e:	2302      	movs	r3, #2
 800e010:	73fb      	strb	r3, [r7, #15]
    break;
 800e012:	e002      	b.n	800e01a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e014:	2302      	movs	r3, #2
 800e016:	73fb      	strb	r3, [r7, #15]
    break;
 800e018:	bf00      	nop
  }
  return usb_status;
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e03c:	2301      	movs	r3, #1
 800e03e:	73fb      	strb	r3, [r7, #15]
 800e040:	e001      	b.n	800e046 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e042:	2300      	movs	r3, #0
 800e044:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800e046:	7bfb      	ldrb	r3, [r7, #15]
 800e048:	461a      	mov	r2, r3
 800e04a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e04e:	4803      	ldr	r0, [pc, #12]	; (800e05c <MX_DriverVbusFS+0x34>)
 800e050:	f7f3 ffb0 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 800e054:	bf00      	nop
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	40021800 	.word	0x40021800

0800e060 <__errno>:
 800e060:	4b01      	ldr	r3, [pc, #4]	; (800e068 <__errno+0x8>)
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	20000030 	.word	0x20000030

0800e06c <__libc_init_array>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	4e0d      	ldr	r6, [pc, #52]	; (800e0a4 <__libc_init_array+0x38>)
 800e070:	4c0d      	ldr	r4, [pc, #52]	; (800e0a8 <__libc_init_array+0x3c>)
 800e072:	1ba4      	subs	r4, r4, r6
 800e074:	10a4      	asrs	r4, r4, #2
 800e076:	2500      	movs	r5, #0
 800e078:	42a5      	cmp	r5, r4
 800e07a:	d109      	bne.n	800e090 <__libc_init_array+0x24>
 800e07c:	4e0b      	ldr	r6, [pc, #44]	; (800e0ac <__libc_init_array+0x40>)
 800e07e:	4c0c      	ldr	r4, [pc, #48]	; (800e0b0 <__libc_init_array+0x44>)
 800e080:	f000 f8f6 	bl	800e270 <_init>
 800e084:	1ba4      	subs	r4, r4, r6
 800e086:	10a4      	asrs	r4, r4, #2
 800e088:	2500      	movs	r5, #0
 800e08a:	42a5      	cmp	r5, r4
 800e08c:	d105      	bne.n	800e09a <__libc_init_array+0x2e>
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e094:	4798      	blx	r3
 800e096:	3501      	adds	r5, #1
 800e098:	e7ee      	b.n	800e078 <__libc_init_array+0xc>
 800e09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e09e:	4798      	blx	r3
 800e0a0:	3501      	adds	r5, #1
 800e0a2:	e7f2      	b.n	800e08a <__libc_init_array+0x1e>
 800e0a4:	0800e398 	.word	0x0800e398
 800e0a8:	0800e398 	.word	0x0800e398
 800e0ac:	0800e398 	.word	0x0800e398
 800e0b0:	0800e39c 	.word	0x0800e39c

0800e0b4 <malloc>:
 800e0b4:	4b02      	ldr	r3, [pc, #8]	; (800e0c0 <malloc+0xc>)
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	6818      	ldr	r0, [r3, #0]
 800e0ba:	f000 b86d 	b.w	800e198 <_malloc_r>
 800e0be:	bf00      	nop
 800e0c0:	20000030 	.word	0x20000030

0800e0c4 <free>:
 800e0c4:	4b02      	ldr	r3, [pc, #8]	; (800e0d0 <free+0xc>)
 800e0c6:	4601      	mov	r1, r0
 800e0c8:	6818      	ldr	r0, [r3, #0]
 800e0ca:	f000 b817 	b.w	800e0fc <_free_r>
 800e0ce:	bf00      	nop
 800e0d0:	20000030 	.word	0x20000030

0800e0d4 <memcpy>:
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	1e43      	subs	r3, r0, #1
 800e0d8:	440a      	add	r2, r1
 800e0da:	4291      	cmp	r1, r2
 800e0dc:	d100      	bne.n	800e0e0 <memcpy+0xc>
 800e0de:	bd10      	pop	{r4, pc}
 800e0e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0e8:	e7f7      	b.n	800e0da <memcpy+0x6>

0800e0ea <memset>:
 800e0ea:	4402      	add	r2, r0
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d100      	bne.n	800e0f4 <memset+0xa>
 800e0f2:	4770      	bx	lr
 800e0f4:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f8:	e7f9      	b.n	800e0ee <memset+0x4>
	...

0800e0fc <_free_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4605      	mov	r5, r0
 800e100:	2900      	cmp	r1, #0
 800e102:	d045      	beq.n	800e190 <_free_r+0x94>
 800e104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e108:	1f0c      	subs	r4, r1, #4
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bfb8      	it	lt
 800e10e:	18e4      	addlt	r4, r4, r3
 800e110:	f000 f8ac 	bl	800e26c <__malloc_lock>
 800e114:	4a1f      	ldr	r2, [pc, #124]	; (800e194 <_free_r+0x98>)
 800e116:	6813      	ldr	r3, [r2, #0]
 800e118:	4610      	mov	r0, r2
 800e11a:	b933      	cbnz	r3, 800e12a <_free_r+0x2e>
 800e11c:	6063      	str	r3, [r4, #4]
 800e11e:	6014      	str	r4, [r2, #0]
 800e120:	4628      	mov	r0, r5
 800e122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e126:	f000 b8a2 	b.w	800e26e <__malloc_unlock>
 800e12a:	42a3      	cmp	r3, r4
 800e12c:	d90c      	bls.n	800e148 <_free_r+0x4c>
 800e12e:	6821      	ldr	r1, [r4, #0]
 800e130:	1862      	adds	r2, r4, r1
 800e132:	4293      	cmp	r3, r2
 800e134:	bf04      	itt	eq
 800e136:	681a      	ldreq	r2, [r3, #0]
 800e138:	685b      	ldreq	r3, [r3, #4]
 800e13a:	6063      	str	r3, [r4, #4]
 800e13c:	bf04      	itt	eq
 800e13e:	1852      	addeq	r2, r2, r1
 800e140:	6022      	streq	r2, [r4, #0]
 800e142:	6004      	str	r4, [r0, #0]
 800e144:	e7ec      	b.n	800e120 <_free_r+0x24>
 800e146:	4613      	mov	r3, r2
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	b10a      	cbz	r2, 800e150 <_free_r+0x54>
 800e14c:	42a2      	cmp	r2, r4
 800e14e:	d9fa      	bls.n	800e146 <_free_r+0x4a>
 800e150:	6819      	ldr	r1, [r3, #0]
 800e152:	1858      	adds	r0, r3, r1
 800e154:	42a0      	cmp	r0, r4
 800e156:	d10b      	bne.n	800e170 <_free_r+0x74>
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	4401      	add	r1, r0
 800e15c:	1858      	adds	r0, r3, r1
 800e15e:	4282      	cmp	r2, r0
 800e160:	6019      	str	r1, [r3, #0]
 800e162:	d1dd      	bne.n	800e120 <_free_r+0x24>
 800e164:	6810      	ldr	r0, [r2, #0]
 800e166:	6852      	ldr	r2, [r2, #4]
 800e168:	605a      	str	r2, [r3, #4]
 800e16a:	4401      	add	r1, r0
 800e16c:	6019      	str	r1, [r3, #0]
 800e16e:	e7d7      	b.n	800e120 <_free_r+0x24>
 800e170:	d902      	bls.n	800e178 <_free_r+0x7c>
 800e172:	230c      	movs	r3, #12
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	e7d3      	b.n	800e120 <_free_r+0x24>
 800e178:	6820      	ldr	r0, [r4, #0]
 800e17a:	1821      	adds	r1, r4, r0
 800e17c:	428a      	cmp	r2, r1
 800e17e:	bf04      	itt	eq
 800e180:	6811      	ldreq	r1, [r2, #0]
 800e182:	6852      	ldreq	r2, [r2, #4]
 800e184:	6062      	str	r2, [r4, #4]
 800e186:	bf04      	itt	eq
 800e188:	1809      	addeq	r1, r1, r0
 800e18a:	6021      	streq	r1, [r4, #0]
 800e18c:	605c      	str	r4, [r3, #4]
 800e18e:	e7c7      	b.n	800e120 <_free_r+0x24>
 800e190:	bd38      	pop	{r3, r4, r5, pc}
 800e192:	bf00      	nop
 800e194:	20004a08 	.word	0x20004a08

0800e198 <_malloc_r>:
 800e198:	b570      	push	{r4, r5, r6, lr}
 800e19a:	1ccd      	adds	r5, r1, #3
 800e19c:	f025 0503 	bic.w	r5, r5, #3
 800e1a0:	3508      	adds	r5, #8
 800e1a2:	2d0c      	cmp	r5, #12
 800e1a4:	bf38      	it	cc
 800e1a6:	250c      	movcc	r5, #12
 800e1a8:	2d00      	cmp	r5, #0
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	db01      	blt.n	800e1b2 <_malloc_r+0x1a>
 800e1ae:	42a9      	cmp	r1, r5
 800e1b0:	d903      	bls.n	800e1ba <_malloc_r+0x22>
 800e1b2:	230c      	movs	r3, #12
 800e1b4:	6033      	str	r3, [r6, #0]
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ba:	f000 f857 	bl	800e26c <__malloc_lock>
 800e1be:	4a21      	ldr	r2, [pc, #132]	; (800e244 <_malloc_r+0xac>)
 800e1c0:	6814      	ldr	r4, [r2, #0]
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	b991      	cbnz	r1, 800e1ec <_malloc_r+0x54>
 800e1c6:	4c20      	ldr	r4, [pc, #128]	; (800e248 <_malloc_r+0xb0>)
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	b91b      	cbnz	r3, 800e1d4 <_malloc_r+0x3c>
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f000 f83d 	bl	800e24c <_sbrk_r>
 800e1d2:	6020      	str	r0, [r4, #0]
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f000 f838 	bl	800e24c <_sbrk_r>
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	d124      	bne.n	800e22a <_malloc_r+0x92>
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	6033      	str	r3, [r6, #0]
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f000 f842 	bl	800e26e <__malloc_unlock>
 800e1ea:	e7e4      	b.n	800e1b6 <_malloc_r+0x1e>
 800e1ec:	680b      	ldr	r3, [r1, #0]
 800e1ee:	1b5b      	subs	r3, r3, r5
 800e1f0:	d418      	bmi.n	800e224 <_malloc_r+0x8c>
 800e1f2:	2b0b      	cmp	r3, #11
 800e1f4:	d90f      	bls.n	800e216 <_malloc_r+0x7e>
 800e1f6:	600b      	str	r3, [r1, #0]
 800e1f8:	50cd      	str	r5, [r1, r3]
 800e1fa:	18cc      	adds	r4, r1, r3
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f000 f836 	bl	800e26e <__malloc_unlock>
 800e202:	f104 000b 	add.w	r0, r4, #11
 800e206:	1d23      	adds	r3, r4, #4
 800e208:	f020 0007 	bic.w	r0, r0, #7
 800e20c:	1ac3      	subs	r3, r0, r3
 800e20e:	d0d3      	beq.n	800e1b8 <_malloc_r+0x20>
 800e210:	425a      	negs	r2, r3
 800e212:	50e2      	str	r2, [r4, r3]
 800e214:	e7d0      	b.n	800e1b8 <_malloc_r+0x20>
 800e216:	428c      	cmp	r4, r1
 800e218:	684b      	ldr	r3, [r1, #4]
 800e21a:	bf16      	itet	ne
 800e21c:	6063      	strne	r3, [r4, #4]
 800e21e:	6013      	streq	r3, [r2, #0]
 800e220:	460c      	movne	r4, r1
 800e222:	e7eb      	b.n	800e1fc <_malloc_r+0x64>
 800e224:	460c      	mov	r4, r1
 800e226:	6849      	ldr	r1, [r1, #4]
 800e228:	e7cc      	b.n	800e1c4 <_malloc_r+0x2c>
 800e22a:	1cc4      	adds	r4, r0, #3
 800e22c:	f024 0403 	bic.w	r4, r4, #3
 800e230:	42a0      	cmp	r0, r4
 800e232:	d005      	beq.n	800e240 <_malloc_r+0xa8>
 800e234:	1a21      	subs	r1, r4, r0
 800e236:	4630      	mov	r0, r6
 800e238:	f000 f808 	bl	800e24c <_sbrk_r>
 800e23c:	3001      	adds	r0, #1
 800e23e:	d0cf      	beq.n	800e1e0 <_malloc_r+0x48>
 800e240:	6025      	str	r5, [r4, #0]
 800e242:	e7db      	b.n	800e1fc <_malloc_r+0x64>
 800e244:	20004a08 	.word	0x20004a08
 800e248:	20004a0c 	.word	0x20004a0c

0800e24c <_sbrk_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4c06      	ldr	r4, [pc, #24]	; (800e268 <_sbrk_r+0x1c>)
 800e250:	2300      	movs	r3, #0
 800e252:	4605      	mov	r5, r0
 800e254:	4608      	mov	r0, r1
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	f7f3 fa0a 	bl	8001670 <_sbrk>
 800e25c:	1c43      	adds	r3, r0, #1
 800e25e:	d102      	bne.n	800e266 <_sbrk_r+0x1a>
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	b103      	cbz	r3, 800e266 <_sbrk_r+0x1a>
 800e264:	602b      	str	r3, [r5, #0]
 800e266:	bd38      	pop	{r3, r4, r5, pc}
 800e268:	20005384 	.word	0x20005384

0800e26c <__malloc_lock>:
 800e26c:	4770      	bx	lr

0800e26e <__malloc_unlock>:
 800e26e:	4770      	bx	lr

0800e270 <_init>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr

0800e27c <_fini>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr
