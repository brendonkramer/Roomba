
MeasuringRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800fb9c  0800fb9c  0001fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd3c  0800fd3c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd44  0800fd44  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd44  0800fd44  0001fd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800fd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f8  2000009c  0800fde8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005394  0800fde8  00025394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f64a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005990  00000000  00000000  0004f716  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  000550a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  00057348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009a7e  00000000  00000000  00059370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ea7d  00000000  00000000  00062dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb721  00000000  00000000  0008186b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016cf8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ae0  00000000  00000000  0016d008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fb84 	.word	0x0800fb84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	0800fb84 	.word	0x0800fb84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000da0:	f001 fb1c 	bl	80023dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000da4:	f000 f85c 	bl	8000e60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000da8:	f000 fa20 	bl	80011ec <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000dac:	f000 f8f4 	bl	8000f98 <MX_DFSDM1_Init>
	MX_DFSDM2_Init();
 8000db0:	f000 f92a 	bl	8001008 <MX_DFSDM2_Init>
	MX_FSMC_Init();
 8000db4:	f000 fc56 	bl	8001664 <MX_FSMC_Init>
	MX_I2S2_Init();
 8000db8:	f000 f990 	bl	80010dc <MX_I2S2_Init>
	MX_SDIO_SD_Init();
 8000dbc:	f000 f9bc 	bl	8001138 <MX_SDIO_SD_Init>
	MX_UART7_Init();
 8000dc0:	f000 f9ea 	bl	8001198 <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart7, lidar_tx_buffer, 6, 50);
 8000dc4:	2332      	movs	r3, #50	; 0x32
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	4917      	ldr	r1, [pc, #92]	; (8000e28 <main+0x8c>)
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <main+0x90>)
 8000dcc:	f006 f979 	bl	80070c2 <HAL_UART_Transmit>
	lidar_tx_buffer[1] = 0x04;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <main+0x8c>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	705a      	strb	r2, [r3, #1]
	lidar_tx_buffer[2] = 0x04;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <main+0x8c>)
 8000dd8:	2204      	movs	r2, #4
 8000dda:	709a      	strb	r2, [r3, #2]

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ddc:	f00a fcc0 	bl	800b760 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PollLidar */
	PollLidarHandle = osThreadNew(StartPollLidarTask, NULL,
 8000de0:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <main+0x94>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <main+0x98>)
 8000de6:	f00a fd25 	bl	800b834 <osThreadNew>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <main+0x9c>)
 8000dee:	601a      	str	r2, [r3, #0]
			&PollLidar_attributes);

	/* creation of UpdateLCD */
	UpdateLCDHandle = osThreadNew(StartUpdateLCDTask, NULL,
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <main+0xa0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <main+0xa4>)
 8000df6:	f00a fd1d 	bl	800b834 <osThreadNew>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <main+0xa8>)
 8000dfe:	601a      	str	r2, [r3, #0]
			&UpdateLCD_attributes);

	/* creation of ControlMotors */
	ControlMotorsHandle = osThreadNew(StartMotorControlTask, NULL,
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <main+0xac>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <main+0xb0>)
 8000e06:	f00a fd15 	bl	800b834 <osThreadNew>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <main+0xb4>)
 8000e0e:	601a      	str	r2, [r3, #0]
			&ControlMotors_attributes);

	/* creation of ChangeMetric */
	ChangeMetricHandle = osThreadNew(StartChangeMetricTask, NULL,
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <main+0xb8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <main+0xbc>)
 8000e16:	f00a fd0d 	bl	800b834 <osThreadNew>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <main+0xc0>)
 8000e1e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000e20:	f00a fcd2 	bl	800b7c8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e24:	e7fe      	b.n	8000e24 <main+0x88>
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20004a58 	.word	0x20004a58
 8000e30:	0800fbfc 	.word	0x0800fbfc
 8000e34:	08001729 	.word	0x08001729
 8000e38:	20004ad4 	.word	0x20004ad4
 8000e3c:	0800fc20 	.word	0x0800fc20
 8000e40:	08001775 	.word	0x08001775
 8000e44:	20004a98 	.word	0x20004a98
 8000e48:	0800fc44 	.word	0x0800fc44
 8000e4c:	08001785 	.word	0x08001785
 8000e50:	20004c3c 	.word	0x20004c3c
 8000e54:	0800fc68 	.word	0x0800fc68
 8000e58:	08001791 	.word	0x08001791
 8000e5c:	20004a54 	.word	0x20004a54

08000e60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0aa      	sub	sp, #168	; 0xa8
 8000e64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e6a:	2234      	movs	r2, #52	; 0x34
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00d ff9b 	bl	800edaa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2258      	movs	r2, #88	; 0x58
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00d ff8c 	bl	800edaa <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <SystemClock_Config+0x130>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	; (8000f90 <SystemClock_Config+0x130>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <SystemClock_Config+0x130>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <SystemClock_Config+0x134>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <SystemClock_Config+0x134>)
 8000eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <SystemClock_Config+0x134>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000eca:	2303      	movs	r3, #3
 8000ecc:	677b      	str	r3, [r7, #116]	; 0x74
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLM = 15;
 8000eec:	230f      	movs	r3, #15
 8000eee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000ef2:	2390      	movs	r3, #144	; 0x90
 8000ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000efe:	2305      	movs	r3, #5
 8000f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fe5a 	bl	8005bc8 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xbe>
		Error_Handler();
 8000f1a:	f000 fdb9 	bl	8001a90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f22:	2300      	movs	r3, #0
 8000f24:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 f86b 	bl	8005014 <HAL_RCC_ClockConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xe8>
		Error_Handler();
 8000f44:	f000 fda4 	bl	8001a90 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1
 8000f48:	f240 1361 	movw	r3, #353	; 0x161
 8000f4c:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_DFSDM1 | RCC_PERIPHCLK_SDIO | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000f4e:	2332      	movs	r3, #50	; 0x32
 8000f50:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000f52:	230c      	movs	r3, #12
 8000f54:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fa49 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x128>
		Error_Handler();
 8000f84:	f000 fd84 	bl	8001a90 <Error_Handler>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	37a8      	adds	r7, #168	; 0xa8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <MX_DFSDM1_Init+0x6c>)
 8000fa0:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
	DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type =
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	61da      	str	r2, [r3, #28]
	DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
	DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_DFSDM1_Init+0x68>)
 8000fec:	f001 fb3c 	bl	8002668 <HAL_DFSDM_ChannelInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_DFSDM1_Init+0x62>
		Error_Handler();
 8000ff6:	f000 fd4b 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20004a1c 	.word	0x20004a1c
 8001004:	40016020 	.word	0x40016020

08001008 <MX_DFSDM2_Init>:
/**
 * @brief DFSDM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM2_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM2_Init 0 */

	/* USER CODE BEGIN DFSDM2_Init 1 */

	/* USER CODE END DFSDM2_Init 1 */
	hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800100e:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <MX_DFSDM2_Init+0xc8>)
 8001010:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001014:	2201      	movs	r2, #1
 8001016:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel1.Init.OutputClock.Selection =
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001020:	2202      	movs	r2, #2
 8001022:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel1.Init.SerialInterface.Type =
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001038:	2202      	movs	r2, #2
 800103a:	61da      	str	r2, [r3, #28]
	DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel1.Init.SerialInterface.SpiClock =
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
	DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800104a:	2201      	movs	r2, #1
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel1.Init.Offset = 0;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK) {
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_DFSDM2_Init+0xc4>)
 800105c:	f001 fb04 	bl	8002668 <HAL_DFSDM_ChannelInit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_DFSDM2_Init+0x62>
		Error_Handler();
 8001066:	f000 fd13 	bl	8001a90 <Error_Handler>
	}
	hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <MX_DFSDM2_Init+0xd0>)
 800106e:	601a      	str	r2, [r3, #0]
	hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 8001072:	2201      	movs	r2, #1
 8001074:	711a      	strb	r2, [r3, #4]
	hdfsdm2_channel7.Init.OutputClock.Selection =
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 800107e:	2202      	movs	r2, #2
 8001080:	60da      	str	r2, [r3, #12]
	hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
	hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
	hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
	hdfsdm2_channel7.Init.SerialInterface.Type =
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 8001096:	2202      	movs	r2, #2
 8001098:	61da      	str	r2, [r3, #28]
	DFSDM_CHANNEL_MANCHESTER_RISING;
	hdfsdm2_channel7.Init.SerialInterface.SpiClock =
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
	DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
	hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm2_channel7.Init.Offset = 0;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK) {
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_DFSDM2_Init+0xcc>)
 80010ba:	f001 fad5 	bl	8002668 <HAL_DFSDM_ChannelInit>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DFSDM2_Init+0xc0>
		Error_Handler();
 80010c4:	f000 fce4 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM2_Init 2 */

	/* USER CODE END DFSDM2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20004b2c 	.word	0x20004b2c
 80010d0:	40016420 	.word	0x40016420
 80010d4:	20004a9c 	.word	0x20004a9c
 80010d8:	400164e0 	.word	0x400164e0

080010dc <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_I2S2_Init+0x54>)
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <MX_I2S2_Init+0x58>)
 80010e4:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2S2_Init+0x54>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_I2S2_Init+0x54>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2S2_Init+0x54>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_I2S2_Init+0x54>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_I2S2_Init+0x54>)
 8001104:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001108:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2S2_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2S2_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2S2_Init+0x54>)
 8001118:	2201      	movs	r2, #1
 800111a:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2S2_Init+0x54>)
 800111e:	f003 fab7 	bl	8004690 <HAL_I2S_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2S2_Init+0x50>
		Error_Handler();
 8001128:	f000 fcb2 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20004bf4 	.word	0x20004bf4
 8001134:	40003800 	.word	0x40003800

08001138 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <MX_SDIO_SD_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 8001168:	f004 ff70 	bl	800604c <HAL_SD_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_SDIO_SD_Init+0x3e>
		Error_Handler();
 8001172:	f000 fc8d 	bl	8001a90 <Error_Handler>
	}
	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_SDIO_SD_Init+0x58>)
 800117c:	f005 f99a 	bl	80064b4 <HAL_SD_ConfigWideBusOperation>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SDIO_SD_Init+0x52>
		Error_Handler();
 8001186:	f000 fc83 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20004b64 	.word	0x20004b64
 8001194:	40012c00 	.word	0x40012c00

08001198 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_UART7_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_UART7_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_UART7_Init+0x4c>)
 80011d0:	f005 ff2a 	bl	8007028 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_UART7_Init+0x46>
		Error_Handler();
 80011da:	f000 fc59 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004a58 	.word	0x20004a58
 80011e8:	40007800 	.word	0x40007800

080011ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	; 0x38
 80011f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	4bb1      	ldr	r3, [pc, #708]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4ab0      	ldr	r2, [pc, #704]	; (80014cc <MX_GPIO_Init+0x2e0>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4bae      	ldr	r3, [pc, #696]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	4baa      	ldr	r3, [pc, #680]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4aa9      	ldr	r2, [pc, #676]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4ba7      	ldr	r3, [pc, #668]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4aa2      	ldr	r2, [pc, #648]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <MX_GPIO_Init+0x2e0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <MX_GPIO_Init+0x2e0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a9b      	ldr	r2, [pc, #620]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b99      	ldr	r3, [pc, #612]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b95      	ldr	r3, [pc, #596]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a94      	ldr	r2, [pc, #592]	; (80014cc <MX_GPIO_Init+0x2e0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b92      	ldr	r3, [pc, #584]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b8e      	ldr	r3, [pc, #568]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a8d      	ldr	r2, [pc, #564]	; (80014cc <MX_GPIO_Init+0x2e0>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a86      	ldr	r2, [pc, #536]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b84      	ldr	r3, [pc, #528]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b80      	ldr	r3, [pc, #512]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a7f      	ldr	r2, [pc, #508]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <MX_GPIO_Init+0x2e0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80012e2:	2200      	movs	r2, #0
 80012e4:	2178      	movs	r1, #120	; 0x78
 80012e6:	487a      	ldr	r0, [pc, #488]	; (80014d0 <MX_GPIO_Init+0x2e4>)
 80012e8:	f001 fca4 	bl	8002c34 <HAL_GPIO_WritePin>
	LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin | LEFT_MOTOR_2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RIGHT_MOTOR_I_Pin | RIGHT_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f242 0120 	movw	r1, #8224	; 0x2020
 80012f2:	4878      	ldr	r0, [pc, #480]	; (80014d4 <MX_GPIO_Init+0x2e8>)
 80012f4:	f001 fc9e 	bl	8002c34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LEFT_MOTOR_SPEED_GPIO_Port, LEFT_MOTOR_SPEED_Pin,
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4876      	ldr	r0, [pc, #472]	; (80014d8 <MX_GPIO_Init+0x2ec>)
 8001300:	f001 fc98 	bl	8002c34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RIGHT_MOTOR_IA4_GPIO_Port, RIGHT_MOTOR_IA4_Pin,
 8001304:	2200      	movs	r2, #0
 8001306:	2110      	movs	r1, #16
 8001308:	4874      	ldr	r0, [pc, #464]	; (80014dc <MX_GPIO_Init+0x2f0>)
 800130a:	f001 fc93 	bl	8002c34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800130e:	2200      	movs	r2, #0
 8001310:	f24e 0141 	movw	r1, #57409	; 0xe041
 8001314:	4872      	ldr	r0, [pc, #456]	; (80014e0 <MX_GPIO_Init+0x2f4>)
 8001316:	f001 fc8d 	bl	8002c34 <HAL_GPIO_WritePin>
			RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin | WIFI_WKUP_Pin
					| LEFT_MOTOR_I_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13,
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001320:	4870      	ldr	r0, [pc, #448]	; (80014e4 <MX_GPIO_Init+0x2f8>)
 8001322:	f001 fc87 	bl	8002c34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : QSPI_BK1_IO2_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001336:	2309      	movs	r3, #9
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4863      	ldr	r0, [pc, #396]	; (80014d0 <MX_GPIO_Init+0x2e4>)
 8001342:	f001 fae5 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin LEFT_MOTOR_2_Pin */
	GPIO_InitStruct.Pin = LED1_RED_Pin | MEMS_LED_Pin | LCD_BL_CTRL_Pin
 8001346:	2378      	movs	r3, #120	; 0x78
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
			| LEFT_MOTOR_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	485c      	ldr	r0, [pc, #368]	; (80014d0 <MX_GPIO_Init+0x2e4>)
 800135e:	f001 fad7 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_I_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_I_Pin | RIGHT_Pin;
 8001362:	f242 0320 	movw	r3, #8224	; 0x2020
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4856      	ldr	r0, [pc, #344]	; (80014d4 <MX_GPIO_Init+0x2e8>)
 800137c:	f001 fac8 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin | QSPI_BK1_IO1_Pin;
 8001380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001392:	230a      	movs	r3, #10
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	484e      	ldr	r0, [pc, #312]	; (80014d8 <MX_GPIO_Init+0x2ec>)
 800139e:	f001 fab7 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : LEFT_MOTOR_SPEED_Pin */
	GPIO_InitStruct.Pin = LEFT_MOTOR_SPEED_Pin;
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LEFT_MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4847      	ldr	r0, [pc, #284]	; (80014d8 <MX_GPIO_Init+0x2ec>)
 80013bc:	f001 faa8 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin */
	GPIO_InitStruct.Pin = ARD_A0_Pin | ARD_A5_Pin;
 80013c0:	2311      	movs	r3, #17
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4840      	ldr	r0, [pc, #256]	; (80014d4 <MX_GPIO_Init+0x2e8>)
 80013d4:	f001 fa9c 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : CTP_INT_Pin */
	GPIO_InitStruct.Pin = CTP_INT_Pin;
 80013d8:	2302      	movs	r3, #2
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x2fc>)
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	483a      	ldr	r0, [pc, #232]	; (80014d4 <MX_GPIO_Init+0x2e8>)
 80013ec:	f001 fa90 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : METRIC_CHANGE_Pin */
	GPIO_InitStruct.Pin = METRIC_CHANGE_Pin;
 80013f0:	2301      	movs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_GPIO_Init+0x2fc>)
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(METRIC_CHANGE_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4836      	ldr	r0, [pc, #216]	; (80014dc <MX_GPIO_Init+0x2f0>)
 8001404:	f001 fa84 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : RIGHT_MOTOR_IA4_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_IA4_Pin;
 8001408:	2310      	movs	r3, #16
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(RIGHT_MOTOR_IA4_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	482f      	ldr	r0, [pc, #188]	; (80014dc <MX_GPIO_Init+0x2f0>)
 8001420:	f001 fa76 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A3_Pin */
	GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001424:	2320      	movs	r3, #32
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001428:	2303      	movs	r3, #3
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4829      	ldr	r0, [pc, #164]	; (80014dc <MX_GPIO_Init+0x2f0>)
 8001438:	f001 fa6a 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_MOTOR_SPEED_Pin PB13 LCD_TE_Pin WIFI_WKUP_Pin
	 LEFT_MOTOR_I_Pin */
	GPIO_InitStruct.Pin = RIGHT_MOTOR_SPEED_Pin | GPIO_PIN_13 | LCD_TE_Pin
 800143c:	f24e 0341 	movw	r3, #57409	; 0xe041
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
			| WIFI_WKUP_Pin | LEFT_MOTOR_I_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4822      	ldr	r0, [pc, #136]	; (80014e0 <MX_GPIO_Init+0x2f4>)
 8001456:	f001 fa5b 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A4_Pin */
	GPIO_InitStruct.Pin = ARD_A4_Pin;
 800145a:	2302      	movs	r3, #2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	481c      	ldr	r0, [pc, #112]	; (80014e0 <MX_GPIO_Init+0x2f4>)
 800146e:	f001 fa4f 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_CLK_Pin */
	GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001472:	2304      	movs	r3, #4
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001482:	2309      	movs	r3, #9
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_GPIO_Init+0x2f4>)
 800148e:	f001 fa3f 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_Detect_Pin */
	GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x2fc>)
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_GPIO_Init+0x2ec>)
 80014a8:	f001 fa32 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 80014ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b2:	2312      	movs	r3, #18
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014be:	2304      	movs	r3, #4
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	e010      	b.n	80014ec <MX_GPIO_Init+0x300>
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	10110000 	.word	0x10110000
 80014ec:	4857      	ldr	r0, [pc, #348]	; (800164c <MX_GPIO_Init+0x460>)
 80014ee:	f001 fa0f 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D13_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001504:	2307      	movs	r3, #7
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	484f      	ldr	r0, [pc, #316]	; (800164c <MX_GPIO_Init+0x460>)
 8001510:	f001 f9fe 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_IO3_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001526:	2309      	movs	r3, #9
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4847      	ldr	r0, [pc, #284]	; (8001650 <MX_GPIO_Init+0x464>)
 8001532:	f001 f9ed 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_BK1_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001546:	230a      	movs	r3, #10
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4840      	ldr	r0, [pc, #256]	; (8001654 <MX_GPIO_Init+0x468>)
 8001552:	f001 f9dd 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin | CODEC_INT_Pin;
 8001556:	f248 0380 	movw	r3, #32896	; 0x8080
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <MX_GPIO_Init+0x46c>)
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <MX_GPIO_Init+0x468>)
 800156c:	f001 f9d0 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_13;
 8001570:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	4832      	ldr	r0, [pc, #200]	; (8001654 <MX_GPIO_Init+0x468>)
 800158a:	f001 f9c1 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2CFMP1_SCL_Pin I2CFMP_SDA_Pin */
	GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin | I2CFMP_SDA_Pin;
 800158e:	23c0      	movs	r3, #192	; 0xc0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800159e:	2304      	movs	r3, #4
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	482c      	ldr	r0, [pc, #176]	; (800165c <MX_GPIO_Init+0x470>)
 80015aa:	f001 f9b1 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D10_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin;
 80015ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c0:	2301      	movs	r3, #1
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4825      	ldr	r0, [pc, #148]	; (8001660 <MX_GPIO_Init+0x474>)
 80015cc:	f001 f9a0 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 80015d0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015e2:	2308      	movs	r3, #8
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4819      	ldr	r0, [pc, #100]	; (8001654 <MX_GPIO_Init+0x468>)
 80015ee:	f001 f98f 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D12_Pin | ARD_D11_Pin;
 80015f2:	2330      	movs	r3, #48	; 0x30
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001602:	2306      	movs	r3, #6
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <MX_GPIO_Init+0x460>)
 800160e:	f001 f97f 	bl	8002910 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_GPIO_Init+0x460>)
 8001630:	f001 f96e 	bl	8002910 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2006      	movs	r0, #6
 800163a:	f000 ffeb 	bl	8002614 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800163e:	2006      	movs	r0, #6
 8001640:	f001 f804 	bl	800264c <HAL_NVIC_EnableIRQ>

}
 8001644:	bf00      	nop
 8001646:	3738      	adds	r7, #56	; 0x38
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020400 	.word	0x40020400
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021800 	.word	0x40021800
 8001658:	10110000 	.word	0x10110000
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000

08001664 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_FSMC_Init+0xbc>)
 800167e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001682:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_FSMC_Init+0xbc>)
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <MX_FSMC_Init+0xc0>)
 8001688:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_FSMC_Init+0xbc>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_FSMC_Init+0xbc>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_FSMC_Init+0xbc>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <MX_FSMC_Init+0xbc>)
 800169e:	2210      	movs	r2, #16
 80016a0:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_FSMC_Init+0xbc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 80016e4:	230f      	movs	r3, #15
 80016e6:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80016e8:	230f      	movs	r3, #15
 80016ea:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 80016ec:	23ff      	movs	r3, #255	; 0xff
 80016ee:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 80016f0:	230f      	movs	r3, #15
 80016f2:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80016f4:	2310      	movs	r3, #16
 80016f6:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80016f8:	2311      	movs	r3, #17
 80016fa:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_FSMC_Init+0xbc>)
 8001708:	f005 fa0c 	bl	8006b24 <HAL_SRAM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_FSMC_Init+0xb2>
		Error_Handler();
 8001712:	f000 f9bd 	bl	8001a90 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20004adc 	.word	0x20004adc
 8001724:	a0000104 	.word	0xa0000104

08001728 <StartPollLidarTask>:
 * @brief  Function implementing the PollLidar thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPollLidarTask */
void StartPollLidarTask(void *argument) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001730:	f00c fff4 	bl	800e71c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	TickType_t lastWakeTime = xTaskGetTickCount();
 8001734:	f00b fc92 	bl	800d05c <xTaskGetTickCount>
 8001738:	60f8      	str	r0, [r7, #12]

	for (;;) {
		//delay for 50ms
		vTaskDelayUntil(&xTaskGetTickCount, LIDAR_RATE);
 800173a:	2132      	movs	r1, #50	; 0x32
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <StartPollLidarTask+0x3c>)
 800173e:	f00b fad1 	bl	800cce4 <vTaskDelayUntil>

		// send 5A 04 04 00 to tell lidar sensor to send data
		HAL_UART_Transmit(&huart7, lidar_tx_buffer, 4, 50);
 8001742:	2332      	movs	r3, #50	; 0x32
 8001744:	2204      	movs	r2, #4
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <StartPollLidarTask+0x40>)
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <StartPollLidarTask+0x44>)
 800174a:	f005 fcba 	bl	80070c2 <HAL_UART_Transmit>

		//get 9 bytes of data and place into buffer
		HAL_UART_Receive(&huart7, lidar_rx_buffer, 9, 50);
 800174e:	2332      	movs	r3, #50	; 0x32
 8001750:	2209      	movs	r2, #9
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <StartPollLidarTask+0x48>)
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <StartPollLidarTask+0x44>)
 8001756:	f005 fd4d 	bl	80071f4 <HAL_UART_Receive>

		printf(lidar_rx_buffer);
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <StartPollLidarTask+0x48>)
 800175c:	f00d fbd6 	bl	800ef0c <iprintf>
	for (;;) {
 8001760:	e7eb      	b.n	800173a <StartPollLidarTask+0x12>
 8001762:	bf00      	nop
 8001764:	0800d05d 	.word	0x0800d05d
 8001768:	20000000 	.word	0x20000000
 800176c:	20004a58 	.word	0x20004a58
 8001770:	20004be8 	.word	0x20004be8

08001774 <StartUpdateLCDTask>:
 * @brief Function implementing the UpdateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCDTask */
void StartUpdateLCDTask(void *argument) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUpdateLCDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f00a f8ff 	bl	800b980 <osDelay>
 8001782:	e7fb      	b.n	800177c <StartUpdateLCDTask+0x8>

08001784 <StartMotorControlTask>:
 * @brief Function implementing the ControlMotors thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorControlTask */
void StartMotorControlTask(void *argument) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorControlTask */
	/* Infinite loop */
	for (;;) {
 800178c:	e7fe      	b.n	800178c <StartMotorControlTask+0x8>
	...

08001790 <StartChangeMetricTask>:
 * @brief Function implementing the ChangeMetric thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChangeMetricTask */
void StartChangeMetricTask(void *argument) {
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartChangeMetricTask */
	/* Infinite loop */
	metric_change = curr_metric;
 8001798:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	4baf      	ldr	r3, [pc, #700]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 800179e:	701a      	strb	r2, [r3, #0]

	TickType_t lastWakeTime = xTaskGetTickCount();
 80017a0:	f00b fc5c 	bl	800d05c <xTaskGetTickCount>
 80017a4:	60f8      	str	r0, [r7, #12]

	// cm -> inch -> feet -> meter
	for (;;) {

		vTaskDelayUntil(&xTaskGetTickCount, METRIC_CHANGE_RATE);
 80017a6:	21c8      	movs	r1, #200	; 0xc8
 80017a8:	48ad      	ldr	r0, [pc, #692]	; (8001a60 <StartChangeMetricTask+0x2d0>)
 80017aa:	f00b fa9b 	bl	800cce4 <vTaskDelayUntil>

		if (metric_change != curr_metric) {
 80017ae:	4bab      	ldr	r3, [pc, #684]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4ba9      	ldr	r3, [pc, #676]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d0f5      	beq.n	80017a6 <StartChangeMetricTask+0x16>
			if (curr_metric == 0) {
 80017ba:	4ba7      	ldr	r3, [pc, #668]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d14b      	bne.n	800185a <StartChangeMetricTask+0xca>
				//metric is cm
				if (metric_change == 1) {
 80017c2:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d114      	bne.n	80017f4 <StartChangeMetricTask+0x64>
					distance *= CM_TO_INCH;
 80017ca:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fec8 	bl	8000564 <__aeabi_i2d>
 80017d4:	a390      	add	r3, pc, #576	; (adr r3, 8001a18 <StartChangeMetricTask+0x288>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff2d 	bl	8000638 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f7ff f939 	bl	8000a5c <__aeabi_d2uiz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e109      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 2) {
 80017f4:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d114      	bne.n	8001826 <StartChangeMetricTask+0x96>
					distance *= CM_TO_INCH * INCH_TO_FEET;
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feaf 	bl	8000564 <__aeabi_i2d>
 8001806:	a386      	add	r3, pc, #536	; (adr r3, 8001a20 <StartChangeMetricTask+0x290>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff14 	bl	8000638 <__aeabi_dmul>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f7ff f920 	bl	8000a5c <__aeabi_d2uiz>
 800181c:	4603      	mov	r3, r0
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b90      	ldr	r3, [pc, #576]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e0f0      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 3) {
 8001826:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b03      	cmp	r3, #3
 800182c:	f040 80ec 	bne.w	8001a08 <StartChangeMetricTask+0x278>
					distance *= CM_TO_INCH * INCH_TO_FEET * FEET_TO_METER;
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe95 	bl	8000564 <__aeabi_i2d>
 800183a:	a37b      	add	r3, pc, #492	; (adr r3, 8001a28 <StartChangeMetricTask+0x298>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fefa 	bl	8000638 <__aeabi_dmul>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	4618      	mov	r0, r3
 800184a:	4621      	mov	r1, r4
 800184c:	f7ff f906 	bl	8000a5c <__aeabi_d2uiz>
 8001850:	4603      	mov	r3, r0
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b83      	ldr	r3, [pc, #524]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e0d6      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else {
					//should never get here
				}
			} else if (curr_metric == 1) {
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d140      	bne.n	80018e4 <StartChangeMetricTask+0x154>
				//metric is inch
				if (metric_change == 0) {
 8001862:	4b7e      	ldr	r3, [pc, #504]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d114      	bne.n	8001894 <StartChangeMetricTask+0x104>
					distance /= CM_TO_INCH;
 800186a:	4b7e      	ldr	r3, [pc, #504]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe78 	bl	8000564 <__aeabi_i2d>
 8001874:	a368      	add	r3, pc, #416	; (adr r3, 8001a18 <StartChangeMetricTask+0x288>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7ff f807 	bl	800088c <__aeabi_ddiv>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f7ff f8e9 	bl	8000a5c <__aeabi_d2uiz>
 800188a:	4603      	mov	r3, r0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0b9      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 2) {
 8001894:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d109      	bne.n	80018b0 <StartChangeMetricTask+0x120>
					distance *= INCH_TO_FEET;
 800189c:	4b71      	ldr	r3, [pc, #452]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e0ab      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 3) {
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	f040 80a7 	bne.w	8001a08 <StartChangeMetricTask+0x278>
					distance *= INCH_TO_FEET * FEET_TO_METER;
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe50 	bl	8000564 <__aeabi_i2d>
 80018c4:	a35a      	add	r3, pc, #360	; (adr r3, 8001a30 <StartChangeMetricTask+0x2a0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe feb5 	bl	8000638 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4618      	mov	r0, r3
 80018d4:	4621      	mov	r1, r4
 80018d6:	f7ff f8c1 	bl	8000a5c <__aeabi_d2uiz>
 80018da:	4603      	mov	r3, r0
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e091      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else {
					//should never get here
				}
			} else if (curr_metric == 2) {
 80018e4:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d13f      	bne.n	800196c <StartChangeMetricTask+0x1dc>
				//metric is feet
				if (metric_change == 0) {
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d114      	bne.n	800191e <StartChangeMetricTask+0x18e>
					distance /= INCH_TO_FEET / CM_TO_INCH;
 80018f4:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe33 	bl	8000564 <__aeabi_i2d>
 80018fe:	a34e      	add	r3, pc, #312	; (adr r3, 8001a38 <StartChangeMetricTask+0x2a8>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffc2 	bl	800088c <__aeabi_ddiv>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4618      	mov	r0, r3
 800190e:	4621      	mov	r1, r4
 8001910:	f7ff f8a4 	bl	8000a5c <__aeabi_d2uiz>
 8001914:	4603      	mov	r3, r0
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e074      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 1) {
 800191e:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d109      	bne.n	800193a <StartChangeMetricTask+0x1aa>
					distance /= INCH_TO_FEET;
 8001926:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4a4f      	ldr	r2, [pc, #316]	; (8001a68 <StartChangeMetricTask+0x2d8>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e066      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 3) {
 800193a:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d162      	bne.n	8001a08 <StartChangeMetricTask+0x278>
					distance *= FEET_TO_METER;
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe0c 	bl	8000564 <__aeabi_i2d>
 800194c:	a33c      	add	r3, pc, #240	; (adr r3, 8001a40 <StartChangeMetricTask+0x2b0>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe71 	bl	8000638 <__aeabi_dmul>
 8001956:	4603      	mov	r3, r0
 8001958:	460c      	mov	r4, r1
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	f7ff f87d 	bl	8000a5c <__aeabi_d2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e04d      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else {
					//should never get here
				}
			} else if (curr_metric == 3) {
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d149      	bne.n	8001a08 <StartChangeMetricTask+0x278>
				//metric is meter
				if (metric_change == 0) {
 8001974:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d114      	bne.n	80019a6 <StartChangeMetricTask+0x216>
					distance /= FEET_TO_METER / INCH_TO_FEET / CM_TO_INCH;
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdef 	bl	8000564 <__aeabi_i2d>
 8001986:	a330      	add	r3, pc, #192	; (adr r3, 8001a48 <StartChangeMetricTask+0x2b8>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe ff7e 	bl	800088c <__aeabi_ddiv>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f7ff f860 	bl	8000a5c <__aeabi_d2uiz>
 800199c:	4603      	mov	r3, r0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e030      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 1) {
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d114      	bne.n	80019d8 <StartChangeMetricTask+0x248>
					distance /= FEET_TO_METER / INCH_TO_FEET;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd6 	bl	8000564 <__aeabi_i2d>
 80019b8:	a325      	add	r3, pc, #148	; (adr r3, 8001a50 <StartChangeMetricTask+0x2c0>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe ff65 	bl	800088c <__aeabi_ddiv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f847 	bl	8000a5c <__aeabi_d2uiz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e017      	b.n	8001a08 <StartChangeMetricTask+0x278>
				} else if (metric_change == 2) {
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d113      	bne.n	8001a08 <StartChangeMetricTask+0x278>
					distance /= FEET_TO_METER;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdbd 	bl	8000564 <__aeabi_i2d>
 80019ea:	a315      	add	r3, pc, #84	; (adr r3, 8001a40 <StartChangeMetricTask+0x2b0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe ff4c 	bl	800088c <__aeabi_ddiv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	4618      	mov	r0, r3
 80019fa:	4621      	mov	r1, r4
 80019fc:	f7ff f82e 	bl	8000a5c <__aeabi_d2uiz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <StartChangeMetricTask+0x2d4>)
 8001a06:	701a      	strb	r2, [r3, #0]
				} else {
					//should never get here
				}
			}
			metric_change = curr_metric;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <StartChangeMetricTask+0x2c8>)
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <StartChangeMetricTask+0x2cc>)
 8001a0e:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xTaskGetTickCount, METRIC_CHANGE_RATE);
 8001a10:	e6c9      	b.n	80017a6 <StartChangeMetricTask+0x16>
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	3a1173c6 	.word	0x3a1173c6
 8001a1c:	3fa0cc43 	.word	0x3fa0cc43
 8001a20:	d71a2da9 	.word	0xd71a2da9
 8001a24:	3fd93264 	.word	0x3fd93264
 8001a28:	0c815e94 	.word	0x0c815e94
 8001a2c:	3fbeb852 	.word	0x3fbeb852
 8001a30:	d9a45edb 	.word	0xd9a45edb
 8001a34:	400d42c3 	.word	0x400d42c3
 8001a38:	e97cb4a4 	.word	0xe97cb4a4
 8001a3c:	4076dc28 	.word	0x4076dc28
 8001a40:	e66d9492 	.word	0xe66d9492
 8001a44:	3fd381d7 	.word	0x3fd381d7
 8001a48:	4d1a6506 	.word	0x4d1a6506
 8001a4c:	3fe8c62e 	.word	0x3fe8c62e
 8001a50:	333cc618 	.word	0x333cc618
 8001a54:	3f9a0275 	.word	0x3f9a0275
 8001a58:	200000b9 	.word	0x200000b9
 8001a5c:	200000b8 	.word	0x200000b8
 8001a60:	0800d05d 	.word	0x0800d05d
 8001a64:	20004ad8 	.word	0x20004ad8
 8001a68:	aaaaaaab 	.word	0xaaaaaaab

08001a6c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a7e:	f000 fccf 	bl	8002420 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40001000 	.word	0x40001000

08001a90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a77      	ldr	r2, [pc, #476]	; (8001cec <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00e      	beq.n	8001b30 <HAL_DFSDM_ChannelMspInit+0x40>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a76      	ldr	r2, [pc, #472]	; (8001cf0 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_DFSDM_ChannelMspInit+0x40>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a74      	ldr	r2, [pc, #464]	; (8001cf4 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_DFSDM_ChannelMspInit+0x40>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a73      	ldr	r2, [pc, #460]	; (8001cf8 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d154      	bne.n	8001bda <HAL_DFSDM_ChannelMspInit+0xea>
 8001b30:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d150      	bne.n	8001bda <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6453      	str	r3, [r2, #68]	; 0x44
 8001b48:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a61      	ldr	r2, [pc, #388]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4856      	ldr	r0, [pc, #344]	; (8001d04 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001baa:	f000 feb1 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	484f      	ldr	r0, [pc, #316]	; (8001d08 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001bca:	f000 fea1 	bl	8002910 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001bd8:	e084      	b.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a43      	ldr	r2, [pc, #268]	; (8001cec <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d07f      	beq.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d07a      	beq.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d075      	beq.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3e      	ldr	r2, [pc, #248]	; (8001cf8 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d070      	beq.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d16c      	bne.n	8001ce4 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	481b      	ldr	r0, [pc, #108]	; (8001d04 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001c96:	f000 fe3b 	bl	8002910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001caa:	2303      	movs	r3, #3
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001cb6:	f000 fe2b 	bl	8002910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001cca:	2306      	movs	r3, #6
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480e      	ldr	r0, [pc, #56]	; (8001d10 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001cd6:	f000 fe1b 	bl	8002910 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	3738      	adds	r7, #56	; 0x38
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40016000 	.word	0x40016000
 8001cf0:	40016020 	.word	0x40016020
 8001cf4:	40016040 	.word	0x40016040
 8001cf8:	40016060 	.word	0x40016060
 8001cfc:	200000bc 	.word	0x200000bc
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	200000c0 	.word	0x200000c0
 8001d10:	40020400 	.word	0x40020400

08001d14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_I2S_MspInit+0x15c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8097 	bne.w	8001e66 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
 8001d48:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a3e      	ldr	r2, [pc, #248]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a37      	ldr	r2, [pc, #220]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a30      	ldr	r2, [pc, #192]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_I2S_MspInit+0x160>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4826      	ldr	r0, [pc, #152]	; (8001e78 <HAL_I2S_MspInit+0x164>)
 8001de0:	f000 fd96 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001de4:	2308      	movs	r3, #8
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df4:	2305      	movs	r3, #5
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <HAL_I2S_MspInit+0x164>)
 8001e00:	f000 fd86 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001e04:	2308      	movs	r3, #8
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4817      	ldr	r0, [pc, #92]	; (8001e7c <HAL_I2S_MspInit+0x168>)
 8001e20:	f000 fd76 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001e24:	2308      	movs	r3, #8
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e34:	2305      	movs	r3, #5
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4810      	ldr	r0, [pc, #64]	; (8001e80 <HAL_I2S_MspInit+0x16c>)
 8001e40:	f000 fd66 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e56:	2305      	movs	r3, #5
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <HAL_I2S_MspInit+0x170>)
 8001e62:	f000 fd55 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40003800 	.word	0x40003800
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40020400 	.word	0x40020400

08001e88 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_SD_MspInit+0xc0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d14a      	bne.n	8001f40 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_SD_MspInit+0xc4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f0e:	230c      	movs	r3, #12
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <HAL_SD_MspInit+0xc8>)
 8001f1a:	f000 fcf9 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001f1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f22:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f30:	230c      	movs	r3, #12
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <HAL_SD_MspInit+0xcc>)
 8001f3c:	f000 fce8 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020800 	.word	0x40020800

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_UART_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_UART_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = LIDAR_IN_Pin|LIDAR_OUT_Pin;
 8001fb2:	23c0      	movs	r3, #192	; 0xc0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001fce:	f000 fc9f 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40007800 	.word	0x40007800
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021400 	.word	0x40021400

08001fe8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_FSMC_MspInit+0xc8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d150      	bne.n	80020a6 <HAL_FSMC_MspInit+0xbe>
    return;
  }
  FSMC_Initialized = 1;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_FSMC_MspInit+0xc8>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_FSMC_MspInit+0xcc>)
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_FSMC_MspInit+0xcc>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_FSMC_MspInit+0xcc>)
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8002026:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800202a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002038:	230c      	movs	r3, #12
 800203a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	481d      	ldr	r0, [pc, #116]	; (80020b8 <HAL_FSMC_MspInit+0xd0>)
 8002042:	f000 fc65 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8002046:	233f      	movs	r3, #63	; 0x3f
 8002048:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002056:	230c      	movs	r3, #12
 8002058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4817      	ldr	r0, [pc, #92]	; (80020bc <HAL_FSMC_MspInit+0xd4>)
 8002060:	f000 fc56 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8002064:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002068:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002076:	230c      	movs	r3, #12
 8002078:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4810      	ldr	r0, [pc, #64]	; (80020c0 <HAL_FSMC_MspInit+0xd8>)
 8002080:	f000 fc46 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8002084:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002088:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002096:	230c      	movs	r3, #12
 8002098:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_FSMC_MspInit+0xdc>)
 80020a0:	f000 fc36 	bl	8002910 <HAL_GPIO_Init>
 80020a4:	e000      	b.n	80020a8 <HAL_FSMC_MspInit+0xc0>
    return;
 80020a6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200000c4 	.word	0x200000c4
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80020d0:	f7ff ff8a 	bl	8001fe8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	2036      	movs	r0, #54	; 0x36
 80020f2:	f000 fa8f 	bl	8002614 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020f6:	2036      	movs	r0, #54	; 0x36
 80020f8:	f000 faa8 	bl	800264c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_InitTick+0xa0>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_InitTick+0xa0>)
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_InitTick+0xa0>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002118:	f107 0210 	add.w	r2, r7, #16
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f003 f942 	bl	80053ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002128:	f003 f918 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 800212c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	4a13      	ldr	r2, [pc, #76]	; (8002180 <HAL_InitTick+0xa4>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0c9b      	lsrs	r3, r3, #18
 8002138:	3b01      	subs	r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_InitTick+0xa8>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_InitTick+0xac>)
 8002140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_InitTick+0xa8>)
 8002144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002148:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_InitTick+0xa8>)
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_InitTick+0xa8>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_InitTick+0xa8>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <HAL_InitTick+0xa8>)
 800215e:	f004 fd25 	bl	8006bac <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002168:	4806      	ldr	r0, [pc, #24]	; (8002184 <HAL_InitTick+0xa8>)
 800216a:	f004 fd54 	bl	8006c16 <HAL_TIM_Base_Start_IT>
 800216e:	4603      	mov	r3, r0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3730      	adds	r7, #48	; 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	431bde83 	.word	0x431bde83
 8002184:	20004c40 	.word	0x20004c40
 8002188:	40001000 	.word	0x40001000

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
metric_change = (metric_change + 1) % 4;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <EXTI0_IRQHandler+0x28>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	425a      	negs	r2, r3
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	bf58      	it	pl
 80021d6:	4253      	negpl	r3, r2
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <EXTI0_IRQHandler+0x28>)
 80021dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 fd42 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200000b8 	.word	0x200000b8

080021ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM6_DAC_IRQHandler+0x10>)
 80021f2:	f004 fd34 	bl	8006c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004c40 	.word	0x20004c40

08002200 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <OTG_FS_IRQHandler+0x10>)
 8002206:	f000 ffe1 	bl	80031cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200050cc 	.word	0x200050cc

08002214 <_read>:
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00a      	b.n	800223c <_read+0x28>
 8002226:	f3af 8000 	nop.w
 800222a:	4601      	mov	r1, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf0      	blt.n	8002226 <_read+0x12>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_write>:
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e009      	b.n	8002274 <_write+0x26>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f3af 8000 	nop.w
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf1      	blt.n	8002260 <_write+0x12>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_close>:
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_fstat>:
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_isatty>:
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	2301      	movs	r3, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_lseek>:
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	2300      	movs	r3, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <_sbrk>:
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
 8002320:	f00c fcfe 	bl	800ed20 <__errno>
 8002324:	4602      	mov	r2, r0
 8002326:	230c      	movs	r3, #12
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20050000 	.word	0x20050000
 8002350:	00000400 	.word	0x00000400
 8002354:	200000c8 	.word	0x200000c8
 8002358:	20005398 	.word	0x20005398

0800235c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <SystemInit+0x28>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <SystemInit+0x28>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SystemInit+0x28>)
 8002372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002376:	609a      	str	r2, [r3, #8]
#endif
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <Reset_Handler>:
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c0 <LoopFillZerobss+0x14>
 800238c:	2100      	movs	r1, #0
 800238e:	e003      	b.n	8002398 <LoopCopyDataInit>

08002390 <CopyDataInit>:
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <LoopFillZerobss+0x18>)
 8002392:	585b      	ldr	r3, [r3, r1]
 8002394:	5043      	str	r3, [r0, r1]
 8002396:	3104      	adds	r1, #4

08002398 <LoopCopyDataInit>:
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <LoopFillZerobss+0x1c>)
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <LoopFillZerobss+0x20>)
 800239c:	1842      	adds	r2, r0, r1
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3f6      	bcc.n	8002390 <CopyDataInit>
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <LoopFillZerobss+0x24>)
 80023a4:	e002      	b.n	80023ac <LoopFillZerobss>

080023a6 <FillZerobss>:
 80023a6:	2300      	movs	r3, #0
 80023a8:	f842 3b04 	str.w	r3, [r2], #4

080023ac <LoopFillZerobss>:
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <LoopFillZerobss+0x28>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3f9      	bcc.n	80023a6 <FillZerobss>
 80023b2:	f7ff ffd3 	bl	800235c <SystemInit>
 80023b6:	f00c fcb9 	bl	800ed2c <__libc_init_array>
 80023ba:	f7fe fcef 	bl	8000d9c <main>
 80023be:	4770      	bx	lr
 80023c0:	20050000 	.word	0x20050000
 80023c4:	0800fd4c 	.word	0x0800fd4c
 80023c8:	20000000 	.word	0x20000000
 80023cc:	2000009c 	.word	0x2000009c
 80023d0:	2000009c 	.word	0x2000009c
 80023d4:	20005394 	.word	0x20005394

080023d8 <ADC_IRQHandler>:
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>
	...

080023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_Init+0x40>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_Init+0x40>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_Init+0x40>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 f8fa 	bl	80025fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fe66 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7ff fb46 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000010 	.word	0x20000010
 8002444:	20004c80 	.word	0x20004c80

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20004c80 	.word	0x20004c80

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_Delay+0x40>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000010 	.word	0x20000010

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff4c 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002626:	f7ff ff61 	bl	80024ec <__NVIC_GetPriorityGrouping>
 800262a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6978      	ldr	r0, [r7, #20]
 8002632:	f7ff ffb1 	bl	8002598 <NVIC_EncodePriority>
 8002636:	4602      	mov	r2, r0
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff80 	bl	8002544 <__NVIC_SetPriority>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff54 	bl	8002508 <__NVIC_EnableIRQ>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0cf      	b.n	800281a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a69      	ldr	r2, [pc, #420]	; (8002824 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_DFSDM_ChannelInit+0x3a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a67      	ldr	r2, [pc, #412]	; (8002828 <HAL_DFSDM_ChannelInit+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_DFSDM_ChannelInit+0x3a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a66      	ldr	r2, [pc, #408]	; (800282c <HAL_DFSDM_ChannelInit+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_DFSDM_ChannelInit+0x3a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a64      	ldr	r2, [pc, #400]	; (8002830 <HAL_DFSDM_ChannelInit+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d106      	bne.n	80026b0 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_DFSDM_ChannelInit+0x1cc>)
 80026a4:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80026a6:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_DFSDM_ChannelInit+0x1d0>)
 80026a8:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80026aa:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_DFSDM_ChannelInit+0x1bc>)
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e005      	b.n	80026bc <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80026b0:	4b62      	ldr	r3, [pc, #392]	; (800283c <HAL_DFSDM_ChannelInit+0x1d4>)
 80026b2:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80026b4:	4b62      	ldr	r3, [pc, #392]	; (8002840 <HAL_DFSDM_ChannelInit+0x1d8>)
 80026b6:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80026b8:	4b62      	ldr	r3, [pc, #392]	; (8002844 <HAL_DFSDM_ChannelInit+0x1dc>)
 80026ba:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 f8c1 	bl	8002848 <DFSDM_GetChannelFromInstance>
 80026c6:	4603      	mov	r3, r0
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0a0      	b.n	800281a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fa09 	bl	8001af0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d125      	bne.n	800273c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d108      	bne.n	8002730 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800274a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800275a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002760:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 020f 	bic.w	r2, r2, #15
 8002778:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027a0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 0207 	and.w	r2, r2, #7
 80027cc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027f8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f81e 	bl	8002848 <DFSDM_GetChannelFromInstance>
 800280c:	4603      	mov	r3, r0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40016000 	.word	0x40016000
 8002828:	40016020 	.word	0x40016020
 800282c:	40016040 	.word	0x40016040
 8002830:	40016060 	.word	0x40016060
 8002834:	200000cc 	.word	0x200000cc
 8002838:	200000d0 	.word	0x200000d0
 800283c:	200000e0 	.word	0x200000e0
 8002840:	200000e4 	.word	0x200000e4
 8002844:	40016400 	.word	0x40016400

08002848 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <DFSDM_GetChannelFromInstance+0x9c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <DFSDM_GetChannelFromInstance+0x18>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <DFSDM_GetChannelFromInstance+0xa0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d102      	bne.n	8002866 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e037      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <DFSDM_GetChannelFromInstance+0xa4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <DFSDM_GetChannelFromInstance+0x2e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d102      	bne.n	800287c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002876:	2301      	movs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e02c      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <DFSDM_GetChannelFromInstance+0xac>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <DFSDM_GetChannelFromInstance+0x44>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d102      	bne.n	8002892 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800288c:	2302      	movs	r3, #2
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e021      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <DFSDM_GetChannelFromInstance+0xb4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <DFSDM_GetChannelFromInstance+0x5a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <DFSDM_GetChannelFromInstance+0xb8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d102      	bne.n	80028a8 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80028a2:	2303      	movs	r3, #3
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e016      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <DFSDM_GetChannelFromInstance+0xbc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80028b0:	2304      	movs	r3, #4
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e00f      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <DFSDM_GetChannelFromInstance+0xc0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d102      	bne.n	80028c4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80028be:	2305      	movs	r3, #5
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e008      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a11      	ldr	r2, [pc, #68]	; (800290c <DFSDM_GetChannelFromInstance+0xc4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d102      	bne.n	80028d2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80028cc:	2306      	movs	r3, #6
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e001      	b.n	80028d6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80028d2:	2307      	movs	r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40016000 	.word	0x40016000
 80028e8:	40016400 	.word	0x40016400
 80028ec:	40016020 	.word	0x40016020
 80028f0:	40016420 	.word	0x40016420
 80028f4:	40016040 	.word	0x40016040
 80028f8:	40016440 	.word	0x40016440
 80028fc:	40016060 	.word	0x40016060
 8002900:	40016460 	.word	0x40016460
 8002904:	40016480 	.word	0x40016480
 8002908:	400164a0 	.word	0x400164a0
 800290c:	400164c0 	.word	0x400164c0

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e165      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	f040 8154 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00b      	beq.n	800296a <HAL_GPIO_Init+0x5a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800295e:	2b11      	cmp	r3, #17
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b12      	cmp	r3, #18
 8002968:	d130      	bne.n	80029cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0xfc>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b12      	cmp	r3, #18
 8002a0a:	d123      	bne.n	8002a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0203 	and.w	r2, r3, #3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80ae 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab2:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_GPIO_Init+0x300>)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x21a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	; (8002c18 <HAL_GPIO_Init+0x308>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x216>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_GPIO_Init+0x30c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x212>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_GPIO_Init+0x310>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x20e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <HAL_GPIO_Init+0x314>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x20a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_GPIO_Init+0x318>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x206>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <HAL_GPIO_Init+0x31c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x202>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00c      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00a      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e008      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e004      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4093      	lsls	r3, r2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3c:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_GPIO_Init+0x300>)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4a:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6e:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b74:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	f67f ae96 	bls.w	800292c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3724      	adds	r7, #36	; 0x24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f806 	bl	8002c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb0:	b08f      	sub	sp, #60	; 0x3c
 8002cb2:	af0a      	add	r7, sp, #40	; 0x28
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e054      	b.n	8002d6a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f00b fd72 	bl	800e7c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 fcfe 	bl	8008700 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	687e      	ldr	r6, [r7, #4]
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d22:	1d33      	adds	r3, r6, #4
 8002d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	f005 fc78 	bl	800861c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 fcf5 	bl	8008722 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	687e      	ldr	r6, [r7, #4]
 8002d40:	466d      	mov	r5, sp
 8002d42:	f106 0410 	add.w	r4, r6, #16
 8002d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d56:	1d33      	adds	r3, r6, #4
 8002d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5a:	6838      	ldr	r0, [r7, #0]
 8002d5c:	f005 fe08 	bl	8008970 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d72 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002d72:	b590      	push	{r4, r7, lr}
 8002d74:	b089      	sub	sp, #36	; 0x24
 8002d76:	af04      	add	r7, sp, #16
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	4608      	mov	r0, r1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4603      	mov	r3, r0
 8002d82:	70fb      	strb	r3, [r7, #3]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70bb      	strb	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_HCD_HC_Init+0x28>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e07f      	b.n	8002e9a <HAL_HCD_HC_Init+0x128>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	333d      	adds	r3, #61	; 0x3d
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3338      	adds	r3, #56	; 0x38
 8002dc6:	787a      	ldrb	r2, [r7, #1]
 8002dc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3340      	adds	r3, #64	; 0x40
 8002dda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ddc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3339      	adds	r3, #57	; 0x39
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	333f      	adds	r3, #63	; 0x3f
 8002e02:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	78bb      	ldrb	r3, [r7, #2]
 8002e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	333a      	adds	r3, #58	; 0x3a
 8002e20:	4602      	mov	r2, r0
 8002e22:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da0a      	bge.n	8002e42 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	333b      	adds	r3, #59	; 0x3b
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e009      	b.n	8002e56 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	333b      	adds	r3, #59	; 0x3b
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	333c      	adds	r3, #60	; 0x3c
 8002e66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e6a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	787c      	ldrb	r4, [r7, #1]
 8002e72:	78ba      	ldrb	r2, [r7, #2]
 8002e74:	78f9      	ldrb	r1, [r7, #3]
 8002e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	4623      	mov	r3, r4
 8002e88:	f005 feee 	bl	8008c68 <USB_HC_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}

08002ea2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_HCD_HC_Halt+0x1e>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e00f      	b.n	8002ee0 <HAL_HCD_HC_Halt+0x3e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f006 f92a 	bl	800912a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	70fb      	strb	r3, [r7, #3]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70bb      	strb	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	333b      	adds	r3, #59	; 0x3b
 8002f12:	78ba      	ldrb	r2, [r7, #2]
 8002f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	333f      	adds	r3, #63	; 0x3f
 8002f26:	787a      	ldrb	r2, [r7, #1]
 8002f28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f2a:	7c3b      	ldrb	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3342      	adds	r3, #66	; 0x42
 8002f40:	2203      	movs	r2, #3
 8002f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	333d      	adds	r3, #61	; 0x3d
 8002f54:	7f3a      	ldrb	r2, [r7, #28]
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e009      	b.n	8002f6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3342      	adds	r3, #66	; 0x42
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f6e:	787b      	ldrb	r3, [r7, #1]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	f200 80d6 	bhi.w	8003122 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	0800310d 	.word	0x0800310d
 8002f84:	08002ff9 	.word	0x08002ff9
 8002f88:	08003083 	.word	0x08003083
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002f8c:	7c3b      	ldrb	r3, [r7, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 80c9 	bne.w	8003126 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002f94:	78bb      	ldrb	r3, [r7, #2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80c5 	bne.w	8003126 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002f9c:	8b3b      	ldrh	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	3351      	adds	r3, #81	; 0x51
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3351      	adds	r3, #81	; 0x51
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	3342      	adds	r3, #66	; 0x42
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fe0:	e0a1      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3342      	adds	r3, #66	; 0x42
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	701a      	strb	r2, [r3, #0]
      break;
 8002ff6:	e096      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ff8:	78bb      	ldrb	r3, [r7, #2]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d120      	bne.n	8003040 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	3351      	adds	r3, #81	; 0x51
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	3342      	adds	r3, #66	; 0x42
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003028:	e07e      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	3342      	adds	r3, #66	; 0x42
 800303a:	2202      	movs	r2, #2
 800303c:	701a      	strb	r2, [r3, #0]
      break;
 800303e:	e073      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	3350      	adds	r3, #80	; 0x50
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	3342      	adds	r3, #66	; 0x42
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
      break;
 800306a:	e05d      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	3342      	adds	r3, #66	; 0x42
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
      break;
 8003080:	e052      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d120      	bne.n	80030ca <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3351      	adds	r3, #81	; 0x51
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	3342      	adds	r3, #66	; 0x42
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030b2:	e039      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	3342      	adds	r3, #66	; 0x42
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]
      break;
 80030c8:	e02e      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	3350      	adds	r3, #80	; 0x50
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3342      	adds	r3, #66	; 0x42
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
      break;
 80030f4:	e018      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	3342      	adds	r3, #66	; 0x42
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      break;
 800310a:	e00d      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	3342      	adds	r3, #66	; 0x42
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e002      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003126:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	3344      	adds	r3, #68	; 0x44
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	8b39      	ldrh	r1, [r7, #24]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4403      	add	r3, r0
 800314c:	3348      	adds	r3, #72	; 0x48
 800314e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	334c      	adds	r3, #76	; 0x4c
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3339      	adds	r3, #57	; 0x39
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	335d      	adds	r3, #93	; 0x5d
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	3338      	adds	r3, #56	; 0x38
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	18d1      	adds	r1, r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	f005 fe5e 	bl	8008e7c <USB_HC_StartXfer>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop

080031cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fb81 	bl	80088ea <USB_GetMode>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	f040 80ef 	bne.w	80033ce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 fb65 	bl	80088c4 <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80e5 	beq.w	80033cc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f005 fb5c 	bl	80088c4 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003216:	d104      	bne.n	8003222 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003220:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f005 fb4c 	bl	80088c4 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d104      	bne.n	8003242 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003240:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f005 fb3c 	bl	80088c4 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 fb2c 	bl	80088c4 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d103      	bne.n	800327e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2202      	movs	r2, #2
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f005 fb1e 	bl	80088c4 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003292:	d115      	bne.n	80032c0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800329c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f00b fb06 	bl	800e8c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 fc0e 	bl	8008adc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 fafd 	bl	80088c4 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d102      	bne.n	80032dc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 f966 	bl	80045a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 faef 	bl	80088c4 <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d106      	bne.n	80032fe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f00b fac9 	bl	800e888 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2208      	movs	r2, #8
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f005 fade 	bl	80088c4 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003312:	d138      	bne.n	8003386 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f005 fef5 	bl	8009108 <USB_HC_ReadInterrupt>
 800331e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e025      	b.n	8003372 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003350:	d106      	bne.n	8003360 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8cf 	bl	80034fc <HCD_HC_IN_IRQHandler>
 800335e:	e005      	b.n	800336c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fcfd 	bl	8003d66 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	d3d4      	bcc.n	8003326 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f005 fa9a 	bl	80088c4 <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d101      	bne.n	800339e <HAL_HCD_IRQHandler+0x1d2>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_HCD_IRQHandler+0x1d4>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d014      	beq.n	80033ce <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0210 	bic.w	r2, r2, #16
 80033b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f001 f84b 	bl	8004450 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0210 	orr.w	r2, r2, #16
 80033c8:	619a      	str	r2, [r3, #24]
 80033ca:	e000      	b.n	80033ce <HAL_HCD_IRQHandler+0x202>
      return;
 80033cc:	bf00      	nop
    }
  }
}
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_HCD_Start+0x16>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e013      	b.n	8003412 <HAL_HCD_Start+0x3e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 f971 	bl	80086de <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fbce 	bl	8008ba4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_HCD_Stop+0x16>
 800342c:	2302      	movs	r3, #2
 800342e:	e00d      	b.n	800344c <HAL_HCD_Stop+0x32>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f005 ffaf 	bl	80093a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fb75 	bl	8008b50 <USB_ResetPort>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	335c      	adds	r3, #92	; 0x5c
 800348c:	781b      	ldrb	r3, [r3, #0]
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	334c      	adds	r3, #76	; 0x4c
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f005 fbb7 	bl	8008c44 <USB_GetCurrentFrame>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fb92 	bl	8008c16 <USB_GetHostSpeed>
 80034f2:	4603      	mov	r3, r0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d119      	bne.n	8003560 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	461a      	mov	r2, r3
 800353a:	2304      	movs	r3, #4
 800353c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	440a      	add	r2, r1
 8003554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	60d3      	str	r3, [r2, #12]
 800355e:	e0ce      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003576:	d12c      	bne.n	80035d2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800358a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	440b      	add	r3, r1
 800359a:	335d      	adds	r3, #93	; 0x5d
 800359c:	2207      	movs	r2, #7
 800359e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	0151      	lsls	r1, r2, #5
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	440a      	add	r2, r1
 80035b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 fdad 	bl	800912a <USB_HC_Halt>
 80035d0:	e095      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d109      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2320      	movs	r3, #32
 80035f8:	6093      	str	r3, [r2, #8]
 80035fa:	e080      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b08      	cmp	r3, #8
 8003610:	d134      	bne.n	800367c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	440a      	add	r2, r1
 8003628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	335d      	adds	r3, #93	; 0x5d
 8003642:	2205      	movs	r2, #5
 8003644:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2310      	movs	r3, #16
 8003656:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	461a      	mov	r2, r3
 8003666:	2308      	movs	r3, #8
 8003668:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fd58 	bl	800912a <USB_HC_Halt>
 800367a:	e040      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d134      	bne.n	80036fe <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f005 fd33 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2310      	movs	r3, #16
 80036d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	335d      	adds	r3, #93	; 0x5d
 80036e6:	2208      	movs	r2, #8
 80036e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	461a      	mov	r2, r3
 80036f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d122      	bne.n	800375c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	440a      	add	r2, r1
 800372c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f005 fcf2 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003758:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800375a:	e300      	b.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	f040 80fd 	bne.w	800396e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	3348      	adds	r3, #72	; 0x48
 800378c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0159      	lsls	r1, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	440b      	add	r3, r1
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80037a0:	1ad1      	subs	r1, r2, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4403      	add	r3, r0
 80037b0:	334c      	adds	r3, #76	; 0x4c
 80037b2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	440b      	add	r3, r1
 80037c2:	335d      	adds	r3, #93	; 0x5d
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	3358      	adds	r3, #88	; 0x58
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2301      	movs	r3, #1
 80037ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	333f      	adds	r3, #63	; 0x3f
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	333f      	adds	r3, #63	; 0x3f
 8003814:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003816:	2b02      	cmp	r3, #2
 8003818:	d121      	bne.n	800385e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	440a      	add	r2, r1
 8003830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f005 fc70 	bl	800912a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	461a      	mov	r2, r3
 8003858:	2310      	movs	r3, #16
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	e070      	b.n	8003940 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	333f      	adds	r3, #63	; 0x3f
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d12a      	bne.n	80038ca <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	440a      	add	r2, r1
 800388a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003892:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	335c      	adds	r3, #92	; 0x5c
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	b2d8      	uxtb	r0, r3
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	335c      	adds	r3, #92	; 0x5c
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4601      	mov	r1, r0
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f00b f80a 	bl	800e8dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80038c8:	e03a      	b.n	8003940 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	333f      	adds	r3, #63	; 0x3f
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d12f      	bne.n	8003940 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	335c      	adds	r3, #92	; 0x5c
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3350      	adds	r3, #80	; 0x50
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3350      	adds	r3, #80	; 0x50
 800391c:	4602      	mov	r2, r0
 800391e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	b2d8      	uxtb	r0, r3
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	335c      	adds	r3, #92	; 0x5c
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	4601      	mov	r1, r0
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f00a ffce 	bl	800e8dc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	3350      	adds	r3, #80	; 0x50
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2d8      	uxtb	r0, r3
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	3350      	adds	r3, #80	; 0x50
 8003968:	4602      	mov	r2, r0
 800396a:	701a      	strb	r2, [r3, #0]
}
 800396c:	e1f7      	b.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	f040 811a 	bne.w	8003bba <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	440a      	add	r2, r1
 800399c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a0:	f023 0302 	bic.w	r3, r3, #2
 80039a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	335d      	adds	r3, #93	; 0x5d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10a      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	335c      	adds	r3, #92	; 0x5c
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e0d9      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	335d      	adds	r3, #93	; 0x5d
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d10a      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	335c      	adds	r3, #92	; 0x5c
 80039f8:	2205      	movs	r2, #5
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e0c3      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	335d      	adds	r3, #93	; 0x5d
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d00a      	beq.n	8003a2a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	335d      	adds	r3, #93	; 0x5d
 8003a24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d156      	bne.n	8003ad8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	3358      	adds	r3, #88	; 0x58
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	1c59      	adds	r1, r3, #1
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4403      	add	r3, r0
 8003a4c:	3358      	adds	r3, #88	; 0x58
 8003a4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3358      	adds	r3, #88	; 0x58
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d914      	bls.n	8003a90 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	3358      	adds	r3, #88	; 0x58
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	335c      	adds	r3, #92	; 0x5c
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e009      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	335c      	adds	r3, #92	; 0x5c
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003aba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e056      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	335d      	adds	r3, #93	; 0x5d
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d123      	bne.n	8003b36 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	335c      	adds	r3, #92	; 0x5c
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b18:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e027      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	335d      	adds	r3, #93	; 0x5d
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d11c      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	3358      	adds	r3, #88	; 0x58
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4403      	add	r3, r0
 8003b6e:	3358      	adds	r3, #88	; 0x58
 8003b70:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	335c      	adds	r3, #92	; 0x5c
 8003b82:	2204      	movs	r2, #4
 8003b84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	461a      	mov	r2, r3
 8003b94:	2302      	movs	r3, #2
 8003b96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	b2d8      	uxtb	r0, r3
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335c      	adds	r3, #92	; 0x5c
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f00a fe92 	bl	800e8dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bb8:	e0d1      	b.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d13e      	bne.n	8003c4e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3358      	adds	r3, #88	; 0x58
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4403      	add	r3, r0
 8003c12:	3358      	adds	r3, #88	; 0x58
 8003c14:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	335d      	adds	r3, #93	; 0x5d
 8003c26:	2206      	movs	r2, #6
 8003c28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f005 fa78 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	461a      	mov	r2, r3
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	6093      	str	r3, [r2, #8]
}
 8003c4c:	e087      	b.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d17c      	bne.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	333f      	adds	r3, #63	; 0x3f
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d122      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	440b      	add	r3, r1
 8003c88:	3358      	adds	r3, #88	; 0x58
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 fa36 	bl	800912a <USB_HC_Halt>
 8003cbe:	e045      	b.n	8003d4c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	333f      	adds	r3, #63	; 0x3f
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	333f      	adds	r3, #63	; 0x3f
 8003ce6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d12f      	bne.n	8003d4c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3358      	adds	r3, #88	; 0x58
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d121      	bne.n	8003d4c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	440b      	add	r3, r1
 8003d16:	335d      	adds	r3, #93	; 0x5d
 8003d18:	2203      	movs	r2, #3
 8003d1a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 f9ef 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	6093      	str	r3, [r2, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d119      	bne.n	8003dca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	461a      	mov	r2, r3
 8003da4:	2304      	movs	r3, #4
 8003da6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003dc8:	e33e      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d141      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dec:	461a      	mov	r2, r3
 8003dee:	2320      	movs	r3, #32
 8003df0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	333d      	adds	r3, #61	; 0x3d
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 831f 	bne.w	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	333d      	adds	r3, #61	; 0x3d
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	335c      	adds	r3, #92	; 0x5c
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 f964 	bl	800912a <USB_HC_Halt>
}
 8003e62:	e2f1      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d13f      	bne.n	8003efa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	335d      	adds	r3, #93	; 0x5d
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	333d      	adds	r3, #61	; 0x3d
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	3358      	adds	r3, #88	; 0x58
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f005 f922 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2340      	movs	r3, #64	; 0x40
 8003ef6:	6093      	str	r3, [r2, #8]
}
 8003ef8:	e2a6      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f10:	d122      	bne.n	8003f58 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 f8f4 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f54:	6093      	str	r3, [r2, #8]
}
 8003f56:	e277      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d135      	bne.n	8003fda <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3358      	adds	r3, #88	; 0x58
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f005 f8bc 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	335d      	adds	r3, #93	; 0x5d
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
}
 8003fd8:	e236      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d12b      	bne.n	8004048 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2308      	movs	r3, #8
 8004000:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	440a      	add	r2, r1
 8004018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f005 f87c 	bl	800912a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	335d      	adds	r3, #93	; 0x5d
 8004042:	2205      	movs	r2, #5
 8004044:	701a      	strb	r2, [r3, #0]
}
 8004046:	e1ff      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b10      	cmp	r3, #16
 800405c:	d155      	bne.n	800410a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	3358      	adds	r3, #88	; 0x58
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	335d      	adds	r3, #93	; 0x5d
 8004082:	2203      	movs	r2, #3
 8004084:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	440b      	add	r3, r1
 8004094:	333d      	adds	r3, #61	; 0x3d
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d114      	bne.n	80040c6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	333c      	adds	r3, #60	; 0x3c
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	333d      	adds	r3, #61	; 0x3d
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 f81a 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	2310      	movs	r3, #16
 8004106:	6093      	str	r3, [r2, #8]
}
 8004108:	e19e      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d12b      	bne.n	8004178 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f004 ffed 	bl	800912a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	335d      	adds	r3, #93	; 0x5d
 8004160:	2206      	movs	r2, #6
 8004162:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	6093      	str	r3, [r2, #8]
}
 8004176:	e167      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d135      	bne.n	80041fc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 ffb5 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	2310      	movs	r3, #16
 80041d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	461a      	mov	r2, r3
 80041e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	335d      	adds	r3, #93	; 0x5d
 80041f6:	2208      	movs	r2, #8
 80041f8:	701a      	strb	r2, [r3, #0]
}
 80041fa:	e125      	b.n	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	f040 811a 	bne.w	8004448 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	440a      	add	r2, r1
 800422a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800422e:	f023 0302 	bic.w	r3, r3, #2
 8004232:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	335d      	adds	r3, #93	; 0x5d
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d137      	bne.n	80042ba <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	335c      	adds	r3, #92	; 0x5c
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	333f      	adds	r3, #63	; 0x3f
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d00b      	beq.n	800428c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	333f      	adds	r3, #63	; 0x3f
 8004284:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	f040 80c5 	bne.w	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	3351      	adds	r3, #81	; 0x51
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	f083 0301 	eor.w	r3, r3, #1
 80042a2:	b2d8      	uxtb	r0, r3
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	3351      	adds	r3, #81	; 0x51
 80042b4:	4602      	mov	r2, r0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e0ad      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	335d      	adds	r3, #93	; 0x5d
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10a      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	2202      	movs	r2, #2
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e097      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	335d      	adds	r3, #93	; 0x5d
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d10a      	bne.n	8004312 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	335c      	adds	r3, #92	; 0x5c
 800430c:	2202      	movs	r2, #2
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e081      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	440b      	add	r3, r1
 8004320:	335d      	adds	r3, #93	; 0x5d
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d10a      	bne.n	800433e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	440b      	add	r3, r1
 8004336:	335c      	adds	r3, #92	; 0x5c
 8004338:	2205      	movs	r2, #5
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e06b      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	335d      	adds	r3, #93	; 0x5d
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d00a      	beq.n	800436a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	335d      	adds	r3, #93	; 0x5d
 8004364:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004366:	2b08      	cmp	r3, #8
 8004368:	d155      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	3358      	adds	r3, #88	; 0x58
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c59      	adds	r1, r3, #1
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4403      	add	r3, r0
 800438c:	3358      	adds	r3, #88	; 0x58
 800438e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	440b      	add	r3, r1
 800439e:	3358      	adds	r3, #88	; 0x58
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d914      	bls.n	80043d0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	440b      	add	r3, r1
 80043b4:	3358      	adds	r3, #88	; 0x58
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	335c      	adds	r3, #92	; 0x5c
 80043ca:	2204      	movs	r2, #4
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e009      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	335c      	adds	r3, #92	; 0x5c
 80043e0:	2202      	movs	r2, #2
 80043e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004402:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	461a      	mov	r2, r3
 8004424:	2302      	movs	r3, #2
 8004426:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	b2d8      	uxtb	r0, r3
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	335c      	adds	r3, #92	; 0x5c
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	4601      	mov	r1, r0
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f00a fa4a 	bl	800e8dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004448:	bf00      	nop
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	0c5b      	lsrs	r3, r3, #17
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004484:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d003      	beq.n	8004494 <HCD_RXQLVL_IRQHandler+0x44>
 800448c:	2b05      	cmp	r3, #5
 800448e:	f000 8082 	beq.w	8004596 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004492:	e083      	b.n	800459c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d07f      	beq.n	800459a <HCD_RXQLVL_IRQHandler+0x14a>
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	3344      	adds	r3, #68	; 0x44
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d074      	beq.n	800459a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3344      	adds	r3, #68	; 0x44
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	b292      	uxth	r2, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	f004 f9d1 	bl	8008872 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	3344      	adds	r3, #68	; 0x44
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	18d1      	adds	r1, r2, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4403      	add	r3, r0
 80044f4:	3344      	adds	r3, #68	; 0x44
 80044f6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	440b      	add	r3, r1
 8004506:	334c      	adds	r3, #76	; 0x4c
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	18d1      	adds	r1, r2, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4403      	add	r3, r0
 800451c:	334c      	adds	r3, #76	; 0x4c
 800451e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HCD_RXQLVL_IRQHandler+0x154>)
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d031      	beq.n	800459a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800454c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004554:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	3350      	adds	r3, #80	; 0x50
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f083 0301 	eor.w	r3, r3, #1
 800457e:	b2d8      	uxtb	r0, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	3350      	adds	r3, #80	; 0x50
 8004590:	4602      	mov	r2, r0
 8004592:	701a      	strb	r2, [r3, #0]
      break;
 8004594:	e001      	b.n	800459a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800459a:	bf00      	nop
  }
}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	1ff80000 	.word	0x1ff80000

080045a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d10b      	bne.n	80045f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d102      	bne.n	80045f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f00a f95a 	bl	800e8a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d132      	bne.n	8004668 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d126      	bne.n	8004662 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d113      	bne.n	8004644 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004626:	d106      	bne.n	8004636 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f004 fa54 	bl	8008adc <USB_InitFSLSPClkSel>
 8004634:	e011      	b.n	800465a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f004 fa4d 	bl	8008adc <USB_InitFSLSPClkSel>
 8004642:	e00a      	b.n	800465a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004652:	461a      	mov	r2, r3
 8004654:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004658:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f00a f950 	bl	800e900 <HAL_HCD_PortEnabled_Callback>
 8004660:	e002      	b.n	8004668 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f00a f95a 	bl	800e91c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d103      	bne.n	800467a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6013      	str	r3, [r2, #0]
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e154      	b.n	800494c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a98      	ldr	r2, [pc, #608]	; (800491c <HAL_I2S_Init+0x28c>)
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fd fb29 	bl	8001d14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2202      	movs	r2, #2
 80046e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d06f      	beq.n	80047ce <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80046f6:	2310      	movs	r3, #16
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e001      	b.n	8004700 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d802      	bhi.n	800470e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a83      	ldr	r2, [pc, #524]	; (8004920 <HAL_I2S_Init+0x290>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_I2S_Init+0x92>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a81      	ldr	r2, [pc, #516]	; (8004924 <HAL_I2S_Init+0x294>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d104      	bne.n	800472c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004722:	2001      	movs	r0, #1
 8004724:	f001 f900 	bl	8005928 <HAL_RCCEx_GetPeriphCLKFreq>
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	e003      	b.n	8004734 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800472c:	2002      	movs	r0, #2
 800472e:	f001 f8fb 	bl	8005928 <HAL_RCCEx_GetPeriphCLKFreq>
 8004732:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d125      	bne.n	800478a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	3305      	adds	r3, #5
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e01f      	b.n	80047a8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	3305      	adds	r3, #5
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e00e      	b.n	80047a8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	3305      	adds	r3, #5
 80047a6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4a5f      	ldr	r2, [pc, #380]	; (8004928 <HAL_I2S_Init+0x298>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e003      	b.n	80047d6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d902      	bls.n	80047e2 <HAL_I2S_Init+0x152>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	d907      	bls.n	80047f2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ac      	b.n	800494c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	430a      	orrs	r2, r1
 8004804:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004810:	f023 030f 	bic.w	r3, r3, #15
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6851      	ldr	r1, [r2, #4]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6992      	ldr	r2, [r2, #24]
 8004828:	430a      	orrs	r2, r1
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004834:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d003      	beq.n	8004846 <HAL_I2S_Init+0x1b6>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2bb0      	cmp	r3, #176	; 0xb0
 8004844:	d107      	bne.n	8004856 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004854:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d16e      	bne.n	800493c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_I2S_Init+0x29c>)
 8004862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_I2S_Init+0x290>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_I2S_Init+0x1e2>
 800486e:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_I2S_Init+0x2a0>)
 8004870:	e001      	b.n	8004876 <HAL_I2S_Init+0x1e6>
 8004872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	4928      	ldr	r1, [pc, #160]	; (8004920 <HAL_I2S_Init+0x290>)
 800487e:	428a      	cmp	r2, r1
 8004880:	d101      	bne.n	8004886 <HAL_I2S_Init+0x1f6>
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_I2S_Init+0x2a0>)
 8004884:	e001      	b.n	800488a <HAL_I2S_Init+0x1fa>
 8004886:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800488a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800488e:	f023 030f 	bic.w	r3, r3, #15
 8004892:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_I2S_Init+0x290>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_I2S_Init+0x212>
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_I2S_Init+0x2a0>)
 80048a0:	e001      	b.n	80048a6 <HAL_I2S_Init+0x216>
 80048a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a6:	2202      	movs	r2, #2
 80048a8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_I2S_Init+0x290>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <HAL_I2S_Init+0x228>
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_I2S_Init+0x2a0>)
 80048b6:	e001      	b.n	80048bc <HAL_I2S_Init+0x22c>
 80048b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d003      	beq.n	80048d2 <HAL_I2S_Init+0x242>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	e001      	b.n	80048de <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	b299      	uxth	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80048f4:	4303      	orrs	r3, r0
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	430b      	orrs	r3, r1
 80048fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b29a      	uxth	r2, r3
 8004900:	897b      	ldrh	r3, [r7, #10]
 8004902:	4313      	orrs	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800490a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <HAL_I2S_Init+0x290>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10e      	bne.n	8004934 <HAL_I2S_Init+0x2a4>
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_I2S_Init+0x2a0>)
 8004918:	e00e      	b.n	8004938 <HAL_I2S_Init+0x2a8>
 800491a:	bf00      	nop
 800491c:	08004a4b 	.word	0x08004a4b
 8004920:	40003800 	.word	0x40003800
 8004924:	40003c00 	.word	0x40003c00
 8004928:	cccccccd 	.word	0xcccccccd
 800492c:	08004b61 	.word	0x08004b61
 8004930:	40003400 	.word	0x40003400
 8004934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004938:	897a      	ldrh	r2, [r7, #10]
 800493a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ffb8 	bl	8004954 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	b292      	uxth	r2, r2
 8004a00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10e      	bne.n	8004a42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff93 	bl	8004968 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d13a      	bne.n	8004adc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d109      	bne.n	8004a84 <I2S_IRQHandler+0x3a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d102      	bne.n	8004a84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffb4 	bl	80049ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d126      	bne.n	8004adc <I2S_IRQHandler+0x92>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d11f      	bne.n	8004adc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f043 0202 	orr.w	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff50 	bl	800497c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d136      	bne.n	8004b56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d109      	bne.n	8004b06 <I2S_IRQHandler+0xbc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d102      	bne.n	8004b06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff45 	bl	8004990 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d122      	bne.n	8004b56 <I2S_IRQHandler+0x10c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d11b      	bne.n	8004b56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f043 0204 	orr.w	r2, r3, #4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff13 	bl	800497c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4aa2      	ldr	r2, [pc, #648]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004b7a:	4ba2      	ldr	r3, [pc, #648]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b7c:	e001      	b.n	8004b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a9b      	ldr	r2, [pc, #620]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004b98:	4b9a      	ldr	r3, [pc, #616]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b9a:	e001      	b.n	8004ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d004      	beq.n	8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 8099 	bne.w	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f925 	bl	8004e1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d107      	bne.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9c8 	bl	8004f7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d13a      	bne.n	8004c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d035      	beq.n	8004c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c0a:	4b7e      	ldr	r3, [pc, #504]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c0c:	e001      	b.n	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4979      	ldr	r1, [pc, #484]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c1a:	428b      	cmp	r3, r1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c1e:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c20:	e001      	b.n	8004c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c2a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f043 0202 	orr.w	r2, r3, #2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fe88 	bl	800497c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	f040 80be 	bne.w	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80b8 	beq.w	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a59      	ldr	r2, [pc, #356]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004c9e:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca0:	e001      	b.n	8004ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4954      	ldr	r1, [pc, #336]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cae:	428b      	cmp	r3, r1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004cb2:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cb4:	e001      	b.n	8004cba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cbe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	f043 0204 	orr.w	r2, r3, #4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fe4a 	bl	800497c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ce8:	e084      	b.n	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d107      	bne.n	8004d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8be 	bl	8004e80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f8fd 	bl	8004f18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d12f      	bne.n	8004d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02a      	beq.n	8004d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d40:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d4e:	e001      	b.n	8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4929      	ldr	r1, [pc, #164]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d101      	bne.n	8004d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d62:	e001      	b.n	8004d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fdfa 	bl	800497c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d131      	bne.n	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02c      	beq.n	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004da8:	e001      	b.n	8004dae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4912      	ldr	r1, [pc, #72]	; (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004db6:	428b      	cmp	r3, r1
 8004db8:	d101      	bne.n	8004dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dbc:	e001      	b.n	8004dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dd6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fdc5 	bl	800497c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004df2:	e000      	b.n	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004df4:	bf00      	nop
}
 8004df6:	bf00      	nop
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40003800 	.word	0x40003800
 8004e04:	40003400 	.word	0x40003400

08004e08 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c99      	adds	r1, r3, #2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6251      	str	r1, [r2, #36]	; 0x24
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ffc9 	bl	8004e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c99      	adds	r1, r3, #2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6251      	str	r1, [r2, #36]	; 0x24
 8004e92:	8819      	ldrh	r1, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <I2SEx_TxISR_I2SExt+0x90>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <I2SEx_TxISR_I2SExt+0x22>
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <I2SEx_TxISR_I2SExt+0x94>)
 8004ea0:	e001      	b.n	8004ea6 <I2SEx_TxISR_I2SExt+0x26>
 8004ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d121      	bne.n	8004f06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <I2SEx_TxISR_I2SExt+0x90>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <I2SEx_TxISR_I2SExt+0x50>
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <I2SEx_TxISR_I2SExt+0x94>)
 8004ece:	e001      	b.n	8004ed4 <I2SEx_TxISR_I2SExt+0x54>
 8004ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	490d      	ldr	r1, [pc, #52]	; (8004f10 <I2SEx_TxISR_I2SExt+0x90>)
 8004edc:	428b      	cmp	r3, r1
 8004ede:	d101      	bne.n	8004ee4 <I2SEx_TxISR_I2SExt+0x64>
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <I2SEx_TxISR_I2SExt+0x94>)
 8004ee2:	e001      	b.n	8004ee8 <I2SEx_TxISR_I2SExt+0x68>
 8004ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff81 	bl	8004e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40003800 	.word	0x40003800
 8004f14:	40003400 	.word	0x40003400

08004f18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68d8      	ldr	r0, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	1c99      	adds	r1, r3, #2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f30:	b282      	uxth	r2, r0
 8004f32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ff4a 	bl	8004e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <I2SEx_RxISR_I2SExt+0x90>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <I2SEx_RxISR_I2SExt+0x16>
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <I2SEx_RxISR_I2SExt+0x94>)
 8004f90:	e001      	b.n	8004f96 <I2SEx_RxISR_I2SExt+0x1a>
 8004f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f96:	68d8      	ldr	r0, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	1c99      	adds	r1, r3, #2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fa2:	b282      	uxth	r2, r0
 8004fa4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d121      	bne.n	8005002 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <I2SEx_RxISR_I2SExt+0x90>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <I2SEx_RxISR_I2SExt+0x50>
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <I2SEx_RxISR_I2SExt+0x94>)
 8004fca:	e001      	b.n	8004fd0 <I2SEx_RxISR_I2SExt+0x54>
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	490d      	ldr	r1, [pc, #52]	; (800500c <I2SEx_RxISR_I2SExt+0x90>)
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d101      	bne.n	8004fe0 <I2SEx_RxISR_I2SExt+0x64>
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <I2SEx_RxISR_I2SExt+0x94>)
 8004fde:	e001      	b.n	8004fe4 <I2SEx_RxISR_I2SExt+0x68>
 8004fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fe8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff03 	bl	8004e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40003800 	.word	0x40003800
 8005010:	40003400 	.word	0x40003400

08005014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0cc      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b68      	ldr	r3, [pc, #416]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d90c      	bls.n	8005050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b63      	ldr	r3, [pc, #396]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0b8      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005068:	4b59      	ldr	r3, [pc, #356]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005080:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a52      	ldr	r2, [pc, #328]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800508a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b50      	ldr	r3, [pc, #320]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	494d      	ldr	r1, [pc, #308]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d044      	beq.n	8005134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d119      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e07f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b3f      	ldr	r3, [pc, #252]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e2:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e067      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b37      	ldr	r3, [pc, #220]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4934      	ldr	r1, [pc, #208]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7fd f9a0 	bl	8002448 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd f99c 	bl	8002448 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e04f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d20c      	bcs.n	800515c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e032      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4916      	ldr	r1, [pc, #88]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800519a:	f000 f821 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800519e:	4601      	mov	r1, r0
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
 80051ae:	fa21 f303 	lsr.w	r3, r1, r3
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_ClockConfig+0x1c8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc ff8e 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00
 80051d0:	40023800 	.word	0x40023800
 80051d4:	0800fc8c 	.word	0x0800fc8c
 80051d8:	20000008 	.word	0x20000008
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	2300      	movs	r3, #0
 80051f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f6:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d007      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x32>
 8005202:	2b08      	cmp	r3, #8
 8005204:	d008      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x38>
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 808d 	bne.w	8005326 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b4b      	ldr	r3, [pc, #300]	; (800533c <HAL_RCC_GetSysClockFreq+0x15c>)
 800520e:	60bb      	str	r3, [r7, #8]
       break;
 8005210:	e08c      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCC_GetSysClockFreq+0x160>)
 8005214:	60bb      	str	r3, [r7, #8]
      break;
 8005216:	e089      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005222:	4b45      	ldr	r3, [pc, #276]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d023      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b42      	ldr	r3, [pc, #264]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	ea03 0501 	and.w	r5, r3, r1
 8005244:	ea04 0602 	and.w	r6, r4, r2
 8005248:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <HAL_RCC_GetSysClockFreq+0x160>)
 800524a:	fb02 f106 	mul.w	r1, r2, r6
 800524e:	2200      	movs	r2, #0
 8005250:	fb02 f205 	mul.w	r2, r2, r5
 8005254:	440a      	add	r2, r1
 8005256:	493a      	ldr	r1, [pc, #232]	; (8005340 <HAL_RCC_GetSysClockFreq+0x160>)
 8005258:	fba5 0101 	umull	r0, r1, r5, r1
 800525c:	1853      	adds	r3, r2, r1
 800525e:	4619      	mov	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	f7fb fc17 	bl	8000a9c <__aeabi_uldivmod>
 800526e:	4603      	mov	r3, r0
 8005270:	460c      	mov	r4, r1
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e049      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	ea03 0501 	and.w	r5, r3, r1
 800528c:	ea04 0602 	and.w	r6, r4, r2
 8005290:	4629      	mov	r1, r5
 8005292:	4632      	mov	r2, r6
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	0154      	lsls	r4, r2, #5
 800529e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052a2:	014b      	lsls	r3, r1, #5
 80052a4:	4619      	mov	r1, r3
 80052a6:	4622      	mov	r2, r4
 80052a8:	1b49      	subs	r1, r1, r5
 80052aa:	eb62 0206 	sbc.w	r2, r2, r6
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	0194      	lsls	r4, r2, #6
 80052b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052bc:	018b      	lsls	r3, r1, #6
 80052be:	1a5b      	subs	r3, r3, r1
 80052c0:	eb64 0402 	sbc.w	r4, r4, r2
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	00e2      	lsls	r2, r4, #3
 80052ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	460b      	mov	r3, r1
 80052d6:	4614      	mov	r4, r2
 80052d8:	195b      	adds	r3, r3, r5
 80052da:	eb44 0406 	adc.w	r4, r4, r6
 80052de:	f04f 0100 	mov.w	r1, #0
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	02a2      	lsls	r2, r4, #10
 80052e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052ec:	0299      	lsls	r1, r3, #10
 80052ee:	460b      	mov	r3, r1
 80052f0:	4614      	mov	r4, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	4621      	mov	r1, r4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	461a      	mov	r2, r3
 80052fe:	4623      	mov	r3, r4
 8005300:	f7fb fbcc 	bl	8000a9c <__aeabi_uldivmod>
 8005304:	4603      	mov	r3, r0
 8005306:	460c      	mov	r4, r1
 8005308:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_GetSysClockFreq+0x158>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	0c1b      	lsrs	r3, r3, #16
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	3301      	adds	r3, #1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	60bb      	str	r3, [r7, #8]
      break;
 8005324:	e002      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005328:	60bb      	str	r3, [r7, #8]
      break;
 800532a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532c:	68bb      	ldr	r3, [r7, #8]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400
 8005340:	017d7840 	.word	0x017d7840

08005344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_RCC_GetHCLKFreq+0x14>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000008 	.word	0x20000008

0800535c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005360:	f7ff fff0 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8005364:	4601      	mov	r1, r0
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0a9b      	lsrs	r3, r3, #10
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4a03      	ldr	r2, [pc, #12]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40023800 	.word	0x40023800
 8005380:	0800fc9c 	.word	0x0800fc9c

08005384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005388:	f7ff ffdc 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 800538c:	4601      	mov	r1, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0b5b      	lsrs	r3, r3, #13
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800539a:	5cd3      	ldrb	r3, [r2, r3]
 800539c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	0800fc9c 	.word	0x0800fc9c

080053ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	220f      	movs	r2, #15
 80053ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053bc:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_GetClockConfig+0x5c>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0203 	and.w	r2, r3, #3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <HAL_RCC_GetClockConfig+0x5c>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <HAL_RCC_GetClockConfig+0x5c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_GetClockConfig+0x5c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <HAL_RCC_GetClockConfig+0x60>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	40023c00 	.word	0x40023c00

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005434:	4b7a      	ldr	r3, [pc, #488]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	4977      	ldr	r1, [pc, #476]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8005452:	2301      	movs	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005462:	4b6f      	ldr	r3, [pc, #444]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005468:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	496b      	ldr	r1, [pc, #428]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005480:	2301      	movs	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d022      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005490:	4b63      	ldr	r3, [pc, #396]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549e:	4960      	ldr	r1, [pc, #384]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80054bc:	4b58      	ldr	r3, [pc, #352]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4954      	ldr	r1, [pc, #336]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d022      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80054e2:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	494b      	ldr	r1, [pc, #300]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005500:	2301      	movs	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800550e:	4b44      	ldr	r3, [pc, #272]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	3b01      	subs	r3, #1
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	493f      	ldr	r1, [pc, #252]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 808a 	beq.w	800564a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a38      	ldr	r2, [pc, #224]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b36      	ldr	r3, [pc, #216]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005552:	4b34      	ldr	r3, [pc, #208]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a33      	ldr	r2, [pc, #204]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800555e:	f7fc ff73 	bl	8002448 <HAL_GetTick>
 8005562:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005566:	f7fc ff6f 	bl	8002448 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e1d1      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005578:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005584:	4b26      	ldr	r3, [pc, #152]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d028      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d114      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fc ff3d 	bl	8002448 <HAL_GetTick>
 80055ce:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fc ff39 	bl	8002448 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e199      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ee      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d114      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005602:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005616:	4902      	ldr	r1, [pc, #8]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]
 800561c:	e00c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800
 8005624:	40007000 	.word	0x40007000
 8005628:	42470e40 	.word	0x42470e40
 800562c:	4b89      	ldr	r3, [pc, #548]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a88      	ldr	r2, [pc, #544]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005636:	6093      	str	r3, [r2, #8]
 8005638:	4b86      	ldr	r3, [pc, #536]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800563a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	4983      	ldr	r1, [pc, #524]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005646:	4313      	orrs	r3, r2
 8005648:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800565c:	4b7e      	ldr	r3, [pc, #504]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800565e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800566c:	4b79      	ldr	r3, [pc, #484]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	4976      	ldr	r1, [pc, #472]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d011      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800568e:	4b71      	ldr	r3, [pc, #452]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005694:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	496d      	ldr	r1, [pc, #436]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80056ae:	2301      	movs	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80056be:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	4961      	ldr	r1, [pc, #388]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d004      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	f040 80c6 	bne.w	8005870 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056e4:	4b5d      	ldr	r3, [pc, #372]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ea:	f7fc fead 	bl	8002448 <HAL_GetTick>
 80056ee:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056f2:	f7fc fea9 	bl	8002448 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e10b      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005710:	4a53      	ldr	r2, [pc, #332]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d023      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d019      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d00e      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800575e:	2b00      	cmp	r3, #0
 8005760:	d019      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d115      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005772:	d110      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	071b      	lsls	r3, r3, #28
 800578e:	4931      	ldr	r1, [pc, #196]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d026      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d122      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057be:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	019b      	lsls	r3, r3, #6
 80057d6:	431a      	orrs	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	071b      	lsls	r3, r3, #28
 80057e4:	491b      	ldr	r1, [pc, #108]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f2:	f023 021f 	bic.w	r2, r3, #31
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4915      	ldr	r1, [pc, #84]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	061b      	lsls	r3, r3, #24
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	071b      	lsls	r3, r3, #28
 800582a:	490a      	ldr	r1, [pc, #40]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005838:	f7fc fe06 	bl	8002448 <HAL_GetTick>
 800583c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800583e:	e011      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005840:	f7fc fe02 	bl	8002448 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d90a      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e064      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	424711e0 	.word	0x424711e0
 800585c:	42470068 	.word	0x42470068
 8005860:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0e7      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800587c:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800587e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	4926      	ldr	r1, [pc, #152]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	491d      	ldr	r1, [pc, #116]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	4915      	ldr	r1, [pc, #84]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	490c      	ldr	r1, [pc, #48]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800590a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	4904      	ldr	r1, [pc, #16]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40023800 	.word	0x40023800

08005928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d003      	beq.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005946:	2b02      	cmp	r3, #2
 8005948:	f000 8098 	beq.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800594c:	e12d      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800594e:	4b9a      	ldr	r3, [pc, #616]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005954:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005958:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005960:	d00c      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005966:	d802      	bhi.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800596c:	e082      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800596e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005972:	d047      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005974:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005978:	d06f      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800597a:	e07b      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800597c:	4b8f      	ldr	r3, [pc, #572]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800597e:	617b      	str	r3, [r7, #20]
          break;
 8005980:	e07b      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005990:	d109      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005992:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	4a87      	ldr	r2, [pc, #540]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e019      	b.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059a6:	4b84      	ldr	r3, [pc, #528]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b2:	d109      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80059b4:	4b80      	ldr	r3, [pc, #512]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059be:	4a80      	ldr	r2, [pc, #512]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e008      	b.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80059c8:	4b7b      	ldr	r3, [pc, #492]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059d2:	4a7c      	ldr	r2, [pc, #496]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059da:	4b77      	ldr	r3, [pc, #476]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	099b      	lsrs	r3, r3, #6
 80059e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059ee:	4b72      	ldr	r3, [pc, #456]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f4:	0f1b      	lsrs	r3, r3, #28
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	617b      	str	r3, [r7, #20]
          break;
 8005a02:	e03a      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a04:	4b6c      	ldr	r3, [pc, #432]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a10:	d108      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a12:	4b69      	ldr	r3, [pc, #420]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a1a:	4a69      	ldr	r2, [pc, #420]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e007      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a24:	4b64      	ldr	r3, [pc, #400]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2c:	4a65      	ldr	r2, [pc, #404]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005a46:	4b5c      	ldr	r3, [pc, #368]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	0f1b      	lsrs	r3, r3, #28
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	617b      	str	r3, [r7, #20]
          break;
 8005a58:	e00f      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a5a:	4b57      	ldr	r3, [pc, #348]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a66:	d102      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005a68:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a6a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005a6c:	e005      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005a6e:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a70:	617b      	str	r3, [r7, #20]
          break;
 8005a72:	e002      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
          break;
 8005a78:	bf00      	nop
        }
      }
      break;
 8005a7a:	e096      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005a7c:	4b4e      	ldr	r3, [pc, #312]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a82:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005a86:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8e:	d00c      	beq.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d802      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005a9a:	e082      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa0:	d047      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005aa2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005aa6:	d06f      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005aa8:	e07b      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005aaa:	4b44      	ldr	r3, [pc, #272]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aac:	617b      	str	r3, [r7, #20]
          break;
 8005aae:	e07b      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005ab0:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ac0:	4b3d      	ldr	r3, [pc, #244]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aca:	4a3c      	ldr	r2, [pc, #240]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e019      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ad4:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e008      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005af6:	4b30      	ldr	r3, [pc, #192]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b00:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b08:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0e:	099b      	lsrs	r3, r3, #6
 8005b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b1c:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b22:	0f1b      	lsrs	r3, r3, #28
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	617b      	str	r3, [r7, #20]
          break;
 8005b30:	e03a      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b32:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3e:	d108      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e007      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0f1b      	lsrs	r3, r3, #28
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
          break;
 8005b86:	e00f      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b94:	d102      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b98:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005b9a:	e005      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b9e:	617b      	str	r3, [r7, #20]
          break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
          break;
 8005ba6:	bf00      	nop
        }
      }
      break;
 8005ba8:	bf00      	nop
    }
  }
  return frequency;
 8005baa:	697b      	ldr	r3, [r7, #20]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	00bb8000 	.word	0x00bb8000
 8005bc0:	017d7840 	.word	0x017d7840
 8005bc4:	00f42400 	.word	0x00f42400

08005bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d075      	beq.n	8005ccc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005be0:	4ba2      	ldr	r3, [pc, #648]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bec:	4b9f      	ldr	r3, [pc, #636]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d112      	bne.n	8005c1e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf8:	4b9c      	ldr	r3, [pc, #624]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c06:	4b99      	ldr	r3, [pc, #612]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d05b      	beq.n	8005cca <HAL_RCC_OscConfig+0x102>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d157      	bne.n	8005cca <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e20b      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_OscConfig+0x6e>
 8005c28:	4b90      	ldr	r3, [pc, #576]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a8f      	ldr	r2, [pc, #572]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e01d      	b.n	8005c72 <HAL_RCC_OscConfig+0xaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCC_OscConfig+0x92>
 8005c40:	4b8a      	ldr	r3, [pc, #552]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a89      	ldr	r2, [pc, #548]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4b87      	ldr	r3, [pc, #540]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a86      	ldr	r2, [pc, #536]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e00b      	b.n	8005c72 <HAL_RCC_OscConfig+0xaa>
 8005c5a:	4b84      	ldr	r3, [pc, #528]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a83      	ldr	r2, [pc, #524]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a80      	ldr	r2, [pc, #512]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fc fbe5 	bl	8002448 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c82:	f7fc fbe1 	bl	8002448 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b64      	cmp	r3, #100	; 0x64
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e1d0      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c94:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0xba>
 8005ca0:	e014      	b.n	8005ccc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fc fbd1 	bl	8002448 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005caa:	f7fc fbcd 	bl	8002448 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b64      	cmp	r3, #100	; 0x64
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e1bc      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbc:	4b6b      	ldr	r3, [pc, #428]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f0      	bne.n	8005caa <HAL_RCC_OscConfig+0xe2>
 8005cc8:	e000      	b.n	8005ccc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d063      	beq.n	8005da0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cd8:	4b64      	ldr	r3, [pc, #400]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce4:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d11c      	bne.n	8005d2a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf0:	4b5e      	ldr	r3, [pc, #376]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d116      	bne.n	8005d2a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfc:	4b5b      	ldr	r3, [pc, #364]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_OscConfig+0x14c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e190      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d14:	4b55      	ldr	r3, [pc, #340]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4952      	ldr	r1, [pc, #328]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d28:	e03a      	b.n	8005da0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d32:	4b4f      	ldr	r3, [pc, #316]	; (8005e70 <HAL_RCC_OscConfig+0x2a8>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fc fb86 	bl	8002448 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d40:	f7fc fb82 	bl	8002448 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e171      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d52:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	493f      	ldr	r1, [pc, #252]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
 8005d72:	e015      	b.n	8005da0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d74:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <HAL_RCC_OscConfig+0x2a8>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7a:	f7fc fb65 	bl	8002448 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d82:	f7fc fb61 	bl	8002448 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e150      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d94:	4b35      	ldr	r3, [pc, #212]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d030      	beq.n	8005e0e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db4:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fc fb45 	bl	8002448 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc2:	f7fc fb41 	bl	8002448 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e130      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd4:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x1fa>
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de8:	f7fc fb2e 	bl	8002448 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005df0:	f7fc fb2a 	bl	8002448 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e119      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 809f 	beq.w	8005f5a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e20:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10f      	bne.n	8005e4c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_RCC_OscConfig+0x2b0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d120      	bne.n	8005e9a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e58:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <HAL_RCC_OscConfig+0x2b0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a06      	ldr	r2, [pc, #24]	; (8005e78 <HAL_RCC_OscConfig+0x2b0>)
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e64:	f7fc faf0 	bl	8002448 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6a:	e010      	b.n	8005e8e <HAL_RCC_OscConfig+0x2c6>
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	42470000 	.word	0x42470000
 8005e74:	42470e80 	.word	0x42470e80
 8005e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fc fae4 	bl	8002448 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0d3      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8e:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <HAL_RCC_OscConfig+0x478>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x2e8>
 8005ea2:	4b68      	ldr	r3, [pc, #416]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	e01c      	b.n	8005eea <HAL_RCC_OscConfig+0x322>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x30a>
 8005eb8:	4b62      	ldr	r3, [pc, #392]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a61      	ldr	r2, [pc, #388]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	4b5f      	ldr	r3, [pc, #380]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a5e      	ldr	r2, [pc, #376]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed0:	e00b      	b.n	8005eea <HAL_RCC_OscConfig+0x322>
 8005ed2:	4b5c      	ldr	r3, [pc, #368]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	4a5b      	ldr	r2, [pc, #364]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ede:	4b59      	ldr	r3, [pc, #356]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	4a58      	ldr	r2, [pc, #352]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ee4:	f023 0304 	bic.w	r3, r3, #4
 8005ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fc faa9 	bl	8002448 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fc faa5 	bl	8002448 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e092      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	4b4c      	ldr	r3, [pc, #304]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ee      	beq.n	8005efa <HAL_RCC_OscConfig+0x332>
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fc fa93 	bl	8002448 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fc fa8f 	bl	8002448 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e07c      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3c:	4b41      	ldr	r3, [pc, #260]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ee      	bne.n	8005f26 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4e:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a3c      	ldr	r2, [pc, #240]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d068      	beq.n	8006034 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d060      	beq.n	8006030 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d145      	bne.n	8006002 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f76:	4b34      	ldr	r3, [pc, #208]	; (8006048 <HAL_RCC_OscConfig+0x480>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fc fa64 	bl	8002448 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fc fa60 	bl	8002448 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04f      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	071b      	lsls	r3, r3, #28
 8005fce:	491d      	ldr	r1, [pc, #116]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd4:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <HAL_RCC_OscConfig+0x480>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fc fa35 	bl	8002448 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe2:	f7fc fa31 	bl	8002448 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e020      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x41a>
 8006000:	e018      	b.n	8006034 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <HAL_RCC_OscConfig+0x480>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006008:	f7fc fa1e 	bl	8002448 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006010:	f7fc fa1a 	bl	8002448 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e009      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <HAL_RCC_OscConfig+0x47c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x448>
 800602e:	e001      	b.n	8006034 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40007000 	.word	0x40007000
 8006044:	40023800 	.word	0x40023800
 8006048:	42470060 	.word	0x42470060

0800604c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e022      	b.n	80060a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d105      	bne.n	8006076 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fb ff09 	bl	8001e88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2203      	movs	r2, #3
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f814 	bl	80060ac <HAL_SD_InitCard>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e00a      	b.n	80060a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060ac:	b5b0      	push	{r4, r5, r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060c8:	2376      	movs	r3, #118	; 0x76
 80060ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681d      	ldr	r5, [r3, #0]
 80060d0:	466c      	mov	r4, sp
 80060d2:	f107 0314 	add.w	r3, r7, #20
 80060d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060e4:	4628      	mov	r0, r5
 80060e6:	f001 fe11 	bl	8007d0c <SDIO_Init>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e031      	b.n	8006160 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80060fc:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <HAL_SD_InitCard+0xbc>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fe38 	bl	8007d7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800610c:	4b16      	ldr	r3, [pc, #88]	; (8006168 <HAL_SD_InitCard+0xbc>)
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fb18 	bl	8006748 <SD_PowerON>
 8006118:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e013      	b.n	8006160 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa37 	bl	80065ac <SD_InitCard>
 800613e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	; 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bdb0      	pop	{r4, r5, r7, pc}
 8006168:	422580a0 	.word	0x422580a0

0800616c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617a:	0f9b      	lsrs	r3, r3, #30
 800617c:	b2da      	uxtb	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006186:	0e9b      	lsrs	r3, r3, #26
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	0d1b      	lsrs	r3, r3, #20
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	0bdb      	lsrs	r3, r3, #15
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fc:	0b9b      	lsrs	r3, r3, #14
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620e:	0b5b      	lsrs	r3, r3, #13
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	0b1b      	lsrs	r3, r3, #12
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	2b00      	cmp	r3, #0
 800623a:	d163      	bne.n	8006304 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006240:	009a      	lsls	r2, r3, #2
 8006242:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006246:	4013      	ands	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800624c:	0f92      	lsrs	r2, r2, #30
 800624e:	431a      	orrs	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	0edb      	lsrs	r3, r3, #27
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	b2da      	uxtb	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	b2da      	uxtb	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	0d5b      	lsrs	r3, r3, #21
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	b2da      	uxtb	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628e:	0c9b      	lsrs	r3, r3, #18
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a0:	0bdb      	lsrs	r3, r3, #15
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	7e1b      	ldrb	r3, [r3, #24]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	3302      	adds	r3, #2
 80062c4:	2201      	movs	r2, #1
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80062ce:	fb02 f203 	mul.w	r2, r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	7a1b      	ldrb	r3, [r3, #8]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062f0:	0a52      	lsrs	r2, r2, #9
 80062f2:	fb02 f203 	mul.w	r2, r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	661a      	str	r2, [r3, #96]	; 0x60
 8006302:	e031      	b.n	8006368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11d      	bne.n	8006348 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	431a      	orrs	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	3301      	adds	r3, #1
 8006328:	029a      	lsls	r2, r3, #10
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	661a      	str	r2, [r3, #96]	; 0x60
 8006346:	e00f      	b.n	8006368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a58      	ldr	r2, [pc, #352]	; (80064b0 <HAL_SD_GetCardCSD+0x344>)
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e09d      	b.n	80064a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636c:	0b9b      	lsrs	r3, r3, #14
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637e:	09db      	lsrs	r3, r3, #7
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006396:	b2da      	uxtb	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	0fdb      	lsrs	r3, r3, #31
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ac:	0f5b      	lsrs	r3, r3, #29
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	0e9b      	lsrs	r3, r3, #26
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d0:	0d9b      	lsrs	r3, r3, #22
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	0d5b      	lsrs	r3, r3, #21
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	0bdb      	lsrs	r3, r3, #15
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	0b9b      	lsrs	r3, r3, #14
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	0b5b      	lsrs	r3, r3, #13
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	0b1b      	lsrs	r3, r3, #12
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	004005ff 	.word	0x004005ff

080064b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064b4:	b5b0      	push	{r4, r5, r7, lr}
 80064b6:	b08e      	sub	sp, #56	; 0x38
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2203      	movs	r2, #3
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d02e      	beq.n	800652c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d106      	bne.n	80064e4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
 80064e2:	e029      	b.n	8006538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	d10a      	bne.n	8006502 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9b9 	bl	8006864 <SD_WideBus_Enable>
 80064f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006500:	e01a      	b.n	8006538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9f6 	bl	80068fa <SD_WideBus_Disable>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
 800651c:	e00c      	b.n	8006538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
 800652a:	e005      	b.n	8006538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e024      	b.n	800659e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	466c      	mov	r4, sp
 800657c:	f107 0318 	add.w	r3, r7, #24
 8006580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006588:	f107 030c 	add.w	r3, r7, #12
 800658c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800658e:	4628      	mov	r0, r5
 8006590:	f001 fbbc 	bl	8007d0c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3728      	adds	r7, #40	; 0x28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bdb0      	pop	{r4, r5, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	004005ff 	.word	0x004005ff

080065ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065ac:	b5b0      	push	{r4, r5, r7, lr}
 80065ae:	b094      	sub	sp, #80	; 0x50
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80065b4:	2301      	movs	r3, #1
 80065b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fbec 	bl	8007d9a <SDIO_GetPowerState>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80065cc:	e0b7      	b.n	800673e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d02f      	beq.n	8006636 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fd6b 	bl	80080b6 <SDMMC_CmdSendCID>
 80065e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <SD_InitCard+0x40>
    {
      return errorstate;
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	e0a8      	b.n	800673e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fc16 	bl	8007e24 <SDIO_GetResponse>
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2104      	movs	r1, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fc0d 	bl	8007e24 <SDIO_GetResponse>
 800660a:	4602      	mov	r2, r0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2108      	movs	r1, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fc04 	bl	8007e24 <SDIO_GetResponse>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	210c      	movs	r1, #12
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fbfb 	bl	8007e24 <SDIO_GetResponse>
 800662e:	4602      	mov	r2, r0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	2b03      	cmp	r3, #3
 800663c:	d00d      	beq.n	800665a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f107 020e 	add.w	r2, r7, #14
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fd71 	bl	8008130 <SDMMC_CmdSetRelAdd>
 800664e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <SD_InitCard+0xae>
    {
      return errorstate;
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	e071      	b.n	800673e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	2b03      	cmp	r3, #3
 8006660:	d036      	beq.n	80066d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f001 fd3b 	bl	80080f2 <SDMMC_CmdSendCSD>
 800667c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800667e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006686:	e05a      	b.n	800673e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fbc8 	bl	8007e24 <SDIO_GetResponse>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2104      	movs	r1, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 fbbf 	bl	8007e24 <SDIO_GetResponse>
 80066a6:	4602      	mov	r2, r0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2108      	movs	r1, #8
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fbb6 	bl	8007e24 <SDIO_GetResponse>
 80066b8:	4602      	mov	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	210c      	movs	r1, #12
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 fbad 	bl	8007e24 <SDIO_GetResponse>
 80066ca:	4602      	mov	r2, r0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2104      	movs	r1, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fba4 	bl	8007e24 <SDIO_GetResponse>
 80066dc:	4603      	mov	r3, r0
 80066de:	0d1a      	lsrs	r2, r3, #20
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fd3e 	bl	800616c <HAL_SD_GetCardCSD>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066fa:	e020      	b.n	800673e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	f04f 0400 	mov.w	r4, #0
 800670a:	461a      	mov	r2, r3
 800670c:	4623      	mov	r3, r4
 800670e:	4608      	mov	r0, r1
 8006710:	f001 fbe9 	bl	8007ee6 <SDMMC_CmdSelDesel>
 8006714:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <SD_InitCard+0x174>
  {
    return errorstate;
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	e00e      	b.n	800673e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681d      	ldr	r5, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	466c      	mov	r4, sp
 8006728:	f103 0210 	add.w	r2, r3, #16
 800672c:	ca07      	ldmia	r2, {r0, r1, r2}
 800672e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006732:	3304      	adds	r3, #4
 8006734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006736:	4628      	mov	r0, r5
 8006738:	f001 fae8 	bl	8007d0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3740      	adds	r7, #64	; 0x40
 8006742:	46bd      	mov	sp, r7
 8006744:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006748 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f001 fbe3 	bl	8007f2c <SDMMC_CmdGoIdleState>
 8006766:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <SD_PowerON+0x2a>
  {
    return errorstate;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e072      	b.n	8006858 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fbf6 	bl	8007f68 <SDMMC_CmdOperCond>
 800677c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00d      	beq.n	80067a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fbcc 	bl	8007f2c <SDMMC_CmdGoIdleState>
 8006794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	e05b      	b.n	8006858 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d137      	bne.n	800681e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fbf6 	bl	8007fa6 <SDMMC_CmdAppCommand>
 80067ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02d      	beq.n	800681e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067c6:	e047      	b.n	8006858 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fbe9 	bl	8007fa6 <SDMMC_CmdAppCommand>
 80067d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	e03b      	b.n	8006858 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	491e      	ldr	r1, [pc, #120]	; (8006860 <SD_PowerON+0x118>)
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fbff 	bl	8007fea <SDMMC_CmdAppOperCommand>
 80067ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067f8:	e02e      	b.n	8006858 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fb0f 	bl	8007e24 <SDIO_GetResponse>
 8006806:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	0fdb      	lsrs	r3, r3, #31
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <SD_PowerON+0xcc>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <SD_PowerON+0xce>
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]

    count++;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3301      	adds	r3, #1
 800681c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006824:	4293      	cmp	r3, r2
 8006826:	d802      	bhi.n	800682e <SD_PowerON+0xe6>
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0cc      	beq.n	80067c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006834:	4293      	cmp	r3, r2
 8006836:	d902      	bls.n	800683e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800683c:	e00c      	b.n	8006858 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	645a      	str	r2, [r3, #68]	; 0x44
 800684e:	e002      	b.n	8006856 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	c1100000 	.word	0xc1100000

08006864 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fad2 	bl	8007e24 <SDIO_GetResponse>
 8006880:	4603      	mov	r3, r0
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688a:	d102      	bne.n	8006892 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800688c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006890:	e02f      	b.n	80068f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f879 	bl	8006990 <SD_FindSCR>
 800689e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	e023      	b.n	80068f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01c      	beq.n	80068ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f001 fb70 	bl	8007fa6 <SDMMC_CmdAppCommand>
 80068c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	e00f      	b.n	80068f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2102      	movs	r1, #2
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 fba9 	bl	8008030 <SDMMC_CmdBusWidth>
 80068de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	e003      	b.n	80068f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e001      	b.n	80068f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fa87 	bl	8007e24 <SDIO_GetResponse>
 8006916:	4603      	mov	r3, r0
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006920:	d102      	bne.n	8006928 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006926:	e02f      	b.n	8006988 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006928:	f107 030c 	add.w	r3, r7, #12
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f82e 	bl	8006990 <SD_FindSCR>
 8006934:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	e023      	b.n	8006988 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01c      	beq.n	8006984 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f001 fb25 	bl	8007fa6 <SDMMC_CmdAppCommand>
 800695c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	e00f      	b.n	8006988 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f001 fb5e 	bl	8008030 <SDMMC_CmdBusWidth>
 8006974:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	e003      	b.n	8006988 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006980:	2300      	movs	r3, #0
 8006982:	e001      	b.n	8006988 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006984:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b08f      	sub	sp, #60	; 0x3c
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800699a:	f7fb fd55 	bl	8002448 <HAL_GetTick>
 800699e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80069a4:	2300      	movs	r3, #0
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2108      	movs	r1, #8
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fa73 	bl	8007ea2 <SDMMC_CmdBlockLength>
 80069bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	e0a9      	b.n	8006b1c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f001 fae6 	bl	8007fa6 <SDMMC_CmdAppCommand>
 80069da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	e09a      	b.n	8006b1c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80069ec:	2308      	movs	r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80069f0:	2330      	movs	r3, #48	; 0x30
 80069f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80069f4:	2302      	movs	r3, #2
 80069f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f107 0210 	add.w	r2, r7, #16
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 fa1d 	bl	8007e4a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 fb2d 	bl	8008074 <SDMMC_CmdSendSCR>
 8006a1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d022      	beq.n	8006a68 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	e07a      	b.n	8006b1c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6819      	ldr	r1, [r3, #0]
 8006a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	f107 0208 	add.w	r2, r7, #8
 8006a40:	18d4      	adds	r4, r2, r3
 8006a42:	4608      	mov	r0, r1
 8006a44:	f001 f98d 	bl	8007d62 <SDIO_ReadFIFO>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	6023      	str	r3, [r4, #0]
      index++;
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	3301      	adds	r3, #1
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a52:	f7fb fcf9 	bl	8002448 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d102      	bne.n	8006a68 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006a62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a66:	e059      	b.n	8006b1c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0d6      	beq.n	8006a26 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a8e:	2308      	movs	r3, #8
 8006a90:	e044      	b.n	8006b1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e037      	b.n	8006b1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006ac2:	2320      	movs	r3, #32
 8006ac4:	e02a      	b.n	8006b1c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	061a      	lsls	r2, r3, #24
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006adc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ae6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	601a      	str	r2, [r3, #0]
    scr++;
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	3304      	adds	r3, #4
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	061a      	lsls	r2, r3, #24
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006b0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	0e1b      	lsrs	r3, r3, #24
 8006b14:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	373c      	adds	r7, #60	; 0x3c
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}

08006b24 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e034      	b.n	8006ba4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7fb faba 	bl	80020c8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 ffd0 	bl	8007b04 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	f001 f838 	bl	8007be4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6858      	ldr	r0, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	f001 f883 	bl	8007c8c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	f041 0101 	orr.w	r1, r1, #1
 8006b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e01d      	b.n	8006bfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f815 	bl	8006c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f000 f968 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b06      	cmp	r3, #6
 8006c3e:	d007      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d122      	bne.n	8006cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d11b      	bne.n	8006cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0202 	mvn.w	r2, #2
 8006c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8ee 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006ca6:	e005      	b.n	8006cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8e0 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8f1 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d122      	bne.n	8006d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d11b      	bne.n	8006d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0204 	mvn.w	r2, #4
 8006cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8c4 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006cfa:	e005      	b.n	8006d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8b6 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f8c7 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d122      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d11b      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f06f 0208 	mvn.w	r2, #8
 8006d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f89a 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006d4e:	e005      	b.n	8006d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f88c 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f89d 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d122      	bne.n	8006db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d11b      	bne.n	8006db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0210 	mvn.w	r2, #16
 8006d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f870 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006da2:	e005      	b.n	8006db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f862 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f873 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d10e      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f06f 0201 	mvn.w	r2, #1
 8006dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fa fe45 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d10e      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d107      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f903 	bl	8007014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d10e      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d107      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f838 	bl	8006eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d10e      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d107      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f06f 0220 	mvn.w	r2, #32
 8006e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8cd 	bl	8007000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3d      	ldr	r2, [pc, #244]	; (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3c      	ldr	r2, [pc, #240]	; (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3b      	ldr	r2, [pc, #236]	; (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3a      	ldr	r2, [pc, #232]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d027      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d023      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2a      	ldr	r2, [pc, #168]	; (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d017      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a28      	ldr	r2, [pc, #160]	; (8006fe8 <TIM_Base_SetConfig+0x128>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a23      	ldr	r2, [pc, #140]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40010400 	.word	0x40010400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800
 8006ff4:	40001800 	.word	0x40001800
 8006ff8:	40001c00 	.word	0x40001c00
 8006ffc:	40002000 	.word	0x40002000

08007000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e03f      	b.n	80070ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fa ff82 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9b1 	bl	80073d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af02      	add	r7, sp, #8
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b20      	cmp	r3, #32
 80070e0:	f040 8083 	bne.w	80071ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Transmit+0x2e>
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e07b      	b.n	80071ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Transmit+0x40>
 80070fe:	2302      	movs	r3, #2
 8007100:	e074      	b.n	80071ec <HAL_UART_Transmit+0x12a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2221      	movs	r2, #33	; 0x21
 8007114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007118:	f7fb f996 	bl	8002448 <HAL_GetTick>
 800711c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007132:	e042      	b.n	80071ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d122      	bne.n	8007192 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2200      	movs	r2, #0
 8007154:	2180      	movs	r1, #128	; 0x80
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f8f2 	bl	8007340 <UART_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e042      	b.n	80071ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007178:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3302      	adds	r3, #2
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	e017      	b.n	80071ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3301      	adds	r3, #1
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	e013      	b.n	80071ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2200      	movs	r2, #0
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f8cf 	bl	8007340 <UART_WaitOnFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e01f      	b.n	80071ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	60ba      	str	r2, [r7, #8]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1b7      	bne.n	8007134 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f8b6 	bl	8007340 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e006      	b.n	80071ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b20      	cmp	r3, #32
 8007212:	f040 8090 	bne.w	8007336 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_UART_Receive+0x2e>
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e088      	b.n	8007338 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_UART_Receive+0x40>
 8007230:	2302      	movs	r3, #2
 8007232:	e081      	b.n	8007338 <HAL_UART_Receive+0x144>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2222      	movs	r2, #34	; 0x22
 8007246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800724a:	f7fb f8fd 	bl	8002448 <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88fa      	ldrh	r2, [r7, #6]
 8007254:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007264:	e05c      	b.n	8007320 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727c:	d12b      	bne.n	80072d6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2120      	movs	r1, #32
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f859 	bl	8007340 <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e04f      	b.n	8007338 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10c      	bne.n	80072be <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3302      	adds	r3, #2
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	e030      	b.n	8007320 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60bb      	str	r3, [r7, #8]
 80072d4:	e024      	b.n	8007320 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2120      	movs	r1, #32
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f82d 	bl	8007340 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e023      	b.n	8007338 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6859      	ldr	r1, [r3, #4]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	60ba      	str	r2, [r7, #8]
 8007304:	b2ca      	uxtb	r2, r1
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e00a      	b.n	8007320 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	b2da      	uxtb	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	1c59      	adds	r1, r3, #1
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d19d      	bne.n	8007266 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e000      	b.n	8007338 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
  }
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007350:	e02c      	b.n	80073ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d028      	beq.n	80073ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <UART_WaitOnFlagUntilTimeout+0x30>
 8007360:	f7fb f872 	bl	8002448 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	d21d      	bcs.n	80073ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800737e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695a      	ldr	r2, [r3, #20]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0201 	bic.w	r2, r2, #1
 800738e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e00f      	b.n	80073cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4013      	ands	r3, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bf0c      	ite	eq
 80073bc:	2301      	moveq	r3, #1
 80073be:	2300      	movne	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d0c3      	beq.n	8007352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007416:	f023 030c 	bic.w	r3, r3, #12
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	430b      	orrs	r3, r1
 8007422:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007442:	f040 8199 	bne.w	8007778 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4ac6      	ldr	r2, [pc, #792]	; (8007764 <UART_SetConfig+0x390>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <UART_SetConfig+0x9c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4ac4      	ldr	r2, [pc, #784]	; (8007768 <UART_SetConfig+0x394>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00a      	beq.n	8007470 <UART_SetConfig+0x9c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4ac3      	ldr	r2, [pc, #780]	; (800776c <UART_SetConfig+0x398>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d005      	beq.n	8007470 <UART_SetConfig+0x9c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4ac1      	ldr	r2, [pc, #772]	; (8007770 <UART_SetConfig+0x39c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f040 80bd 	bne.w	80075ea <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007470:	f7fd ff88 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 8007474:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	461d      	mov	r5, r3
 800747a:	f04f 0600 	mov.w	r6, #0
 800747e:	46a8      	mov	r8, r5
 8007480:	46b1      	mov	r9, r6
 8007482:	eb18 0308 	adds.w	r3, r8, r8
 8007486:	eb49 0409 	adc.w	r4, r9, r9
 800748a:	4698      	mov	r8, r3
 800748c:	46a1      	mov	r9, r4
 800748e:	eb18 0805 	adds.w	r8, r8, r5
 8007492:	eb49 0906 	adc.w	r9, r9, r6
 8007496:	f04f 0100 	mov.w	r1, #0
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074aa:	4688      	mov	r8, r1
 80074ac:	4691      	mov	r9, r2
 80074ae:	eb18 0005 	adds.w	r0, r8, r5
 80074b2:	eb49 0106 	adc.w	r1, r9, r6
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	461d      	mov	r5, r3
 80074bc:	f04f 0600 	mov.w	r6, #0
 80074c0:	196b      	adds	r3, r5, r5
 80074c2:	eb46 0406 	adc.w	r4, r6, r6
 80074c6:	461a      	mov	r2, r3
 80074c8:	4623      	mov	r3, r4
 80074ca:	f7f9 fae7 	bl	8000a9c <__aeabi_uldivmod>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	461a      	mov	r2, r3
 80074d4:	4ba7      	ldr	r3, [pc, #668]	; (8007774 <UART_SetConfig+0x3a0>)
 80074d6:	fba3 2302 	umull	r2, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	461d      	mov	r5, r3
 80074e4:	f04f 0600 	mov.w	r6, #0
 80074e8:	46a9      	mov	r9, r5
 80074ea:	46b2      	mov	sl, r6
 80074ec:	eb19 0309 	adds.w	r3, r9, r9
 80074f0:	eb4a 040a 	adc.w	r4, sl, sl
 80074f4:	4699      	mov	r9, r3
 80074f6:	46a2      	mov	sl, r4
 80074f8:	eb19 0905 	adds.w	r9, r9, r5
 80074fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800750c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007514:	4689      	mov	r9, r1
 8007516:	4692      	mov	sl, r2
 8007518:	eb19 0005 	adds.w	r0, r9, r5
 800751c:	eb4a 0106 	adc.w	r1, sl, r6
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	461d      	mov	r5, r3
 8007526:	f04f 0600 	mov.w	r6, #0
 800752a:	196b      	adds	r3, r5, r5
 800752c:	eb46 0406 	adc.w	r4, r6, r6
 8007530:	461a      	mov	r2, r3
 8007532:	4623      	mov	r3, r4
 8007534:	f7f9 fab2 	bl	8000a9c <__aeabi_uldivmod>
 8007538:	4603      	mov	r3, r0
 800753a:	460c      	mov	r4, r1
 800753c:	461a      	mov	r2, r3
 800753e:	4b8d      	ldr	r3, [pc, #564]	; (8007774 <UART_SetConfig+0x3a0>)
 8007540:	fba3 1302 	umull	r1, r3, r3, r2
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	2164      	movs	r1, #100	; 0x64
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3332      	adds	r3, #50	; 0x32
 8007552:	4a88      	ldr	r2, [pc, #544]	; (8007774 <UART_SetConfig+0x3a0>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007560:	4498      	add	r8, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	461d      	mov	r5, r3
 8007566:	f04f 0600 	mov.w	r6, #0
 800756a:	46a9      	mov	r9, r5
 800756c:	46b2      	mov	sl, r6
 800756e:	eb19 0309 	adds.w	r3, r9, r9
 8007572:	eb4a 040a 	adc.w	r4, sl, sl
 8007576:	4699      	mov	r9, r3
 8007578:	46a2      	mov	sl, r4
 800757a:	eb19 0905 	adds.w	r9, r9, r5
 800757e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007582:	f04f 0100 	mov.w	r1, #0
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800758e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007596:	4689      	mov	r9, r1
 8007598:	4692      	mov	sl, r2
 800759a:	eb19 0005 	adds.w	r0, r9, r5
 800759e:	eb4a 0106 	adc.w	r1, sl, r6
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	461d      	mov	r5, r3
 80075a8:	f04f 0600 	mov.w	r6, #0
 80075ac:	196b      	adds	r3, r5, r5
 80075ae:	eb46 0406 	adc.w	r4, r6, r6
 80075b2:	461a      	mov	r2, r3
 80075b4:	4623      	mov	r3, r4
 80075b6:	f7f9 fa71 	bl	8000a9c <__aeabi_uldivmod>
 80075ba:	4603      	mov	r3, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	461a      	mov	r2, r3
 80075c0:	4b6c      	ldr	r3, [pc, #432]	; (8007774 <UART_SetConfig+0x3a0>)
 80075c2:	fba3 1302 	umull	r1, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2164      	movs	r1, #100	; 0x64
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	3332      	adds	r3, #50	; 0x32
 80075d4:	4a67      	ldr	r2, [pc, #412]	; (8007774 <UART_SetConfig+0x3a0>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f003 0207 	and.w	r2, r3, #7
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4442      	add	r2, r8
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	e27d      	b.n	8007ae6 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075ea:	f7fd feb7 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 80075ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	461d      	mov	r5, r3
 80075f4:	f04f 0600 	mov.w	r6, #0
 80075f8:	46a8      	mov	r8, r5
 80075fa:	46b1      	mov	r9, r6
 80075fc:	eb18 0308 	adds.w	r3, r8, r8
 8007600:	eb49 0409 	adc.w	r4, r9, r9
 8007604:	4698      	mov	r8, r3
 8007606:	46a1      	mov	r9, r4
 8007608:	eb18 0805 	adds.w	r8, r8, r5
 800760c:	eb49 0906 	adc.w	r9, r9, r6
 8007610:	f04f 0100 	mov.w	r1, #0
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800761c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007620:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007624:	4688      	mov	r8, r1
 8007626:	4691      	mov	r9, r2
 8007628:	eb18 0005 	adds.w	r0, r8, r5
 800762c:	eb49 0106 	adc.w	r1, r9, r6
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	461d      	mov	r5, r3
 8007636:	f04f 0600 	mov.w	r6, #0
 800763a:	196b      	adds	r3, r5, r5
 800763c:	eb46 0406 	adc.w	r4, r6, r6
 8007640:	461a      	mov	r2, r3
 8007642:	4623      	mov	r3, r4
 8007644:	f7f9 fa2a 	bl	8000a9c <__aeabi_uldivmod>
 8007648:	4603      	mov	r3, r0
 800764a:	460c      	mov	r4, r1
 800764c:	461a      	mov	r2, r3
 800764e:	4b49      	ldr	r3, [pc, #292]	; (8007774 <UART_SetConfig+0x3a0>)
 8007650:	fba3 2302 	umull	r2, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	461d      	mov	r5, r3
 800765e:	f04f 0600 	mov.w	r6, #0
 8007662:	46a9      	mov	r9, r5
 8007664:	46b2      	mov	sl, r6
 8007666:	eb19 0309 	adds.w	r3, r9, r9
 800766a:	eb4a 040a 	adc.w	r4, sl, sl
 800766e:	4699      	mov	r9, r3
 8007670:	46a2      	mov	sl, r4
 8007672:	eb19 0905 	adds.w	r9, r9, r5
 8007676:	eb4a 0a06 	adc.w	sl, sl, r6
 800767a:	f04f 0100 	mov.w	r1, #0
 800767e:	f04f 0200 	mov.w	r2, #0
 8007682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007686:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800768a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800768e:	4689      	mov	r9, r1
 8007690:	4692      	mov	sl, r2
 8007692:	eb19 0005 	adds.w	r0, r9, r5
 8007696:	eb4a 0106 	adc.w	r1, sl, r6
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	461d      	mov	r5, r3
 80076a0:	f04f 0600 	mov.w	r6, #0
 80076a4:	196b      	adds	r3, r5, r5
 80076a6:	eb46 0406 	adc.w	r4, r6, r6
 80076aa:	461a      	mov	r2, r3
 80076ac:	4623      	mov	r3, r4
 80076ae:	f7f9 f9f5 	bl	8000a9c <__aeabi_uldivmod>
 80076b2:	4603      	mov	r3, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	461a      	mov	r2, r3
 80076b8:	4b2e      	ldr	r3, [pc, #184]	; (8007774 <UART_SetConfig+0x3a0>)
 80076ba:	fba3 1302 	umull	r1, r3, r3, r2
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	2164      	movs	r1, #100	; 0x64
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	3332      	adds	r3, #50	; 0x32
 80076cc:	4a29      	ldr	r2, [pc, #164]	; (8007774 <UART_SetConfig+0x3a0>)
 80076ce:	fba2 2303 	umull	r2, r3, r2, r3
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076da:	4498      	add	r8, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	461d      	mov	r5, r3
 80076e0:	f04f 0600 	mov.w	r6, #0
 80076e4:	46a9      	mov	r9, r5
 80076e6:	46b2      	mov	sl, r6
 80076e8:	eb19 0309 	adds.w	r3, r9, r9
 80076ec:	eb4a 040a 	adc.w	r4, sl, sl
 80076f0:	4699      	mov	r9, r3
 80076f2:	46a2      	mov	sl, r4
 80076f4:	eb19 0905 	adds.w	r9, r9, r5
 80076f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80076fc:	f04f 0100 	mov.w	r1, #0
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800770c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007710:	4689      	mov	r9, r1
 8007712:	4692      	mov	sl, r2
 8007714:	eb19 0005 	adds.w	r0, r9, r5
 8007718:	eb4a 0106 	adc.w	r1, sl, r6
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	461d      	mov	r5, r3
 8007722:	f04f 0600 	mov.w	r6, #0
 8007726:	196b      	adds	r3, r5, r5
 8007728:	eb46 0406 	adc.w	r4, r6, r6
 800772c:	461a      	mov	r2, r3
 800772e:	4623      	mov	r3, r4
 8007730:	f7f9 f9b4 	bl	8000a9c <__aeabi_uldivmod>
 8007734:	4603      	mov	r3, r0
 8007736:	460c      	mov	r4, r1
 8007738:	461a      	mov	r2, r3
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <UART_SetConfig+0x3a0>)
 800773c:	fba3 1302 	umull	r1, r3, r3, r2
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	2164      	movs	r1, #100	; 0x64
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	3332      	adds	r3, #50	; 0x32
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <UART_SetConfig+0x3a0>)
 8007750:	fba2 2303 	umull	r2, r3, r2, r3
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f003 0207 	and.w	r2, r3, #7
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4442      	add	r2, r8
 8007760:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007762:	e1c0      	b.n	8007ae6 <UART_SetConfig+0x712>
 8007764:	40011000 	.word	0x40011000
 8007768:	40011400 	.word	0x40011400
 800776c:	40011800 	.word	0x40011800
 8007770:	40011c00 	.word	0x40011c00
 8007774:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4adc      	ldr	r2, [pc, #880]	; (8007af0 <UART_SetConfig+0x71c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <UART_SetConfig+0x3ce>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4adb      	ldr	r2, [pc, #876]	; (8007af4 <UART_SetConfig+0x720>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00a      	beq.n	80077a2 <UART_SetConfig+0x3ce>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4ad9      	ldr	r2, [pc, #868]	; (8007af8 <UART_SetConfig+0x724>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d005      	beq.n	80077a2 <UART_SetConfig+0x3ce>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4ad8      	ldr	r2, [pc, #864]	; (8007afc <UART_SetConfig+0x728>)
 800779c:	4293      	cmp	r3, r2
 800779e:	f040 80d1 	bne.w	8007944 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a2:	f7fd fdef 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 80077a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	469a      	mov	sl, r3
 80077ac:	f04f 0b00 	mov.w	fp, #0
 80077b0:	46d0      	mov	r8, sl
 80077b2:	46d9      	mov	r9, fp
 80077b4:	eb18 0308 	adds.w	r3, r8, r8
 80077b8:	eb49 0409 	adc.w	r4, r9, r9
 80077bc:	4698      	mov	r8, r3
 80077be:	46a1      	mov	r9, r4
 80077c0:	eb18 080a 	adds.w	r8, r8, sl
 80077c4:	eb49 090b 	adc.w	r9, r9, fp
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077dc:	4688      	mov	r8, r1
 80077de:	4691      	mov	r9, r2
 80077e0:	eb1a 0508 	adds.w	r5, sl, r8
 80077e4:	eb4b 0609 	adc.w	r6, fp, r9
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	0094      	lsls	r4, r2, #2
 80077fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007800:	008b      	lsls	r3, r1, #2
 8007802:	461a      	mov	r2, r3
 8007804:	4623      	mov	r3, r4
 8007806:	4628      	mov	r0, r5
 8007808:	4631      	mov	r1, r6
 800780a:	f7f9 f947 	bl	8000a9c <__aeabi_uldivmod>
 800780e:	4603      	mov	r3, r0
 8007810:	460c      	mov	r4, r1
 8007812:	461a      	mov	r2, r3
 8007814:	4bba      	ldr	r3, [pc, #744]	; (8007b00 <UART_SetConfig+0x72c>)
 8007816:	fba3 2302 	umull	r2, r3, r3, r2
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	469b      	mov	fp, r3
 8007824:	f04f 0c00 	mov.w	ip, #0
 8007828:	46d9      	mov	r9, fp
 800782a:	46e2      	mov	sl, ip
 800782c:	eb19 0309 	adds.w	r3, r9, r9
 8007830:	eb4a 040a 	adc.w	r4, sl, sl
 8007834:	4699      	mov	r9, r3
 8007836:	46a2      	mov	sl, r4
 8007838:	eb19 090b 	adds.w	r9, r9, fp
 800783c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007840:	f04f 0100 	mov.w	r1, #0
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800784c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007854:	4689      	mov	r9, r1
 8007856:	4692      	mov	sl, r2
 8007858:	eb1b 0509 	adds.w	r5, fp, r9
 800785c:	eb4c 060a 	adc.w	r6, ip, sl
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4619      	mov	r1, r3
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	f04f 0400 	mov.w	r4, #0
 8007872:	0094      	lsls	r4, r2, #2
 8007874:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007878:	008b      	lsls	r3, r1, #2
 800787a:	461a      	mov	r2, r3
 800787c:	4623      	mov	r3, r4
 800787e:	4628      	mov	r0, r5
 8007880:	4631      	mov	r1, r6
 8007882:	f7f9 f90b 	bl	8000a9c <__aeabi_uldivmod>
 8007886:	4603      	mov	r3, r0
 8007888:	460c      	mov	r4, r1
 800788a:	461a      	mov	r2, r3
 800788c:	4b9c      	ldr	r3, [pc, #624]	; (8007b00 <UART_SetConfig+0x72c>)
 800788e:	fba3 1302 	umull	r1, r3, r3, r2
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	2164      	movs	r1, #100	; 0x64
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	3332      	adds	r3, #50	; 0x32
 80078a0:	4a97      	ldr	r2, [pc, #604]	; (8007b00 <UART_SetConfig+0x72c>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ac:	4498      	add	r8, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	469b      	mov	fp, r3
 80078b2:	f04f 0c00 	mov.w	ip, #0
 80078b6:	46d9      	mov	r9, fp
 80078b8:	46e2      	mov	sl, ip
 80078ba:	eb19 0309 	adds.w	r3, r9, r9
 80078be:	eb4a 040a 	adc.w	r4, sl, sl
 80078c2:	4699      	mov	r9, r3
 80078c4:	46a2      	mov	sl, r4
 80078c6:	eb19 090b 	adds.w	r9, r9, fp
 80078ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078ce:	f04f 0100 	mov.w	r1, #0
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078e2:	4689      	mov	r9, r1
 80078e4:	4692      	mov	sl, r2
 80078e6:	eb1b 0509 	adds.w	r5, fp, r9
 80078ea:	eb4c 060a 	adc.w	r6, ip, sl
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4619      	mov	r1, r3
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	0094      	lsls	r4, r2, #2
 8007902:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007906:	008b      	lsls	r3, r1, #2
 8007908:	461a      	mov	r2, r3
 800790a:	4623      	mov	r3, r4
 800790c:	4628      	mov	r0, r5
 800790e:	4631      	mov	r1, r6
 8007910:	f7f9 f8c4 	bl	8000a9c <__aeabi_uldivmod>
 8007914:	4603      	mov	r3, r0
 8007916:	460c      	mov	r4, r1
 8007918:	461a      	mov	r2, r3
 800791a:	4b79      	ldr	r3, [pc, #484]	; (8007b00 <UART_SetConfig+0x72c>)
 800791c:	fba3 1302 	umull	r1, r3, r3, r2
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	2164      	movs	r1, #100	; 0x64
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	3332      	adds	r3, #50	; 0x32
 800792e:	4a74      	ldr	r2, [pc, #464]	; (8007b00 <UART_SetConfig+0x72c>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4442      	add	r2, r8
 8007940:	609a      	str	r2, [r3, #8]
 8007942:	e0d0      	b.n	8007ae6 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fd fd0a 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8007948:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	469a      	mov	sl, r3
 800794e:	f04f 0b00 	mov.w	fp, #0
 8007952:	46d0      	mov	r8, sl
 8007954:	46d9      	mov	r9, fp
 8007956:	eb18 0308 	adds.w	r3, r8, r8
 800795a:	eb49 0409 	adc.w	r4, r9, r9
 800795e:	4698      	mov	r8, r3
 8007960:	46a1      	mov	r9, r4
 8007962:	eb18 080a 	adds.w	r8, r8, sl
 8007966:	eb49 090b 	adc.w	r9, r9, fp
 800796a:	f04f 0100 	mov.w	r1, #0
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007976:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800797a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800797e:	4688      	mov	r8, r1
 8007980:	4691      	mov	r9, r2
 8007982:	eb1a 0508 	adds.w	r5, sl, r8
 8007986:	eb4b 0609 	adc.w	r6, fp, r9
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	0094      	lsls	r4, r2, #2
 800799e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079a2:	008b      	lsls	r3, r1, #2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	4631      	mov	r1, r6
 80079ac:	f7f9 f876 	bl	8000a9c <__aeabi_uldivmod>
 80079b0:	4603      	mov	r3, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b52      	ldr	r3, [pc, #328]	; (8007b00 <UART_SetConfig+0x72c>)
 80079b8:	fba3 2302 	umull	r2, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	469b      	mov	fp, r3
 80079c6:	f04f 0c00 	mov.w	ip, #0
 80079ca:	46d9      	mov	r9, fp
 80079cc:	46e2      	mov	sl, ip
 80079ce:	eb19 0309 	adds.w	r3, r9, r9
 80079d2:	eb4a 040a 	adc.w	r4, sl, sl
 80079d6:	4699      	mov	r9, r3
 80079d8:	46a2      	mov	sl, r4
 80079da:	eb19 090b 	adds.w	r9, r9, fp
 80079de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079e2:	f04f 0100 	mov.w	r1, #0
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079f6:	4689      	mov	r9, r1
 80079f8:	4692      	mov	sl, r2
 80079fa:	eb1b 0509 	adds.w	r5, fp, r9
 80079fe:	eb4c 060a 	adc.w	r6, ip, sl
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4619      	mov	r1, r3
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	f04f 0400 	mov.w	r4, #0
 8007a14:	0094      	lsls	r4, r2, #2
 8007a16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a1a:	008b      	lsls	r3, r1, #2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4623      	mov	r3, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	4631      	mov	r1, r6
 8007a24:	f7f9 f83a 	bl	8000a9c <__aeabi_uldivmod>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4b34      	ldr	r3, [pc, #208]	; (8007b00 <UART_SetConfig+0x72c>)
 8007a30:	fba3 1302 	umull	r1, r3, r3, r2
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	2164      	movs	r1, #100	; 0x64
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	3332      	adds	r3, #50	; 0x32
 8007a42:	4a2f      	ldr	r2, [pc, #188]	; (8007b00 <UART_SetConfig+0x72c>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a4e:	4498      	add	r8, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	469b      	mov	fp, r3
 8007a54:	f04f 0c00 	mov.w	ip, #0
 8007a58:	46d9      	mov	r9, fp
 8007a5a:	46e2      	mov	sl, ip
 8007a5c:	eb19 0309 	adds.w	r3, r9, r9
 8007a60:	eb4a 040a 	adc.w	r4, sl, sl
 8007a64:	4699      	mov	r9, r3
 8007a66:	46a2      	mov	sl, r4
 8007a68:	eb19 090b 	adds.w	r9, r9, fp
 8007a6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a84:	4689      	mov	r9, r1
 8007a86:	4692      	mov	sl, r2
 8007a88:	eb1b 0509 	adds.w	r5, fp, r9
 8007a8c:	eb4c 060a 	adc.w	r6, ip, sl
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4619      	mov	r1, r3
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	f04f 0400 	mov.w	r4, #0
 8007aa2:	0094      	lsls	r4, r2, #2
 8007aa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007aa8:	008b      	lsls	r3, r1, #2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4623      	mov	r3, r4
 8007aae:	4628      	mov	r0, r5
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	f7f8 fff3 	bl	8000a9c <__aeabi_uldivmod>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461a      	mov	r2, r3
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <UART_SetConfig+0x72c>)
 8007abe:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	2164      	movs	r1, #100	; 0x64
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	3332      	adds	r3, #50	; 0x32
 8007ad0:	4a0b      	ldr	r2, [pc, #44]	; (8007b00 <UART_SetConfig+0x72c>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4442      	add	r2, r8
 8007ae2:	609a      	str	r2, [r3, #8]
}
 8007ae4:	e7ff      	b.n	8007ae6 <UART_SetConfig+0x712>
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	40011000 	.word	0x40011000
 8007af4:	40011400 	.word	0x40011400
 8007af8:	40011800 	.word	0x40011800
 8007afc:	40011c00 	.word	0x40011c00
 8007b00:	51eb851f 	.word	0x51eb851f

08007b04 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4b2f      	ldr	r3, [pc, #188]	; (8007be0 <FSMC_NORSRAM_Init+0xdc>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007b2e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007b34:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007b3a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007b40:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8007b46:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007b4c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007b52:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007b58:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007b5e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8007b64:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007b6a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007b70:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8007b76:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d103      	bne.n	8007b8e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68f9      	ldr	r1, [r7, #12]
 8007b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba2:	d10a      	bne.n	8007bba <FSMC_NORSRAM_Init+0xb6>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	ffc00480 	.word	0xffc00480

08007be4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c06:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c12:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007c1a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007c22:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007c2c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	3b02      	subs	r3, #2
 8007c34:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007c36:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6979      	ldr	r1, [r7, #20]
 8007c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5c:	d10e      	bne.n	8007c7c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c66:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	051b      	lsls	r3, r3, #20
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ca4:	d122      	bne.n	8007cec <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cae:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007cc2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007cca:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007cd2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007cd8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6979      	ldr	r1, [r7, #20]
 8007ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cea:	e005      	b.n	8007cf8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	cff00000 	.word	0xcff00000

08007d0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	f107 001c 	add.w	r0, r7, #28
 8007d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007d22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007d24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007d2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007d2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007d32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007d36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	b004      	add	sp, #16
 8007d60:	4770      	bx	lr

08007d62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2203      	movs	r2, #3
 8007d88:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d8a:	2002      	movs	r0, #2
 8007d8c:	f7fa fb68 	bl	8002460 <HAL_Delay>
  
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0303 	and.w	r3, r3, #3
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007dda:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007de0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007df0:	f023 030f 	bic.w	r3, r3, #15
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	b2db      	uxtb	r3, r3
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3314      	adds	r3, #20
 8007e32:	461a      	mov	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	4413      	add	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
}  
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e70:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e76:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0

}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff74 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f975 	bl	80081c4 <SDMMC_GetCmdResp1>
 8007eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b08a      	sub	sp, #40	; 0x28
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ef6:	2307      	movs	r3, #7
 8007ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007efa:	2340      	movs	r3, #64	; 0x40
 8007efc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f06:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff ff51 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f18:	2107      	movs	r1, #7
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f952 	bl	80081c4 <SDMMC_GetCmdResp1>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	; 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ff30 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f90c 	bl	8008174 <SDMMC_GetCmdError>
 8007f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f76:	2308      	movs	r3, #8
 8007f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f88:	f107 0308 	add.w	r3, r7, #8
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff ff11 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 faf5 	bl	8008584 <SDMMC_GetCmdResp7>
 8007f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b088      	sub	sp, #32
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007fb4:	2337      	movs	r3, #55	; 0x37
 8007fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fb8:	2340      	movs	r3, #64	; 0x40
 8007fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff fef2 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd6:	2137      	movs	r1, #55	; 0x37
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f8f3 	bl	80081c4 <SDMMC_GetCmdResp1>
 8007fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b088      	sub	sp, #32
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008000:	2329      	movs	r3, #41	; 0x29
 8008002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800800c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008010:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008012:	f107 0308 	add.w	r3, r7, #8
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff fecc 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa02 	bl	8008428 <SDMMC_GetCmdResp3>
 8008024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008026:	69fb      	ldr	r3, [r7, #28]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3720      	adds	r7, #32
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800803e:	2306      	movs	r3, #6
 8008040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008042:	2340      	movs	r3, #64	; 0x40
 8008044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800804a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800804e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fead 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800805c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008060:	2106      	movs	r1, #6
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f8ae 	bl	80081c4 <SDMMC_GetCmdResp1>
 8008068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800806a:	69fb      	ldr	r3, [r7, #28]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008080:	2333      	movs	r3, #51	; 0x33
 8008082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800808c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fe8c 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800809e:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a2:	2133      	movs	r1, #51	; 0x33
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f88d 	bl	80081c4 <SDMMC_GetCmdResp1>
 80080aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ac:	69fb      	ldr	r3, [r7, #28]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3720      	adds	r7, #32
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80080c2:	2302      	movs	r3, #2
 80080c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80080c6:	23c0      	movs	r3, #192	; 0xc0
 80080c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080d4:	f107 0308 	add.w	r3, r7, #8
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fe6b 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f95b 	bl	800839c <SDMMC_GetCmdResp2>
 80080e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080e8:	69fb      	ldr	r3, [r7, #28]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b088      	sub	sp, #32
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008100:	2309      	movs	r3, #9
 8008102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008104:	23c0      	movs	r3, #192	; 0xc0
 8008106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008108:	2300      	movs	r3, #0
 800810a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800810c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fe4c 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f93c 	bl	800839c <SDMMC_GetCmdResp2>
 8008124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008126:	69fb      	ldr	r3, [r7, #28]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3720      	adds	r7, #32
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800813e:	2303      	movs	r3, #3
 8008140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800814a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800814e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fe2d 	bl	8007db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	2103      	movs	r1, #3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f99b 	bl	800849c <SDMMC_GetCmdResp6>
 8008166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008168:	69fb      	ldr	r3, [r7, #28]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008174:	b490      	push	{r4, r7}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <SDMMC_GetCmdError+0x48>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0f      	ldr	r2, [pc, #60]	; (80081c0 <SDMMC_GetCmdError+0x4c>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	0a5b      	lsrs	r3, r3, #9
 8008188:	f241 3288 	movw	r2, #5000	; 0x1388
 800818c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008190:	4623      	mov	r3, r4
 8008192:	1e5c      	subs	r4, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800819c:	e009      	b.n	80081b2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f2      	beq.n	8008190 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	22c5      	movs	r2, #197	; 0xc5
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc90      	pop	{r4, r7}
 80081ba:	4770      	bx	lr
 80081bc:	20000008 	.word	0x20000008
 80081c0:	10624dd3 	.word	0x10624dd3

080081c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80081c4:	b590      	push	{r4, r7, lr}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	460b      	mov	r3, r1
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081d2:	4b6f      	ldr	r3, [pc, #444]	; (8008390 <SDMMC_GetCmdResp1+0x1cc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a6f      	ldr	r2, [pc, #444]	; (8008394 <SDMMC_GetCmdResp1+0x1d0>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	0a5b      	lsrs	r3, r3, #9
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80081e4:	4623      	mov	r3, r4
 80081e6:	1e5c      	subs	r4, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081f0:	e0c9      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <SDMMC_GetCmdResp1+0x20>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1eb      	bne.n	80081e4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2204      	movs	r2, #4
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800821e:	2304      	movs	r3, #4
 8008220:	e0b1      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008234:	2301      	movs	r3, #1
 8008236:	e0a6      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	22c5      	movs	r2, #197	; 0xc5
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fde3 	bl	8007e0a <SDIO_GetCommandResponse>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	4293      	cmp	r3, r2
 800824c:	d001      	beq.n	8008252 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800824e:	2301      	movs	r3, #1
 8008250:	e099      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff fde5 	bl	8007e24 <SDIO_GetResponse>
 800825a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4b4e      	ldr	r3, [pc, #312]	; (8008398 <SDMMC_GetCmdResp1+0x1d4>)
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008266:	2300      	movs	r3, #0
 8008268:	e08d      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da02      	bge.n	8008276 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008274:	e087      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008280:	2340      	movs	r3, #64	; 0x40
 8008282:	e080      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800828e:	2380      	movs	r3, #128	; 0x80
 8008290:	e079      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800829c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082a0:	e071      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80082ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b0:	e069      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80082bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c0:	e061      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80082cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082d0:	e059      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80082dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e0:	e051      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082f0:	e049      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80082fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008300:	e041      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800830c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008310:	e039      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800831c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008320:	e031      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800832c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008330:	e029      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800833c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008340:	e021      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800834c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008350:	e019      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800835c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008360:	e011      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800836c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008370:	e009      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800837c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008380:	e001      	b.n	8008386 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bd90      	pop	{r4, r7, pc}
 800838e:	bf00      	nop
 8008390:	20000008 	.word	0x20000008
 8008394:	10624dd3 	.word	0x10624dd3
 8008398:	fdffe008 	.word	0xfdffe008

0800839c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800839c:	b490      	push	{r4, r7}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083a4:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <SDMMC_GetCmdResp2+0x84>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <SDMMC_GetCmdResp2+0x88>)
 80083aa:	fba2 2303 	umull	r2, r3, r2, r3
 80083ae:	0a5b      	lsrs	r3, r3, #9
 80083b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80083b8:	4623      	mov	r3, r4
 80083ba:	1e5c      	subs	r4, r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083c4:	e026      	b.n	8008414 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0f0      	beq.n	80083b8 <SDMMC_GetCmdResp2+0x1c>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1eb      	bne.n	80083b8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2204      	movs	r2, #4
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083f2:	2304      	movs	r3, #4
 80083f4:	e00e      	b.n	8008414 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008408:	2301      	movs	r3, #1
 800840a:	e003      	b.n	8008414 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	22c5      	movs	r2, #197	; 0xc5
 8008410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bc90      	pop	{r4, r7}
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000008 	.word	0x20000008
 8008424:	10624dd3 	.word	0x10624dd3

08008428 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008428:	b490      	push	{r4, r7}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008430:	4b18      	ldr	r3, [pc, #96]	; (8008494 <SDMMC_GetCmdResp3+0x6c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a18      	ldr	r2, [pc, #96]	; (8008498 <SDMMC_GetCmdResp3+0x70>)
 8008436:	fba2 2303 	umull	r2, r3, r2, r3
 800843a:	0a5b      	lsrs	r3, r3, #9
 800843c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008440:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008444:	4623      	mov	r3, r4
 8008446:	1e5c      	subs	r4, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800844c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008450:	e01b      	b.n	800848a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <SDMMC_GetCmdResp3+0x1c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1eb      	bne.n	8008444 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2204      	movs	r2, #4
 800847c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800847e:	2304      	movs	r3, #4
 8008480:	e003      	b.n	800848a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	22c5      	movs	r2, #197	; 0xc5
 8008486:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bc90      	pop	{r4, r7}
 8008492:	4770      	bx	lr
 8008494:	20000008 	.word	0x20000008
 8008498:	10624dd3 	.word	0x10624dd3

0800849c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	460b      	mov	r3, r1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084aa:	4b34      	ldr	r3, [pc, #208]	; (800857c <SDMMC_GetCmdResp6+0xe0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a34      	ldr	r2, [pc, #208]	; (8008580 <SDMMC_GetCmdResp6+0xe4>)
 80084b0:	fba2 2303 	umull	r2, r3, r2, r3
 80084b4:	0a5b      	lsrs	r3, r3, #9
 80084b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ba:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80084be:	4623      	mov	r3, r4
 80084c0:	1e5c      	subs	r4, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084ca:	e052      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <SDMMC_GetCmdResp6+0x22>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1eb      	bne.n	80084be <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2204      	movs	r2, #4
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084f8:	2304      	movs	r3, #4
 80084fa:	e03a      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800850e:	2301      	movs	r3, #1
 8008510:	e02f      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fc79 	bl	8007e0a <SDIO_GetCommandResponse>
 8008518:	4603      	mov	r3, r0
 800851a:	461a      	mov	r2, r3
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	4293      	cmp	r3, r2
 8008520:	d001      	beq.n	8008526 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008522:	2301      	movs	r3, #1
 8008524:	e025      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	22c5      	movs	r2, #197	; 0xc5
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fc78 	bl	8007e24 <SDIO_GetResponse>
 8008534:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	b29a      	uxth	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800854a:	2300      	movs	r3, #0
 800854c:	e011      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800855c:	e009      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800856c:	e001      	b.n	8008572 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800856e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd90      	pop	{r4, r7, pc}
 800857a:	bf00      	nop
 800857c:	20000008 	.word	0x20000008
 8008580:	10624dd3 	.word	0x10624dd3

08008584 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008584:	b490      	push	{r4, r7}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800858c:	4b21      	ldr	r3, [pc, #132]	; (8008614 <SDMMC_GetCmdResp7+0x90>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a21      	ldr	r2, [pc, #132]	; (8008618 <SDMMC_GetCmdResp7+0x94>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	0a5b      	lsrs	r3, r3, #9
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085a0:	4623      	mov	r3, r4
 80085a2:	1e5c      	subs	r4, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085ac:	e02c      	b.n	8008608 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0f0      	beq.n	80085a0 <SDMMC_GetCmdResp7+0x1c>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1eb      	bne.n	80085a0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2204      	movs	r2, #4
 80085d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085da:	2304      	movs	r3, #4
 80085dc:	e014      	b.n	8008608 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e009      	b.n	8008608 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2240      	movs	r2, #64	; 0x40
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008606:	2300      	movs	r3, #0
  
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bc90      	pop	{r4, r7}
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20000008 	.word	0x20000008
 8008618:	10624dd3 	.word	0x10624dd3

0800861c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800861c:	b084      	sub	sp, #16
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	f107 001c 	add.w	r0, r7, #28
 800862a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2b01      	cmp	r3, #1
 8008632:	d122      	bne.n	800867a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800865c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d105      	bne.n	800866e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f94a 	bl	8008908 <USB_CoreReset>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
 8008678:	e01a      	b.n	80086b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f93e 	bl	8008908 <USB_CoreReset>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
 80086a2:	e005      	b.n	80086b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d10b      	bne.n	80086ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f043 0206 	orr.w	r2, r3, #6
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f043 0220 	orr.w	r2, r3, #32
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086da:	b004      	add	sp, #16
 80086dc:	4770      	bx	lr

080086de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f043 0201 	orr.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f023 0201 	bic.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d106      	bne.n	800874e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e00b      	b.n	8008766 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	60da      	str	r2, [r3, #12]
 8008760:	e001      	b.n	8008766 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e003      	b.n	800876e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008766:	2032      	movs	r0, #50	; 0x32
 8008768:	f7f9 fe7a 	bl	8002460 <HAL_Delay>

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	019b      	lsls	r3, r3, #6
 800878a:	f043 0220 	orr.w	r2, r3, #32
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <USB_FlushTxFifo+0x48>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d901      	bls.n	80087a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e006      	b.n	80087b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d0f0      	beq.n	8008792 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	00030d40 	.word	0x00030d40

080087c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2210      	movs	r2, #16
 80087d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4a09      	ldr	r2, [pc, #36]	; (8008804 <USB_FlushRxFifo+0x40>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d901      	bls.n	80087e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e006      	b.n	80087f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b10      	cmp	r3, #16
 80087f2:	d0f0      	beq.n	80087d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	00030d40 	.word	0x00030d40

08008808 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008808:	b480      	push	{r7}
 800880a:	b089      	sub	sp, #36	; 0x24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4611      	mov	r1, r2
 8008814:	461a      	mov	r2, r3
 8008816:	460b      	mov	r3, r1
 8008818:	71fb      	strb	r3, [r7, #7]
 800881a:	4613      	mov	r3, r2
 800881c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008826:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d11a      	bne.n	8008864 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800882e:	88bb      	ldrh	r3, [r7, #4]
 8008830:	3303      	adds	r3, #3
 8008832:	089b      	lsrs	r3, r3, #2
 8008834:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	e00f      	b.n	800885c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	031a      	lsls	r2, r3, #12
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	4413      	add	r3, r2
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	461a      	mov	r2, r3
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3304      	adds	r3, #4
 8008854:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	3301      	adds	r3, #1
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	429a      	cmp	r2, r3
 8008862:	d3eb      	bcc.n	800883c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3724      	adds	r7, #36	; 0x24
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008872:	b480      	push	{r7}
 8008874:	b089      	sub	sp, #36	; 0x24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	4613      	mov	r3, r2
 800887e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	3303      	adds	r3, #3
 800888c:	089b      	lsrs	r3, r3, #2
 800888e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008890:	2300      	movs	r3, #0
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	e00b      	b.n	80088ae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3304      	adds	r3, #4
 80088a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d3ef      	bcc.n	8008896 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80088b6:	69fb      	ldr	r3, [r7, #28]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3724      	adds	r7, #36	; 0x24
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4013      	ands	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0301 	and.w	r3, r3, #1
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4a13      	ldr	r2, [pc, #76]	; (800896c <USB_CoreReset+0x64>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d901      	bls.n	8008926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e01b      	b.n	800895e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	daf2      	bge.n	8008914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f043 0201 	orr.w	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <USB_CoreReset+0x64>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d901      	bls.n	8008950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e006      	b.n	800895e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	d0f0      	beq.n	800893e <USB_CoreReset+0x36>

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	00030d40 	.word	0x00030d40

08008970 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008970:	b084      	sub	sp, #16
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	f107 001c 	add.w	r0, r7, #28
 800897e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800898c:	461a      	mov	r2, r3
 800898e:	2300      	movs	r3, #0
 8008990:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10a      	bne.n	80089d2 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ca:	f043 0304 	orr.w	r3, r3, #4
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	e014      	b.n	80089fc <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089e0:	f023 0304 	bic.w	r3, r3, #4
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	e009      	b.n	80089fc <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089f6:	f023 0304 	bic.w	r3, r3, #4
 80089fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80089fc:	2110      	movs	r1, #16
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff feba 	bl	8008778 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fedd 	bl	80087c4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e015      	b.n	8008a3c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a30:	461a      	mov	r2, r3
 8008a32:	2300      	movs	r3, #0
 8008a34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d3e5      	bcc.n	8008a10 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008a44:	2101      	movs	r1, #1
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f8ac 	bl	8008ba4 <USB_DriveVbus>

  HAL_Delay(200U);
 8008a4c:	20c8      	movs	r0, #200	; 0xc8
 8008a4e:	f7f9 fd07 	bl	8002460 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a72:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <USB_HostInit+0x158>)
 8008a78:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	; (8008acc <USB_HostInit+0x15c>)
 8008a7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a82:	e009      	b.n	8008a98 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2280      	movs	r2, #128	; 0x80
 8008a88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <USB_HostInit+0x160>)
 8008a8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <USB_HostInit+0x164>)
 8008a94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f043 0210 	orr.w	r2, r3, #16
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <USB_HostInit+0x168>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac2:	b004      	add	sp, #16
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	01000200 	.word	0x01000200
 8008acc:	00e00300 	.word	0x00e00300
 8008ad0:	00600080 	.word	0x00600080
 8008ad4:	004000e0 	.word	0x004000e0
 8008ad8:	a3200008 	.word	0xa3200008

08008adc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b14:	4313      	orrs	r3, r2
 8008b16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d107      	bne.n	8008b2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b24:	461a      	mov	r2, r3
 8008b26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b2a:	6053      	str	r3, [r2, #4]
 8008b2c:	e009      	b.n	8008b42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d106      	bne.n	8008b42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b80:	2064      	movs	r0, #100	; 0x64
 8008b82:	f7f9 fc6d 	bl	8002460 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008b94:	200a      	movs	r0, #10
 8008b96:	f7f9 fc63 	bl	8002460 <HAL_Delay>

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008bc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d109      	bne.n	8008be8 <USB_DriveVbus+0x44>
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d106      	bne.n	8008be8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008be6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf2:	d109      	bne.n	8008c08 <USB_DriveVbus+0x64>
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	0c5b      	lsrs	r3, r3, #17
 8008c34:	f003 0303 	and.w	r3, r3, #3
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	b29b      	uxth	r3, r3
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	4608      	mov	r0, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	70fb      	strb	r3, [r7, #3]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	70bb      	strb	r3, [r7, #2]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c96:	461a      	mov	r2, r3
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d87e      	bhi.n	8008da4 <USB_HC_Init+0x13c>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <USB_HC_Init+0x44>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008d67 	.word	0x08008d67
 8008cb4:	08008cbd 	.word	0x08008cbd
 8008cb8:	08008d29 	.word	0x08008d29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f240 439d 	movw	r3, #1181	; 0x49d
 8008cce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008cd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da10      	bge.n	8008cfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008cf8:	e057      	b.n	8008daa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d051      	beq.n	8008daa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	0151      	lsls	r1, r2, #5
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008d24:	60d3      	str	r3, [r2, #12]
      break;
 8008d26:	e040      	b.n	8008daa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d34:	461a      	mov	r2, r3
 8008d36:	f240 639d 	movw	r3, #1693	; 0x69d
 8008d3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da34      	bge.n	8008dae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d64:	e023      	b.n	8008dae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	461a      	mov	r2, r3
 8008d74:	f240 2325 	movw	r3, #549	; 0x225
 8008d78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da17      	bge.n	8008db2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008da0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008da2:	e006      	b.n	8008db2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
      break;
 8008da8:	e004      	b.n	8008db4 <USB_HC_Init+0x14c>
      break;
 8008daa:	bf00      	nop
 8008dac:	e002      	b.n	8008db4 <USB_HC_Init+0x14c>
      break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <USB_HC_Init+0x14c>
      break;
 8008db2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	f003 030f 	and.w	r3, r3, #15
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008dde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da03      	bge.n	8008dee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	e001      	b.n	8008df2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d103      	bne.n	8008e02 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	e001      	b.n	8008e06 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e06:	787b      	ldrb	r3, [r7, #1]
 8008e08:	059b      	lsls	r3, r3, #22
 8008e0a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e0e:	78bb      	ldrb	r3, [r7, #2]
 8008e10:	02db      	lsls	r3, r3, #11
 8008e12:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e16:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e1c:	049b      	lsls	r3, r3, #18
 8008e1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e22:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	0159      	lsls	r1, r3, #5
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	440b      	add	r3, r1
 8008e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e3c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e42:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d10f      	bne.n	8008e6c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	78fa      	ldrb	r2, [r7, #3]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e6a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop

08008e7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08c      	sub	sp, #48	; 0x30
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d028      	beq.n	8008ef8 <USB_HC_StartXfer+0x7c>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	791b      	ldrb	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d124      	bne.n	8008ef8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10b      	bne.n	8008ecc <USB_HC_StartXfer+0x50>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	795b      	ldrb	r3, [r3, #5]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d107      	bne.n	8008ecc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 fa30 	bl	8009328 <USB_DoPing>
      return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e114      	b.n	80090f6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d112      	bne.n	8008ef8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	69fa      	ldr	r2, [r7, #28]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	6a3a      	ldr	r2, [r7, #32]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008ef0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d018      	beq.n	8008f32 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	8912      	ldrh	r2, [r2, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	8912      	ldrh	r2, [r2, #8]
 8008f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f14:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f18:	8b7b      	ldrh	r3, [r7, #26]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d90b      	bls.n	8008f36 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008f1e:	8b7b      	ldrh	r3, [r7, #26]
 8008f20:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	8912      	ldrh	r2, [r2, #8]
 8008f28:	fb02 f203 	mul.w	r2, r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	611a      	str	r2, [r3, #16]
 8008f30:	e001      	b.n	8008f36 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008f32:	2301      	movs	r3, #1
 8008f34:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	78db      	ldrb	r3, [r3, #3]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d006      	beq.n	8008f4c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008f3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	8912      	ldrh	r2, [r2, #8]
 8008f44:	fb02 f203 	mul.w	r2, r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f56:	04d9      	lsls	r1, r3, #19
 8008f58:	4b69      	ldr	r3, [pc, #420]	; (8009100 <USB_HC_StartXfer+0x284>)
 8008f5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	7a9b      	ldrb	r3, [r3, #10]
 8008f62:	075b      	lsls	r3, r3, #29
 8008f64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	0148      	lsls	r0, r1, #5
 8008f6c:	6a39      	ldr	r1, [r7, #32]
 8008f6e:	4401      	add	r1, r0
 8008f70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	68d9      	ldr	r1, [r3, #12]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8e:	460a      	mov	r2, r1
 8008f90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf0c      	ite	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	2300      	movne	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	7e7b      	ldrb	r3, [r7, #25]
 8008fda:	075b      	lsls	r3, r3, #29
 8008fdc:	69f9      	ldr	r1, [r7, #28]
 8008fde:	0148      	lsls	r0, r1, #5
 8008fe0:	6a39      	ldr	r1, [r7, #32]
 8008fe2:	4401      	add	r1, r0
 8008fe4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a42      	ldr	r2, [pc, #264]	; (8009104 <USB_HC_StartXfer+0x288>)
 8008ffc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ffe:	4b41      	ldr	r3, [pc, #260]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009006:	4a3f      	ldr	r2, [pc, #252]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009008:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	78db      	ldrb	r3, [r3, #3]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d006      	beq.n	8009020 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009012:	4b3c      	ldr	r3, [pc, #240]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800901a:	4a3a      	ldr	r2, [pc, #232]	; (8009104 <USB_HC_StartXfer+0x288>)
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	e005      	b.n	800902c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009020:	4b38      	ldr	r3, [pc, #224]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009028:	4a36      	ldr	r2, [pc, #216]	; (8009104 <USB_HC_StartXfer+0x288>)
 800902a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800902c:	4b35      	ldr	r3, [pc, #212]	; (8009104 <USB_HC_StartXfer+0x288>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009034:	4a33      	ldr	r2, [pc, #204]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009036:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	461a      	mov	r2, r3
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <USB_HC_StartXfer+0x288>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e04f      	b.n	80090f6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	78db      	ldrb	r3, [r3, #3]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d14a      	bne.n	80090f4 <USB_HC_StartXfer+0x278>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d046      	beq.n	80090f4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	79db      	ldrb	r3, [r3, #7]
 800906a:	2b03      	cmp	r3, #3
 800906c:	d830      	bhi.n	80090d0 <USB_HC_StartXfer+0x254>
 800906e:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <USB_HC_StartXfer+0x1f8>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009085 	.word	0x08009085
 8009078:	080090a9 	.word	0x080090a9
 800907c:	08009085 	.word	0x08009085
 8009080:	080090a9 	.word	0x080090a9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	3303      	adds	r3, #3
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800908e:	8afa      	ldrh	r2, [r7, #22]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	b29b      	uxth	r3, r3
 8009096:	429a      	cmp	r2, r3
 8009098:	d91c      	bls.n	80090d4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80090a6:	e015      	b.n	80090d4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	3303      	adds	r3, #3
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80090b2:	8afa      	ldrh	r2, [r7, #22]
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	429a      	cmp	r2, r3
 80090c0:	d90a      	bls.n	80090d8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80090ce:	e003      	b.n	80090d8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80090d0:	bf00      	nop
 80090d2:	e002      	b.n	80090da <USB_HC_StartXfer+0x25e>
        break;
 80090d4:	bf00      	nop
 80090d6:	e000      	b.n	80090da <USB_HC_StartXfer+0x25e>
        break;
 80090d8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	68d9      	ldr	r1, [r3, #12]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	785a      	ldrb	r2, [r3, #1]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	b298      	uxth	r0, r3
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	4603      	mov	r3, r0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff fb8a 	bl	8008808 <USB_WritePacket>
  }

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3728      	adds	r7, #40	; 0x28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	1ff80000 	.word	0x1ff80000
 8009104:	20000104 	.word	0x20000104

08009108 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	b29b      	uxth	r3, r3
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	4413      	add	r3, r2
 800914a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	0c9b      	lsrs	r3, r3, #18
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <USB_HC_Halt+0x3a>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d16c      	bne.n	800923e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	440a      	add	r2, r1
 800917a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800917e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009182:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d143      	bne.n	8009218 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	0151      	lsls	r1, r2, #5
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091ee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3301      	adds	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091fc:	d81d      	bhi.n	800923a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	4413      	add	r3, r2
 8009206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009214:	d0ec      	beq.n	80091f0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009216:	e080      	b.n	800931a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	440a      	add	r2, r1
 800922e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009236:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009238:	e06f      	b.n	800931a <USB_HC_Halt+0x1f0>
          break;
 800923a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800923c:	e06d      	b.n	800931a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	4413      	add	r3, r2
 8009246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	0151      	lsls	r1, r2, #5
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	440a      	add	r2, r1
 8009254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800925c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d143      	bne.n	80092f6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	4413      	add	r3, r2
 8009276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	440a      	add	r2, r1
 8009284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800928c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	4413      	add	r3, r2
 8009296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	3301      	adds	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092da:	d81d      	bhi.n	8009318 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092f2:	d0ec      	beq.n	80092ce <USB_HC_Halt+0x1a4>
 80092f4:	e011      	b.n	800931a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	0151      	lsls	r1, r2, #5
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	440a      	add	r2, r1
 800930c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	e000      	b.n	800931a <USB_HC_Halt+0x1f0>
          break;
 8009318:	bf00      	nop
    }
  }

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800933c:	2301      	movs	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	04da      	lsls	r2, r3, #19
 8009344:	4b15      	ldr	r3, [pc, #84]	; (800939c <USB_DoPing+0x74>)
 8009346:	4013      	ands	r3, r2
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	440a      	add	r2, r1
 8009350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009358:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009370:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009378:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	4413      	add	r3, r2
 8009382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009386:	461a      	mov	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	1ff80000 	.word	0x1ff80000

080093a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f9a5 	bl	8008700 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80093b6:	2110      	movs	r1, #16
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff f9dd 	bl	8008778 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff fa00 	bl	80087c4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
 80093c8:	e01f      	b.n	800940a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fe:	461a      	mov	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	3301      	adds	r3, #1
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2b0f      	cmp	r3, #15
 800940e:	d9dc      	bls.n	80093ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009410:	2300      	movs	r3, #0
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	e034      	b.n	8009480 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800942c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009434:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800943c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800944a:	461a      	mov	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	3301      	adds	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800945c:	d80c      	bhi.n	8009478 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009474:	d0ec      	beq.n	8009450 <USB_StopHost+0xb0>
 8009476:	e000      	b.n	800947a <USB_StopHost+0xda>
        break;
 8009478:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3301      	adds	r3, #1
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b0f      	cmp	r3, #15
 8009484:	d9c7      	bls.n	8009416 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800948c:	461a      	mov	r2, r3
 800948e:	f04f 33ff 	mov.w	r3, #4294967295
 8009492:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f04f 32ff 	mov.w	r2, #4294967295
 800949a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff f91e 	bl	80086de <USB_EnableGlobalInt>

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b089      	sub	sp, #36	; 0x24
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80094b4:	2301      	movs	r3, #1
 80094b6:	2202      	movs	r2, #2
 80094b8:	2102      	movs	r1, #2
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fcb4 	bl	8009e28 <USBH_FindInterface>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	2bff      	cmp	r3, #255	; 0xff
 80094c8:	d002      	beq.n	80094d0 <USBH_CDC_InterfaceInit+0x24>
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d901      	bls.n	80094d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80094d0:	2302      	movs	r3, #2
 80094d2:	e13d      	b.n	8009750 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc89 	bl	8009df0 <USBH_SelectInterface>
 80094de:	4603      	mov	r3, r0
 80094e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80094e8:	2302      	movs	r3, #2
 80094ea:	e131      	b.n	8009750 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80094f2:	2050      	movs	r0, #80	; 0x50
 80094f4:	f005 fc3e 	bl	800ed74 <malloc>
 80094f8:	4603      	mov	r3, r0
 80094fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	e11f      	b.n	8009750 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009510:	2250      	movs	r2, #80	; 0x50
 8009512:	2100      	movs	r1, #0
 8009514:	68b8      	ldr	r0, [r7, #8]
 8009516:	f005 fc48 	bl	800edaa <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	211a      	movs	r1, #26
 8009520:	fb01 f303 	mul.w	r3, r1, r3
 8009524:	4413      	add	r3, r2
 8009526:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	b25b      	sxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	da15      	bge.n	800955e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	211a      	movs	r1, #26
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	4413      	add	r3, r2
 800953e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009542:	781a      	ldrb	r2, [r3, #0]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	211a      	movs	r1, #26
 800954e:	fb01 f303 	mul.w	r3, r1, r3
 8009552:	4413      	add	r3, r2
 8009554:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009558:	881a      	ldrh	r2, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f002 f890 	bl	800b68a <USBH_AllocPipe>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	7819      	ldrb	r1, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	7858      	ldrb	r0, [r3, #1]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	8952      	ldrh	r2, [r2, #10]
 800958a:	9202      	str	r2, [sp, #8]
 800958c:	2203      	movs	r2, #3
 800958e:	9201      	str	r2, [sp, #4]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4623      	mov	r3, r4
 8009594:	4602      	mov	r2, r0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f002 f848 	bl	800b62c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2200      	movs	r2, #0
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f005 fb35 	bl	800ec14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80095aa:	2300      	movs	r3, #0
 80095ac:	2200      	movs	r2, #0
 80095ae:	210a      	movs	r1, #10
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc39 	bl	8009e28 <USBH_FindInterface>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2bff      	cmp	r3, #255	; 0xff
 80095be:	d002      	beq.n	80095c6 <USBH_CDC_InterfaceInit+0x11a>
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d901      	bls.n	80095ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80095c6:	2302      	movs	r3, #2
 80095c8:	e0c2      	b.n	8009750 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	211a      	movs	r1, #26
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	b25b      	sxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da16      	bge.n	8009610 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	211a      	movs	r1, #26
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	4413      	add	r3, r2
 80095ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095f2:	781a      	ldrb	r2, [r3, #0]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	211a      	movs	r1, #26
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	4413      	add	r3, r2
 8009604:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	835a      	strh	r2, [r3, #26]
 800960e:	e015      	b.n	800963c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	211a      	movs	r1, #26
 8009616:	fb01 f303 	mul.w	r3, r1, r3
 800961a:	4413      	add	r3, r2
 800961c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	211a      	movs	r1, #26
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	4413      	add	r3, r2
 8009632:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009636:	881a      	ldrh	r2, [r3, #0]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	211a      	movs	r1, #26
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	4413      	add	r3, r2
 8009648:	f203 3356 	addw	r3, r3, #854	; 0x356
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b25b      	sxtb	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	da16      	bge.n	8009682 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	211a      	movs	r1, #26
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	4413      	add	r3, r2
 8009660:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	211a      	movs	r1, #26
 8009670:	fb01 f303 	mul.w	r3, r1, r3
 8009674:	4413      	add	r3, r2
 8009676:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800967a:	881a      	ldrh	r2, [r3, #0]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	835a      	strh	r2, [r3, #26]
 8009680:	e015      	b.n	80096ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	211a      	movs	r1, #26
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	211a      	movs	r1, #26
 800969e:	fb01 f303 	mul.w	r3, r1, r3
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80096a8:	881a      	ldrh	r2, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	7b9b      	ldrb	r3, [r3, #14]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 ffe8 	bl	800b68a <USBH_AllocPipe>
 80096ba:	4603      	mov	r3, r0
 80096bc:	461a      	mov	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	7bdb      	ldrb	r3, [r3, #15]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 ffde 	bl	800b68a <USBH_AllocPipe>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	7b59      	ldrb	r1, [r3, #13]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	7b98      	ldrb	r0, [r3, #14]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	8b12      	ldrh	r2, [r2, #24]
 80096ee:	9202      	str	r2, [sp, #8]
 80096f0:	2202      	movs	r2, #2
 80096f2:	9201      	str	r2, [sp, #4]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	4623      	mov	r3, r4
 80096f8:	4602      	mov	r2, r0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 ff96 	bl	800b62c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	7b19      	ldrb	r1, [r3, #12]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	7bd8      	ldrb	r0, [r3, #15]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	8b52      	ldrh	r2, [r2, #26]
 8009718:	9202      	str	r2, [sp, #8]
 800971a:	2202      	movs	r2, #2
 800971c:	9201      	str	r2, [sp, #4]
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	4623      	mov	r3, r4
 8009722:	4602      	mov	r2, r0
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 ff81 	bl	800b62c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	7b5b      	ldrb	r3, [r3, #13]
 8009736:	2200      	movs	r2, #0
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f005 fa6a 	bl	800ec14 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	7b1b      	ldrb	r3, [r3, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f005 fa63 	bl	800ec14 <USBH_LL_SetToggle>

  return USBH_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 ff76 	bl	800b66a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 ffa1 	bl	800b6cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	7b1b      	ldrb	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00e      	beq.n	80097b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	7b1b      	ldrb	r3, [r3, #12]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 ff63 	bl	800b66a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	7b1b      	ldrb	r3, [r3, #12]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 ff8e 	bl	800b6cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	7b5b      	ldrb	r3, [r3, #13]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	7b5b      	ldrb	r3, [r3, #13]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 ff50 	bl	800b66a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	7b5b      	ldrb	r3, [r3, #13]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 ff7b 	bl	800b6cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f005 fac7 	bl	800ed84 <free>
    phost->pActiveClass->pData = 0U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097fc:	2200      	movs	r2, #0
 80097fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3340      	adds	r3, #64	; 0x40
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f8b1 	bl	800998a <GetLineCoding>
 8009828:	4603      	mov	r3, r0
 800982a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009838:	2102      	movs	r1, #2
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800983e:	7afb      	ldrb	r3, [r7, #11]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009868:	2b04      	cmp	r3, #4
 800986a:	d877      	bhi.n	800995c <USBH_CDC_Process+0x114>
 800986c:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <USBH_CDC_Process+0x2c>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	08009889 	.word	0x08009889
 8009878:	0800988f 	.word	0x0800988f
 800987c:	080098bf 	.word	0x080098bf
 8009880:	08009933 	.word	0x08009933
 8009884:	08009941 	.word	0x08009941
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
      break;
 800988c:	e06d      	b.n	800996a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f897 	bl	80099c8 <SetLineCoding>
 800989a:	4603      	mov	r3, r0
 800989c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098ac:	e058      	b.n	8009960 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d055      	beq.n	8009960 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2204      	movs	r2, #4
 80098b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80098bc:	e050      	b.n	8009960 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	3340      	adds	r3, #64	; 0x40
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f860 	bl	800998a <GetLineCoding>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d126      	bne.n	8009922 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098e6:	791b      	ldrb	r3, [r3, #4]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d13b      	bne.n	8009964 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d133      	bne.n	8009964 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009906:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009908:	429a      	cmp	r2, r3
 800990a:	d12b      	bne.n	8009964 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009914:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009916:	429a      	cmp	r2, r3
 8009918:	d124      	bne.n	8009964 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f984 	bl	8009c28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009920:	e020      	b.n	8009964 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d01d      	beq.n	8009964 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2204      	movs	r2, #4
 800992c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009930:	e018      	b.n	8009964 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f867 	bl	8009a06 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f8f8 	bl	8009b2e <CDC_ProcessReception>
      break;
 800993e:	e014      	b.n	800996a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009940:	2100      	movs	r1, #0
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 f94f 	bl	800abe6 <USBH_ClrFeature>
 8009948:	4603      	mov	r3, r0
 800994a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800995a:	e005      	b.n	8009968 <USBH_CDC_Process+0x120>

    default:
      break;
 800995c:	bf00      	nop
 800995e:	e004      	b.n	800996a <USBH_CDC_Process+0x122>
      break;
 8009960:	bf00      	nop
 8009962:	e002      	b.n	800996a <USBH_CDC_Process+0x122>
      break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <USBH_CDC_Process+0x122>
      break;
 8009968:	bf00      	nop

  }

  return status;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	22a1      	movs	r2, #161	; 0xa1
 8009998:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2221      	movs	r2, #33	; 0x21
 800999e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2207      	movs	r2, #7
 80099b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2207      	movs	r2, #7
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 faf4 	bl	800afa6 <USBH_CtlReq>
 80099be:	4603      	mov	r3, r0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2221      	movs	r2, #33	; 0x21
 80099d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2207      	movs	r2, #7
 80099ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2207      	movs	r2, #7
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fad5 	bl	800afa6 <USBH_CtlReq>
 80099fc:	4603      	mov	r3, r0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	af02      	add	r7, sp, #8
 8009a0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d002      	beq.n	8009a2c <CDC_ProcessTransmission+0x26>
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d025      	beq.n	8009a76 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8009a2a:	e07c      	b.n	8009b26 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	8b12      	ldrh	r2, [r2, #24]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d90c      	bls.n	8009a52 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	69d9      	ldr	r1, [r3, #28]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8b1a      	ldrh	r2, [r3, #24]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	7b58      	ldrb	r0, [r3, #13]
 8009a44:	2301      	movs	r3, #1
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fdab 	bl	800b5a6 <USBH_BulkSendData>
 8009a50:	e00c      	b.n	8009a6c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	7b58      	ldrb	r0, [r3, #13]
 8009a60:	2301      	movs	r3, #1
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	4603      	mov	r3, r0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fd9d 	bl	800b5a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a74:	e057      	b.n	8009b26 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	7b5b      	ldrb	r3, [r3, #13]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f005 f89f 	bl	800ebc0 <USBH_LL_GetURBState>
 8009a82:	4603      	mov	r3, r0
 8009a84:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a86:	7afb      	ldrb	r3, [r7, #11]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d136      	bne.n	8009afa <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	8b12      	ldrh	r2, [r2, #24]
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d90e      	bls.n	8009ab6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	8b12      	ldrh	r2, [r2, #24]
 8009aa0:	1a9a      	subs	r2, r3, r2
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	8b12      	ldrh	r2, [r2, #24]
 8009aae:	441a      	add	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	61da      	str	r2, [r3, #28]
 8009ab4:	e002      	b.n	8009abc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009acc:	e006      	b.n	8009adc <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f892 	bl	8009c00 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2204      	movs	r2, #4
 8009ae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009af0:	2300      	movs	r3, #0
 8009af2:	2200      	movs	r2, #0
 8009af4:	f001 fff8 	bl	800bae8 <osMessageQueuePut>
      break;
 8009af8:	e014      	b.n	8009b24 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d111      	bne.n	8009b24 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f001 ffe2 	bl	800bae8 <osMessageQueuePut>
      break;
 8009b24:	bf00      	nop
  }
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b086      	sub	sp, #24
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d002      	beq.n	8009b54 <CDC_ProcessReception+0x26>
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d00e      	beq.n	8009b70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009b52:	e051      	b.n	8009bf8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6a19      	ldr	r1, [r3, #32]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	8b5a      	ldrh	r2, [r3, #26]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	7b1b      	ldrb	r3, [r3, #12]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fd45 	bl	800b5f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2204      	movs	r2, #4
 8009b6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009b6e:	e043      	b.n	8009bf8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	7b1b      	ldrb	r3, [r3, #12]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f005 f822 	bl	800ebc0 <USBH_LL_GetURBState>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009b80:	7cfb      	ldrb	r3, [r7, #19]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d137      	bne.n	8009bf6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	7b1b      	ldrb	r3, [r3, #12]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f004 ff85 	bl	800ea9c <USBH_LL_GetLastXferSize>
 8009b92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d016      	beq.n	8009bcc <CDC_ProcessReception+0x9e>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d910      	bls.n	8009bcc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad2      	subs	r2, r2, r3
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	6a1a      	ldr	r2, [r3, #32]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	441a      	add	r2, r3
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009bca:	e006      	b.n	8009bda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f81d 	bl	8009c14 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2204      	movs	r2, #4
 8009bde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f001 ff79 	bl	800bae8 <osMessageQueuePut>
      break;
 8009bf6:	bf00      	nop
  }
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c50:	2302      	movs	r3, #2
 8009c52:	e044      	b.n	8009cde <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	79fa      	ldrb	r2, [r7, #7]
 8009c58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 f841 	bl	8009cf4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f001 fe99 	bl	800b9dc <osMessageQueueNew>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <USBH_Init+0xac>)
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <USBH_Init+0xb0>)
 8009cb6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <USBH_Init+0xac>)
 8009cba:	2280      	movs	r2, #128	; 0x80
 8009cbc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <USBH_Init+0xac>)
 8009cc0:	2218      	movs	r2, #24
 8009cc2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009cc4:	4a08      	ldr	r2, [pc, #32]	; (8009ce8 <USBH_Init+0xac>)
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	4809      	ldr	r0, [pc, #36]	; (8009cf0 <USBH_Init+0xb4>)
 8009cca:	f001 fdb3 	bl	800b834 <osThreadNew>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f004 fe2e 	bl	800e938 <USBH_LL_Init>

  return USBH_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20004c84 	.word	0x20004c84
 8009cec:	0800fbd8 	.word	0x0800fbd8
 8009cf0:	0800a95d 	.word	0x0800a95d

08009cf4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e009      	b.n	8009d1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	33e0      	adds	r3, #224	; 0xe0
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3301      	adds	r3, #1
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b0e      	cmp	r3, #14
 8009d1e:	d9f2      	bls.n	8009d06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e009      	b.n	8009d3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3301      	adds	r3, #1
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d40:	d3f1      	bcc.n	8009d26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2240      	movs	r2, #64	; 0x40
 8009d66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d016      	beq.n	8009dde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009dc0:	1c59      	adds	r1, r3, #1
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	33de      	adds	r3, #222	; 0xde
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]
 8009dd6:	e004      	b.n	8009de2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	73fb      	strb	r3, [r7, #15]
 8009ddc:	e001      	b.n	8009de2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009dde:	2302      	movs	r3, #2
 8009de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d204      	bcs.n	8009e16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009e14:	e001      	b.n	8009e1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009e16:	2302      	movs	r3, #2
 8009e18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	4608      	mov	r0, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	461a      	mov	r2, r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	70fb      	strb	r3, [r7, #3]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70bb      	strb	r3, [r7, #2]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e52:	e025      	b.n	8009ea0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	221a      	movs	r2, #26
 8009e58:	fb02 f303 	mul.w	r3, r2, r3
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	3302      	adds	r3, #2
 8009e64:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	795b      	ldrb	r3, [r3, #5]
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d002      	beq.n	8009e76 <USBH_FindInterface+0x4e>
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	2bff      	cmp	r3, #255	; 0xff
 8009e74:	d111      	bne.n	8009e9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e7a:	78ba      	ldrb	r2, [r7, #2]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d002      	beq.n	8009e86 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e80:	78bb      	ldrb	r3, [r7, #2]
 8009e82:	2bff      	cmp	r3, #255	; 0xff
 8009e84:	d109      	bne.n	8009e9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e8a:	787a      	ldrb	r2, [r7, #1]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d002      	beq.n	8009e96 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e90:	787b      	ldrb	r3, [r7, #1]
 8009e92:	2bff      	cmp	r3, #255	; 0xff
 8009e94:	d101      	bne.n	8009e9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	e006      	b.n	8009ea8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d9d6      	bls.n	8009e54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009ea6:	23ff      	movs	r3, #255	; 0xff
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f004 fd77 	bl	800e9b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f004 fe8e 	bl	800ebe6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af04      	add	r7, sp, #16
 8009eda:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009edc:	2302      	movs	r3, #2
 8009ede:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d102      	bne.n	8009ef6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2203      	movs	r2, #3
 8009ef4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b0b      	cmp	r3, #11
 8009efe:	f200 823c 	bhi.w	800a37a <USBH_Process+0x4a6>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBH_Process+0x34>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f39 	.word	0x08009f39
 8009f0c:	08009f87 	.word	0x08009f87
 8009f10:	0800a00b 	.word	0x0800a00b
 8009f14:	0800a2f9 	.word	0x0800a2f9
 8009f18:	0800a37b 	.word	0x0800a37b
 8009f1c:	0800a0cb 	.word	0x0800a0cb
 8009f20:	0800a283 	.word	0x0800a283
 8009f24:	0800a11d 	.word	0x0800a11d
 8009f28:	0800a159 	.word	0x0800a159
 8009f2c:	0800a193 	.word	0x0800a193
 8009f30:	0800a1db 	.word	0x0800a1db
 8009f34:	0800a2e1 	.word	0x0800a2e1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 821c 	beq.w	800a37e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009f4c:	20c8      	movs	r0, #200	; 0xc8
 8009f4e:	f004 fe94 	bl	800ec7a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f004 fd87 	bl	800ea66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f001 fdb2 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009f84:	e1fb      	b.n	800a37e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d107      	bne.n	8009fa0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	e025      	b.n	8009fec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009faa:	d914      	bls.n	8009fd6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d903      	bls.n	8009fce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220d      	movs	r2, #13
 8009fca:	701a      	strb	r2, [r3, #0]
 8009fcc:	e00e      	b.n	8009fec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	e00a      	b.n	8009fec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009fdc:	f103 020a 	add.w	r2, r3, #10
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009fe6:	200a      	movs	r0, #10
 8009fe8:	f004 fe47 	bl	800ec7a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a000:	2300      	movs	r3, #0
 800a002:	2200      	movs	r2, #0
 800a004:	f001 fd70 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a008:	e1c0      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a01a:	2104      	movs	r1, #4
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a020:	2064      	movs	r0, #100	; 0x64
 800a022:	f004 fe2a 	bl	800ec7a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f004 fcf8 	bl	800ea1c <USBH_LL_GetSpeed>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2205      	movs	r2, #5
 800a03a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fb23 	bl	800b68a <USBH_AllocPipe>
 800a044:	4603      	mov	r3, r0
 800a046:	461a      	mov	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a04c:	2180      	movs	r1, #128	; 0x80
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 fb1b 	bl	800b68a <USBH_AllocPipe>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7919      	ldrb	r1, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a070:	b292      	uxth	r2, r2
 800a072:	9202      	str	r2, [sp, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	4603      	mov	r3, r0
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fad4 	bl	800b62c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	7959      	ldrb	r1, [r3, #5]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a098:	b292      	uxth	r2, r2
 800a09a:	9202      	str	r2, [sp, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	9201      	str	r2, [sp, #4]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fac0 	bl	800b62c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f001 fd10 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a0c8:	e160      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f964 	bl	800a398 <USBH_HandleEnum>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 8152 	bne.w	800a382 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d103      	bne.n	800a0f8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	e002      	b.n	800a0fe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2207      	movs	r2, #7
 800a0fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2205      	movs	r2, #5
 800a102:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a112:	2300      	movs	r3, #0
 800a114:	2200      	movs	r2, #0
 800a116:	f001 fce7 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a11a:	e132      	b.n	800a382 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 812f 	beq.w	800a386 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a12e:	2101      	movs	r1, #1
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2208      	movs	r2, #8
 800a138:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2205      	movs	r2, #5
 800a13e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a14e:	2300      	movs	r3, #0
 800a150:	2200      	movs	r2, #0
 800a152:	f001 fcc9 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a156:	e116      	b.n	800a386 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fcf8 	bl	800ab58 <USBH_SetCfg>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2209      	movs	r2, #9
 800a172:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a188:	2300      	movs	r3, #0
 800a18a:	2200      	movs	r2, #0
 800a18c:	f001 fcac 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a190:	e0fc      	b.n	800a38c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fcfb 	bl	800ab9e <USBH_SetFeature>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e002      	b.n	800a1bc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f001 fc88 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a1d8:	e0d8      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d03f      	beq.n	800a264 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
 800a1f0:	e016      	b.n	800a220 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1f2:	7bfa      	ldrb	r2, [r7, #15]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	32de      	adds	r2, #222	; 0xde
 800a1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fc:	791a      	ldrb	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a204:	429a      	cmp	r2, r3
 800a206:	d108      	bne.n	800a21a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a208:	7bfa      	ldrb	r2, [r7, #15]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	32de      	adds	r2, #222	; 0xde
 800a20e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a218:	e005      	b.n	800a226 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	3301      	adds	r3, #1
 800a21e:	73fb      	strb	r3, [r7, #15]
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0e5      	beq.n	800a1f2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d016      	beq.n	800a25e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	4798      	blx	r3
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2206      	movs	r2, #6
 800a246:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a24e:	2103      	movs	r1, #3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	4798      	blx	r3
 800a254:	e006      	b.n	800a264 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	220d      	movs	r2, #13
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e002      	b.n	800a264 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	220d      	movs	r2, #13
 800a262:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2205      	movs	r2, #5
 800a268:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a278:	2300      	movs	r3, #0
 800a27a:	2200      	movs	r2, #0
 800a27c:	f001 fc34 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a280:	e084      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
 800a298:	4603      	mov	r3, r0
 800a29a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d103      	bne.n	800a2ac <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	220b      	movs	r2, #11
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	e00a      	b.n	800a2c2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d106      	bne.n	800a2c2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	220d      	movs	r2, #13
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	220d      	movs	r2, #13
 800a2c0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f001 fc05 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a2de:	e055      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d04f      	beq.n	800a38a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	4798      	blx	r3
      }
      break;
 800a2f6:	e048      	b.n	800a38a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fcf7 	bl	8009cf4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d009      	beq.n	800a324 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a334:	2105      	movs	r1, #5
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	d107      	bne.n	800a356 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fdb0 	bl	8009eb4 <USBH_Start>
 800a354:	e002      	b.n	800a35c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f004 fb2a 	bl	800e9b0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a370:	2300      	movs	r3, #0
 800a372:	2200      	movs	r2, #0
 800a374:	f001 fbb8 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      break;
 800a378:	e008      	b.n	800a38c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a37a:	bf00      	nop
 800a37c:	e006      	b.n	800a38c <USBH_Process+0x4b8>
      break;
 800a37e:	bf00      	nop
 800a380:	e004      	b.n	800a38c <USBH_Process+0x4b8>
      break;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <USBH_Process+0x4b8>
    break;
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <USBH_Process+0x4b8>
      break;
 800a38a:	bf00      	nop
  }
  return USBH_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop

0800a398 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af04      	add	r7, sp, #16
 800a39e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b07      	cmp	r3, #7
 800a3ae:	f200 8208 	bhi.w	800a7c2 <USBH_HandleEnum+0x42a>
 800a3b2:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <USBH_HandleEnum+0x20>)
 800a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b8:	0800a3d9 	.word	0x0800a3d9
 800a3bc:	0800a497 	.word	0x0800a497
 800a3c0:	0800a501 	.word	0x0800a501
 800a3c4:	0800a58f 	.word	0x0800a58f
 800a3c8:	0800a5f9 	.word	0x0800a5f9
 800a3cc:	0800a669 	.word	0x0800a669
 800a3d0:	0800a705 	.word	0x0800a705
 800a3d4:	0800a783 	.word	0x0800a783
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a3d8:	2108      	movs	r1, #8
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 faec 	bl	800a9b8 <USBH_Get_DevDesc>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d130      	bne.n	800a44c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7919      	ldrb	r1, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a40e:	b292      	uxth	r2, r2
 800a410:	9202      	str	r2, [sp, #8]
 800a412:	2200      	movs	r2, #0
 800a414:	9201      	str	r2, [sp, #4]
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	4603      	mov	r3, r0
 800a41a:	2280      	movs	r2, #128	; 0x80
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f905 	bl	800b62c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7959      	ldrb	r1, [r3, #5]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a436:	b292      	uxth	r2, r2
 800a438:	9202      	str	r2, [sp, #8]
 800a43a:	2200      	movs	r2, #0
 800a43c:	9201      	str	r2, [sp, #4]
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	4603      	mov	r3, r0
 800a442:	2200      	movs	r2, #0
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f8f1 	bl	800b62c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a44a:	e1bc      	b.n	800a7c6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	2b03      	cmp	r3, #3
 800a450:	f040 81b9 	bne.w	800a7c6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a45a:	3301      	adds	r3, #1
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d903      	bls.n	800a476 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	220d      	movs	r2, #13
 800a472:	701a      	strb	r2, [r3, #0]
      break;
 800a474:	e1a7      	b.n	800a7c6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	795b      	ldrb	r3, [r3, #5]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 f925 	bl	800b6cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	791b      	ldrb	r3, [r3, #4]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f91f 	bl	800b6cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
      break;
 800a494:	e197      	b.n	800a7c6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a496:	2112      	movs	r1, #18
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fa8d 	bl	800a9b8 <USBH_Get_DevDesc>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a4ae:	e18c      	b.n	800a7ca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	f040 8189 	bne.w	800a7ca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4be:	3301      	adds	r3, #1
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d903      	bls.n	800a4da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	220d      	movs	r2, #13
 800a4d6:	701a      	strb	r2, [r3, #0]
      break;
 800a4d8:	e177      	b.n	800a7ca <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	795b      	ldrb	r3, [r3, #5]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 f8f3 	bl	800b6cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	791b      	ldrb	r3, [r3, #4]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f001 f8ed 	bl	800b6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
      break;
 800a4fe:	e164      	b.n	800a7ca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a500:	2101      	movs	r1, #1
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fb04 	bl	800ab10 <USBH_SetAddress>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d132      	bne.n	800a578 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a512:	2002      	movs	r0, #2
 800a514:	f004 fbb1 	bl	800ec7a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2203      	movs	r2, #3
 800a524:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	7919      	ldrb	r1, [r3, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a53a:	b292      	uxth	r2, r2
 800a53c:	9202      	str	r2, [sp, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	9201      	str	r2, [sp, #4]
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4603      	mov	r3, r0
 800a546:	2280      	movs	r2, #128	; 0x80
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 f86f 	bl	800b62c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	7959      	ldrb	r1, [r3, #5]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a562:	b292      	uxth	r2, r2
 800a564:	9202      	str	r2, [sp, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	9201      	str	r2, [sp, #4]
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	4603      	mov	r3, r0
 800a56e:	2200      	movs	r2, #0
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f85b 	bl	800b62c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a576:	e12a      	b.n	800a7ce <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	f040 8127 	bne.w	800a7ce <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	220d      	movs	r2, #13
 800a584:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	705a      	strb	r2, [r3, #1]
      break;
 800a58c:	e11f      	b.n	800a7ce <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a58e:	2109      	movs	r1, #9
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fa39 	bl	800aa08 <USBH_Get_CfgDesc>
 800a596:	4603      	mov	r3, r0
 800a598:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d103      	bne.n	800a5a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5a6:	e114      	b.n	800a7d2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	f040 8111 	bne.w	800a7d2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d903      	bls.n	800a5d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	220d      	movs	r2, #13
 800a5ce:	701a      	strb	r2, [r3, #0]
      break;
 800a5d0:	e0ff      	b.n	800a7d2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	795b      	ldrb	r3, [r3, #5]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 f877 	bl	800b6cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	791b      	ldrb	r3, [r3, #4]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 f871 	bl	800b6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
      break;
 800a5f6:	e0ec      	b.n	800a7d2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fa01 	bl	800aa08 <USBH_Get_CfgDesc>
 800a606:	4603      	mov	r3, r0
 800a608:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2205      	movs	r2, #5
 800a614:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a616:	e0de      	b.n	800a7d6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	f040 80db 	bne.w	800a7d6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a626:	3301      	adds	r3, #1
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a636:	2b03      	cmp	r3, #3
 800a638:	d903      	bls.n	800a642 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	220d      	movs	r2, #13
 800a63e:	701a      	strb	r2, [r3, #0]
      break;
 800a640:	e0c9      	b.n	800a7d6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	795b      	ldrb	r3, [r3, #5]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f83f 	bl	800b6cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f839 	bl	800b6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
      break;
 800a666:	e0b6      	b.n	800a7d6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d036      	beq.n	800a6e0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a67e:	23ff      	movs	r3, #255	; 0xff
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9e5 	bl	800aa50 <USBH_Get_StringDesc>
 800a686:	4603      	mov	r3, r0
 800a688:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d111      	bne.n	800a6b4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2206      	movs	r2, #6
 800a694:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2205      	movs	r2, #5
 800a69a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f001 fa1b 	bl	800bae8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6b2:	e092      	b.n	800a7da <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	f040 808f 	bne.w	800a7da <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2206      	movs	r2, #6
 800a6c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f001 fa05 	bl	800bae8 <osMessageQueuePut>
      break;
 800a6de:	e07c      	b.n	800a7da <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2205      	movs	r2, #5
 800a6ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f001 f9f3 	bl	800bae8 <osMessageQueuePut>
      break;
 800a702:	e06a      	b.n	800a7da <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d027      	beq.n	800a75e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a71a:	23ff      	movs	r3, #255	; 0xff
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f997 	bl	800aa50 <USBH_Get_StringDesc>
 800a722:	4603      	mov	r3, r0
 800a724:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d103      	bne.n	800a734 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2207      	movs	r2, #7
 800a730:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a732:	e054      	b.n	800a7de <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	2b03      	cmp	r3, #3
 800a738:	d151      	bne.n	800a7de <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2207      	movs	r2, #7
 800a73e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2205      	movs	r2, #5
 800a744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a754:	2300      	movs	r3, #0
 800a756:	2200      	movs	r2, #0
 800a758:	f001 f9c6 	bl	800bae8 <osMessageQueuePut>
      break;
 800a75c:	e03f      	b.n	800a7de <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2207      	movs	r2, #7
 800a762:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2205      	movs	r2, #5
 800a768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a778:	2300      	movs	r3, #0
 800a77a:	2200      	movs	r2, #0
 800a77c:	f001 f9b4 	bl	800bae8 <osMessageQueuePut>
      break;
 800a780:	e02d      	b.n	800a7de <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d017      	beq.n	800a7bc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a798:	23ff      	movs	r3, #255	; 0xff
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f958 	bl	800aa50 <USBH_Get_StringDesc>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a7ae:	e018      	b.n	800a7e2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d115      	bne.n	800a7e2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ba:	e012      	b.n	800a7e2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c0:	e00f      	b.n	800a7e2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a7c2:	bf00      	nop
 800a7c4:	e00e      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7c6:	bf00      	nop
 800a7c8:	e00c      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7ca:	bf00      	nop
 800a7cc:	e00a      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7ce:	bf00      	nop
 800a7d0:	e008      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7d2:	bf00      	nop
 800a7d4:	e006      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7d6:	bf00      	nop
 800a7d8:	e004      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e002      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7de:	bf00      	nop
 800a7e0:	e000      	b.n	800a7e4 <USBH_HandleEnum+0x44c>
      break;
 800a7e2:	bf00      	nop
  }
  return Status;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop

0800a7f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f804 	bl	800a832 <USBH_HandleSof>
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b0b      	cmp	r3, #11
 800a842:	d10a      	bne.n	800a85a <USBH_HandleSof+0x28>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
  }
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a886:	2300      	movs	r3, #0
 800a888:	2200      	movs	r2, #0
 800a88a:	f001 f92d 	bl	800bae8 <osMessageQueuePut>
#endif
#endif

  return;
 800a88e:	bf00      	nop
}
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a8a6:	bf00      	nop
}
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f001 f8fd 	bl	800bae8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f004 f864 	bl	800e9e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	791b      	ldrb	r3, [r3, #4]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fed1 	bl	800b6cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	795b      	ldrb	r3, [r3, #5]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fecb 	bl	800b6cc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a94a:	2300      	movs	r3, #0
 800a94c:	2200      	movs	r2, #0
 800a94e:	f001 f8cb 	bl	800bae8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	2200      	movs	r2, #0
 800a976:	f001 f92b 	bl	800bbd0 <osMessageQueueGet>
 800a97a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f0      	bne.n	800a964 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff faa6 	bl	8009ed4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a988:	e7ec      	b.n	800a964 <USBH_Process_OS+0x8>

0800a98a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f001 f89d 	bl	800bae8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f864 	bl	800aaa6 <USBH_GetDescriptor>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	b292      	uxth	r2, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f000 f918 	bl	800ac2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	331c      	adds	r3, #28
 800aa18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa24:	2100      	movs	r1, #0
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f83d 	bl	800aaa6 <USBH_GetDescriptor>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	72fb      	strb	r3, [r7, #11]
 800aa30:	7afb      	ldrb	r3, [r7, #11]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aa3c:	887a      	ldrh	r2, [r7, #2]
 800aa3e:	68f9      	ldr	r1, [r7, #12]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 f964 	bl	800ad0e <USBH_ParseCfgDesc>
  }

  return status;
 800aa46:	7afb      	ldrb	r3, [r7, #11]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	72fb      	strb	r3, [r7, #11]
 800aa60:	4613      	mov	r3, r2
 800aa62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aa74:	893b      	ldrh	r3, [r7, #8]
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f812 	bl	800aaa6 <USBH_GetDescriptor>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d107      	bne.n	800aa9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa92:	893a      	ldrh	r2, [r7, #8]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fa37 	bl	800af0a <USBH_ParseStringDesc>
  }

  return status;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	607b      	str	r3, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	72fb      	strb	r3, [r7, #11]
 800aab4:	4613      	mov	r3, r2
 800aab6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	789b      	ldrb	r3, [r3, #2]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d11c      	bne.n	800aafa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2206      	movs	r2, #6
 800aad0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	893a      	ldrh	r2, [r7, #8]
 800aad6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aad8:	893b      	ldrh	r3, [r7, #8]
 800aada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aae2:	d104      	bne.n	800aaee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f240 4209 	movw	r2, #1033	; 0x409
 800aaea:	829a      	strh	r2, [r3, #20]
 800aaec:	e002      	b.n	800aaf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8b3a      	ldrh	r2, [r7, #24]
 800aaf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aafa:	8b3b      	ldrh	r3, [r7, #24]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 fa50 	bl	800afa6 <USBH_CtlReq>
 800ab06:	4603      	mov	r3, r0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	789b      	ldrb	r3, [r3, #2]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d10f      	bne.n	800ab44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2205      	movs	r2, #5
 800ab2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab44:	2200      	movs	r2, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fa2c 	bl	800afa6 <USBH_CtlReq>
 800ab4e:	4603      	mov	r3, r0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	789b      	ldrb	r3, [r3, #2]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d10e      	bne.n	800ab8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2209      	movs	r2, #9
 800ab76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	887a      	ldrh	r2, [r7, #2]
 800ab7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa09 	bl	800afa6 <USBH_CtlReq>
 800ab94:	4603      	mov	r3, r0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	789b      	ldrb	r3, [r3, #2]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d10f      	bne.n	800abd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2203      	movs	r2, #3
 800abbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f9e5 	bl	800afa6 <USBH_CtlReq>
 800abdc:	4603      	mov	r3, r0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	789b      	ldrb	r3, [r3, #2]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d10f      	bne.n	800ac1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2202      	movs	r2, #2
 800abfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f9c1 	bl	800afa6 <USBH_CtlReq>
 800ac24:	4603      	mov	r3, r0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b085      	sub	sp, #20
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	785a      	ldrb	r2, [r3, #1]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3302      	adds	r3, #2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3303      	adds	r3, #3
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	4313      	orrs	r3, r2
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	791a      	ldrb	r2, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	795a      	ldrb	r2, [r3, #5]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	799a      	ldrb	r2, [r3, #6]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	79da      	ldrb	r2, [r3, #7]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ac88:	88fb      	ldrh	r3, [r7, #6]
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	d939      	bls.n	800ad02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	3308      	adds	r3, #8
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	3309      	adds	r3, #9
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	021b      	lsls	r3, r3, #8
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	4313      	orrs	r3, r2
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	330a      	adds	r3, #10
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	330b      	adds	r3, #11
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	4313      	orrs	r3, r2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	330c      	adds	r3, #12
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	b29a      	uxth	r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	330d      	adds	r3, #13
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	b29b      	uxth	r3, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	b29a      	uxth	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	7b9a      	ldrb	r2, [r3, #14]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	7bda      	ldrb	r2, [r3, #15]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	7c1a      	ldrb	r2, [r3, #16]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	7c5a      	ldrb	r2, [r3, #17]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	745a      	strb	r2, [r3, #17]
  }
}
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b08a      	sub	sp, #40	; 0x28
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	785a      	ldrb	r2, [r3, #1]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3302      	adds	r3, #2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	3303      	adds	r3, #3
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4313      	orrs	r3, r2
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	791a      	ldrb	r2, [r3, #4]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	795a      	ldrb	r2, [r3, #5]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	799a      	ldrb	r2, [r3, #6]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	79da      	ldrb	r2, [r3, #7]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	7a1a      	ldrb	r2, [r3, #8]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	d95f      	bls.n	800ae4a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ad8a:	2309      	movs	r3, #9
 800ad8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad92:	e051      	b.n	800ae38 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad94:	f107 0316 	add.w	r3, r7, #22
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad9c:	f000 f8e8 	bl	800af70 <USBH_GetNextDesc>
 800ada0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	785b      	ldrb	r3, [r3, #1]
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d146      	bne.n	800ae38 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800adaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adae:	221a      	movs	r2, #26
 800adb0:	fb02 f303 	mul.w	r3, r2, r3
 800adb4:	3308      	adds	r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	3302      	adds	r3, #2
 800adbc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800adbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adc0:	69f8      	ldr	r0, [r7, #28]
 800adc2:	f000 f846 	bl	800ae52 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800adcc:	2300      	movs	r3, #0
 800adce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800add0:	e022      	b.n	800ae18 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800add2:	f107 0316 	add.w	r3, r7, #22
 800add6:	4619      	mov	r1, r3
 800add8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adda:	f000 f8c9 	bl	800af70 <USBH_GetNextDesc>
 800adde:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b05      	cmp	r3, #5
 800ade6:	d117      	bne.n	800ae18 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ade8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800adf0:	3201      	adds	r2, #1
 800adf2:	00d2      	lsls	r2, r2, #3
 800adf4:	211a      	movs	r1, #26
 800adf6:	fb01 f303 	mul.w	r3, r1, r3
 800adfa:	4413      	add	r3, r2
 800adfc:	3308      	adds	r3, #8
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	4413      	add	r3, r2
 800ae02:	3304      	adds	r3, #4
 800ae04:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ae06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae08:	69b8      	ldr	r0, [r7, #24]
 800ae0a:	f000 f851 	bl	800aeb0 <USBH_ParseEPDesc>
            ep_ix++;
 800ae0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae12:	3301      	adds	r3, #1
 800ae14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	791b      	ldrb	r3, [r3, #4]
 800ae1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d204      	bcs.n	800ae2e <USBH_ParseCfgDesc+0x120>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	885a      	ldrh	r2, [r3, #2]
 800ae28:	8afb      	ldrh	r3, [r7, #22]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d8d1      	bhi.n	800add2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ae2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae32:	3301      	adds	r3, #1
 800ae34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d804      	bhi.n	800ae4a <USBH_ParseCfgDesc+0x13c>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	885a      	ldrh	r2, [r3, #2]
 800ae44:	8afb      	ldrh	r3, [r7, #22]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d8a4      	bhi.n	800ad94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	3728      	adds	r7, #40	; 0x28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	785a      	ldrb	r2, [r3, #1]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	789a      	ldrb	r2, [r3, #2]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	78da      	ldrb	r2, [r3, #3]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	791a      	ldrb	r2, [r3, #4]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	795a      	ldrb	r2, [r3, #5]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	799a      	ldrb	r2, [r3, #6]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	79da      	ldrb	r2, [r3, #7]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	7a1a      	ldrb	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	721a      	strb	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781a      	ldrb	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	785a      	ldrb	r2, [r3, #1]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	789a      	ldrb	r2, [r3, #2]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	78da      	ldrb	r2, [r3, #3]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	3304      	adds	r3, #4
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	3305      	adds	r3, #5
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	799a      	ldrb	r2, [r3, #6]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	719a      	strb	r2, [r3, #6]
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	4613      	mov	r3, r2
 800af16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d120      	bne.n	800af64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	1e9a      	subs	r2, r3, #2
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	4293      	cmp	r3, r2
 800af2c:	bf28      	it	cs
 800af2e:	4613      	movcs	r3, r2
 800af30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3302      	adds	r3, #2
 800af36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800af38:	2300      	movs	r3, #0
 800af3a:	82fb      	strh	r3, [r7, #22]
 800af3c:	e00b      	b.n	800af56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800af3e:	8afb      	ldrh	r3, [r7, #22]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	701a      	strb	r2, [r3, #0]
      pdest++;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800af50:	8afb      	ldrh	r3, [r7, #22]
 800af52:	3302      	adds	r3, #2
 800af54:	82fb      	strh	r3, [r7, #22]
 800af56:	8afa      	ldrh	r2, [r7, #22]
 800af58:	8abb      	ldrh	r3, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d3ef      	bcc.n	800af3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
  }
}
 800af64:	bf00      	nop
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	881a      	ldrh	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	4413      	add	r3, r2
 800af86:	b29a      	uxth	r2, r3
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4413      	add	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af98:	68fb      	ldr	r3, [r7, #12]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b086      	sub	sp, #24
 800afaa:	af00      	add	r7, sp, #0
 800afac:	60f8      	str	r0, [r7, #12]
 800afae:	60b9      	str	r1, [r7, #8]
 800afb0:	4613      	mov	r3, r2
 800afb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	789b      	ldrb	r3, [r3, #2]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d002      	beq.n	800afc6 <USBH_CtlReq+0x20>
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d01d      	beq.n	800b000 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800afc4:	e043      	b.n	800b04e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	88fa      	ldrh	r2, [r7, #6]
 800afd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2201      	movs	r2, #1
 800afd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2202      	movs	r2, #2
 800afdc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800afde:	2301      	movs	r3, #1
 800afe0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2203      	movs	r2, #3
 800afe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aff6:	2300      	movs	r3, #0
 800aff8:	2200      	movs	r2, #0
 800affa:	f000 fd75 	bl	800bae8 <osMessageQueuePut>
      break;
 800affe:	e026      	b.n	800b04e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 f829 	bl	800b058 <USBH_HandleControl>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <USBH_CtlReq+0x70>
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	2b03      	cmp	r3, #3
 800b014:	d106      	bne.n	800b024 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	761a      	strb	r2, [r3, #24]
 800b022:	e005      	b.n	800b030 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d102      	bne.n	800b030 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2201      	movs	r2, #1
 800b02e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2203      	movs	r2, #3
 800b034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b044:	2300      	movs	r3, #0
 800b046:	2200      	movs	r2, #0
 800b048:	f000 fd4e 	bl	800bae8 <osMessageQueuePut>
      break;
 800b04c:	bf00      	nop
  }
  return status;
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7e1b      	ldrb	r3, [r3, #24]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	2b0a      	cmp	r3, #10
 800b070:	f200 822b 	bhi.w	800b4ca <USBH_HandleControl+0x472>
 800b074:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <USBH_HandleControl+0x24>)
 800b076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07a:	bf00      	nop
 800b07c:	0800b0a9 	.word	0x0800b0a9
 800b080:	0800b0c3 	.word	0x0800b0c3
 800b084:	0800b165 	.word	0x0800b165
 800b088:	0800b18b 	.word	0x0800b18b
 800b08c:	0800b217 	.word	0x0800b217
 800b090:	0800b243 	.word	0x0800b243
 800b094:	0800b305 	.word	0x0800b305
 800b098:	0800b327 	.word	0x0800b327
 800b09c:	0800b3b9 	.word	0x0800b3b9
 800b0a0:	0800b3e1 	.word	0x0800b3e1
 800b0a4:	0800b473 	.word	0x0800b473
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0110 	add.w	r1, r3, #16
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	795b      	ldrb	r3, [r3, #5]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fa19 	bl	800b4ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	761a      	strb	r2, [r3, #24]
      break;
 800b0c0:	e20e      	b.n	800b4e0 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	795b      	ldrb	r3, [r3, #5]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f003 fd79 	bl	800ebc0 <USBH_LL_GetURBState>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d12c      	bne.n	800b132 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7c1b      	ldrb	r3, [r3, #16]
 800b0dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	8adb      	ldrh	r3, [r3, #22]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b0ea:	7b7b      	ldrb	r3, [r7, #13]
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d103      	bne.n	800b0f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2203      	movs	r2, #3
 800b0f4:	761a      	strb	r2, [r3, #24]
 800b0f6:	e00d      	b.n	800b114 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2205      	movs	r2, #5
 800b0fc:	761a      	strb	r2, [r3, #24]
 800b0fe:	e009      	b.n	800b114 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b100:	7b7b      	ldrb	r3, [r7, #13]
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d103      	bne.n	800b10e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2209      	movs	r2, #9
 800b10a:	761a      	strb	r2, [r3, #24]
 800b10c:	e002      	b.n	800b114 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2207      	movs	r2, #7
 800b112:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2203      	movs	r2, #3
 800b118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	f000 fcdc 	bl	800bae8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b130:	e1cd      	b.n	800b4ce <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	2b04      	cmp	r3, #4
 800b136:	d003      	beq.n	800b140 <USBH_HandleControl+0xe8>
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	f040 81c7 	bne.w	800b4ce <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	220b      	movs	r2, #11
 800b144:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2203      	movs	r2, #3
 800b14a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b15a:	2300      	movs	r3, #0
 800b15c:	2200      	movs	r2, #0
 800b15e:	f000 fcc3 	bl	800bae8 <osMessageQueuePut>
      break;
 800b162:	e1b4      	b.n	800b4ce <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6899      	ldr	r1, [r3, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	899a      	ldrh	r2, [r3, #12]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	791b      	ldrb	r3, [r3, #4]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9f4 	bl	800b56a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2204      	movs	r2, #4
 800b186:	761a      	strb	r2, [r3, #24]
      break;
 800b188:	e1aa      	b.n	800b4e0 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f003 fd15 	bl	800ebc0 <USBH_LL_GetURBState>
 800b196:	4603      	mov	r3, r0
 800b198:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d110      	bne.n	800b1c2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2209      	movs	r2, #9
 800b1a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f000 fc93 	bl	800bae8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	2b05      	cmp	r3, #5
 800b1c6:	d110      	bne.n	800b1ea <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f000 fc80 	bl	800bae8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1e8:	e173      	b.n	800b4d2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	f040 8170 	bne.w	800b4d2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	220b      	movs	r2, #11
 800b1f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b20c:	2300      	movs	r3, #0
 800b20e:	2200      	movs	r2, #0
 800b210:	f000 fc6a 	bl	800bae8 <osMessageQueuePut>
      break;
 800b214:	e15d      	b.n	800b4d2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6899      	ldr	r1, [r3, #8]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	899a      	ldrh	r2, [r3, #12]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7958      	ldrb	r0, [r3, #5]
 800b222:	2301      	movs	r3, #1
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	4603      	mov	r3, r0
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f979 	bl	800b520 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2206      	movs	r2, #6
 800b23e:	761a      	strb	r2, [r3, #24]
      break;
 800b240:	e14e      	b.n	800b4e0 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	795b      	ldrb	r3, [r3, #5]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f003 fcb9 	bl	800ebc0 <USBH_LL_GetURBState>
 800b24e:	4603      	mov	r3, r0
 800b250:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d111      	bne.n	800b27c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2207      	movs	r2, #7
 800b25c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2203      	movs	r2, #3
 800b262:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b272:	2300      	movs	r3, #0
 800b274:	2200      	movs	r2, #0
 800b276:	f000 fc37 	bl	800bae8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b27a:	e12c      	b.n	800b4d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d113      	bne.n	800b2aa <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	220c      	movs	r2, #12
 800b286:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b288:	2303      	movs	r3, #3
 800b28a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2203      	movs	r2, #3
 800b290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f000 fc20 	bl	800bae8 <osMessageQueuePut>
      break;
 800b2a8:	e115      	b.n	800b4d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d111      	bne.n	800b2d4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2205      	movs	r2, #5
 800b2b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2203      	movs	r2, #3
 800b2ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f000 fc0b 	bl	800bae8 <osMessageQueuePut>
      break;
 800b2d2:	e100      	b.n	800b4d6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	f040 80fd 	bne.w	800b4d6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	220b      	movs	r2, #11
 800b2e0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f000 fbf3 	bl	800bae8 <osMessageQueuePut>
      break;
 800b302:	e0e8      	b.n	800b4d6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	791b      	ldrb	r3, [r3, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	2100      	movs	r1, #0
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f92c 	bl	800b56a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b318:	b29a      	uxth	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2208      	movs	r2, #8
 800b322:	761a      	strb	r2, [r3, #24]

      break;
 800b324:	e0dc      	b.n	800b4e0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	791b      	ldrb	r3, [r3, #4]
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f003 fc47 	bl	800ebc0 <USBH_LL_GetURBState>
 800b332:	4603      	mov	r3, r0
 800b334:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b336:	7bbb      	ldrb	r3, [r7, #14]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d113      	bne.n	800b364 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220d      	movs	r2, #13
 800b340:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2203      	movs	r2, #3
 800b34a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b35a:	2300      	movs	r3, #0
 800b35c:	2200      	movs	r2, #0
 800b35e:	f000 fbc3 	bl	800bae8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b362:	e0ba      	b.n	800b4da <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	2b04      	cmp	r3, #4
 800b368:	d111      	bne.n	800b38e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	220b      	movs	r2, #11
 800b36e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2203      	movs	r2, #3
 800b374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b384:	2300      	movs	r3, #0
 800b386:	2200      	movs	r2, #0
 800b388:	f000 fbae 	bl	800bae8 <osMessageQueuePut>
      break;
 800b38c:	e0a5      	b.n	800b4da <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	2b05      	cmp	r3, #5
 800b392:	f040 80a2 	bne.w	800b4da <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2203      	movs	r2, #3
 800b39e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f000 fb99 	bl	800bae8 <osMessageQueuePut>
      break;
 800b3b6:	e090      	b.n	800b4da <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	795a      	ldrb	r2, [r3, #5]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f8aa 	bl	800b520 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	220a      	movs	r2, #10
 800b3dc:	761a      	strb	r2, [r3, #24]
      break;
 800b3de:	e07f      	b.n	800b4e0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	795b      	ldrb	r3, [r3, #5]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f003 fbea 	bl	800ebc0 <USBH_LL_GetURBState>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d113      	bne.n	800b41e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	220d      	movs	r2, #13
 800b3fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2203      	movs	r2, #3
 800b404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b414:	2300      	movs	r3, #0
 800b416:	2200      	movs	r2, #0
 800b418:	f000 fb66 	bl	800bae8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b41c:	e05f      	b.n	800b4de <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d111      	bne.n	800b448 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2209      	movs	r2, #9
 800b428:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2203      	movs	r2, #3
 800b42e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b43e:	2300      	movs	r3, #0
 800b440:	2200      	movs	r2, #0
 800b442:	f000 fb51 	bl	800bae8 <osMessageQueuePut>
      break;
 800b446:	e04a      	b.n	800b4de <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800b448:	7bbb      	ldrb	r3, [r7, #14]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d147      	bne.n	800b4de <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	220b      	movs	r2, #11
 800b452:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2203      	movs	r2, #3
 800b458:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b468:	2300      	movs	r3, #0
 800b46a:	2200      	movs	r2, #0
 800b46c:	f000 fb3c 	bl	800bae8 <osMessageQueuePut>
      break;
 800b470:	e035      	b.n	800b4de <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7e5b      	ldrb	r3, [r3, #25]
 800b476:	3301      	adds	r3, #1
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	765a      	strb	r2, [r3, #25]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	7e5b      	ldrb	r3, [r3, #25]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d806      	bhi.n	800b494 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b492:	e025      	b.n	800b4e0 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b49a:	2106      	movs	r1, #6
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	795b      	ldrb	r3, [r3, #5]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f90d 	bl	800b6cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	791b      	ldrb	r3, [r3, #4]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f907 	bl	800b6cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4c8:	e00a      	b.n	800b4e0 <USBH_HandleControl+0x488>

    default:
      break;
 800b4ca:	bf00      	nop
 800b4cc:	e008      	b.n	800b4e0 <USBH_HandleControl+0x488>
      break;
 800b4ce:	bf00      	nop
 800b4d0:	e006      	b.n	800b4e0 <USBH_HandleControl+0x488>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e004      	b.n	800b4e0 <USBH_HandleControl+0x488>
      break;
 800b4d6:	bf00      	nop
 800b4d8:	e002      	b.n	800b4e0 <USBH_HandleControl+0x488>
      break;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <USBH_HandleControl+0x488>
      break;
 800b4de:	bf00      	nop
  }

  return status;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop

0800b4ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af04      	add	r7, sp, #16
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b4fa:	79f9      	ldrb	r1, [r7, #7]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9303      	str	r3, [sp, #12]
 800b500:	2308      	movs	r3, #8
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	2300      	movs	r3, #0
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2300      	movs	r3, #0
 800b50e:	2200      	movs	r2, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f003 fb24 	bl	800eb5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af04      	add	r7, sp, #16
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4611      	mov	r1, r2
 800b52c:	461a      	mov	r2, r3
 800b52e:	460b      	mov	r3, r1
 800b530:	80fb      	strh	r3, [r7, #6]
 800b532:	4613      	mov	r3, r2
 800b534:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b544:	7979      	ldrb	r1, [r7, #5]
 800b546:	7e3b      	ldrb	r3, [r7, #24]
 800b548:	9303      	str	r3, [sp, #12]
 800b54a:	88fb      	ldrh	r3, [r7, #6]
 800b54c:	9302      	str	r3, [sp, #8]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	2301      	movs	r3, #1
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	2300      	movs	r3, #0
 800b558:	2200      	movs	r2, #0
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f003 faff 	bl	800eb5e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af04      	add	r7, sp, #16
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	4611      	mov	r1, r2
 800b576:	461a      	mov	r2, r3
 800b578:	460b      	mov	r3, r1
 800b57a:	80fb      	strh	r3, [r7, #6]
 800b57c:	4613      	mov	r3, r2
 800b57e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b580:	7979      	ldrb	r1, [r7, #5]
 800b582:	2300      	movs	r3, #0
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	2301      	movs	r3, #1
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	2300      	movs	r3, #0
 800b594:	2201      	movs	r2, #1
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f003 fae1 	bl	800eb5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b59c:	2300      	movs	r3, #0

}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b088      	sub	sp, #32
 800b5aa:	af04      	add	r7, sp, #16
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	80fb      	strh	r3, [r7, #6]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b5ca:	7979      	ldrb	r1, [r7, #5]
 800b5cc:	7e3b      	ldrb	r3, [r7, #24]
 800b5ce:	9303      	str	r3, [sp, #12]
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f003 fabc 	bl	800eb5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af04      	add	r7, sp, #16
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	460b      	mov	r3, r1
 800b600:	80fb      	strh	r3, [r7, #6]
 800b602:	4613      	mov	r3, r2
 800b604:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b606:	7979      	ldrb	r1, [r7, #5]
 800b608:	2300      	movs	r3, #0
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	88fb      	ldrh	r3, [r7, #6]
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	2301      	movs	r3, #1
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2302      	movs	r3, #2
 800b61a:	2201      	movs	r2, #1
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f003 fa9e 	bl	800eb5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af04      	add	r7, sp, #16
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	4608      	mov	r0, r1
 800b636:	4611      	mov	r1, r2
 800b638:	461a      	mov	r2, r3
 800b63a:	4603      	mov	r3, r0
 800b63c:	70fb      	strb	r3, [r7, #3]
 800b63e:	460b      	mov	r3, r1
 800b640:	70bb      	strb	r3, [r7, #2]
 800b642:	4613      	mov	r3, r2
 800b644:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b646:	7878      	ldrb	r0, [r7, #1]
 800b648:	78ba      	ldrb	r2, [r7, #2]
 800b64a:	78f9      	ldrb	r1, [r7, #3]
 800b64c:	8b3b      	ldrh	r3, [r7, #24]
 800b64e:	9302      	str	r3, [sp, #8]
 800b650:	7d3b      	ldrb	r3, [r7, #20]
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	7c3b      	ldrb	r3, [r7, #16]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	4603      	mov	r3, r0
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f003 fa31 	bl	800eac2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b676:	78fb      	ldrb	r3, [r7, #3]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f003 fa50 	bl	800eb20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f836 	bl	800b708 <USBH_GetFreePipe>
 800b69c:	4603      	mov	r3, r0
 800b69e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b6a0:	89fb      	ldrh	r3, [r7, #14]
 800b6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d00a      	beq.n	800b6c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	89fb      	ldrh	r3, [r7, #14]
 800b6ae:	f003 030f 	and.w	r3, r3, #15
 800b6b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	33e0      	adds	r3, #224	; 0xe0
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	440b      	add	r3, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b6c0:	89fb      	ldrh	r3, [r7, #14]
 800b6c2:	b2db      	uxtb	r3, r3
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b6d8:	78fb      	ldrb	r3, [r7, #3]
 800b6da:	2b0a      	cmp	r3, #10
 800b6dc:	d80d      	bhi.n	800b6fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	33e0      	adds	r3, #224	; 0xe0
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	33e0      	adds	r3, #224	; 0xe0
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
 800b718:	e00f      	b.n	800b73a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	33e0      	adds	r3, #224	; 0xe0
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	b29b      	uxth	r3, r3
 800b732:	e007      	b.n	800b744 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	3301      	adds	r3, #1
 800b738:	73fb      	strb	r3, [r7, #15]
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	2b0a      	cmp	r3, #10
 800b73e:	d9ec      	bls.n	800b71a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b740:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b754:	bf00      	nop
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
	...

0800b760 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b766:	f3ef 8305 	mrs	r3, IPSR
 800b76a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b76c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10f      	bne.n	800b792 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b772:	f3ef 8310 	mrs	r3, PRIMASK
 800b776:	607b      	str	r3, [r7, #4]
  return(result);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d105      	bne.n	800b78a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b77e:	f3ef 8311 	mrs	r3, BASEPRI
 800b782:	603b      	str	r3, [r7, #0]
  return(result);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d007      	beq.n	800b79a <osKernelInitialize+0x3a>
 800b78a:	4b0e      	ldr	r3, [pc, #56]	; (800b7c4 <osKernelInitialize+0x64>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d103      	bne.n	800b79a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b792:	f06f 0305 	mvn.w	r3, #5
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	e00c      	b.n	800b7b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b79a:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <osKernelInitialize+0x64>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d105      	bne.n	800b7ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b7a2:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <osKernelInitialize+0x64>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	e002      	b.n	800b7b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20000108 	.word	0x20000108

0800b7c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ce:	f3ef 8305 	mrs	r3, IPSR
 800b7d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10f      	bne.n	800b7fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7da:	f3ef 8310 	mrs	r3, PRIMASK
 800b7de:	607b      	str	r3, [r7, #4]
  return(result);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d105      	bne.n	800b7f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7e6:	f3ef 8311 	mrs	r3, BASEPRI
 800b7ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d007      	beq.n	800b802 <osKernelStart+0x3a>
 800b7f2:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <osKernelStart+0x68>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d103      	bne.n	800b802 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b7fa:	f06f 0305 	mvn.w	r3, #5
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e010      	b.n	800b824 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b802:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <osKernelStart+0x68>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d109      	bne.n	800b81e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b80a:	f7ff ffa1 	bl	800b750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b80e:	4b08      	ldr	r3, [pc, #32]	; (800b830 <osKernelStart+0x68>)
 800b810:	2202      	movs	r2, #2
 800b812:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b814:	f001 fb14 	bl	800ce40 <vTaskStartScheduler>
      stat = osOK;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e002      	b.n	800b824 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b81e:	f04f 33ff 	mov.w	r3, #4294967295
 800b822:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000108 	.word	0x20000108

0800b834 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b834:	b580      	push	{r7, lr}
 800b836:	b090      	sub	sp, #64	; 0x40
 800b838:	af04      	add	r7, sp, #16
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b840:	2300      	movs	r3, #0
 800b842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b844:	f3ef 8305 	mrs	r3, IPSR
 800b848:	61fb      	str	r3, [r7, #28]
  return(result);
 800b84a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f040 808f 	bne.w	800b970 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b852:	f3ef 8310 	mrs	r3, PRIMASK
 800b856:	61bb      	str	r3, [r7, #24]
  return(result);
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d105      	bne.n	800b86a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b85e:	f3ef 8311 	mrs	r3, BASEPRI
 800b862:	617b      	str	r3, [r7, #20]
  return(result);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <osThreadNew+0x3e>
 800b86a:	4b44      	ldr	r3, [pc, #272]	; (800b97c <osThreadNew+0x148>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d07e      	beq.n	800b970 <osThreadNew+0x13c>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d07b      	beq.n	800b970 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b878:	2380      	movs	r3, #128	; 0x80
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b87c:	2318      	movs	r3, #24
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d045      	beq.n	800b91c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <osThreadNew+0x6a>
        name = attr->name;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d008      	beq.n	800b8c4 <osThreadNew+0x90>
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	2b38      	cmp	r3, #56	; 0x38
 800b8b6:	d805      	bhi.n	800b8c4 <osThreadNew+0x90>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <osThreadNew+0x94>
        return (NULL);
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e054      	b.n	800b972 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	089b      	lsrs	r3, r3, #2
 800b8d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00e      	beq.n	800b8fe <osThreadNew+0xca>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	2b5b      	cmp	r3, #91	; 0x5b
 800b8e6:	d90a      	bls.n	800b8fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d006      	beq.n	800b8fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <osThreadNew+0xca>
        mem = 1;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	623b      	str	r3, [r7, #32]
 800b8fc:	e010      	b.n	800b920 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10c      	bne.n	800b920 <osThreadNew+0xec>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d108      	bne.n	800b920 <osThreadNew+0xec>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d104      	bne.n	800b920 <osThreadNew+0xec>
          mem = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	623b      	str	r3, [r7, #32]
 800b91a:	e001      	b.n	800b920 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d110      	bne.n	800b948 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b92e:	9202      	str	r2, [sp, #8]
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f001 f833 	bl	800c9a8 <xTaskCreateStatic>
 800b942:	4603      	mov	r3, r0
 800b944:	613b      	str	r3, [r7, #16]
 800b946:	e013      	b.n	800b970 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d110      	bne.n	800b970 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	b29a      	uxth	r2, r3
 800b952:	f107 0310 	add.w	r3, r7, #16
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f001 f87b 	bl	800ca5c <xTaskCreate>
 800b966:	4603      	mov	r3, r0
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d001      	beq.n	800b970 <osThreadNew+0x13c>
          hTask = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b970:	693b      	ldr	r3, [r7, #16]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3730      	adds	r7, #48	; 0x30
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20000108 	.word	0x20000108

0800b980 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b988:	f3ef 8305 	mrs	r3, IPSR
 800b98c:	613b      	str	r3, [r7, #16]
  return(result);
 800b98e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10f      	bne.n	800b9b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b994:	f3ef 8310 	mrs	r3, PRIMASK
 800b998:	60fb      	str	r3, [r7, #12]
  return(result);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d105      	bne.n	800b9ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b9a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <osDelay+0x3c>
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <osDelay+0x58>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d103      	bne.n	800b9bc <osDelay+0x3c>
    stat = osErrorISR;
 800b9b4:	f06f 0305 	mvn.w	r3, #5
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e007      	b.n	800b9cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <osDelay+0x4c>
      vTaskDelay(ticks);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fa06 	bl	800cdd8 <vTaskDelay>
    }
  }

  return (stat);
 800b9cc:	697b      	ldr	r3, [r7, #20]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3718      	adds	r7, #24
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000108 	.word	0x20000108

0800b9dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08c      	sub	sp, #48	; 0x30
 800b9e0:	af02      	add	r7, sp, #8
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ec:	f3ef 8305 	mrs	r3, IPSR
 800b9f0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d170      	bne.n	800bada <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9fc:	617b      	str	r3, [r7, #20]
  return(result);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d105      	bne.n	800ba10 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba04:	f3ef 8311 	mrs	r3, BASEPRI
 800ba08:	613b      	str	r3, [r7, #16]
  return(result);
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <osMessageQueueNew+0x3c>
 800ba10:	4b34      	ldr	r3, [pc, #208]	; (800bae4 <osMessageQueueNew+0x108>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d060      	beq.n	800bada <osMessageQueueNew+0xfe>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d05d      	beq.n	800bada <osMessageQueueNew+0xfe>
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d05a      	beq.n	800bada <osMessageQueueNew+0xfe>
    mem = -1;
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d029      	beq.n	800ba84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d012      	beq.n	800ba5e <osMessageQueueNew+0x82>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	2b4f      	cmp	r3, #79	; 0x4f
 800ba3e:	d90e      	bls.n	800ba5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00a      	beq.n	800ba5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	695a      	ldr	r2, [r3, #20]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	fb01 f303 	mul.w	r3, r1, r3
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <osMessageQueueNew+0x82>
        mem = 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	623b      	str	r3, [r7, #32]
 800ba5c:	e014      	b.n	800ba88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d110      	bne.n	800ba88 <osMessageQueueNew+0xac>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d10c      	bne.n	800ba88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d108      	bne.n	800ba88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d104      	bne.n	800ba88 <osMessageQueueNew+0xac>
          mem = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	623b      	str	r3, [r7, #32]
 800ba82:	e001      	b.n	800ba88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d10c      	bne.n	800baa8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691a      	ldr	r2, [r3, #16]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6899      	ldr	r1, [r3, #8]
 800ba96:	2300      	movs	r3, #0
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	68b9      	ldr	r1, [r7, #8]
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 fa58 	bl	800bf54 <xQueueGenericCreateStatic>
 800baa4:	6278      	str	r0, [r7, #36]	; 0x24
 800baa6:	e008      	b.n	800baba <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d105      	bne.n	800baba <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800baae:	2200      	movs	r2, #0
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fac1 	bl	800c03a <xQueueGenericCreate>
 800bab8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00c      	beq.n	800bada <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <osMessageQueueNew+0xf2>
        name = attr->name;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	61fb      	str	r3, [r7, #28]
 800bacc:	e001      	b.n	800bad2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800bace:	2300      	movs	r3, #0
 800bad0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bad2:	69f9      	ldr	r1, [r7, #28]
 800bad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bad6:	f000 ff0b 	bl	800c8f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800badc:	4618      	mov	r0, r3
 800bade:	3728      	adds	r7, #40	; 0x28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000108 	.word	0x20000108

0800bae8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	4613      	mov	r3, r2
 800baf6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb00:	f3ef 8305 	mrs	r3, IPSR
 800bb04:	61fb      	str	r3, [r7, #28]
  return(result);
 800bb06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10f      	bne.n	800bb2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb10:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d105      	bne.n	800bb24 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb18:	f3ef 8311 	mrs	r3, BASEPRI
 800bb1c:	617b      	str	r3, [r7, #20]
  return(result);
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d02c      	beq.n	800bb7e <osMessageQueuePut+0x96>
 800bb24:	4b28      	ldr	r3, [pc, #160]	; (800bbc8 <osMessageQueuePut+0xe0>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d128      	bne.n	800bb7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <osMessageQueuePut+0x56>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <osMessageQueuePut+0x56>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800bb3e:	f06f 0303 	mvn.w	r3, #3
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb44:	e039      	b.n	800bbba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bb4a:	f107 0210 	add.w	r2, r7, #16
 800bb4e:	2300      	movs	r3, #0
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	6a38      	ldr	r0, [r7, #32]
 800bb54:	f000 fbce 	bl	800c2f4 <xQueueGenericSendFromISR>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d003      	beq.n	800bb66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800bb5e:	f06f 0302 	mvn.w	r3, #2
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb64:	e029      	b.n	800bbba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d026      	beq.n	800bbba <osMessageQueuePut+0xd2>
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <osMessageQueuePut+0xe4>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb7c:	e01d      	b.n	800bbba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <osMessageQueuePut+0xa2>
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800bb8a:	f06f 0303 	mvn.w	r3, #3
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb90:	e014      	b.n	800bbbc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb92:	2300      	movs	r3, #0
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	6a38      	ldr	r0, [r7, #32]
 800bb9a:	f000 fab1 	bl	800c100 <xQueueGenericSend>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d00b      	beq.n	800bbbc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800bbaa:	f06f 0301 	mvn.w	r3, #1
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb0:	e004      	b.n	800bbbc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800bbb2:	f06f 0302 	mvn.w	r3, #2
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb8:	e000      	b.n	800bbbc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3728      	adds	r7, #40	; 0x28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000108 	.word	0x20000108
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08a      	sub	sp, #40	; 0x28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbe6:	f3ef 8305 	mrs	r3, IPSR
 800bbea:	61fb      	str	r3, [r7, #28]
  return(result);
 800bbec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10f      	bne.n	800bc12 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbf2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf6:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d105      	bne.n	800bc0a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbfe:	f3ef 8311 	mrs	r3, BASEPRI
 800bc02:	617b      	str	r3, [r7, #20]
  return(result);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d02c      	beq.n	800bc64 <osMessageQueueGet+0x94>
 800bc0a:	4b28      	ldr	r3, [pc, #160]	; (800bcac <osMessageQueueGet+0xdc>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d128      	bne.n	800bc64 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <osMessageQueueGet+0x54>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <osMessageQueueGet+0x54>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800bc24:	f06f 0303 	mvn.w	r3, #3
 800bc28:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc2a:	e038      	b.n	800bc9e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bc30:	f107 0310 	add.w	r3, r7, #16
 800bc34:	461a      	mov	r2, r3
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	6a38      	ldr	r0, [r7, #32]
 800bc3a:	f000 fccb 	bl	800c5d4 <xQueueReceiveFromISR>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d003      	beq.n	800bc4c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800bc44:	f06f 0302 	mvn.w	r3, #2
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc4a:	e028      	b.n	800bc9e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d025      	beq.n	800bc9e <osMessageQueueGet+0xce>
 800bc52:	4b17      	ldr	r3, [pc, #92]	; (800bcb0 <osMessageQueueGet+0xe0>)
 800bc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc62:	e01c      	b.n	800bc9e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <osMessageQueueGet+0xa0>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800bc70:	f06f 0303 	mvn.w	r3, #3
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
 800bc76:	e013      	b.n	800bca0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	6a38      	ldr	r0, [r7, #32]
 800bc7e:	f000 fbcd 	bl	800c41c <xQueueReceive>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d00b      	beq.n	800bca0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800bc8e:	f06f 0301 	mvn.w	r3, #1
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
 800bc94:	e004      	b.n	800bca0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800bc96:	f06f 0302 	mvn.w	r3, #2
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9c:	e000      	b.n	800bca0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3728      	adds	r7, #40	; 0x28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000108 	.word	0x20000108
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a07      	ldr	r2, [pc, #28]	; (800bce0 <vApplicationGetIdleTaskMemory+0x2c>)
 800bcc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	4a06      	ldr	r2, [pc, #24]	; (800bce4 <vApplicationGetIdleTaskMemory+0x30>)
 800bcca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	601a      	str	r2, [r3, #0]
}
 800bcd2:	bf00      	nop
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	2000010c 	.word	0x2000010c
 800bce4:	20000168 	.word	0x20000168

0800bce8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4a07      	ldr	r2, [pc, #28]	; (800bd14 <vApplicationGetTimerTaskMemory+0x2c>)
 800bcf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <vApplicationGetTimerTaskMemory+0x30>)
 800bcfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd06:	601a      	str	r2, [r3, #0]
}
 800bd08:	bf00      	nop
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	20000368 	.word	0x20000368
 800bd18:	200003c4 	.word	0x200003c4

0800bd1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f103 0208 	add.w	r2, r3, #8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295
 800bd34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f103 0208 	add.w	r2, r3, #8
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f103 0208 	add.w	r2, r3, #8
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd6a:	bf00      	nop
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	601a      	str	r2, [r3, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d103      	bne.n	800bdde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e00c      	b.n	800bdf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3308      	adds	r3, #8
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	e002      	b.n	800bdec <vListInsert+0x2e>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d2f6      	bcs.n	800bde6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	601a      	str	r2, [r3, #0]
}
 800be24:	bf00      	nop
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	6892      	ldr	r2, [r2, #8]
 800be46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	6852      	ldr	r2, [r2, #4]
 800be50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d103      	bne.n	800be64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	1e5a      	subs	r2, r3, #1
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d109      	bne.n	800beac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	60bb      	str	r3, [r7, #8]
 800beaa:	e7fe      	b.n	800beaa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800beac:	f002 f946 	bl	800e13c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bebc:	fb01 f303 	mul.w	r3, r1, r3
 800bec0:	441a      	add	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bedc:	3b01      	subs	r3, #1
 800bede:	68f9      	ldr	r1, [r7, #12]
 800bee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bee2:	fb01 f303 	mul.w	r3, r1, r3
 800bee6:	441a      	add	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	22ff      	movs	r2, #255	; 0xff
 800bef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	22ff      	movs	r2, #255	; 0xff
 800bef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d114      	bne.n	800bf2c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d01a      	beq.n	800bf40 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3310      	adds	r3, #16
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 fa16 	bl	800d340 <xTaskRemoveFromEventList>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d012      	beq.n	800bf40 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf1a:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <xQueueGenericReset+0xcc>)
 800bf1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	e009      	b.n	800bf40 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3310      	adds	r3, #16
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fef3 	bl	800bd1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3324      	adds	r3, #36	; 0x24
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff feee 	bl	800bd1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf40:	f002 f92a 	bl	800e198 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf44:	2301      	movs	r3, #1
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	e000ed04 	.word	0xe000ed04

0800bf54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08e      	sub	sp, #56	; 0x38
 800bf58:	af02      	add	r7, sp, #8
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d109      	bne.n	800bf7c <xQueueGenericCreateStatic+0x28>
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf7a:	e7fe      	b.n	800bf7a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d109      	bne.n	800bf96 <xQueueGenericCreateStatic+0x42>
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24
 800bf94:	e7fe      	b.n	800bf94 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <xQueueGenericCreateStatic+0x4e>
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <xQueueGenericCreateStatic+0x52>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueGenericCreateStatic+0x54>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <xQueueGenericCreateStatic+0x6c>
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	623b      	str	r3, [r7, #32]
 800bfbe:	e7fe      	b.n	800bfbe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <xQueueGenericCreateStatic+0x78>
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d101      	bne.n	800bfd0 <xQueueGenericCreateStatic+0x7c>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e000      	b.n	800bfd2 <xQueueGenericCreateStatic+0x7e>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d109      	bne.n	800bfea <xQueueGenericCreateStatic+0x96>
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfea:	2350      	movs	r3, #80	; 0x50
 800bfec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b50      	cmp	r3, #80	; 0x50
 800bff2:	d009      	beq.n	800c008 <xQueueGenericCreateStatic+0xb4>
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	e7fe      	b.n	800c006 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c008:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00d      	beq.n	800c030 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c01c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	4613      	mov	r3, r2
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f844 	bl	800c0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c032:	4618      	mov	r0, r3
 800c034:	3730      	adds	r7, #48	; 0x30
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b08a      	sub	sp, #40	; 0x28
 800c03e:	af02      	add	r7, sp, #8
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	4613      	mov	r3, r2
 800c046:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <xQueueGenericCreate+0x28>
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	613b      	str	r3, [r7, #16]
 800c060:	e7fe      	b.n	800c060 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	e004      	b.n	800c078 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	fb02 f303 	mul.w	r3, r2, r3
 800c076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	3350      	adds	r3, #80	; 0x50
 800c07c:	4618      	mov	r0, r3
 800c07e:	f002 f977 	bl	800e370 <pvPortMalloc>
 800c082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d011      	beq.n	800c0ae <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	3350      	adds	r3, #80	; 0x50
 800c092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c09c:	79fa      	ldrb	r2, [r7, #7]
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 f805 	bl	800c0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
	}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3720      	adds	r7, #32
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d103      	bne.n	800c0d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	e002      	b.n	800c0da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f7ff fecb 	bl	800be84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	78fa      	ldrb	r2, [r7, #3]
 800c0f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0f6:	bf00      	nop
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08e      	sub	sp, #56	; 0x38
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c10e:	2300      	movs	r3, #0
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d109      	bne.n	800c130 <xQueueGenericSend+0x30>
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c12e:	e7fe      	b.n	800c12e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <xQueueGenericSend+0x3e>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <xQueueGenericSend+0x42>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <xQueueGenericSend+0x44>
 800c142:	2300      	movs	r3, #0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <xQueueGenericSend+0x5c>
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	627b      	str	r3, [r7, #36]	; 0x24
 800c15a:	e7fe      	b.n	800c15a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d103      	bne.n	800c16a <xQueueGenericSend+0x6a>
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c166:	2b01      	cmp	r3, #1
 800c168:	d101      	bne.n	800c16e <xQueueGenericSend+0x6e>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e000      	b.n	800c170 <xQueueGenericSend+0x70>
 800c16e:	2300      	movs	r3, #0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d109      	bne.n	800c188 <xQueueGenericSend+0x88>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	623b      	str	r3, [r7, #32]
 800c186:	e7fe      	b.n	800c186 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c188:	f001 fa90 	bl	800d6ac <xTaskGetSchedulerState>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <xQueueGenericSend+0x98>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <xQueueGenericSend+0x9c>
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <xQueueGenericSend+0x9e>
 800c19c:	2300      	movs	r3, #0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d109      	bne.n	800c1b6 <xQueueGenericSend+0xb6>
 800c1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e7fe      	b.n	800c1b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1b6:	f001 ffc1 	bl	800e13c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d302      	bcc.n	800c1cc <xQueueGenericSend+0xcc>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d129      	bne.n	800c220 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	68b9      	ldr	r1, [r7, #8]
 800c1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1d2:	f000 fa7c 	bl	800c6ce <prvCopyDataToQueue>
 800c1d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d010      	beq.n	800c202 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	3324      	adds	r3, #36	; 0x24
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 f8ab 	bl	800d340 <xTaskRemoveFromEventList>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d013      	beq.n	800c218 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c1f0:	4b3f      	ldr	r3, [pc, #252]	; (800c2f0 <xQueueGenericSend+0x1f0>)
 800c1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	e00a      	b.n	800c218 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	2b00      	cmp	r3, #0
 800c206:	d007      	beq.n	800c218 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c208:	4b39      	ldr	r3, [pc, #228]	; (800c2f0 <xQueueGenericSend+0x1f0>)
 800c20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c218:	f001 ffbe 	bl	800e198 <vPortExitCritical>
				return pdPASS;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e063      	b.n	800c2e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d103      	bne.n	800c22e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c226:	f001 ffb7 	bl	800e198 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	e05c      	b.n	800c2e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c230:	2b00      	cmp	r3, #0
 800c232:	d106      	bne.n	800c242 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	4618      	mov	r0, r3
 800c23a:	f001 f8e3 	bl	800d404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c23e:	2301      	movs	r3, #1
 800c240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c242:	f001 ffa9 	bl	800e198 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c246:	f000 fe5f 	bl	800cf08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c24a:	f001 ff77 	bl	800e13c <vPortEnterCritical>
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c254:	b25b      	sxtb	r3, r3
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25a:	d103      	bne.n	800c264 <xQueueGenericSend+0x164>
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c26a:	b25b      	sxtb	r3, r3
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d103      	bne.n	800c27a <xQueueGenericSend+0x17a>
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c27a:	f001 ff8d 	bl	800e198 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c27e:	1d3a      	adds	r2, r7, #4
 800c280:	f107 0314 	add.w	r3, r7, #20
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f001 f8d2 	bl	800d430 <xTaskCheckForTimeOut>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d124      	bne.n	800c2dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c294:	f000 fb13 	bl	800c8be <prvIsQueueFull>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d018      	beq.n	800c2d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	3310      	adds	r3, #16
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fffc 	bl	800d2a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ae:	f000 fa9e 	bl	800c7ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c2b2:	f000 fe37 	bl	800cf24 <xTaskResumeAll>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f47f af7c 	bne.w	800c1b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <xQueueGenericSend+0x1f0>)
 800c2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	e772      	b.n	800c1b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2d2:	f000 fa8c 	bl	800c7ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2d6:	f000 fe25 	bl	800cf24 <xTaskResumeAll>
 800c2da:	e76c      	b.n	800c1b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2de:	f000 fa86 	bl	800c7ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2e2:	f000 fe1f 	bl	800cf24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c2e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3738      	adds	r7, #56	; 0x38
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	e000ed04 	.word	0xe000ed04

0800c2f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	; 0x38
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d109      	bne.n	800c320 <xQueueGenericSendFromISR+0x2c>
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	627b      	str	r3, [r7, #36]	; 0x24
 800c31e:	e7fe      	b.n	800c31e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <xQueueGenericSendFromISR+0x3a>
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <xQueueGenericSendFromISR+0x3e>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <xQueueGenericSendFromISR+0x40>
 800c332:	2300      	movs	r3, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d109      	bne.n	800c34c <xQueueGenericSendFromISR+0x58>
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	623b      	str	r3, [r7, #32]
 800c34a:	e7fe      	b.n	800c34a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d103      	bne.n	800c35a <xQueueGenericSendFromISR+0x66>
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c356:	2b01      	cmp	r3, #1
 800c358:	d101      	bne.n	800c35e <xQueueGenericSendFromISR+0x6a>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <xQueueGenericSendFromISR+0x6c>
 800c35e:	2300      	movs	r3, #0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <xQueueGenericSendFromISR+0x84>
 800c364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	61fb      	str	r3, [r7, #28]
 800c376:	e7fe      	b.n	800c376 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c378:	f001 ffbc 	bl	800e2f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c37c:	f3ef 8211 	mrs	r2, BASEPRI
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	61ba      	str	r2, [r7, #24]
 800c392:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c394:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c396:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d302      	bcc.n	800c3aa <xQueueGenericSendFromISR+0xb6>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d12c      	bne.n	800c404 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3b4:	683a      	ldr	r2, [r7, #0]
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ba:	f000 f988 	bl	800c6ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d112      	bne.n	800c3ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d016      	beq.n	800c3fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	3324      	adds	r3, #36	; 0x24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 ffb3 	bl	800d340 <xTaskRemoveFromEventList>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00e      	beq.n	800c3fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00b      	beq.n	800c3fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	e007      	b.n	800c3fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	b25a      	sxtb	r2, r3
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3fe:	2301      	movs	r3, #1
 800c400:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c402:	e001      	b.n	800c408 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c404:	2300      	movs	r3, #0
 800c406:	637b      	str	r3, [r7, #52]	; 0x34
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c414:	4618      	mov	r0, r3
 800c416:	3738      	adds	r7, #56	; 0x38
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08c      	sub	sp, #48	; 0x30
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c428:	2300      	movs	r3, #0
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <xQueueReceive+0x2e>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	623b      	str	r3, [r7, #32]
 800c448:	e7fe      	b.n	800c448 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d103      	bne.n	800c458 <xQueueReceive+0x3c>
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <xQueueReceive+0x40>
 800c458:	2301      	movs	r3, #1
 800c45a:	e000      	b.n	800c45e <xQueueReceive+0x42>
 800c45c:	2300      	movs	r3, #0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d109      	bne.n	800c476 <xQueueReceive+0x5a>
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	e7fe      	b.n	800c474 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c476:	f001 f919 	bl	800d6ac <xTaskGetSchedulerState>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <xQueueReceive+0x6a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <xQueueReceive+0x6e>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <xQueueReceive+0x70>
 800c48a:	2300      	movs	r3, #0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d109      	bne.n	800c4a4 <xQueueReceive+0x88>
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e7fe      	b.n	800c4a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a4:	f001 fe4a 	bl	800e13c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01f      	beq.n	800c4f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b8:	f000 f973 	bl	800c7a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	1e5a      	subs	r2, r3, #1
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00f      	beq.n	800c4ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 ff35 	bl	800d340 <xTaskRemoveFromEventList>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4dc:	4b3c      	ldr	r3, [pc, #240]	; (800c5d0 <xQueueReceive+0x1b4>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ec:	f001 fe54 	bl	800e198 <vPortExitCritical>
				return pdPASS;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e069      	b.n	800c5c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d103      	bne.n	800c502 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4fa:	f001 fe4d 	bl	800e198 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e062      	b.n	800c5c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 ff79 	bl	800d404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c512:	2301      	movs	r3, #1
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c516:	f001 fe3f 	bl	800e198 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c51a:	f000 fcf5 	bl	800cf08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c51e:	f001 fe0d 	bl	800e13c <vPortEnterCritical>
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c528:	b25b      	sxtb	r3, r3
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52e:	d103      	bne.n	800c538 <xQueueReceive+0x11c>
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c53e:	b25b      	sxtb	r3, r3
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d103      	bne.n	800c54e <xQueueReceive+0x132>
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c54e:	f001 fe23 	bl	800e198 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c552:	1d3a      	adds	r2, r7, #4
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 ff68 	bl	800d430 <xTaskCheckForTimeOut>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d123      	bne.n	800c5ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c568:	f000 f993 	bl	800c892 <prvIsQueueEmpty>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d017      	beq.n	800c5a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	3324      	adds	r3, #36	; 0x24
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 fe92 	bl	800d2a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c582:	f000 f934 	bl	800c7ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c586:	f000 fccd 	bl	800cf24 <xTaskResumeAll>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d189      	bne.n	800c4a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <xQueueReceive+0x1b4>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	e780      	b.n	800c4a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a4:	f000 f923 	bl	800c7ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a8:	f000 fcbc 	bl	800cf24 <xTaskResumeAll>
 800c5ac:	e77a      	b.n	800c4a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b0:	f000 f91d 	bl	800c7ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b4:	f000 fcb6 	bl	800cf24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ba:	f000 f96a 	bl	800c892 <prvIsQueueEmpty>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f43f af6f 	beq.w	800c4a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3730      	adds	r7, #48	; 0x30
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	; 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d109      	bne.n	800c5fe <xQueueReceiveFromISR+0x2a>
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	623b      	str	r3, [r7, #32]
 800c5fc:	e7fe      	b.n	800c5fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <xQueueReceiveFromISR+0x38>
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <xQueueReceiveFromISR+0x3c>
 800c60c:	2301      	movs	r3, #1
 800c60e:	e000      	b.n	800c612 <xQueueReceiveFromISR+0x3e>
 800c610:	2300      	movs	r3, #0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d109      	bne.n	800c62a <xQueueReceiveFromISR+0x56>
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	e7fe      	b.n	800c628 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c62a:	f001 fe63 	bl	800e2f4 <vPortValidateInterruptPriority>
	__asm volatile
 800c62e:	f3ef 8211 	mrs	r2, BASEPRI
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	61ba      	str	r2, [r7, #24]
 800c644:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c646:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c648:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	2b00      	cmp	r3, #0
 800c654:	d02f      	beq.n	800c6b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c664:	f000 f89d 	bl	800c7a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	1e5a      	subs	r2, r3, #1
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d112      	bne.n	800c6a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d016      	beq.n	800c6b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	3310      	adds	r3, #16
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fe5a 	bl	800d340 <xTaskRemoveFromEventList>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00e      	beq.n	800c6b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e007      	b.n	800c6b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	b25a      	sxtb	r2, r3
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b4:	e001      	b.n	800c6ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3738      	adds	r7, #56	; 0x38
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b086      	sub	sp, #24
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10d      	bne.n	800c708 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d14d      	bne.n	800c790 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fff5 	bl	800d6e8 <xTaskPriorityDisinherit>
 800c6fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	609a      	str	r2, [r3, #8]
 800c706:	e043      	b.n	800c790 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d119      	bne.n	800c742 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6858      	ldr	r0, [r3, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c716:	461a      	mov	r2, r3
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	f002 fb3b 	bl	800ed94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	441a      	add	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	429a      	cmp	r2, r3
 800c736:	d32b      	bcc.n	800c790 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	605a      	str	r2, [r3, #4]
 800c740:	e026      	b.n	800c790 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68d8      	ldr	r0, [r3, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	461a      	mov	r2, r3
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	f002 fb21 	bl	800ed94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	68da      	ldr	r2, [r3, #12]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	425b      	negs	r3, r3
 800c75c:	441a      	add	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d207      	bcs.n	800c77e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689a      	ldr	r2, [r3, #8]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c776:	425b      	negs	r3, r3
 800c778:	441a      	add	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d105      	bne.n	800c790 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d002      	beq.n	800c790 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c798:	697b      	ldr	r3, [r7, #20]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d018      	beq.n	800c7e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	441a      	add	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68da      	ldr	r2, [r3, #12]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d303      	bcc.n	800c7d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68d9      	ldr	r1, [r3, #12]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7de:	461a      	mov	r2, r3
 800c7e0:	6838      	ldr	r0, [r7, #0]
 800c7e2:	f002 fad7 	bl	800ed94 <memcpy>
	}
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7f6:	f001 fca1 	bl	800e13c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c800:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c802:	e011      	b.n	800c828 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d012      	beq.n	800c832 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3324      	adds	r3, #36	; 0x24
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fd95 	bl	800d340 <xTaskRemoveFromEventList>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c81c:	f000 fe68 	bl	800d4f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	3b01      	subs	r3, #1
 800c824:	b2db      	uxtb	r3, r3
 800c826:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dce9      	bgt.n	800c804 <prvUnlockQueue+0x16>
 800c830:	e000      	b.n	800c834 <prvUnlockQueue+0x46>
					break;
 800c832:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	22ff      	movs	r2, #255	; 0xff
 800c838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c83c:	f001 fcac 	bl	800e198 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c840:	f001 fc7c 	bl	800e13c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c84a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c84c:	e011      	b.n	800c872 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d012      	beq.n	800c87c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3310      	adds	r3, #16
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fd70 	bl	800d340 <xTaskRemoveFromEventList>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c866:	f000 fe43 	bl	800d4f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c86a:	7bbb      	ldrb	r3, [r7, #14]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c876:	2b00      	cmp	r3, #0
 800c878:	dce9      	bgt.n	800c84e <prvUnlockQueue+0x60>
 800c87a:	e000      	b.n	800c87e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c87c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	22ff      	movs	r2, #255	; 0xff
 800c882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c886:	f001 fc87 	bl	800e198 <vPortExitCritical>
}
 800c88a:	bf00      	nop
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c89a:	f001 fc4f 	bl	800e13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e001      	b.n	800c8b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8b0:	f001 fc72 	bl	800e198 <vPortExitCritical>

	return xReturn;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8c6:	f001 fc39 	bl	800e13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d102      	bne.n	800c8dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e001      	b.n	800c8e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8e0:	f001 fc5a 	bl	800e198 <vPortExitCritical>

	return xReturn;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	e014      	b.n	800c92a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c900:	4a0e      	ldr	r2, [pc, #56]	; (800c93c <vQueueAddToRegistry+0x4c>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10b      	bne.n	800c924 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c90c:	490b      	ldr	r1, [pc, #44]	; (800c93c <vQueueAddToRegistry+0x4c>)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c916:	4a09      	ldr	r2, [pc, #36]	; (800c93c <vQueueAddToRegistry+0x4c>)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	4413      	add	r3, r2
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c922:	e005      	b.n	800c930 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3301      	adds	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b07      	cmp	r3, #7
 800c92e:	d9e7      	bls.n	800c900 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20004ca8 	.word	0x20004ca8

0800c940 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c950:	f001 fbf4 	bl	800e13c <vPortEnterCritical>
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c95a:	b25b      	sxtb	r3, r3
 800c95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c960:	d103      	bne.n	800c96a <vQueueWaitForMessageRestricted+0x2a>
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c970:	b25b      	sxtb	r3, r3
 800c972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c976:	d103      	bne.n	800c980 <vQueueWaitForMessageRestricted+0x40>
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c980:	f001 fc0a 	bl	800e198 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	3324      	adds	r3, #36	; 0x24
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	68b9      	ldr	r1, [r7, #8]
 800c994:	4618      	mov	r0, r3
 800c996:	f000 fca9 	bl	800d2ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c99a:	6978      	ldr	r0, [r7, #20]
 800c99c:	f7ff ff27 	bl	800c7ee <prvUnlockQueue>
	}
 800c9a0:	bf00      	nop
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08e      	sub	sp, #56	; 0x38
 800c9ac:	af04      	add	r7, sp, #16
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d109      	bne.n	800c9d0 <xTaskCreateStatic+0x28>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	623b      	str	r3, [r7, #32]
 800c9ce:	e7fe      	b.n	800c9ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d109      	bne.n	800c9ea <xTaskCreateStatic+0x42>
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	61fb      	str	r3, [r7, #28]
 800c9e8:	e7fe      	b.n	800c9e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9ea:	235c      	movs	r3, #92	; 0x5c
 800c9ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c9f2:	d009      	beq.n	800ca08 <xTaskCreateStatic+0x60>
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61bb      	str	r3, [r7, #24]
 800ca06:	e7fe      	b.n	800ca06 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01e      	beq.n	800ca4e <xTaskCreateStatic+0xa6>
 800ca10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d01b      	beq.n	800ca4e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	2202      	movs	r2, #2
 800ca24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9303      	str	r3, [sp, #12]
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	f107 0314 	add.w	r3, r7, #20
 800ca34:	9301      	str	r3, [sp, #4]
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	68b9      	ldr	r1, [r7, #8]
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f000 f850 	bl	800cae6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca48:	f000 f8dc 	bl	800cc04 <prvAddNewTaskToReadyList>
 800ca4c:	e001      	b.n	800ca52 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca52:	697b      	ldr	r3, [r7, #20]
	}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3728      	adds	r7, #40	; 0x28
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08c      	sub	sp, #48	; 0x30
 800ca60:	af04      	add	r7, sp, #16
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca6c:	88fb      	ldrh	r3, [r7, #6]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4618      	mov	r0, r3
 800ca72:	f001 fc7d 	bl	800e370 <pvPortMalloc>
 800ca76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00e      	beq.n	800ca9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca7e:	205c      	movs	r0, #92	; 0x5c
 800ca80:	f001 fc76 	bl	800e370 <pvPortMalloc>
 800ca84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	631a      	str	r2, [r3, #48]	; 0x30
 800ca92:	e005      	b.n	800caa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca94:	6978      	ldr	r0, [r7, #20]
 800ca96:	f001 fd2d 	bl	800e4f4 <vPortFree>
 800ca9a:	e001      	b.n	800caa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d017      	beq.n	800cad6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800caae:	88fa      	ldrh	r2, [r7, #6]
 800cab0:	2300      	movs	r3, #0
 800cab2:	9303      	str	r3, [sp, #12]
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	9302      	str	r3, [sp, #8]
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	68b9      	ldr	r1, [r7, #8]
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f80e 	bl	800cae6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caca:	69f8      	ldr	r0, [r7, #28]
 800cacc:	f000 f89a 	bl	800cc04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cad0:	2301      	movs	r3, #1
 800cad2:	61bb      	str	r3, [r7, #24]
 800cad4:	e002      	b.n	800cadc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cad6:	f04f 33ff 	mov.w	r3, #4294967295
 800cada:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cadc:	69bb      	ldr	r3, [r7, #24]
	}
 800cade:	4618      	mov	r0, r3
 800cae0:	3720      	adds	r7, #32
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b088      	sub	sp, #32
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	461a      	mov	r2, r3
 800cafe:	21a5      	movs	r1, #165	; 0xa5
 800cb00:	f002 f953 	bl	800edaa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	f023 0307 	bic.w	r3, r3, #7
 800cb1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	f003 0307 	and.w	r3, r3, #7
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d009      	beq.n	800cb3c <prvInitialiseNewTask+0x56>
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	e7fe      	b.n	800cb3a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d01f      	beq.n	800cb82 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	e012      	b.n	800cb6e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	7819      	ldrb	r1, [r3, #0]
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	4413      	add	r3, r2
 800cb56:	3334      	adds	r3, #52	; 0x34
 800cb58:	460a      	mov	r2, r1
 800cb5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	4413      	add	r3, r2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d006      	beq.n	800cb76 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	61fb      	str	r3, [r7, #28]
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	2b0f      	cmp	r3, #15
 800cb72:	d9e9      	bls.n	800cb48 <prvInitialiseNewTask+0x62>
 800cb74:	e000      	b.n	800cb78 <prvInitialiseNewTask+0x92>
			{
				break;
 800cb76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb80:	e003      	b.n	800cb8a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	2b37      	cmp	r3, #55	; 0x37
 800cb8e:	d901      	bls.n	800cb94 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb90:	2337      	movs	r3, #55	; 0x37
 800cb92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	2200      	movs	r2, #0
 800cba4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff f8d6 	bl	800bd5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	3318      	adds	r3, #24
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff f8d1 	bl	800bd5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	68f9      	ldr	r1, [r7, #12]
 800cbe2:	69b8      	ldr	r0, [r7, #24]
 800cbe4:	f001 f986 	bl	800def4 <pxPortInitialiseStack>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbfa:	bf00      	nop
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc0c:	f001 fa96 	bl	800e13c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc10:	4b2d      	ldr	r3, [pc, #180]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	4a2c      	ldr	r2, [pc, #176]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc1a:	4b2c      	ldr	r3, [pc, #176]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d109      	bne.n	800cc36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc28:	4b27      	ldr	r3, [pc, #156]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d110      	bne.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc30:	f000 fc82 	bl	800d538 <prvInitialiseTaskLists>
 800cc34:	e00d      	b.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc36:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <prvAddNewTaskToReadyList+0xcc>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc3e:	4b23      	ldr	r3, [pc, #140]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d802      	bhi.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc4c:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc52:	4b20      	ldr	r3, [pc, #128]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3301      	adds	r3, #1
 800cc58:	4a1e      	ldr	r2, [pc, #120]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc5c:	4b1d      	ldr	r3, [pc, #116]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc68:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <prvAddNewTaskToReadyList+0xd4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d903      	bls.n	800cc78 <prvAddNewTaskToReadyList+0x74>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	4a18      	ldr	r2, [pc, #96]	; (800ccd8 <prvAddNewTaskToReadyList+0xd4>)
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4a15      	ldr	r2, [pc, #84]	; (800ccdc <prvAddNewTaskToReadyList+0xd8>)
 800cc86:	441a      	add	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7ff f871 	bl	800bd76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc94:	f001 fa80 	bl	800e198 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc98:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <prvAddNewTaskToReadyList+0xcc>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00e      	beq.n	800ccbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d207      	bcs.n	800ccbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccae:	4b0c      	ldr	r3, [pc, #48]	; (800cce0 <prvAddNewTaskToReadyList+0xdc>)
 800ccb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20000c98 	.word	0x20000c98
 800cccc:	200007c4 	.word	0x200007c4
 800ccd0:	20000ca4 	.word	0x20000ca4
 800ccd4:	20000cb4 	.word	0x20000cb4
 800ccd8:	20000ca0 	.word	0x20000ca0
 800ccdc:	200007c8 	.word	0x200007c8
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08a      	sub	sp, #40	; 0x28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d109      	bne.n	800cd0c <vTaskDelayUntil+0x28>
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	e7fe      	b.n	800cd0a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d109      	bne.n	800cd26 <vTaskDelayUntil+0x42>
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	613b      	str	r3, [r7, #16]
 800cd24:	e7fe      	b.n	800cd24 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800cd26:	4b29      	ldr	r3, [pc, #164]	; (800cdcc <vTaskDelayUntil+0xe8>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d009      	beq.n	800cd42 <vTaskDelayUntil+0x5e>
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	e7fe      	b.n	800cd40 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800cd42:	f000 f8e1 	bl	800cf08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cd46:	4b22      	ldr	r3, [pc, #136]	; (800cdd0 <vTaskDelayUntil+0xec>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	4413      	add	r3, r2
 800cd54:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6a3a      	ldr	r2, [r7, #32]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d20b      	bcs.n	800cd78 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	69fa      	ldr	r2, [r7, #28]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d211      	bcs.n	800cd8e <vTaskDelayUntil+0xaa>
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d90d      	bls.n	800cd8e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
 800cd76:	e00a      	b.n	800cd8e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d303      	bcc.n	800cd8a <vTaskDelayUntil+0xa6>
 800cd82:	69fa      	ldr	r2, [r7, #28]
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d901      	bls.n	800cd8e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	69fa      	ldr	r2, [r7, #28]
 800cd92:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d006      	beq.n	800cda8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cd9a:	69fa      	ldr	r2, [r7, #28]
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	2100      	movs	r1, #0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 fd0c 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cda8:	f000 f8bc 	bl	800cf24 <xTaskResumeAll>
 800cdac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d107      	bne.n	800cdc4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800cdb4:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <vTaskDelayUntil+0xf0>)
 800cdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdc4:	bf00      	nop
 800cdc6:	3728      	adds	r7, #40	; 0x28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	20000cc0 	.word	0x20000cc0
 800cdd0:	20000c9c 	.word	0x20000c9c
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cde0:	2300      	movs	r3, #0
 800cde2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d016      	beq.n	800ce18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cdea:	4b13      	ldr	r3, [pc, #76]	; (800ce38 <vTaskDelay+0x60>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d009      	beq.n	800ce06 <vTaskDelay+0x2e>
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60bb      	str	r3, [r7, #8]
 800ce04:	e7fe      	b.n	800ce04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ce06:	f000 f87f 	bl	800cf08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fcd7 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce12:	f000 f887 	bl	800cf24 <xTaskResumeAll>
 800ce16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d107      	bne.n	800ce2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ce1e:	4b07      	ldr	r3, [pc, #28]	; (800ce3c <vTaskDelay+0x64>)
 800ce20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce2e:	bf00      	nop
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20000cc0 	.word	0x20000cc0
 800ce3c:	e000ed04 	.word	0xe000ed04

0800ce40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08a      	sub	sp, #40	; 0x28
 800ce44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce4e:	463a      	mov	r2, r7
 800ce50:	1d39      	adds	r1, r7, #4
 800ce52:	f107 0308 	add.w	r3, r7, #8
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe ff2c 	bl	800bcb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	9202      	str	r2, [sp, #8]
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	2300      	movs	r3, #0
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	460a      	mov	r2, r1
 800ce6e:	4920      	ldr	r1, [pc, #128]	; (800cef0 <vTaskStartScheduler+0xb0>)
 800ce70:	4820      	ldr	r0, [pc, #128]	; (800cef4 <vTaskStartScheduler+0xb4>)
 800ce72:	f7ff fd99 	bl	800c9a8 <xTaskCreateStatic>
 800ce76:	4602      	mov	r2, r0
 800ce78:	4b1f      	ldr	r3, [pc, #124]	; (800cef8 <vTaskStartScheduler+0xb8>)
 800ce7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce7c:	4b1e      	ldr	r3, [pc, #120]	; (800cef8 <vTaskStartScheduler+0xb8>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce84:	2301      	movs	r3, #1
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e001      	b.n	800ce8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d102      	bne.n	800ce9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce94:	f000 fce8 	bl	800d868 <xTimerCreateTimerTask>
 800ce98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d115      	bne.n	800cecc <vTaskStartScheduler+0x8c>
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ceb2:	4b12      	ldr	r3, [pc, #72]	; (800cefc <vTaskStartScheduler+0xbc>)
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ceba:	4b11      	ldr	r3, [pc, #68]	; (800cf00 <vTaskStartScheduler+0xc0>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cec0:	4b10      	ldr	r3, [pc, #64]	; (800cf04 <vTaskStartScheduler+0xc4>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cec6:	f001 f89b 	bl	800e000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ceca:	e00d      	b.n	800cee8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d109      	bne.n	800cee8 <vTaskStartScheduler+0xa8>
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e7fe      	b.n	800cee6 <vTaskStartScheduler+0xa6>
}
 800cee8:	bf00      	nop
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	0800fbe4 	.word	0x0800fbe4
 800cef4:	0800d509 	.word	0x0800d509
 800cef8:	20000cbc 	.word	0x20000cbc
 800cefc:	20000cb8 	.word	0x20000cb8
 800cf00:	20000ca4 	.word	0x20000ca4
 800cf04:	20000c9c 	.word	0x20000c9c

0800cf08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <vTaskSuspendAll+0x18>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3301      	adds	r3, #1
 800cf12:	4a03      	ldr	r2, [pc, #12]	; (800cf20 <vTaskSuspendAll+0x18>)
 800cf14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cf16:	bf00      	nop
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	20000cc0 	.word	0x20000cc0

0800cf24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf32:	4b41      	ldr	r3, [pc, #260]	; (800d038 <xTaskResumeAll+0x114>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <xTaskResumeAll+0x2a>
 800cf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	603b      	str	r3, [r7, #0]
 800cf4c:	e7fe      	b.n	800cf4c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf4e:	f001 f8f5 	bl	800e13c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf52:	4b39      	ldr	r3, [pc, #228]	; (800d038 <xTaskResumeAll+0x114>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	4a37      	ldr	r2, [pc, #220]	; (800d038 <xTaskResumeAll+0x114>)
 800cf5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf5c:	4b36      	ldr	r3, [pc, #216]	; (800d038 <xTaskResumeAll+0x114>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d162      	bne.n	800d02a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf64:	4b35      	ldr	r3, [pc, #212]	; (800d03c <xTaskResumeAll+0x118>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d05e      	beq.n	800d02a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf6c:	e02f      	b.n	800cfce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6e:	4b34      	ldr	r3, [pc, #208]	; (800d040 <xTaskResumeAll+0x11c>)
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3318      	adds	r3, #24
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe ff58 	bl	800be30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3304      	adds	r3, #4
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe ff53 	bl	800be30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8e:	4b2d      	ldr	r3, [pc, #180]	; (800d044 <xTaskResumeAll+0x120>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d903      	bls.n	800cf9e <xTaskResumeAll+0x7a>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9a:	4a2a      	ldr	r2, [pc, #168]	; (800d044 <xTaskResumeAll+0x120>)
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4a27      	ldr	r2, [pc, #156]	; (800d048 <xTaskResumeAll+0x124>)
 800cfac:	441a      	add	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	f7fe fede 	bl	800bd76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbe:	4b23      	ldr	r3, [pc, #140]	; (800d04c <xTaskResumeAll+0x128>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d302      	bcc.n	800cfce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cfc8:	4b21      	ldr	r3, [pc, #132]	; (800d050 <xTaskResumeAll+0x12c>)
 800cfca:	2201      	movs	r2, #1
 800cfcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfce:	4b1c      	ldr	r3, [pc, #112]	; (800d040 <xTaskResumeAll+0x11c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1cb      	bne.n	800cf6e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cfdc:	f000 fb46 	bl	800d66c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cfe0:	4b1c      	ldr	r3, [pc, #112]	; (800d054 <xTaskResumeAll+0x130>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d010      	beq.n	800d00e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cfec:	f000 f846 	bl	800d07c <xTaskIncrementTick>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cff6:	4b16      	ldr	r3, [pc, #88]	; (800d050 <xTaskResumeAll+0x12c>)
 800cff8:	2201      	movs	r2, #1
 800cffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3b01      	subs	r3, #1
 800d000:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1f1      	bne.n	800cfec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d008:	4b12      	ldr	r3, [pc, #72]	; (800d054 <xTaskResumeAll+0x130>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d00e:	4b10      	ldr	r3, [pc, #64]	; (800d050 <xTaskResumeAll+0x12c>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d009      	beq.n	800d02a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d016:	2301      	movs	r3, #1
 800d018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d01a:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <xTaskResumeAll+0x134>)
 800d01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d02a:	f001 f8b5 	bl	800e198 <vPortExitCritical>

	return xAlreadyYielded;
 800d02e:	68bb      	ldr	r3, [r7, #8]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	20000cc0 	.word	0x20000cc0
 800d03c:	20000c98 	.word	0x20000c98
 800d040:	20000c58 	.word	0x20000c58
 800d044:	20000ca0 	.word	0x20000ca0
 800d048:	200007c8 	.word	0x200007c8
 800d04c:	200007c4 	.word	0x200007c4
 800d050:	20000cac 	.word	0x20000cac
 800d054:	20000ca8 	.word	0x20000ca8
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <xTaskGetTickCount+0x1c>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d068:	687b      	ldr	r3, [r7, #4]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20000c9c 	.word	0x20000c9c

0800d07c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d082:	2300      	movs	r3, #0
 800d084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d086:	4b4e      	ldr	r3, [pc, #312]	; (800d1c0 <xTaskIncrementTick+0x144>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f040 8088 	bne.w	800d1a0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d090:	4b4c      	ldr	r3, [pc, #304]	; (800d1c4 <xTaskIncrementTick+0x148>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d098:	4a4a      	ldr	r2, [pc, #296]	; (800d1c4 <xTaskIncrementTick+0x148>)
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11f      	bne.n	800d0e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0a4:	4b48      	ldr	r3, [pc, #288]	; (800d1c8 <xTaskIncrementTick+0x14c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d009      	beq.n	800d0c2 <xTaskIncrementTick+0x46>
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	e7fe      	b.n	800d0c0 <xTaskIncrementTick+0x44>
 800d0c2:	4b41      	ldr	r3, [pc, #260]	; (800d1c8 <xTaskIncrementTick+0x14c>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	4b40      	ldr	r3, [pc, #256]	; (800d1cc <xTaskIncrementTick+0x150>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a3e      	ldr	r2, [pc, #248]	; (800d1c8 <xTaskIncrementTick+0x14c>)
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	4a3e      	ldr	r2, [pc, #248]	; (800d1cc <xTaskIncrementTick+0x150>)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	4b3e      	ldr	r3, [pc, #248]	; (800d1d0 <xTaskIncrementTick+0x154>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	4a3c      	ldr	r2, [pc, #240]	; (800d1d0 <xTaskIncrementTick+0x154>)
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	f000 fac4 	bl	800d66c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0e4:	4b3b      	ldr	r3, [pc, #236]	; (800d1d4 <xTaskIncrementTick+0x158>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d349      	bcc.n	800d182 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ee:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <xTaskIncrementTick+0x14c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d104      	bne.n	800d102 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0f8:	4b36      	ldr	r3, [pc, #216]	; (800d1d4 <xTaskIncrementTick+0x158>)
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	601a      	str	r2, [r3, #0]
					break;
 800d100:	e03f      	b.n	800d182 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d102:	4b31      	ldr	r3, [pc, #196]	; (800d1c8 <xTaskIncrementTick+0x14c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	429a      	cmp	r2, r3
 800d118:	d203      	bcs.n	800d122 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d11a:	4a2e      	ldr	r2, [pc, #184]	; (800d1d4 <xTaskIncrementTick+0x158>)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d120:	e02f      	b.n	800d182 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	3304      	adds	r3, #4
 800d126:	4618      	mov	r0, r3
 800d128:	f7fe fe82 	bl	800be30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	3318      	adds	r3, #24
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fe79 	bl	800be30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d142:	4b25      	ldr	r3, [pc, #148]	; (800d1d8 <xTaskIncrementTick+0x15c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d903      	bls.n	800d152 <xTaskIncrementTick+0xd6>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14e:	4a22      	ldr	r2, [pc, #136]	; (800d1d8 <xTaskIncrementTick+0x15c>)
 800d150:	6013      	str	r3, [r2, #0]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	4613      	mov	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4a1f      	ldr	r2, [pc, #124]	; (800d1dc <xTaskIncrementTick+0x160>)
 800d160:	441a      	add	r2, r3
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	3304      	adds	r3, #4
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f7fe fe04 	bl	800bd76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d172:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <xTaskIncrementTick+0x164>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	429a      	cmp	r2, r3
 800d17a:	d3b8      	bcc.n	800d0ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d17c:	2301      	movs	r3, #1
 800d17e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d180:	e7b5      	b.n	800d0ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d182:	4b17      	ldr	r3, [pc, #92]	; (800d1e0 <xTaskIncrementTick+0x164>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d188:	4914      	ldr	r1, [pc, #80]	; (800d1dc <xTaskIncrementTick+0x160>)
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	440b      	add	r3, r1
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d907      	bls.n	800d1aa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d19a:	2301      	movs	r3, #1
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e004      	b.n	800d1aa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d1a0:	4b10      	ldr	r3, [pc, #64]	; (800d1e4 <xTaskIncrementTick+0x168>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	4a0f      	ldr	r2, [pc, #60]	; (800d1e4 <xTaskIncrementTick+0x168>)
 800d1a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d1aa:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <xTaskIncrementTick+0x16c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d1b6:	697b      	ldr	r3, [r7, #20]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20000cc0 	.word	0x20000cc0
 800d1c4:	20000c9c 	.word	0x20000c9c
 800d1c8:	20000c50 	.word	0x20000c50
 800d1cc:	20000c54 	.word	0x20000c54
 800d1d0:	20000cb0 	.word	0x20000cb0
 800d1d4:	20000cb8 	.word	0x20000cb8
 800d1d8:	20000ca0 	.word	0x20000ca0
 800d1dc:	200007c8 	.word	0x200007c8
 800d1e0:	200007c4 	.word	0x200007c4
 800d1e4:	20000ca8 	.word	0x20000ca8
 800d1e8:	20000cac 	.word	0x20000cac

0800d1ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1f2:	4b27      	ldr	r3, [pc, #156]	; (800d290 <vTaskSwitchContext+0xa4>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1fa:	4b26      	ldr	r3, [pc, #152]	; (800d294 <vTaskSwitchContext+0xa8>)
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d200:	e040      	b.n	800d284 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d202:	4b24      	ldr	r3, [pc, #144]	; (800d294 <vTaskSwitchContext+0xa8>)
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d208:	4b23      	ldr	r3, [pc, #140]	; (800d298 <vTaskSwitchContext+0xac>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	e00f      	b.n	800d230 <vTaskSwitchContext+0x44>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d109      	bne.n	800d22a <vTaskSwitchContext+0x3e>
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	607b      	str	r3, [r7, #4]
 800d228:	e7fe      	b.n	800d228 <vTaskSwitchContext+0x3c>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	491a      	ldr	r1, [pc, #104]	; (800d29c <vTaskSwitchContext+0xb0>)
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	440b      	add	r3, r1
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0e5      	beq.n	800d210 <vTaskSwitchContext+0x24>
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4a13      	ldr	r2, [pc, #76]	; (800d29c <vTaskSwitchContext+0xb0>)
 800d250:	4413      	add	r3, r2
 800d252:	60bb      	str	r3, [r7, #8]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	605a      	str	r2, [r3, #4]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	3308      	adds	r3, #8
 800d266:	429a      	cmp	r2, r3
 800d268:	d104      	bne.n	800d274 <vTaskSwitchContext+0x88>
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	605a      	str	r2, [r3, #4]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <vTaskSwitchContext+0xb4>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	4a06      	ldr	r2, [pc, #24]	; (800d298 <vTaskSwitchContext+0xac>)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6013      	str	r3, [r2, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20000cc0 	.word	0x20000cc0
 800d294:	20000cac 	.word	0x20000cac
 800d298:	20000ca0 	.word	0x20000ca0
 800d29c:	200007c8 	.word	0x200007c8
 800d2a0:	200007c4 	.word	0x200007c4

0800d2a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d109      	bne.n	800d2c8 <vTaskPlaceOnEventList+0x24>
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	60fb      	str	r3, [r7, #12]
 800d2c6:	e7fe      	b.n	800d2c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2c8:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <vTaskPlaceOnEventList+0x44>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3318      	adds	r3, #24
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fe fd74 	bl	800bdbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	6838      	ldr	r0, [r7, #0]
 800d2da:	f000 fa71 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	200007c4 	.word	0x200007c4

0800d2ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d109      	bne.n	800d312 <vTaskPlaceOnEventListRestricted+0x26>
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	617b      	str	r3, [r7, #20]
 800d310:	e7fe      	b.n	800d310 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d312:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <vTaskPlaceOnEventListRestricted+0x50>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3318      	adds	r3, #24
 800d318:	4619      	mov	r1, r3
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7fe fd2b 	bl	800bd76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	68b8      	ldr	r0, [r7, #8]
 800d330:	f000 fa46 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
	}
 800d334:	bf00      	nop
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	200007c4 	.word	0x200007c4

0800d340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d109      	bne.n	800d36a <xTaskRemoveFromEventList+0x2a>
 800d356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	e7fe      	b.n	800d368 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	3318      	adds	r3, #24
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fd5e 	bl	800be30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d374:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <xTaskRemoveFromEventList+0xac>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d11d      	bne.n	800d3b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	3304      	adds	r3, #4
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fd55 	bl	800be30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38a:	4b19      	ldr	r3, [pc, #100]	; (800d3f0 <xTaskRemoveFromEventList+0xb0>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d903      	bls.n	800d39a <xTaskRemoveFromEventList+0x5a>
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	4a16      	ldr	r2, [pc, #88]	; (800d3f0 <xTaskRemoveFromEventList+0xb0>)
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39e:	4613      	mov	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4a13      	ldr	r2, [pc, #76]	; (800d3f4 <xTaskRemoveFromEventList+0xb4>)
 800d3a8:	441a      	add	r2, r3
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	f7fe fce0 	bl	800bd76 <vListInsertEnd>
 800d3b6:	e005      	b.n	800d3c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3318      	adds	r3, #24
 800d3bc:	4619      	mov	r1, r3
 800d3be:	480e      	ldr	r0, [pc, #56]	; (800d3f8 <xTaskRemoveFromEventList+0xb8>)
 800d3c0:	f7fe fcd9 	bl	800bd76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c8:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <xTaskRemoveFromEventList+0xbc>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d905      	bls.n	800d3de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <xTaskRemoveFromEventList+0xc0>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	e001      	b.n	800d3e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3e2:	697b      	ldr	r3, [r7, #20]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20000cc0 	.word	0x20000cc0
 800d3f0:	20000ca0 	.word	0x20000ca0
 800d3f4:	200007c8 	.word	0x200007c8
 800d3f8:	20000c58 	.word	0x20000c58
 800d3fc:	200007c4 	.word	0x200007c4
 800d400:	20000cac 	.word	0x20000cac

0800d404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <vTaskInternalSetTimeOutState+0x24>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d414:	4b05      	ldr	r3, [pc, #20]	; (800d42c <vTaskInternalSetTimeOutState+0x28>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	605a      	str	r2, [r3, #4]
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr
 800d428:	20000cb0 	.word	0x20000cb0
 800d42c:	20000c9c 	.word	0x20000c9c

0800d430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d109      	bne.n	800d454 <xTaskCheckForTimeOut+0x24>
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	613b      	str	r3, [r7, #16]
 800d452:	e7fe      	b.n	800d452 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <xTaskCheckForTimeOut+0x3e>
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	e7fe      	b.n	800d46c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d46e:	f000 fe65 	bl	800e13c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d472:	4b1d      	ldr	r3, [pc, #116]	; (800d4e8 <xTaskCheckForTimeOut+0xb8>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	d102      	bne.n	800d492 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d48c:	2300      	movs	r3, #0
 800d48e:	61fb      	str	r3, [r7, #28]
 800d490:	e023      	b.n	800d4da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	4b15      	ldr	r3, [pc, #84]	; (800d4ec <xTaskCheckForTimeOut+0xbc>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d007      	beq.n	800d4ae <xTaskCheckForTimeOut+0x7e>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d302      	bcc.n	800d4ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	61fb      	str	r3, [r7, #28]
 800d4ac:	e015      	b.n	800d4da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d20b      	bcs.n	800d4d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	1ad2      	subs	r2, r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff ff9d 	bl	800d404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61fb      	str	r3, [r7, #28]
 800d4ce:	e004      	b.n	800d4da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4da:	f000 fe5d 	bl	800e198 <vPortExitCritical>

	return xReturn;
 800d4de:	69fb      	ldr	r3, [r7, #28]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3720      	adds	r7, #32
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000c9c 	.word	0x20000c9c
 800d4ec:	20000cb0 	.word	0x20000cb0

0800d4f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4f4:	4b03      	ldr	r3, [pc, #12]	; (800d504 <vTaskMissedYield+0x14>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
}
 800d4fa:	bf00      	nop
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	20000cac 	.word	0x20000cac

0800d508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d510:	f000 f852 	bl	800d5b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d514:	4b06      	ldr	r3, [pc, #24]	; (800d530 <prvIdleTask+0x28>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d9f9      	bls.n	800d510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <prvIdleTask+0x2c>)
 800d51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d52c:	e7f0      	b.n	800d510 <prvIdleTask+0x8>
 800d52e:	bf00      	nop
 800d530:	200007c8 	.word	0x200007c8
 800d534:	e000ed04 	.word	0xe000ed04

0800d538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d53e:	2300      	movs	r3, #0
 800d540:	607b      	str	r3, [r7, #4]
 800d542:	e00c      	b.n	800d55e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4a12      	ldr	r2, [pc, #72]	; (800d598 <prvInitialiseTaskLists+0x60>)
 800d550:	4413      	add	r3, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fbe2 	bl	800bd1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3301      	adds	r3, #1
 800d55c:	607b      	str	r3, [r7, #4]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b37      	cmp	r3, #55	; 0x37
 800d562:	d9ef      	bls.n	800d544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d564:	480d      	ldr	r0, [pc, #52]	; (800d59c <prvInitialiseTaskLists+0x64>)
 800d566:	f7fe fbd9 	bl	800bd1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d56a:	480d      	ldr	r0, [pc, #52]	; (800d5a0 <prvInitialiseTaskLists+0x68>)
 800d56c:	f7fe fbd6 	bl	800bd1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d570:	480c      	ldr	r0, [pc, #48]	; (800d5a4 <prvInitialiseTaskLists+0x6c>)
 800d572:	f7fe fbd3 	bl	800bd1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d576:	480c      	ldr	r0, [pc, #48]	; (800d5a8 <prvInitialiseTaskLists+0x70>)
 800d578:	f7fe fbd0 	bl	800bd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d57c:	480b      	ldr	r0, [pc, #44]	; (800d5ac <prvInitialiseTaskLists+0x74>)
 800d57e:	f7fe fbcd 	bl	800bd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <prvInitialiseTaskLists+0x78>)
 800d584:	4a05      	ldr	r2, [pc, #20]	; (800d59c <prvInitialiseTaskLists+0x64>)
 800d586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d588:	4b0a      	ldr	r3, [pc, #40]	; (800d5b4 <prvInitialiseTaskLists+0x7c>)
 800d58a:	4a05      	ldr	r2, [pc, #20]	; (800d5a0 <prvInitialiseTaskLists+0x68>)
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	200007c8 	.word	0x200007c8
 800d59c:	20000c28 	.word	0x20000c28
 800d5a0:	20000c3c 	.word	0x20000c3c
 800d5a4:	20000c58 	.word	0x20000c58
 800d5a8:	20000c6c 	.word	0x20000c6c
 800d5ac:	20000c84 	.word	0x20000c84
 800d5b0:	20000c50 	.word	0x20000c50
 800d5b4:	20000c54 	.word	0x20000c54

0800d5b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5be:	e019      	b.n	800d5f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5c0:	f000 fdbc 	bl	800e13c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <prvCheckTasksWaitingTermination+0x4c>)
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fc2d 	bl	800be30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <prvCheckTasksWaitingTermination+0x50>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	4a0a      	ldr	r2, [pc, #40]	; (800d608 <prvCheckTasksWaitingTermination+0x50>)
 800d5de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5e0:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <prvCheckTasksWaitingTermination+0x54>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	4a09      	ldr	r2, [pc, #36]	; (800d60c <prvCheckTasksWaitingTermination+0x54>)
 800d5e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5ea:	f000 fdd5 	bl	800e198 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f80e 	bl	800d610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <prvCheckTasksWaitingTermination+0x54>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e1      	bne.n	800d5c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20000c6c 	.word	0x20000c6c
 800d608:	20000c98 	.word	0x20000c98
 800d60c:	20000c80 	.word	0x20000c80

0800d610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d108      	bne.n	800d634 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d626:	4618      	mov	r0, r3
 800d628:	f000 ff64 	bl	800e4f4 <vPortFree>
				vPortFree( pxTCB );
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 ff61 	bl	800e4f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d632:	e017      	b.n	800d664 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d103      	bne.n	800d646 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 ff58 	bl	800e4f4 <vPortFree>
	}
 800d644:	e00e      	b.n	800d664 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d009      	beq.n	800d664 <prvDeleteTCB+0x54>
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	60fb      	str	r3, [r7, #12]
 800d662:	e7fe      	b.n	800d662 <prvDeleteTCB+0x52>
	}
 800d664:	bf00      	nop
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d672:	4b0c      	ldr	r3, [pc, #48]	; (800d6a4 <prvResetNextTaskUnblockTime+0x38>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d67e:	f04f 32ff 	mov.w	r2, #4294967295
 800d682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d684:	e008      	b.n	800d698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d686:	4b07      	ldr	r3, [pc, #28]	; (800d6a4 <prvResetNextTaskUnblockTime+0x38>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	4a04      	ldr	r2, [pc, #16]	; (800d6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d696:	6013      	str	r3, [r2, #0]
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	20000c50 	.word	0x20000c50
 800d6a8:	20000cb8 	.word	0x20000cb8

0800d6ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <xTaskGetSchedulerState+0x34>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d102      	bne.n	800d6c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	e008      	b.n	800d6d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6c0:	4b08      	ldr	r3, [pc, #32]	; (800d6e4 <xTaskGetSchedulerState+0x38>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	607b      	str	r3, [r7, #4]
 800d6cc:	e001      	b.n	800d6d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6d2:	687b      	ldr	r3, [r7, #4]
	}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr
 800d6e0:	20000ca4 	.word	0x20000ca4
 800d6e4:	20000cc0 	.word	0x20000cc0

0800d6e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d054      	beq.n	800d7a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6fe:	4b2d      	ldr	r3, [pc, #180]	; (800d7b4 <xTaskPriorityDisinherit+0xcc>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	693a      	ldr	r2, [r7, #16]
 800d704:	429a      	cmp	r2, r3
 800d706:	d009      	beq.n	800d71c <xTaskPriorityDisinherit+0x34>
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	e7fe      	b.n	800d71a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d720:	2b00      	cmp	r3, #0
 800d722:	d109      	bne.n	800d738 <xTaskPriorityDisinherit+0x50>
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	60bb      	str	r3, [r7, #8]
 800d736:	e7fe      	b.n	800d736 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73c:	1e5a      	subs	r2, r3, #1
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d02c      	beq.n	800d7a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d752:	2b00      	cmp	r3, #0
 800d754:	d128      	bne.n	800d7a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	3304      	adds	r3, #4
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe fb68 	bl	800be30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d778:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <xTaskPriorityDisinherit+0xd0>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d903      	bls.n	800d788 <xTaskPriorityDisinherit+0xa0>
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d784:	4a0c      	ldr	r2, [pc, #48]	; (800d7b8 <xTaskPriorityDisinherit+0xd0>)
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78c:	4613      	mov	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4413      	add	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <xTaskPriorityDisinherit+0xd4>)
 800d796:	441a      	add	r2, r3
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	3304      	adds	r3, #4
 800d79c:	4619      	mov	r1, r3
 800d79e:	4610      	mov	r0, r2
 800d7a0:	f7fe fae9 	bl	800bd76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7a8:	697b      	ldr	r3, [r7, #20]
	}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	200007c4 	.word	0x200007c4
 800d7b8:	20000ca0 	.word	0x20000ca0
 800d7bc:	200007c8 	.word	0x200007c8

0800d7c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7ca:	4b21      	ldr	r3, [pc, #132]	; (800d850 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7d0:	4b20      	ldr	r3, [pc, #128]	; (800d854 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe fb2a 	bl	800be30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e2:	d10a      	bne.n	800d7fa <prvAddCurrentTaskToDelayedList+0x3a>
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d007      	beq.n	800d7fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7ea:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4819      	ldr	r0, [pc, #100]	; (800d858 <prvAddCurrentTaskToDelayedList+0x98>)
 800d7f4:	f7fe fabf 	bl	800bd76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7f8:	e026      	b.n	800d848 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4413      	add	r3, r2
 800d800:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d802:	4b14      	ldr	r3, [pc, #80]	; (800d854 <prvAddCurrentTaskToDelayedList+0x94>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d209      	bcs.n	800d826 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d812:	4b12      	ldr	r3, [pc, #72]	; (800d85c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	4b0f      	ldr	r3, [pc, #60]	; (800d854 <prvAddCurrentTaskToDelayedList+0x94>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3304      	adds	r3, #4
 800d81c:	4619      	mov	r1, r3
 800d81e:	4610      	mov	r0, r2
 800d820:	f7fe facd 	bl	800bdbe <vListInsert>
}
 800d824:	e010      	b.n	800d848 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d826:	4b0e      	ldr	r3, [pc, #56]	; (800d860 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <prvAddCurrentTaskToDelayedList+0x94>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3304      	adds	r3, #4
 800d830:	4619      	mov	r1, r3
 800d832:	4610      	mov	r0, r2
 800d834:	f7fe fac3 	bl	800bdbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d202      	bcs.n	800d848 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d842:	4a08      	ldr	r2, [pc, #32]	; (800d864 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	6013      	str	r3, [r2, #0]
}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20000c9c 	.word	0x20000c9c
 800d854:	200007c4 	.word	0x200007c4
 800d858:	20000c84 	.word	0x20000c84
 800d85c:	20000c54 	.word	0x20000c54
 800d860:	20000c50 	.word	0x20000c50
 800d864:	20000cb8 	.word	0x20000cb8

0800d868 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08a      	sub	sp, #40	; 0x28
 800d86c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d86e:	2300      	movs	r3, #0
 800d870:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d872:	f000 faff 	bl	800de74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d876:	4b1c      	ldr	r3, [pc, #112]	; (800d8e8 <xTimerCreateTimerTask+0x80>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d021      	beq.n	800d8c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d87e:	2300      	movs	r3, #0
 800d880:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d882:	2300      	movs	r3, #0
 800d884:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d886:	1d3a      	adds	r2, r7, #4
 800d888:	f107 0108 	add.w	r1, r7, #8
 800d88c:	f107 030c 	add.w	r3, r7, #12
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fa29 	bl	800bce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d896:	6879      	ldr	r1, [r7, #4]
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	9202      	str	r2, [sp, #8]
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	460a      	mov	r2, r1
 800d8a8:	4910      	ldr	r1, [pc, #64]	; (800d8ec <xTimerCreateTimerTask+0x84>)
 800d8aa:	4811      	ldr	r0, [pc, #68]	; (800d8f0 <xTimerCreateTimerTask+0x88>)
 800d8ac:	f7ff f87c 	bl	800c9a8 <xTaskCreateStatic>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	4b10      	ldr	r3, [pc, #64]	; (800d8f4 <xTimerCreateTimerTask+0x8c>)
 800d8b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8b6:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <xTimerCreateTimerTask+0x8c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <xTimerCreateTimerTask+0x74>
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	613b      	str	r3, [r7, #16]
 800d8da:	e7fe      	b.n	800d8da <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d8dc:	697b      	ldr	r3, [r7, #20]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000cf4 	.word	0x20000cf4
 800d8ec:	0800fbec 	.word	0x0800fbec
 800d8f0:	0800da29 	.word	0x0800da29
 800d8f4:	20000cf8 	.word	0x20000cf8

0800d8f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08a      	sub	sp, #40	; 0x28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d906:	2300      	movs	r3, #0
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d109      	bne.n	800d924 <xTimerGenericCommand+0x2c>
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	623b      	str	r3, [r7, #32]
 800d922:	e7fe      	b.n	800d922 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d924:	4b19      	ldr	r3, [pc, #100]	; (800d98c <xTimerGenericCommand+0x94>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d02a      	beq.n	800d982 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b05      	cmp	r3, #5
 800d93c:	dc18      	bgt.n	800d970 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d93e:	f7ff feb5 	bl	800d6ac <xTaskGetSchedulerState>
 800d942:	4603      	mov	r3, r0
 800d944:	2b02      	cmp	r3, #2
 800d946:	d109      	bne.n	800d95c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d948:	4b10      	ldr	r3, [pc, #64]	; (800d98c <xTimerGenericCommand+0x94>)
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	f107 0110 	add.w	r1, r7, #16
 800d950:	2300      	movs	r3, #0
 800d952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d954:	f7fe fbd4 	bl	800c100 <xQueueGenericSend>
 800d958:	6278      	str	r0, [r7, #36]	; 0x24
 800d95a:	e012      	b.n	800d982 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d95c:	4b0b      	ldr	r3, [pc, #44]	; (800d98c <xTimerGenericCommand+0x94>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	f107 0110 	add.w	r1, r7, #16
 800d964:	2300      	movs	r3, #0
 800d966:	2200      	movs	r2, #0
 800d968:	f7fe fbca 	bl	800c100 <xQueueGenericSend>
 800d96c:	6278      	str	r0, [r7, #36]	; 0x24
 800d96e:	e008      	b.n	800d982 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d970:	4b06      	ldr	r3, [pc, #24]	; (800d98c <xTimerGenericCommand+0x94>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	f107 0110 	add.w	r1, r7, #16
 800d978:	2300      	movs	r3, #0
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	f7fe fcba 	bl	800c2f4 <xQueueGenericSendFromISR>
 800d980:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d984:	4618      	mov	r0, r3
 800d986:	3728      	adds	r7, #40	; 0x28
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	20000cf4 	.word	0x20000cf4

0800d990 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af02      	add	r7, sp, #8
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d99a:	4b22      	ldr	r3, [pc, #136]	; (800da24 <prvProcessExpiredTimer+0x94>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe fa41 	bl	800be30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d021      	beq.n	800da00 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	699a      	ldr	r2, [r3, #24]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	18d1      	adds	r1, r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	6978      	ldr	r0, [r7, #20]
 800d9ca:	f000 f8d1 	bl	800db70 <prvInsertTimerInActiveList>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01e      	beq.n	800da12 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	2100      	movs	r1, #0
 800d9de:	6978      	ldr	r0, [r7, #20]
 800d9e0:	f7ff ff8a 	bl	800d8f8 <xTimerGenericCommand>
 800d9e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d112      	bne.n	800da12 <prvProcessExpiredTimer+0x82>
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e7fe      	b.n	800d9fe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	6a1b      	ldr	r3, [r3, #32]
 800da16:	6978      	ldr	r0, [r7, #20]
 800da18:	4798      	blx	r3
}
 800da1a:	bf00      	nop
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20000cec 	.word	0x20000cec

0800da28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da30:	f107 0308 	add.w	r3, r7, #8
 800da34:	4618      	mov	r0, r3
 800da36:	f000 f857 	bl	800dae8 <prvGetNextExpireTime>
 800da3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	4619      	mov	r1, r3
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f803 	bl	800da4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da46:	f000 f8d5 	bl	800dbf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da4a:	e7f1      	b.n	800da30 <prvTimerTask+0x8>

0800da4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da56:	f7ff fa57 	bl	800cf08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da5a:	f107 0308 	add.w	r3, r7, #8
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 f866 	bl	800db30 <prvSampleTimeNow>
 800da64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d130      	bne.n	800dace <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10a      	bne.n	800da88 <prvProcessTimerOrBlockTask+0x3c>
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	429a      	cmp	r2, r3
 800da78:	d806      	bhi.n	800da88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da7a:	f7ff fa53 	bl	800cf24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff ff85 	bl	800d990 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da86:	e024      	b.n	800dad2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d008      	beq.n	800daa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <prvProcessTimerOrBlockTask+0x90>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <prvProcessTimerOrBlockTask+0x50>
 800da98:	2301      	movs	r3, #1
 800da9a:	e000      	b.n	800da9e <prvProcessTimerOrBlockTask+0x52>
 800da9c:	2300      	movs	r3, #0
 800da9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800daa0:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <prvProcessTimerOrBlockTask+0x94>)
 800daa2:	6818      	ldr	r0, [r3, #0]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	4619      	mov	r1, r3
 800daae:	f7fe ff47 	bl	800c940 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dab2:	f7ff fa37 	bl	800cf24 <xTaskResumeAll>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10a      	bne.n	800dad2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dabc:	4b09      	ldr	r3, [pc, #36]	; (800dae4 <prvProcessTimerOrBlockTask+0x98>)
 800dabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	f3bf 8f6f 	isb	sy
}
 800dacc:	e001      	b.n	800dad2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dace:	f7ff fa29 	bl	800cf24 <xTaskResumeAll>
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000cf0 	.word	0x20000cf0
 800dae0:	20000cf4 	.word	0x20000cf4
 800dae4:	e000ed04 	.word	0xe000ed04

0800dae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800daf0:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <prvGetNextExpireTime+0x44>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <prvGetNextExpireTime+0x16>
 800dafa:	2201      	movs	r2, #1
 800dafc:	e000      	b.n	800db00 <prvGetNextExpireTime+0x18>
 800dafe:	2200      	movs	r2, #0
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d105      	bne.n	800db18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db0c:	4b07      	ldr	r3, [pc, #28]	; (800db2c <prvGetNextExpireTime+0x44>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	e001      	b.n	800db1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db1c:	68fb      	ldr	r3, [r7, #12]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	20000cec 	.word	0x20000cec

0800db30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db38:	f7ff fa90 	bl	800d05c <xTaskGetTickCount>
 800db3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db3e:	4b0b      	ldr	r3, [pc, #44]	; (800db6c <prvSampleTimeNow+0x3c>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	429a      	cmp	r2, r3
 800db46:	d205      	bcs.n	800db54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db48:	f000 f930 	bl	800ddac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	601a      	str	r2, [r3, #0]
 800db52:	e002      	b.n	800db5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db5a:	4a04      	ldr	r2, [pc, #16]	; (800db6c <prvSampleTimeNow+0x3c>)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db60:	68fb      	ldr	r3, [r7, #12]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	20000cfc 	.word	0x20000cfc

0800db70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db7e:	2300      	movs	r3, #0
 800db80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d812      	bhi.n	800dbbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	1ad2      	subs	r2, r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d302      	bcc.n	800dbaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dba4:	2301      	movs	r3, #1
 800dba6:	617b      	str	r3, [r7, #20]
 800dba8:	e01b      	b.n	800dbe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbaa:	4b10      	ldr	r3, [pc, #64]	; (800dbec <prvInsertTimerInActiveList+0x7c>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f7fe f902 	bl	800bdbe <vListInsert>
 800dbba:	e012      	b.n	800dbe2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d206      	bcs.n	800dbd2 <prvInsertTimerInActiveList+0x62>
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d302      	bcc.n	800dbd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	617b      	str	r3, [r7, #20]
 800dbd0:	e007      	b.n	800dbe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbd2:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <prvInsertTimerInActiveList+0x80>)
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7fe f8ee 	bl	800bdbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbe2:	697b      	ldr	r3, [r7, #20]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3718      	adds	r7, #24
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20000cf0 	.word	0x20000cf0
 800dbf0:	20000cec 	.word	0x20000cec

0800dbf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08e      	sub	sp, #56	; 0x38
 800dbf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbfa:	e0c6      	b.n	800dd8a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da17      	bge.n	800dc32 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc02:	1d3b      	adds	r3, r7, #4
 800dc04:	3304      	adds	r3, #4
 800dc06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d109      	bne.n	800dc22 <prvProcessReceivedCommands+0x2e>
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	61fb      	str	r3, [r7, #28]
 800dc20:	e7fe      	b.n	800dc20 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc28:	6850      	ldr	r0, [r2, #4]
 800dc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc2c:	6892      	ldr	r2, [r2, #8]
 800dc2e:	4611      	mov	r1, r2
 800dc30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f2c0 80a7 	blt.w	800dd88 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d004      	beq.n	800dc50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	3304      	adds	r3, #4
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fe f8f0 	bl	800be30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc50:	463b      	mov	r3, r7
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff ff6c 	bl	800db30 <prvSampleTimeNow>
 800dc58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b09      	cmp	r3, #9
 800dc5e:	f200 8094 	bhi.w	800dd8a <prvProcessReceivedCommands+0x196>
 800dc62:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <prvProcessReceivedCommands+0x74>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dc91 	.word	0x0800dc91
 800dc6c:	0800dc91 	.word	0x0800dc91
 800dc70:	0800dc91 	.word	0x0800dc91
 800dc74:	0800dd03 	.word	0x0800dd03
 800dc78:	0800dd17 	.word	0x0800dd17
 800dc7c:	0800dd5f 	.word	0x0800dd5f
 800dc80:	0800dc91 	.word	0x0800dc91
 800dc84:	0800dc91 	.word	0x0800dc91
 800dc88:	0800dd03 	.word	0x0800dd03
 800dc8c:	0800dd17 	.word	0x0800dd17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc96:	f043 0301 	orr.w	r3, r3, #1
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	18d1      	adds	r1, r2, r3
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb0:	f7ff ff5e 	bl	800db70 <prvInsertTimerInActiveList>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d067      	beq.n	800dd8a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcc8:	f003 0304 	and.w	r3, r3, #4
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d05c      	beq.n	800dd8a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	441a      	add	r2, r3
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	2100      	movs	r1, #0
 800dce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce2:	f7ff fe09 	bl	800d8f8 <xTimerGenericCommand>
 800dce6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d14d      	bne.n	800dd8a <prvProcessReceivedCommands+0x196>
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	e7fe      	b.n	800dd00 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd08:	f023 0301 	bic.w	r3, r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd14:	e039      	b.n	800dd8a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd1c:	f043 0301 	orr.w	r3, r3, #1
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d109      	bne.n	800dd4a <prvProcessReceivedCommands+0x156>
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	e7fe      	b.n	800dd48 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	699a      	ldr	r2, [r3, #24]
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	18d1      	adds	r1, r2, r3
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd58:	f7ff ff0a 	bl	800db70 <prvInsertTimerInActiveList>
					break;
 800dd5c:	e015      	b.n	800dd8a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd64:	f003 0302 	and.w	r3, r3, #2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d103      	bne.n	800dd74 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800dd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd6e:	f000 fbc1 	bl	800e4f4 <vPortFree>
 800dd72:	e00a      	b.n	800dd8a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7a:	f023 0301 	bic.w	r3, r3, #1
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd86:	e000      	b.n	800dd8a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd8a:	4b07      	ldr	r3, [pc, #28]	; (800dda8 <prvProcessReceivedCommands+0x1b4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	1d39      	adds	r1, r7, #4
 800dd90:	2200      	movs	r2, #0
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe fb42 	bl	800c41c <xQueueReceive>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f47f af2e 	bne.w	800dbfc <prvProcessReceivedCommands+0x8>
	}
}
 800dda0:	bf00      	nop
 800dda2:	3730      	adds	r7, #48	; 0x30
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20000cf4 	.word	0x20000cf4

0800ddac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddb2:	e047      	b.n	800de44 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddb4:	4b2d      	ldr	r3, [pc, #180]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddbe:	4b2b      	ldr	r3, [pc, #172]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe f82f 	bl	800be30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d02d      	beq.n	800de44 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	4413      	add	r3, r2
 800ddf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d90e      	bls.n	800de18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de06:	4b19      	ldr	r3, [pc, #100]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fd ffd4 	bl	800bdbe <vListInsert>
 800de16:	e015      	b.n	800de44 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de18:	2300      	movs	r3, #0
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	2300      	movs	r3, #0
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	2100      	movs	r1, #0
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f7ff fd68 	bl	800d8f8 <xTimerGenericCommand>
 800de28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d109      	bne.n	800de44 <prvSwitchTimerLists+0x98>
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	e7fe      	b.n	800de42 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1b2      	bne.n	800ddb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de54:	4b06      	ldr	r3, [pc, #24]	; (800de70 <prvSwitchTimerLists+0xc4>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a04      	ldr	r2, [pc, #16]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de5c:	4a04      	ldr	r2, [pc, #16]	; (800de70 <prvSwitchTimerLists+0xc4>)
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6013      	str	r3, [r2, #0]
}
 800de62:	bf00      	nop
 800de64:	3718      	adds	r7, #24
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20000cec 	.word	0x20000cec
 800de70:	20000cf0 	.word	0x20000cf0

0800de74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de7a:	f000 f95f 	bl	800e13c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de7e:	4b15      	ldr	r3, [pc, #84]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d120      	bne.n	800dec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de86:	4814      	ldr	r0, [pc, #80]	; (800ded8 <prvCheckForValidListAndQueue+0x64>)
 800de88:	f7fd ff48 	bl	800bd1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de8c:	4813      	ldr	r0, [pc, #76]	; (800dedc <prvCheckForValidListAndQueue+0x68>)
 800de8e:	f7fd ff45 	bl	800bd1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <prvCheckForValidListAndQueue+0x6c>)
 800de94:	4a10      	ldr	r2, [pc, #64]	; (800ded8 <prvCheckForValidListAndQueue+0x64>)
 800de96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de98:	4b12      	ldr	r3, [pc, #72]	; (800dee4 <prvCheckForValidListAndQueue+0x70>)
 800de9a:	4a10      	ldr	r2, [pc, #64]	; (800dedc <prvCheckForValidListAndQueue+0x68>)
 800de9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de9e:	2300      	movs	r3, #0
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	4b11      	ldr	r3, [pc, #68]	; (800dee8 <prvCheckForValidListAndQueue+0x74>)
 800dea4:	4a11      	ldr	r2, [pc, #68]	; (800deec <prvCheckForValidListAndQueue+0x78>)
 800dea6:	2110      	movs	r1, #16
 800dea8:	200a      	movs	r0, #10
 800deaa:	f7fe f853 	bl	800bf54 <xQueueGenericCreateStatic>
 800deae:	4602      	mov	r2, r0
 800deb0:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800deb2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800deb4:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800debc:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	490b      	ldr	r1, [pc, #44]	; (800def0 <prvCheckForValidListAndQueue+0x7c>)
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe fd14 	bl	800c8f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dec8:	f000 f966 	bl	800e198 <vPortExitCritical>
}
 800decc:	bf00      	nop
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000cf4 	.word	0x20000cf4
 800ded8:	20000cc4 	.word	0x20000cc4
 800dedc:	20000cd8 	.word	0x20000cd8
 800dee0:	20000cec 	.word	0x20000cec
 800dee4:	20000cf0 	.word	0x20000cf0
 800dee8:	20000da0 	.word	0x20000da0
 800deec:	20000d00 	.word	0x20000d00
 800def0:	0800fbf4 	.word	0x0800fbf4

0800def4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3b04      	subs	r3, #4
 800df04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3b04      	subs	r3, #4
 800df12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	f023 0201 	bic.w	r2, r3, #1
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3b04      	subs	r3, #4
 800df22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df24:	4a0c      	ldr	r2, [pc, #48]	; (800df58 <pxPortInitialiseStack+0x64>)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3b14      	subs	r3, #20
 800df2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3b04      	subs	r3, #4
 800df3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f06f 0202 	mvn.w	r2, #2
 800df42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3b20      	subs	r3, #32
 800df48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df4a:	68fb      	ldr	r3, [r7, #12]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	0800df5d 	.word	0x0800df5d

0800df5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <prvTaskExitError+0x50>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6e:	d009      	beq.n	800df84 <prvTaskExitError+0x28>
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e7fe      	b.n	800df82 <prvTaskExitError+0x26>
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df96:	bf00      	nop
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0fc      	beq.n	800df98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000034 	.word	0x20000034

0800dfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfb0:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <pxCurrentTCBConst2>)
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	6808      	ldr	r0, [r1, #0]
 800dfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfba:	f380 8809 	msr	PSP, r0
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f04f 0000 	mov.w	r0, #0
 800dfc6:	f380 8811 	msr	BASEPRI, r0
 800dfca:	4770      	bx	lr
 800dfcc:	f3af 8000 	nop.w

0800dfd0 <pxCurrentTCBConst2>:
 800dfd0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfd4:	bf00      	nop
 800dfd6:	bf00      	nop

0800dfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfd8:	4808      	ldr	r0, [pc, #32]	; (800dffc <prvPortStartFirstTask+0x24>)
 800dfda:	6800      	ldr	r0, [r0, #0]
 800dfdc:	6800      	ldr	r0, [r0, #0]
 800dfde:	f380 8808 	msr	MSP, r0
 800dfe2:	f04f 0000 	mov.w	r0, #0
 800dfe6:	f380 8814 	msr	CONTROL, r0
 800dfea:	b662      	cpsie	i
 800dfec:	b661      	cpsie	f
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	df00      	svc	0
 800dff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dffa:	bf00      	nop
 800dffc:	e000ed08 	.word	0xe000ed08

0800e000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e006:	4b44      	ldr	r3, [pc, #272]	; (800e118 <xPortStartScheduler+0x118>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a44      	ldr	r2, [pc, #272]	; (800e11c <xPortStartScheduler+0x11c>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d109      	bne.n	800e024 <xPortStartScheduler+0x24>
 800e010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	613b      	str	r3, [r7, #16]
 800e022:	e7fe      	b.n	800e022 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e024:	4b3c      	ldr	r3, [pc, #240]	; (800e118 <xPortStartScheduler+0x118>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a3d      	ldr	r2, [pc, #244]	; (800e120 <xPortStartScheduler+0x120>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d109      	bne.n	800e042 <xPortStartScheduler+0x42>
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	60fb      	str	r3, [r7, #12]
 800e040:	e7fe      	b.n	800e040 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e042:	4b38      	ldr	r3, [pc, #224]	; (800e124 <xPortStartScheduler+0x124>)
 800e044:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	22ff      	movs	r2, #255	; 0xff
 800e052:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e05c:	78fb      	ldrb	r3, [r7, #3]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e064:	b2da      	uxtb	r2, r3
 800e066:	4b30      	ldr	r3, [pc, #192]	; (800e128 <xPortStartScheduler+0x128>)
 800e068:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e06a:	4b30      	ldr	r3, [pc, #192]	; (800e12c <xPortStartScheduler+0x12c>)
 800e06c:	2207      	movs	r2, #7
 800e06e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e070:	e009      	b.n	800e086 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e072:	4b2e      	ldr	r3, [pc, #184]	; (800e12c <xPortStartScheduler+0x12c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3b01      	subs	r3, #1
 800e078:	4a2c      	ldr	r2, [pc, #176]	; (800e12c <xPortStartScheduler+0x12c>)
 800e07a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e07c:	78fb      	ldrb	r3, [r7, #3]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	b2db      	uxtb	r3, r3
 800e084:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e086:	78fb      	ldrb	r3, [r7, #3]
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e08e:	2b80      	cmp	r3, #128	; 0x80
 800e090:	d0ef      	beq.n	800e072 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e092:	4b26      	ldr	r3, [pc, #152]	; (800e12c <xPortStartScheduler+0x12c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f1c3 0307 	rsb	r3, r3, #7
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	d009      	beq.n	800e0b2 <xPortStartScheduler+0xb2>
 800e09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	60bb      	str	r3, [r7, #8]
 800e0b0:	e7fe      	b.n	800e0b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0b2:	4b1e      	ldr	r3, [pc, #120]	; (800e12c <xPortStartScheduler+0x12c>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	4a1c      	ldr	r2, [pc, #112]	; (800e12c <xPortStartScheduler+0x12c>)
 800e0ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0bc:	4b1b      	ldr	r3, [pc, #108]	; (800e12c <xPortStartScheduler+0x12c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0c4:	4a19      	ldr	r2, [pc, #100]	; (800e12c <xPortStartScheduler+0x12c>)
 800e0c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0d0:	4b17      	ldr	r3, [pc, #92]	; (800e130 <xPortStartScheduler+0x130>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a16      	ldr	r2, [pc, #88]	; (800e130 <xPortStartScheduler+0x130>)
 800e0d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0dc:	4b14      	ldr	r3, [pc, #80]	; (800e130 <xPortStartScheduler+0x130>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a13      	ldr	r2, [pc, #76]	; (800e130 <xPortStartScheduler+0x130>)
 800e0e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e0e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0e8:	f000 f8d6 	bl	800e298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0ec:	4b11      	ldr	r3, [pc, #68]	; (800e134 <xPortStartScheduler+0x134>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0f2:	f000 f8f5 	bl	800e2e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0f6:	4b10      	ldr	r3, [pc, #64]	; (800e138 <xPortStartScheduler+0x138>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a0f      	ldr	r2, [pc, #60]	; (800e138 <xPortStartScheduler+0x138>)
 800e0fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e100:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e102:	f7ff ff69 	bl	800dfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e106:	f7ff f871 	bl	800d1ec <vTaskSwitchContext>
	prvTaskExitError();
 800e10a:	f7ff ff27 	bl	800df5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	e000ed00 	.word	0xe000ed00
 800e11c:	410fc271 	.word	0x410fc271
 800e120:	410fc270 	.word	0x410fc270
 800e124:	e000e400 	.word	0xe000e400
 800e128:	20000df0 	.word	0x20000df0
 800e12c:	20000df4 	.word	0x20000df4
 800e130:	e000ed20 	.word	0xe000ed20
 800e134:	20000034 	.word	0x20000034
 800e138:	e000ef34 	.word	0xe000ef34

0800e13c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e154:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <vPortEnterCritical+0x54>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	4a0d      	ldr	r2, [pc, #52]	; (800e190 <vPortEnterCritical+0x54>)
 800e15c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e15e:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <vPortEnterCritical+0x54>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d10e      	bne.n	800e184 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <vPortEnterCritical+0x58>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d009      	beq.n	800e184 <vPortEnterCritical+0x48>
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	e7fe      	b.n	800e182 <vPortEnterCritical+0x46>
	}
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	20000034 	.word	0x20000034
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e19e:	4b11      	ldr	r3, [pc, #68]	; (800e1e4 <vPortExitCritical+0x4c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d109      	bne.n	800e1ba <vPortExitCritical+0x22>
 800e1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	607b      	str	r3, [r7, #4]
 800e1b8:	e7fe      	b.n	800e1b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e1ba:	4b0a      	ldr	r3, [pc, #40]	; (800e1e4 <vPortExitCritical+0x4c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <vPortExitCritical+0x4c>)
 800e1c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1c4:	4b07      	ldr	r3, [pc, #28]	; (800e1e4 <vPortExitCritical+0x4c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d104      	bne.n	800e1d6 <vPortExitCritical+0x3e>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1d6:	bf00      	nop
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop
 800e1e4:	20000034 	.word	0x20000034
	...

0800e1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1f0:	f3ef 8009 	mrs	r0, PSP
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	4b15      	ldr	r3, [pc, #84]	; (800e250 <pxCurrentTCBConst>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	f01e 0f10 	tst.w	lr, #16
 800e200:	bf08      	it	eq
 800e202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20a:	6010      	str	r0, [r2, #0]
 800e20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e214:	f380 8811 	msr	BASEPRI, r0
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f7fe ffe4 	bl	800d1ec <vTaskSwitchContext>
 800e224:	f04f 0000 	mov.w	r0, #0
 800e228:	f380 8811 	msr	BASEPRI, r0
 800e22c:	bc09      	pop	{r0, r3}
 800e22e:	6819      	ldr	r1, [r3, #0]
 800e230:	6808      	ldr	r0, [r1, #0]
 800e232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e236:	f01e 0f10 	tst.w	lr, #16
 800e23a:	bf08      	it	eq
 800e23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e240:	f380 8809 	msr	PSP, r0
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	f3af 8000 	nop.w

0800e250 <pxCurrentTCBConst>:
 800e250:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop

0800e258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e270:	f7fe ff04 	bl	800d07c <xTaskIncrementTick>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d003      	beq.n	800e282 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e27a:	4b06      	ldr	r3, [pc, #24]	; (800e294 <SysTick_Handler+0x3c>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	2300      	movs	r3, #0
 800e284:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e28c:	bf00      	nop
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e298:	b480      	push	{r7}
 800e29a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e29c:	4b0b      	ldr	r3, [pc, #44]	; (800e2cc <vPortSetupTimerInterrupt+0x34>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2a2:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <vPortSetupTimerInterrupt+0x38>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2a8:	4b0a      	ldr	r3, [pc, #40]	; (800e2d4 <vPortSetupTimerInterrupt+0x3c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a0a      	ldr	r2, [pc, #40]	; (800e2d8 <vPortSetupTimerInterrupt+0x40>)
 800e2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b2:	099b      	lsrs	r3, r3, #6
 800e2b4:	4a09      	ldr	r2, [pc, #36]	; (800e2dc <vPortSetupTimerInterrupt+0x44>)
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2ba:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <vPortSetupTimerInterrupt+0x34>)
 800e2bc:	2207      	movs	r2, #7
 800e2be:	601a      	str	r2, [r3, #0]
}
 800e2c0:	bf00      	nop
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	e000e010 	.word	0xe000e010
 800e2d0:	e000e018 	.word	0xe000e018
 800e2d4:	20000008 	.word	0x20000008
 800e2d8:	10624dd3 	.word	0x10624dd3
 800e2dc:	e000e014 	.word	0xe000e014

0800e2e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2f0 <vPortEnableVFP+0x10>
 800e2e4:	6801      	ldr	r1, [r0, #0]
 800e2e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e2ea:	6001      	str	r1, [r0, #0]
 800e2ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2ee:	bf00      	nop
 800e2f0:	e000ed88 	.word	0xe000ed88

0800e2f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2fa:	f3ef 8305 	mrs	r3, IPSR
 800e2fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b0f      	cmp	r3, #15
 800e304:	d913      	bls.n	800e32e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e306:	4a16      	ldr	r2, [pc, #88]	; (800e360 <vPortValidateInterruptPriority+0x6c>)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4413      	add	r3, r2
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e310:	4b14      	ldr	r3, [pc, #80]	; (800e364 <vPortValidateInterruptPriority+0x70>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	7afa      	ldrb	r2, [r7, #11]
 800e316:	429a      	cmp	r2, r3
 800e318:	d209      	bcs.n	800e32e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	607b      	str	r3, [r7, #4]
 800e32c:	e7fe      	b.n	800e32c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e32e:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <vPortValidateInterruptPriority+0x74>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e336:	4b0d      	ldr	r3, [pc, #52]	; (800e36c <vPortValidateInterruptPriority+0x78>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d909      	bls.n	800e352 <vPortValidateInterruptPriority+0x5e>
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	e7fe      	b.n	800e350 <vPortValidateInterruptPriority+0x5c>
	}
 800e352:	bf00      	nop
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	e000e3f0 	.word	0xe000e3f0
 800e364:	20000df0 	.word	0x20000df0
 800e368:	e000ed0c 	.word	0xe000ed0c
 800e36c:	20000df4 	.word	0x20000df4

0800e370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	; 0x28
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e37c:	f7fe fdc4 	bl	800cf08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e380:	4b57      	ldr	r3, [pc, #348]	; (800e4e0 <pvPortMalloc+0x170>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e388:	f000 f90c 	bl	800e5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e38c:	4b55      	ldr	r3, [pc, #340]	; (800e4e4 <pvPortMalloc+0x174>)
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4013      	ands	r3, r2
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 808c 	bne.w	800e4b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d01c      	beq.n	800e3da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e3a0:	2208      	movs	r2, #8
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f003 0307 	and.w	r3, r3, #7
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d013      	beq.n	800e3da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f023 0307 	bic.w	r3, r3, #7
 800e3b8:	3308      	adds	r3, #8
 800e3ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f003 0307 	and.w	r3, r3, #7
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d009      	beq.n	800e3da <pvPortMalloc+0x6a>
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	617b      	str	r3, [r7, #20]
 800e3d8:	e7fe      	b.n	800e3d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d068      	beq.n	800e4b2 <pvPortMalloc+0x142>
 800e3e0:	4b41      	ldr	r3, [pc, #260]	; (800e4e8 <pvPortMalloc+0x178>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d863      	bhi.n	800e4b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3ea:	4b40      	ldr	r3, [pc, #256]	; (800e4ec <pvPortMalloc+0x17c>)
 800e3ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3ee:	4b3f      	ldr	r3, [pc, #252]	; (800e4ec <pvPortMalloc+0x17c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3f4:	e004      	b.n	800e400 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	429a      	cmp	r2, r3
 800e408:	d903      	bls.n	800e412 <pvPortMalloc+0xa2>
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1f1      	bne.n	800e3f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e412:	4b33      	ldr	r3, [pc, #204]	; (800e4e0 <pvPortMalloc+0x170>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e418:	429a      	cmp	r2, r3
 800e41a:	d04a      	beq.n	800e4b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2208      	movs	r2, #8
 800e422:	4413      	add	r3, r2
 800e424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	1ad2      	subs	r2, r2, r3
 800e436:	2308      	movs	r3, #8
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d91e      	bls.n	800e47c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4413      	add	r3, r2
 800e444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	f003 0307 	and.w	r3, r3, #7
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d009      	beq.n	800e464 <pvPortMalloc+0xf4>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	613b      	str	r3, [r7, #16]
 800e462:	e7fe      	b.n	800e462 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	1ad2      	subs	r2, r2, r3
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e476:	69b8      	ldr	r0, [r7, #24]
 800e478:	f000 f8f6 	bl	800e668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e47c:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <pvPortMalloc+0x178>)
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	4a18      	ldr	r2, [pc, #96]	; (800e4e8 <pvPortMalloc+0x178>)
 800e488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e48a:	4b17      	ldr	r3, [pc, #92]	; (800e4e8 <pvPortMalloc+0x178>)
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b18      	ldr	r3, [pc, #96]	; (800e4f0 <pvPortMalloc+0x180>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d203      	bcs.n	800e49e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e496:	4b14      	ldr	r3, [pc, #80]	; (800e4e8 <pvPortMalloc+0x178>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a15      	ldr	r2, [pc, #84]	; (800e4f0 <pvPortMalloc+0x180>)
 800e49c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	4b10      	ldr	r3, [pc, #64]	; (800e4e4 <pvPortMalloc+0x174>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4b2:	f7fe fd37 	bl	800cf24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	f003 0307 	and.w	r3, r3, #7
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d009      	beq.n	800e4d4 <pvPortMalloc+0x164>
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	e7fe      	b.n	800e4d2 <pvPortMalloc+0x162>
	return pvReturn;
 800e4d4:	69fb      	ldr	r3, [r7, #28]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3728      	adds	r7, #40	; 0x28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20004a00 	.word	0x20004a00
 800e4e4:	20004a0c 	.word	0x20004a0c
 800e4e8:	20004a04 	.word	0x20004a04
 800e4ec:	200049f8 	.word	0x200049f8
 800e4f0:	20004a08 	.word	0x20004a08

0800e4f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d046      	beq.n	800e594 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e506:	2308      	movs	r3, #8
 800e508:	425b      	negs	r3, r3
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	4413      	add	r3, r2
 800e50e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	4b20      	ldr	r3, [pc, #128]	; (800e59c <vPortFree+0xa8>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4013      	ands	r3, r2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d109      	bne.n	800e536 <vPortFree+0x42>
 800e522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	e7fe      	b.n	800e534 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d009      	beq.n	800e552 <vPortFree+0x5e>
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	60bb      	str	r3, [r7, #8]
 800e550:	e7fe      	b.n	800e550 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <vPortFree+0xa8>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4013      	ands	r3, r2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d019      	beq.n	800e594 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d115      	bne.n	800e594 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <vPortFree+0xa8>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	43db      	mvns	r3, r3
 800e572:	401a      	ands	r2, r3
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e578:	f7fe fcc6 	bl	800cf08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <vPortFree+0xac>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4413      	add	r3, r2
 800e586:	4a06      	ldr	r2, [pc, #24]	; (800e5a0 <vPortFree+0xac>)
 800e588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e58a:	6938      	ldr	r0, [r7, #16]
 800e58c:	f000 f86c 	bl	800e668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e590:	f7fe fcc8 	bl	800cf24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	20004a0c 	.word	0x20004a0c
 800e5a0:	20004a04 	.word	0x20004a04

0800e5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5b0:	4b27      	ldr	r3, [pc, #156]	; (800e650 <prvHeapInit+0xac>)
 800e5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f003 0307 	and.w	r3, r3, #7
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00c      	beq.n	800e5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3307      	adds	r3, #7
 800e5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f023 0307 	bic.w	r3, r3, #7
 800e5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	4a1f      	ldr	r2, [pc, #124]	; (800e650 <prvHeapInit+0xac>)
 800e5d4:	4413      	add	r3, r2
 800e5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5dc:	4a1d      	ldr	r2, [pc, #116]	; (800e654 <prvHeapInit+0xb0>)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5e2:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <prvHeapInit+0xb0>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5f0:	2208      	movs	r2, #8
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	1a9b      	subs	r3, r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 0307 	bic.w	r3, r3, #7
 800e5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	4a15      	ldr	r2, [pc, #84]	; (800e658 <prvHeapInit+0xb4>)
 800e604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <prvHeapInit+0xb4>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2200      	movs	r2, #0
 800e60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <prvHeapInit+0xb4>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	1ad2      	subs	r2, r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e624:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <prvHeapInit+0xb4>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	4a0a      	ldr	r2, [pc, #40]	; (800e65c <prvHeapInit+0xb8>)
 800e632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	4a09      	ldr	r2, [pc, #36]	; (800e660 <prvHeapInit+0xbc>)
 800e63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e63c:	4b09      	ldr	r3, [pc, #36]	; (800e664 <prvHeapInit+0xc0>)
 800e63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e642:	601a      	str	r2, [r3, #0]
}
 800e644:	bf00      	nop
 800e646:	3714      	adds	r7, #20
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	20000df8 	.word	0x20000df8
 800e654:	200049f8 	.word	0x200049f8
 800e658:	20004a00 	.word	0x20004a00
 800e65c:	20004a08 	.word	0x20004a08
 800e660:	20004a04 	.word	0x20004a04
 800e664:	20004a0c 	.word	0x20004a0c

0800e668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e670:	4b28      	ldr	r3, [pc, #160]	; (800e714 <prvInsertBlockIntoFreeList+0xac>)
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	e002      	b.n	800e67c <prvInsertBlockIntoFreeList+0x14>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d8f7      	bhi.n	800e676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	4413      	add	r3, r2
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	429a      	cmp	r2, r3
 800e696:	d108      	bne.n	800e6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	441a      	add	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	441a      	add	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d118      	bne.n	800e6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	4b15      	ldr	r3, [pc, #84]	; (800e718 <prvInsertBlockIntoFreeList+0xb0>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d00d      	beq.n	800e6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	e008      	b.n	800e6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6e6:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <prvInsertBlockIntoFreeList+0xb0>)
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	e003      	b.n	800e6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d002      	beq.n	800e706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e706:	bf00      	nop
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	200049f8 	.word	0x200049f8
 800e718:	20004a00 	.word	0x20004a00

0800e71c <MX_USB_HOST_Init>:
 800e71c:	b580      	push	{r7, lr}
 800e71e:	af00      	add	r7, sp, #0
 800e720:	2201      	movs	r2, #1
 800e722:	490e      	ldr	r1, [pc, #56]	; (800e75c <MX_USB_HOST_Init+0x40>)
 800e724:	480e      	ldr	r0, [pc, #56]	; (800e760 <MX_USB_HOST_Init+0x44>)
 800e726:	f7fb fa89 	bl	8009c3c <USBH_Init>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <MX_USB_HOST_Init+0x18>
 800e730:	f7f3 f9ae 	bl	8001a90 <Error_Handler>
 800e734:	490b      	ldr	r1, [pc, #44]	; (800e764 <MX_USB_HOST_Init+0x48>)
 800e736:	480a      	ldr	r0, [pc, #40]	; (800e760 <MX_USB_HOST_Init+0x44>)
 800e738:	f7fb fb30 	bl	8009d9c <USBH_RegisterClass>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <MX_USB_HOST_Init+0x2a>
 800e742:	f7f3 f9a5 	bl	8001a90 <Error_Handler>
 800e746:	4806      	ldr	r0, [pc, #24]	; (800e760 <MX_USB_HOST_Init+0x44>)
 800e748:	f7fb fbb4 	bl	8009eb4 <USBH_Start>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <MX_USB_HOST_Init+0x3a>
 800e752:	f7f3 f99d 	bl	8001a90 <Error_Handler>
 800e756:	bf00      	nop
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	0800e769 	.word	0x0800e769
 800e760:	20004ce8 	.word	0x20004ce8
 800e764:	20000014 	.word	0x20000014

0800e768 <USBH_UserProcess>:
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	460b      	mov	r3, r1
 800e772:	70fb      	strb	r3, [r7, #3]
 800e774:	78fb      	ldrb	r3, [r7, #3]
 800e776:	3b01      	subs	r3, #1
 800e778:	2b04      	cmp	r3, #4
 800e77a:	d819      	bhi.n	800e7b0 <USBH_UserProcess+0x48>
 800e77c:	a201      	add	r2, pc, #4	; (adr r2, 800e784 <USBH_UserProcess+0x1c>)
 800e77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e782:	bf00      	nop
 800e784:	0800e7b1 	.word	0x0800e7b1
 800e788:	0800e7a1 	.word	0x0800e7a1
 800e78c:	0800e7b1 	.word	0x0800e7b1
 800e790:	0800e7a9 	.word	0x0800e7a9
 800e794:	0800e799 	.word	0x0800e799
 800e798:	4b09      	ldr	r3, [pc, #36]	; (800e7c0 <USBH_UserProcess+0x58>)
 800e79a:	2203      	movs	r2, #3
 800e79c:	701a      	strb	r2, [r3, #0]
 800e79e:	e008      	b.n	800e7b2 <USBH_UserProcess+0x4a>
 800e7a0:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <USBH_UserProcess+0x58>)
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e004      	b.n	800e7b2 <USBH_UserProcess+0x4a>
 800e7a8:	4b05      	ldr	r3, [pc, #20]	; (800e7c0 <USBH_UserProcess+0x58>)
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	701a      	strb	r2, [r3, #0]
 800e7ae:	e000      	b.n	800e7b2 <USBH_UserProcess+0x4a>
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20004a10 	.word	0x20004a10

0800e7c4 <HAL_HCD_MspInit>:
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08a      	sub	sp, #40	; 0x28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	f107 0314 	add.w	r3, r7, #20
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	605a      	str	r2, [r3, #4]
 800e7d6:	609a      	str	r2, [r3, #8]
 800e7d8:	60da      	str	r2, [r3, #12]
 800e7da:	611a      	str	r2, [r3, #16]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7e4:	d147      	bne.n	800e876 <HAL_HCD_MspInit+0xb2>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	613b      	str	r3, [r7, #16]
 800e7ea:	4b25      	ldr	r3, [pc, #148]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ee:	4a24      	ldr	r2, [pc, #144]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e7f0:	f043 0301 	orr.w	r3, r3, #1
 800e7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e7f6:	4b22      	ldr	r3, [pc, #136]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	613b      	str	r3, [r7, #16]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e806:	617b      	str	r3, [r7, #20]
 800e808:	2300      	movs	r3, #0
 800e80a:	61bb      	str	r3, [r7, #24]
 800e80c:	2300      	movs	r3, #0
 800e80e:	61fb      	str	r3, [r7, #28]
 800e810:	f107 0314 	add.w	r3, r7, #20
 800e814:	4619      	mov	r1, r3
 800e816:	481b      	ldr	r0, [pc, #108]	; (800e884 <HAL_HCD_MspInit+0xc0>)
 800e818:	f7f4 f87a 	bl	8002910 <HAL_GPIO_Init>
 800e81c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	2302      	movs	r3, #2
 800e824:	61bb      	str	r3, [r7, #24]
 800e826:	2300      	movs	r3, #0
 800e828:	61fb      	str	r3, [r7, #28]
 800e82a:	2303      	movs	r3, #3
 800e82c:	623b      	str	r3, [r7, #32]
 800e82e:	230a      	movs	r3, #10
 800e830:	627b      	str	r3, [r7, #36]	; 0x24
 800e832:	f107 0314 	add.w	r3, r7, #20
 800e836:	4619      	mov	r1, r3
 800e838:	4812      	ldr	r0, [pc, #72]	; (800e884 <HAL_HCD_MspInit+0xc0>)
 800e83a:	f7f4 f869 	bl	8002910 <HAL_GPIO_Init>
 800e83e:	4b10      	ldr	r3, [pc, #64]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e842:	4a0f      	ldr	r2, [pc, #60]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e848:	6353      	str	r3, [r2, #52]	; 0x34
 800e84a:	2300      	movs	r3, #0
 800e84c:	60fb      	str	r3, [r7, #12]
 800e84e:	4b0c      	ldr	r3, [pc, #48]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e852:	4a0b      	ldr	r2, [pc, #44]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e858:	6453      	str	r3, [r2, #68]	; 0x44
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <HAL_HCD_MspInit+0xbc>)
 800e85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e85e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	2100      	movs	r1, #0
 800e86a:	2043      	movs	r0, #67	; 0x43
 800e86c:	f7f3 fed2 	bl	8002614 <HAL_NVIC_SetPriority>
 800e870:	2043      	movs	r0, #67	; 0x43
 800e872:	f7f3 feeb 	bl	800264c <HAL_NVIC_EnableIRQ>
 800e876:	bf00      	nop
 800e878:	3728      	adds	r7, #40	; 0x28
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	40023800 	.word	0x40023800
 800e884:	40020000 	.word	0x40020000

0800e888 <HAL_HCD_SOF_Callback>:
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e896:	4618      	mov	r0, r3
 800e898:	f7fb ffb9 	bl	800a80e <USBH_LL_IncTimer>
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <HAL_HCD_Connect_Callback>:
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fb fffd 	bl	800a8b2 <USBH_LL_Connect>
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_HCD_Disconnect_Callback>:
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fc f812 	bl	800a8f8 <USBH_LL_Disconnect>
 800e8d4:	bf00      	nop
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <HAL_HCD_HC_NotifyURBChange_Callback>:
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	70bb      	strb	r3, [r7, #2]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fc f849 	bl	800a98a <USBH_LL_NotifyURBChange>
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <HAL_HCD_PortEnabled_Callback>:
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fb ffa7 	bl	800a862 <USBH_LL_PortEnabled>
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <HAL_HCD_PortDisabled_Callback>:
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fb ffb3 	bl	800a896 <USBH_LL_PortDisabled>
 800e930:	bf00      	nop
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USBH_LL_Init>:
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e946:	2b01      	cmp	r3, #1
 800e948:	d12a      	bne.n	800e9a0 <USBH_LL_Init+0x68>
 800e94a:	4a18      	ldr	r2, [pc, #96]	; (800e9ac <USBH_LL_Init+0x74>)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a15      	ldr	r2, [pc, #84]	; (800e9ac <USBH_LL_Init+0x74>)
 800e956:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
 800e95a:	4b14      	ldr	r3, [pc, #80]	; (800e9ac <USBH_LL_Init+0x74>)
 800e95c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <USBH_LL_Init+0x74>)
 800e964:	220c      	movs	r2, #12
 800e966:	609a      	str	r2, [r3, #8]
 800e968:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <USBH_LL_Init+0x74>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	60da      	str	r2, [r3, #12]
 800e96e:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <USBH_LL_Init+0x74>)
 800e970:	2200      	movs	r2, #0
 800e972:	611a      	str	r2, [r3, #16]
 800e974:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <USBH_LL_Init+0x74>)
 800e976:	2202      	movs	r2, #2
 800e978:	619a      	str	r2, [r3, #24]
 800e97a:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <USBH_LL_Init+0x74>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	61da      	str	r2, [r3, #28]
 800e980:	480a      	ldr	r0, [pc, #40]	; (800e9ac <USBH_LL_Init+0x74>)
 800e982:	f7f4 f994 	bl	8002cae <HAL_HCD_Init>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <USBH_LL_Init+0x58>
 800e98c:	f7f3 f880 	bl	8001a90 <Error_Handler>
 800e990:	4806      	ldr	r0, [pc, #24]	; (800e9ac <USBH_LL_Init+0x74>)
 800e992:	f7f4 fd97 	bl	80034c4 <HAL_HCD_GetCurrentFrame>
 800e996:	4603      	mov	r3, r0
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7fb ff28 	bl	800a7f0 <USBH_LL_SetTimer>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	200050cc 	.word	0x200050cc

0800e9b0 <USBH_LL_Start>:
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	73bb      	strb	r3, [r7, #14]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7f4 fd04 	bl	80033d4 <HAL_HCD_Start>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f000 f95c 	bl	800ec90 <USBH_Get_USB_Status>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73bb      	strb	r3, [r7, #14]
 800e9dc:	7bbb      	ldrb	r3, [r7, #14]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <USBH_LL_Stop>:
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b084      	sub	sp, #16
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	73bb      	strb	r3, [r7, #14]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f4 fd0c 	bl	800341a <HAL_HCD_Stop>
 800ea02:	4603      	mov	r3, r0
 800ea04:	73fb      	strb	r3, [r7, #15]
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f000 f941 	bl	800ec90 <USBH_Get_USB_Status>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	73bb      	strb	r3, [r7, #14]
 800ea12:	7bbb      	ldrb	r3, [r7, #14]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBH_LL_GetSpeed>:
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	2301      	movs	r3, #1
 800ea26:	73fb      	strb	r3, [r7, #15]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f4 fd56 	bl	80034e0 <HAL_HCD_GetCurrentSpeed>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d007      	beq.n	800ea4a <USBH_LL_GetSpeed+0x2e>
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d302      	bcc.n	800ea44 <USBH_LL_GetSpeed+0x28>
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d006      	beq.n	800ea50 <USBH_LL_GetSpeed+0x34>
 800ea42:	e008      	b.n	800ea56 <USBH_LL_GetSpeed+0x3a>
 800ea44:	2300      	movs	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
 800ea48:	e008      	b.n	800ea5c <USBH_LL_GetSpeed+0x40>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	73fb      	strb	r3, [r7, #15]
 800ea4e:	e005      	b.n	800ea5c <USBH_LL_GetSpeed+0x40>
 800ea50:	2302      	movs	r3, #2
 800ea52:	73fb      	strb	r3, [r7, #15]
 800ea54:	e002      	b.n	800ea5c <USBH_LL_GetSpeed+0x40>
 800ea56:	2301      	movs	r3, #1
 800ea58:	73fb      	strb	r3, [r7, #15]
 800ea5a:	bf00      	nop
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <USBH_LL_ResetPort>:
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]
 800ea72:	2300      	movs	r3, #0
 800ea74:	73bb      	strb	r3, [r7, #14]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f4 fce9 	bl	8003454 <HAL_HCD_ResetPort>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73fb      	strb	r3, [r7, #15]
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f000 f901 	bl	800ec90 <USBH_Get_USB_Status>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	73bb      	strb	r3, [r7, #14]
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBH_LL_GetLastXferSize>:
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	70fb      	strb	r3, [r7, #3]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eaae:	78fa      	ldrb	r2, [r7, #3]
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f4 fcf1 	bl	800349a <HAL_HCD_HC_GetXferCount>
 800eab8:	4603      	mov	r3, r0
 800eaba:	4618      	mov	r0, r3
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBH_LL_OpenPipe>:
 800eac2:	b590      	push	{r4, r7, lr}
 800eac4:	b089      	sub	sp, #36	; 0x24
 800eac6:	af04      	add	r7, sp, #16
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	4608      	mov	r0, r1
 800eacc:	4611      	mov	r1, r2
 800eace:	461a      	mov	r2, r3
 800ead0:	4603      	mov	r3, r0
 800ead2:	70fb      	strb	r3, [r7, #3]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70bb      	strb	r3, [r7, #2]
 800ead8:	4613      	mov	r3, r2
 800eada:	707b      	strb	r3, [r7, #1]
 800eadc:	2300      	movs	r3, #0
 800eade:	73fb      	strb	r3, [r7, #15]
 800eae0:	2300      	movs	r3, #0
 800eae2:	73bb      	strb	r3, [r7, #14]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eaea:	787c      	ldrb	r4, [r7, #1]
 800eaec:	78ba      	ldrb	r2, [r7, #2]
 800eaee:	78f9      	ldrb	r1, [r7, #3]
 800eaf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eaf2:	9302      	str	r3, [sp, #8]
 800eaf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	4623      	mov	r3, r4
 800eb02:	f7f4 f936 	bl	8002d72 <HAL_HCD_HC_Init>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 f8bf 	bl	800ec90 <USBH_Get_USB_Status>
 800eb12:	4603      	mov	r3, r0
 800eb14:	73bb      	strb	r3, [r7, #14]
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <USBH_LL_ClosePipe>:
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73fb      	strb	r3, [r7, #15]
 800eb30:	2300      	movs	r3, #0
 800eb32:	73bb      	strb	r3, [r7, #14]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb3a:	78fa      	ldrb	r2, [r7, #3]
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7f4 f9af 	bl	8002ea2 <HAL_HCD_HC_Halt>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 f8a0 	bl	800ec90 <USBH_Get_USB_Status>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73bb      	strb	r3, [r7, #14]
 800eb54:	7bbb      	ldrb	r3, [r7, #14]
 800eb56:	4618      	mov	r0, r3
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBH_LL_SubmitURB>:
 800eb5e:	b590      	push	{r4, r7, lr}
 800eb60:	b089      	sub	sp, #36	; 0x24
 800eb62:	af04      	add	r7, sp, #16
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	4608      	mov	r0, r1
 800eb68:	4611      	mov	r1, r2
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	70fb      	strb	r3, [r7, #3]
 800eb70:	460b      	mov	r3, r1
 800eb72:	70bb      	strb	r3, [r7, #2]
 800eb74:	4613      	mov	r3, r2
 800eb76:	707b      	strb	r3, [r7, #1]
 800eb78:	2300      	movs	r3, #0
 800eb7a:	73fb      	strb	r3, [r7, #15]
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	73bb      	strb	r3, [r7, #14]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb86:	787c      	ldrb	r4, [r7, #1]
 800eb88:	78ba      	ldrb	r2, [r7, #2]
 800eb8a:	78f9      	ldrb	r1, [r7, #3]
 800eb8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb90:	9303      	str	r3, [sp, #12]
 800eb92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb94:	9302      	str	r3, [sp, #8]
 800eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	4623      	mov	r3, r4
 800eba2:	f7f4 f9a1 	bl	8002ee8 <HAL_HCD_HC_SubmitRequest>
 800eba6:	4603      	mov	r3, r0
 800eba8:	73fb      	strb	r3, [r7, #15]
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f000 f86f 	bl	800ec90 <USBH_Get_USB_Status>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	73bb      	strb	r3, [r7, #14]
 800ebb6:	7bbb      	ldrb	r3, [r7, #14]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd90      	pop	{r4, r7, pc}

0800ebc0 <USBH_LL_GetURBState>:
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebd2:	78fa      	ldrb	r2, [r7, #3]
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f4 fc4a 	bl	8003470 <HAL_HCD_HC_GetURBState>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <USBH_LL_DriverVBUS>:
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	70fb      	strb	r3, [r7, #3]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d103      	bne.n	800ec04 <USBH_LL_DriverVBUS+0x1e>
 800ebfc:	78fb      	ldrb	r3, [r7, #3]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 f872 	bl	800ece8 <MX_DriverVbusFS>
 800ec04:	20c8      	movs	r0, #200	; 0xc8
 800ec06:	f7f3 fc2b 	bl	8002460 <HAL_Delay>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBH_LL_SetToggle>:
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
 800ec20:	4613      	mov	r3, r2
 800ec22:	70bb      	strb	r3, [r7, #2]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	78fa      	ldrb	r2, [r7, #3]
 800ec2e:	68f9      	ldr	r1, [r7, #12]
 800ec30:	4613      	mov	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	440b      	add	r3, r1
 800ec3a:	333b      	adds	r3, #59	; 0x3b
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <USBH_LL_SetToggle+0x44>
 800ec42:	78fa      	ldrb	r2, [r7, #3]
 800ec44:	68f9      	ldr	r1, [r7, #12]
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	440b      	add	r3, r1
 800ec50:	3350      	adds	r3, #80	; 0x50
 800ec52:	78ba      	ldrb	r2, [r7, #2]
 800ec54:	701a      	strb	r2, [r3, #0]
 800ec56:	e009      	b.n	800ec6c <USBH_LL_SetToggle+0x58>
 800ec58:	78fa      	ldrb	r2, [r7, #3]
 800ec5a:	68f9      	ldr	r1, [r7, #12]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	440b      	add	r3, r1
 800ec66:	3351      	adds	r3, #81	; 0x51
 800ec68:	78ba      	ldrb	r2, [r7, #2]
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <USBH_Delay>:
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b082      	sub	sp, #8
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7f3 fbec 	bl	8002460 <HAL_Delay>
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBH_Get_USB_Status>:
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	71fb      	strb	r3, [r7, #7]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	d817      	bhi.n	800ecd4 <USBH_Get_USB_Status+0x44>
 800eca4:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <USBH_Get_USB_Status+0x1c>)
 800eca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecaa:	bf00      	nop
 800ecac:	0800ecbd 	.word	0x0800ecbd
 800ecb0:	0800ecc3 	.word	0x0800ecc3
 800ecb4:	0800ecc9 	.word	0x0800ecc9
 800ecb8:	0800eccf 	.word	0x0800eccf
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]
 800ecc0:	e00b      	b.n	800ecda <USBH_Get_USB_Status+0x4a>
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	73fb      	strb	r3, [r7, #15]
 800ecc6:	e008      	b.n	800ecda <USBH_Get_USB_Status+0x4a>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	73fb      	strb	r3, [r7, #15]
 800eccc:	e005      	b.n	800ecda <USBH_Get_USB_Status+0x4a>
 800ecce:	2302      	movs	r3, #2
 800ecd0:	73fb      	strb	r3, [r7, #15]
 800ecd2:	e002      	b.n	800ecda <USBH_Get_USB_Status+0x4a>
 800ecd4:	2302      	movs	r3, #2
 800ecd6:	73fb      	strb	r3, [r7, #15]
 800ecd8:	bf00      	nop
 800ecda:	7bfb      	ldrb	r3, [r7, #15]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <MX_DriverVbusFS>:
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	71fb      	strb	r3, [r7, #7]
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	73fb      	strb	r3, [r7, #15]
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <MX_DriverVbusFS+0x1a>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	73fb      	strb	r3, [r7, #15]
 800ed00:	e001      	b.n	800ed06 <MX_DriverVbusFS+0x1e>
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]
 800ed06:	7bfb      	ldrb	r3, [r7, #15]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ed0e:	4803      	ldr	r0, [pc, #12]	; (800ed1c <MX_DriverVbusFS+0x34>)
 800ed10:	f7f3 ff90 	bl	8002c34 <HAL_GPIO_WritePin>
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	40021800 	.word	0x40021800

0800ed20 <__errno>:
 800ed20:	4b01      	ldr	r3, [pc, #4]	; (800ed28 <__errno+0x8>)
 800ed22:	6818      	ldr	r0, [r3, #0]
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	20000038 	.word	0x20000038

0800ed2c <__libc_init_array>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4e0d      	ldr	r6, [pc, #52]	; (800ed64 <__libc_init_array+0x38>)
 800ed30:	4c0d      	ldr	r4, [pc, #52]	; (800ed68 <__libc_init_array+0x3c>)
 800ed32:	1ba4      	subs	r4, r4, r6
 800ed34:	10a4      	asrs	r4, r4, #2
 800ed36:	2500      	movs	r5, #0
 800ed38:	42a5      	cmp	r5, r4
 800ed3a:	d109      	bne.n	800ed50 <__libc_init_array+0x24>
 800ed3c:	4e0b      	ldr	r6, [pc, #44]	; (800ed6c <__libc_init_array+0x40>)
 800ed3e:	4c0c      	ldr	r4, [pc, #48]	; (800ed70 <__libc_init_array+0x44>)
 800ed40:	f000 ff20 	bl	800fb84 <_init>
 800ed44:	1ba4      	subs	r4, r4, r6
 800ed46:	10a4      	asrs	r4, r4, #2
 800ed48:	2500      	movs	r5, #0
 800ed4a:	42a5      	cmp	r5, r4
 800ed4c:	d105      	bne.n	800ed5a <__libc_init_array+0x2e>
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed54:	4798      	blx	r3
 800ed56:	3501      	adds	r5, #1
 800ed58:	e7ee      	b.n	800ed38 <__libc_init_array+0xc>
 800ed5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed5e:	4798      	blx	r3
 800ed60:	3501      	adds	r5, #1
 800ed62:	e7f2      	b.n	800ed4a <__libc_init_array+0x1e>
 800ed64:	0800fd44 	.word	0x0800fd44
 800ed68:	0800fd44 	.word	0x0800fd44
 800ed6c:	0800fd44 	.word	0x0800fd44
 800ed70:	0800fd48 	.word	0x0800fd48

0800ed74 <malloc>:
 800ed74:	4b02      	ldr	r3, [pc, #8]	; (800ed80 <malloc+0xc>)
 800ed76:	4601      	mov	r1, r0
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f000 b86d 	b.w	800ee58 <_malloc_r>
 800ed7e:	bf00      	nop
 800ed80:	20000038 	.word	0x20000038

0800ed84 <free>:
 800ed84:	4b02      	ldr	r3, [pc, #8]	; (800ed90 <free+0xc>)
 800ed86:	4601      	mov	r1, r0
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	f000 b817 	b.w	800edbc <_free_r>
 800ed8e:	bf00      	nop
 800ed90:	20000038 	.word	0x20000038

0800ed94 <memcpy>:
 800ed94:	b510      	push	{r4, lr}
 800ed96:	1e43      	subs	r3, r0, #1
 800ed98:	440a      	add	r2, r1
 800ed9a:	4291      	cmp	r1, r2
 800ed9c:	d100      	bne.n	800eda0 <memcpy+0xc>
 800ed9e:	bd10      	pop	{r4, pc}
 800eda0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eda4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eda8:	e7f7      	b.n	800ed9a <memcpy+0x6>

0800edaa <memset>:
 800edaa:	4402      	add	r2, r0
 800edac:	4603      	mov	r3, r0
 800edae:	4293      	cmp	r3, r2
 800edb0:	d100      	bne.n	800edb4 <memset+0xa>
 800edb2:	4770      	bx	lr
 800edb4:	f803 1b01 	strb.w	r1, [r3], #1
 800edb8:	e7f9      	b.n	800edae <memset+0x4>
	...

0800edbc <_free_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	4605      	mov	r5, r0
 800edc0:	2900      	cmp	r1, #0
 800edc2:	d045      	beq.n	800ee50 <_free_r+0x94>
 800edc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edc8:	1f0c      	subs	r4, r1, #4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	bfb8      	it	lt
 800edce:	18e4      	addlt	r4, r4, r3
 800edd0:	f000 f98e 	bl	800f0f0 <__malloc_lock>
 800edd4:	4a1f      	ldr	r2, [pc, #124]	; (800ee54 <_free_r+0x98>)
 800edd6:	6813      	ldr	r3, [r2, #0]
 800edd8:	4610      	mov	r0, r2
 800edda:	b933      	cbnz	r3, 800edea <_free_r+0x2e>
 800eddc:	6063      	str	r3, [r4, #4]
 800edde:	6014      	str	r4, [r2, #0]
 800ede0:	4628      	mov	r0, r5
 800ede2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ede6:	f000 b984 	b.w	800f0f2 <__malloc_unlock>
 800edea:	42a3      	cmp	r3, r4
 800edec:	d90c      	bls.n	800ee08 <_free_r+0x4c>
 800edee:	6821      	ldr	r1, [r4, #0]
 800edf0:	1862      	adds	r2, r4, r1
 800edf2:	4293      	cmp	r3, r2
 800edf4:	bf04      	itt	eq
 800edf6:	681a      	ldreq	r2, [r3, #0]
 800edf8:	685b      	ldreq	r3, [r3, #4]
 800edfa:	6063      	str	r3, [r4, #4]
 800edfc:	bf04      	itt	eq
 800edfe:	1852      	addeq	r2, r2, r1
 800ee00:	6022      	streq	r2, [r4, #0]
 800ee02:	6004      	str	r4, [r0, #0]
 800ee04:	e7ec      	b.n	800ede0 <_free_r+0x24>
 800ee06:	4613      	mov	r3, r2
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	b10a      	cbz	r2, 800ee10 <_free_r+0x54>
 800ee0c:	42a2      	cmp	r2, r4
 800ee0e:	d9fa      	bls.n	800ee06 <_free_r+0x4a>
 800ee10:	6819      	ldr	r1, [r3, #0]
 800ee12:	1858      	adds	r0, r3, r1
 800ee14:	42a0      	cmp	r0, r4
 800ee16:	d10b      	bne.n	800ee30 <_free_r+0x74>
 800ee18:	6820      	ldr	r0, [r4, #0]
 800ee1a:	4401      	add	r1, r0
 800ee1c:	1858      	adds	r0, r3, r1
 800ee1e:	4282      	cmp	r2, r0
 800ee20:	6019      	str	r1, [r3, #0]
 800ee22:	d1dd      	bne.n	800ede0 <_free_r+0x24>
 800ee24:	6810      	ldr	r0, [r2, #0]
 800ee26:	6852      	ldr	r2, [r2, #4]
 800ee28:	605a      	str	r2, [r3, #4]
 800ee2a:	4401      	add	r1, r0
 800ee2c:	6019      	str	r1, [r3, #0]
 800ee2e:	e7d7      	b.n	800ede0 <_free_r+0x24>
 800ee30:	d902      	bls.n	800ee38 <_free_r+0x7c>
 800ee32:	230c      	movs	r3, #12
 800ee34:	602b      	str	r3, [r5, #0]
 800ee36:	e7d3      	b.n	800ede0 <_free_r+0x24>
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	1821      	adds	r1, r4, r0
 800ee3c:	428a      	cmp	r2, r1
 800ee3e:	bf04      	itt	eq
 800ee40:	6811      	ldreq	r1, [r2, #0]
 800ee42:	6852      	ldreq	r2, [r2, #4]
 800ee44:	6062      	str	r2, [r4, #4]
 800ee46:	bf04      	itt	eq
 800ee48:	1809      	addeq	r1, r1, r0
 800ee4a:	6021      	streq	r1, [r4, #0]
 800ee4c:	605c      	str	r4, [r3, #4]
 800ee4e:	e7c7      	b.n	800ede0 <_free_r+0x24>
 800ee50:	bd38      	pop	{r3, r4, r5, pc}
 800ee52:	bf00      	nop
 800ee54:	20004a14 	.word	0x20004a14

0800ee58 <_malloc_r>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	1ccd      	adds	r5, r1, #3
 800ee5c:	f025 0503 	bic.w	r5, r5, #3
 800ee60:	3508      	adds	r5, #8
 800ee62:	2d0c      	cmp	r5, #12
 800ee64:	bf38      	it	cc
 800ee66:	250c      	movcc	r5, #12
 800ee68:	2d00      	cmp	r5, #0
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	db01      	blt.n	800ee72 <_malloc_r+0x1a>
 800ee6e:	42a9      	cmp	r1, r5
 800ee70:	d903      	bls.n	800ee7a <_malloc_r+0x22>
 800ee72:	230c      	movs	r3, #12
 800ee74:	6033      	str	r3, [r6, #0]
 800ee76:	2000      	movs	r0, #0
 800ee78:	bd70      	pop	{r4, r5, r6, pc}
 800ee7a:	f000 f939 	bl	800f0f0 <__malloc_lock>
 800ee7e:	4a21      	ldr	r2, [pc, #132]	; (800ef04 <_malloc_r+0xac>)
 800ee80:	6814      	ldr	r4, [r2, #0]
 800ee82:	4621      	mov	r1, r4
 800ee84:	b991      	cbnz	r1, 800eeac <_malloc_r+0x54>
 800ee86:	4c20      	ldr	r4, [pc, #128]	; (800ef08 <_malloc_r+0xb0>)
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	b91b      	cbnz	r3, 800ee94 <_malloc_r+0x3c>
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	f000 f855 	bl	800ef3c <_sbrk_r>
 800ee92:	6020      	str	r0, [r4, #0]
 800ee94:	4629      	mov	r1, r5
 800ee96:	4630      	mov	r0, r6
 800ee98:	f000 f850 	bl	800ef3c <_sbrk_r>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d124      	bne.n	800eeea <_malloc_r+0x92>
 800eea0:	230c      	movs	r3, #12
 800eea2:	6033      	str	r3, [r6, #0]
 800eea4:	4630      	mov	r0, r6
 800eea6:	f000 f924 	bl	800f0f2 <__malloc_unlock>
 800eeaa:	e7e4      	b.n	800ee76 <_malloc_r+0x1e>
 800eeac:	680b      	ldr	r3, [r1, #0]
 800eeae:	1b5b      	subs	r3, r3, r5
 800eeb0:	d418      	bmi.n	800eee4 <_malloc_r+0x8c>
 800eeb2:	2b0b      	cmp	r3, #11
 800eeb4:	d90f      	bls.n	800eed6 <_malloc_r+0x7e>
 800eeb6:	600b      	str	r3, [r1, #0]
 800eeb8:	50cd      	str	r5, [r1, r3]
 800eeba:	18cc      	adds	r4, r1, r3
 800eebc:	4630      	mov	r0, r6
 800eebe:	f000 f918 	bl	800f0f2 <__malloc_unlock>
 800eec2:	f104 000b 	add.w	r0, r4, #11
 800eec6:	1d23      	adds	r3, r4, #4
 800eec8:	f020 0007 	bic.w	r0, r0, #7
 800eecc:	1ac3      	subs	r3, r0, r3
 800eece:	d0d3      	beq.n	800ee78 <_malloc_r+0x20>
 800eed0:	425a      	negs	r2, r3
 800eed2:	50e2      	str	r2, [r4, r3]
 800eed4:	e7d0      	b.n	800ee78 <_malloc_r+0x20>
 800eed6:	428c      	cmp	r4, r1
 800eed8:	684b      	ldr	r3, [r1, #4]
 800eeda:	bf16      	itet	ne
 800eedc:	6063      	strne	r3, [r4, #4]
 800eede:	6013      	streq	r3, [r2, #0]
 800eee0:	460c      	movne	r4, r1
 800eee2:	e7eb      	b.n	800eebc <_malloc_r+0x64>
 800eee4:	460c      	mov	r4, r1
 800eee6:	6849      	ldr	r1, [r1, #4]
 800eee8:	e7cc      	b.n	800ee84 <_malloc_r+0x2c>
 800eeea:	1cc4      	adds	r4, r0, #3
 800eeec:	f024 0403 	bic.w	r4, r4, #3
 800eef0:	42a0      	cmp	r0, r4
 800eef2:	d005      	beq.n	800ef00 <_malloc_r+0xa8>
 800eef4:	1a21      	subs	r1, r4, r0
 800eef6:	4630      	mov	r0, r6
 800eef8:	f000 f820 	bl	800ef3c <_sbrk_r>
 800eefc:	3001      	adds	r0, #1
 800eefe:	d0cf      	beq.n	800eea0 <_malloc_r+0x48>
 800ef00:	6025      	str	r5, [r4, #0]
 800ef02:	e7db      	b.n	800eebc <_malloc_r+0x64>
 800ef04:	20004a14 	.word	0x20004a14
 800ef08:	20004a18 	.word	0x20004a18

0800ef0c <iprintf>:
 800ef0c:	b40f      	push	{r0, r1, r2, r3}
 800ef0e:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <iprintf+0x2c>)
 800ef10:	b513      	push	{r0, r1, r4, lr}
 800ef12:	681c      	ldr	r4, [r3, #0]
 800ef14:	b124      	cbz	r4, 800ef20 <iprintf+0x14>
 800ef16:	69a3      	ldr	r3, [r4, #24]
 800ef18:	b913      	cbnz	r3, 800ef20 <iprintf+0x14>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f000 f85e 	bl	800efdc <__sinit>
 800ef20:	ab05      	add	r3, sp, #20
 800ef22:	9a04      	ldr	r2, [sp, #16]
 800ef24:	68a1      	ldr	r1, [r4, #8]
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 f90d 	bl	800f148 <_vfiprintf_r>
 800ef2e:	b002      	add	sp, #8
 800ef30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef34:	b004      	add	sp, #16
 800ef36:	4770      	bx	lr
 800ef38:	20000038 	.word	0x20000038

0800ef3c <_sbrk_r>:
 800ef3c:	b538      	push	{r3, r4, r5, lr}
 800ef3e:	4c06      	ldr	r4, [pc, #24]	; (800ef58 <_sbrk_r+0x1c>)
 800ef40:	2300      	movs	r3, #0
 800ef42:	4605      	mov	r5, r0
 800ef44:	4608      	mov	r0, r1
 800ef46:	6023      	str	r3, [r4, #0]
 800ef48:	f7f3 f9d2 	bl	80022f0 <_sbrk>
 800ef4c:	1c43      	adds	r3, r0, #1
 800ef4e:	d102      	bne.n	800ef56 <_sbrk_r+0x1a>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	b103      	cbz	r3, 800ef56 <_sbrk_r+0x1a>
 800ef54:	602b      	str	r3, [r5, #0]
 800ef56:	bd38      	pop	{r3, r4, r5, pc}
 800ef58:	20005390 	.word	0x20005390

0800ef5c <std>:
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	b510      	push	{r4, lr}
 800ef60:	4604      	mov	r4, r0
 800ef62:	e9c0 3300 	strd	r3, r3, [r0]
 800ef66:	6083      	str	r3, [r0, #8]
 800ef68:	8181      	strh	r1, [r0, #12]
 800ef6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ef6c:	81c2      	strh	r2, [r0, #14]
 800ef6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef72:	6183      	str	r3, [r0, #24]
 800ef74:	4619      	mov	r1, r3
 800ef76:	2208      	movs	r2, #8
 800ef78:	305c      	adds	r0, #92	; 0x5c
 800ef7a:	f7ff ff16 	bl	800edaa <memset>
 800ef7e:	4b05      	ldr	r3, [pc, #20]	; (800ef94 <std+0x38>)
 800ef80:	6263      	str	r3, [r4, #36]	; 0x24
 800ef82:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <std+0x3c>)
 800ef84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef86:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <std+0x40>)
 800ef88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef8a:	4b05      	ldr	r3, [pc, #20]	; (800efa0 <std+0x44>)
 800ef8c:	6224      	str	r4, [r4, #32]
 800ef8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ef90:	bd10      	pop	{r4, pc}
 800ef92:	bf00      	nop
 800ef94:	0800f685 	.word	0x0800f685
 800ef98:	0800f6a7 	.word	0x0800f6a7
 800ef9c:	0800f6df 	.word	0x0800f6df
 800efa0:	0800f703 	.word	0x0800f703

0800efa4 <_cleanup_r>:
 800efa4:	4901      	ldr	r1, [pc, #4]	; (800efac <_cleanup_r+0x8>)
 800efa6:	f000 b885 	b.w	800f0b4 <_fwalk_reent>
 800efaa:	bf00      	nop
 800efac:	0800f9dd 	.word	0x0800f9dd

0800efb0 <__sfmoreglue>:
 800efb0:	b570      	push	{r4, r5, r6, lr}
 800efb2:	1e4a      	subs	r2, r1, #1
 800efb4:	2568      	movs	r5, #104	; 0x68
 800efb6:	4355      	muls	r5, r2
 800efb8:	460e      	mov	r6, r1
 800efba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800efbe:	f7ff ff4b 	bl	800ee58 <_malloc_r>
 800efc2:	4604      	mov	r4, r0
 800efc4:	b140      	cbz	r0, 800efd8 <__sfmoreglue+0x28>
 800efc6:	2100      	movs	r1, #0
 800efc8:	e9c0 1600 	strd	r1, r6, [r0]
 800efcc:	300c      	adds	r0, #12
 800efce:	60a0      	str	r0, [r4, #8]
 800efd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800efd4:	f7ff fee9 	bl	800edaa <memset>
 800efd8:	4620      	mov	r0, r4
 800efda:	bd70      	pop	{r4, r5, r6, pc}

0800efdc <__sinit>:
 800efdc:	6983      	ldr	r3, [r0, #24]
 800efde:	b510      	push	{r4, lr}
 800efe0:	4604      	mov	r4, r0
 800efe2:	bb33      	cbnz	r3, 800f032 <__sinit+0x56>
 800efe4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800efe8:	6503      	str	r3, [r0, #80]	; 0x50
 800efea:	4b12      	ldr	r3, [pc, #72]	; (800f034 <__sinit+0x58>)
 800efec:	4a12      	ldr	r2, [pc, #72]	; (800f038 <__sinit+0x5c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6282      	str	r2, [r0, #40]	; 0x28
 800eff2:	4298      	cmp	r0, r3
 800eff4:	bf04      	itt	eq
 800eff6:	2301      	moveq	r3, #1
 800eff8:	6183      	streq	r3, [r0, #24]
 800effa:	f000 f81f 	bl	800f03c <__sfp>
 800effe:	6060      	str	r0, [r4, #4]
 800f000:	4620      	mov	r0, r4
 800f002:	f000 f81b 	bl	800f03c <__sfp>
 800f006:	60a0      	str	r0, [r4, #8]
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f817 	bl	800f03c <__sfp>
 800f00e:	2200      	movs	r2, #0
 800f010:	60e0      	str	r0, [r4, #12]
 800f012:	2104      	movs	r1, #4
 800f014:	6860      	ldr	r0, [r4, #4]
 800f016:	f7ff ffa1 	bl	800ef5c <std>
 800f01a:	2201      	movs	r2, #1
 800f01c:	2109      	movs	r1, #9
 800f01e:	68a0      	ldr	r0, [r4, #8]
 800f020:	f7ff ff9c 	bl	800ef5c <std>
 800f024:	2202      	movs	r2, #2
 800f026:	2112      	movs	r1, #18
 800f028:	68e0      	ldr	r0, [r4, #12]
 800f02a:	f7ff ff97 	bl	800ef5c <std>
 800f02e:	2301      	movs	r3, #1
 800f030:	61a3      	str	r3, [r4, #24]
 800f032:	bd10      	pop	{r4, pc}
 800f034:	0800fca4 	.word	0x0800fca4
 800f038:	0800efa5 	.word	0x0800efa5

0800f03c <__sfp>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	4b1b      	ldr	r3, [pc, #108]	; (800f0ac <__sfp+0x70>)
 800f040:	681e      	ldr	r6, [r3, #0]
 800f042:	69b3      	ldr	r3, [r6, #24]
 800f044:	4607      	mov	r7, r0
 800f046:	b913      	cbnz	r3, 800f04e <__sfp+0x12>
 800f048:	4630      	mov	r0, r6
 800f04a:	f7ff ffc7 	bl	800efdc <__sinit>
 800f04e:	3648      	adds	r6, #72	; 0x48
 800f050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f054:	3b01      	subs	r3, #1
 800f056:	d503      	bpl.n	800f060 <__sfp+0x24>
 800f058:	6833      	ldr	r3, [r6, #0]
 800f05a:	b133      	cbz	r3, 800f06a <__sfp+0x2e>
 800f05c:	6836      	ldr	r6, [r6, #0]
 800f05e:	e7f7      	b.n	800f050 <__sfp+0x14>
 800f060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f064:	b16d      	cbz	r5, 800f082 <__sfp+0x46>
 800f066:	3468      	adds	r4, #104	; 0x68
 800f068:	e7f4      	b.n	800f054 <__sfp+0x18>
 800f06a:	2104      	movs	r1, #4
 800f06c:	4638      	mov	r0, r7
 800f06e:	f7ff ff9f 	bl	800efb0 <__sfmoreglue>
 800f072:	6030      	str	r0, [r6, #0]
 800f074:	2800      	cmp	r0, #0
 800f076:	d1f1      	bne.n	800f05c <__sfp+0x20>
 800f078:	230c      	movs	r3, #12
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	4604      	mov	r4, r0
 800f07e:	4620      	mov	r0, r4
 800f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f082:	4b0b      	ldr	r3, [pc, #44]	; (800f0b0 <__sfp+0x74>)
 800f084:	6665      	str	r5, [r4, #100]	; 0x64
 800f086:	e9c4 5500 	strd	r5, r5, [r4]
 800f08a:	60a5      	str	r5, [r4, #8]
 800f08c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f090:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f094:	2208      	movs	r2, #8
 800f096:	4629      	mov	r1, r5
 800f098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f09c:	f7ff fe85 	bl	800edaa <memset>
 800f0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0a8:	e7e9      	b.n	800f07e <__sfp+0x42>
 800f0aa:	bf00      	nop
 800f0ac:	0800fca4 	.word	0x0800fca4
 800f0b0:	ffff0001 	.word	0xffff0001

0800f0b4 <_fwalk_reent>:
 800f0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b8:	4680      	mov	r8, r0
 800f0ba:	4689      	mov	r9, r1
 800f0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0c0:	2600      	movs	r6, #0
 800f0c2:	b914      	cbnz	r4, 800f0ca <_fwalk_reent+0x16>
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f0ce:	3f01      	subs	r7, #1
 800f0d0:	d501      	bpl.n	800f0d6 <_fwalk_reent+0x22>
 800f0d2:	6824      	ldr	r4, [r4, #0]
 800f0d4:	e7f5      	b.n	800f0c2 <_fwalk_reent+0xe>
 800f0d6:	89ab      	ldrh	r3, [r5, #12]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d907      	bls.n	800f0ec <_fwalk_reent+0x38>
 800f0dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	d003      	beq.n	800f0ec <_fwalk_reent+0x38>
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	47c8      	blx	r9
 800f0ea:	4306      	orrs	r6, r0
 800f0ec:	3568      	adds	r5, #104	; 0x68
 800f0ee:	e7ee      	b.n	800f0ce <_fwalk_reent+0x1a>

0800f0f0 <__malloc_lock>:
 800f0f0:	4770      	bx	lr

0800f0f2 <__malloc_unlock>:
 800f0f2:	4770      	bx	lr

0800f0f4 <__sfputc_r>:
 800f0f4:	6893      	ldr	r3, [r2, #8]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	b410      	push	{r4}
 800f0fc:	6093      	str	r3, [r2, #8]
 800f0fe:	da08      	bge.n	800f112 <__sfputc_r+0x1e>
 800f100:	6994      	ldr	r4, [r2, #24]
 800f102:	42a3      	cmp	r3, r4
 800f104:	db01      	blt.n	800f10a <__sfputc_r+0x16>
 800f106:	290a      	cmp	r1, #10
 800f108:	d103      	bne.n	800f112 <__sfputc_r+0x1e>
 800f10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f10e:	f000 bafd 	b.w	800f70c <__swbuf_r>
 800f112:	6813      	ldr	r3, [r2, #0]
 800f114:	1c58      	adds	r0, r3, #1
 800f116:	6010      	str	r0, [r2, #0]
 800f118:	7019      	strb	r1, [r3, #0]
 800f11a:	4608      	mov	r0, r1
 800f11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <__sfputs_r>:
 800f122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f124:	4606      	mov	r6, r0
 800f126:	460f      	mov	r7, r1
 800f128:	4614      	mov	r4, r2
 800f12a:	18d5      	adds	r5, r2, r3
 800f12c:	42ac      	cmp	r4, r5
 800f12e:	d101      	bne.n	800f134 <__sfputs_r+0x12>
 800f130:	2000      	movs	r0, #0
 800f132:	e007      	b.n	800f144 <__sfputs_r+0x22>
 800f134:	463a      	mov	r2, r7
 800f136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7ff ffda 	bl	800f0f4 <__sfputc_r>
 800f140:	1c43      	adds	r3, r0, #1
 800f142:	d1f3      	bne.n	800f12c <__sfputs_r+0xa>
 800f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f148 <_vfiprintf_r>:
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	460c      	mov	r4, r1
 800f14e:	b09d      	sub	sp, #116	; 0x74
 800f150:	4617      	mov	r7, r2
 800f152:	461d      	mov	r5, r3
 800f154:	4606      	mov	r6, r0
 800f156:	b118      	cbz	r0, 800f160 <_vfiprintf_r+0x18>
 800f158:	6983      	ldr	r3, [r0, #24]
 800f15a:	b90b      	cbnz	r3, 800f160 <_vfiprintf_r+0x18>
 800f15c:	f7ff ff3e 	bl	800efdc <__sinit>
 800f160:	4b7c      	ldr	r3, [pc, #496]	; (800f354 <_vfiprintf_r+0x20c>)
 800f162:	429c      	cmp	r4, r3
 800f164:	d158      	bne.n	800f218 <_vfiprintf_r+0xd0>
 800f166:	6874      	ldr	r4, [r6, #4]
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	0718      	lsls	r0, r3, #28
 800f16c:	d55e      	bpl.n	800f22c <_vfiprintf_r+0xe4>
 800f16e:	6923      	ldr	r3, [r4, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d05b      	beq.n	800f22c <_vfiprintf_r+0xe4>
 800f174:	2300      	movs	r3, #0
 800f176:	9309      	str	r3, [sp, #36]	; 0x24
 800f178:	2320      	movs	r3, #32
 800f17a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f17e:	2330      	movs	r3, #48	; 0x30
 800f180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f184:	9503      	str	r5, [sp, #12]
 800f186:	f04f 0b01 	mov.w	fp, #1
 800f18a:	46b8      	mov	r8, r7
 800f18c:	4645      	mov	r5, r8
 800f18e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f192:	b10b      	cbz	r3, 800f198 <_vfiprintf_r+0x50>
 800f194:	2b25      	cmp	r3, #37	; 0x25
 800f196:	d154      	bne.n	800f242 <_vfiprintf_r+0xfa>
 800f198:	ebb8 0a07 	subs.w	sl, r8, r7
 800f19c:	d00b      	beq.n	800f1b6 <_vfiprintf_r+0x6e>
 800f19e:	4653      	mov	r3, sl
 800f1a0:	463a      	mov	r2, r7
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	f7ff ffbc 	bl	800f122 <__sfputs_r>
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f000 80c2 	beq.w	800f334 <_vfiprintf_r+0x1ec>
 800f1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b2:	4453      	add	r3, sl
 800f1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b6:	f898 3000 	ldrb.w	r3, [r8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f000 80ba 	beq.w	800f334 <_vfiprintf_r+0x1ec>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ca:	9304      	str	r3, [sp, #16]
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1d4:	46a8      	mov	r8, r5
 800f1d6:	2205      	movs	r2, #5
 800f1d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f1dc:	485e      	ldr	r0, [pc, #376]	; (800f358 <_vfiprintf_r+0x210>)
 800f1de:	f7f1 f81f 	bl	8000220 <memchr>
 800f1e2:	9b04      	ldr	r3, [sp, #16]
 800f1e4:	bb78      	cbnz	r0, 800f246 <_vfiprintf_r+0xfe>
 800f1e6:	06d9      	lsls	r1, r3, #27
 800f1e8:	bf44      	itt	mi
 800f1ea:	2220      	movmi	r2, #32
 800f1ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f1f0:	071a      	lsls	r2, r3, #28
 800f1f2:	bf44      	itt	mi
 800f1f4:	222b      	movmi	r2, #43	; 0x2b
 800f1f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f1fa:	782a      	ldrb	r2, [r5, #0]
 800f1fc:	2a2a      	cmp	r2, #42	; 0x2a
 800f1fe:	d02a      	beq.n	800f256 <_vfiprintf_r+0x10e>
 800f200:	9a07      	ldr	r2, [sp, #28]
 800f202:	46a8      	mov	r8, r5
 800f204:	2000      	movs	r0, #0
 800f206:	250a      	movs	r5, #10
 800f208:	4641      	mov	r1, r8
 800f20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f20e:	3b30      	subs	r3, #48	; 0x30
 800f210:	2b09      	cmp	r3, #9
 800f212:	d969      	bls.n	800f2e8 <_vfiprintf_r+0x1a0>
 800f214:	b360      	cbz	r0, 800f270 <_vfiprintf_r+0x128>
 800f216:	e024      	b.n	800f262 <_vfiprintf_r+0x11a>
 800f218:	4b50      	ldr	r3, [pc, #320]	; (800f35c <_vfiprintf_r+0x214>)
 800f21a:	429c      	cmp	r4, r3
 800f21c:	d101      	bne.n	800f222 <_vfiprintf_r+0xda>
 800f21e:	68b4      	ldr	r4, [r6, #8]
 800f220:	e7a2      	b.n	800f168 <_vfiprintf_r+0x20>
 800f222:	4b4f      	ldr	r3, [pc, #316]	; (800f360 <_vfiprintf_r+0x218>)
 800f224:	429c      	cmp	r4, r3
 800f226:	bf08      	it	eq
 800f228:	68f4      	ldreq	r4, [r6, #12]
 800f22a:	e79d      	b.n	800f168 <_vfiprintf_r+0x20>
 800f22c:	4621      	mov	r1, r4
 800f22e:	4630      	mov	r0, r6
 800f230:	f000 fad0 	bl	800f7d4 <__swsetup_r>
 800f234:	2800      	cmp	r0, #0
 800f236:	d09d      	beq.n	800f174 <_vfiprintf_r+0x2c>
 800f238:	f04f 30ff 	mov.w	r0, #4294967295
 800f23c:	b01d      	add	sp, #116	; 0x74
 800f23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f242:	46a8      	mov	r8, r5
 800f244:	e7a2      	b.n	800f18c <_vfiprintf_r+0x44>
 800f246:	4a44      	ldr	r2, [pc, #272]	; (800f358 <_vfiprintf_r+0x210>)
 800f248:	1a80      	subs	r0, r0, r2
 800f24a:	fa0b f000 	lsl.w	r0, fp, r0
 800f24e:	4318      	orrs	r0, r3
 800f250:	9004      	str	r0, [sp, #16]
 800f252:	4645      	mov	r5, r8
 800f254:	e7be      	b.n	800f1d4 <_vfiprintf_r+0x8c>
 800f256:	9a03      	ldr	r2, [sp, #12]
 800f258:	1d11      	adds	r1, r2, #4
 800f25a:	6812      	ldr	r2, [r2, #0]
 800f25c:	9103      	str	r1, [sp, #12]
 800f25e:	2a00      	cmp	r2, #0
 800f260:	db01      	blt.n	800f266 <_vfiprintf_r+0x11e>
 800f262:	9207      	str	r2, [sp, #28]
 800f264:	e004      	b.n	800f270 <_vfiprintf_r+0x128>
 800f266:	4252      	negs	r2, r2
 800f268:	f043 0302 	orr.w	r3, r3, #2
 800f26c:	9207      	str	r2, [sp, #28]
 800f26e:	9304      	str	r3, [sp, #16]
 800f270:	f898 3000 	ldrb.w	r3, [r8]
 800f274:	2b2e      	cmp	r3, #46	; 0x2e
 800f276:	d10e      	bne.n	800f296 <_vfiprintf_r+0x14e>
 800f278:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f27c:	2b2a      	cmp	r3, #42	; 0x2a
 800f27e:	d138      	bne.n	800f2f2 <_vfiprintf_r+0x1aa>
 800f280:	9b03      	ldr	r3, [sp, #12]
 800f282:	1d1a      	adds	r2, r3, #4
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	9203      	str	r2, [sp, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	bfb8      	it	lt
 800f28c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f290:	f108 0802 	add.w	r8, r8, #2
 800f294:	9305      	str	r3, [sp, #20]
 800f296:	4d33      	ldr	r5, [pc, #204]	; (800f364 <_vfiprintf_r+0x21c>)
 800f298:	f898 1000 	ldrb.w	r1, [r8]
 800f29c:	2203      	movs	r2, #3
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f7f0 ffbe 	bl	8000220 <memchr>
 800f2a4:	b140      	cbz	r0, 800f2b8 <_vfiprintf_r+0x170>
 800f2a6:	2340      	movs	r3, #64	; 0x40
 800f2a8:	1b40      	subs	r0, r0, r5
 800f2aa:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ae:	9b04      	ldr	r3, [sp, #16]
 800f2b0:	4303      	orrs	r3, r0
 800f2b2:	f108 0801 	add.w	r8, r8, #1
 800f2b6:	9304      	str	r3, [sp, #16]
 800f2b8:	f898 1000 	ldrb.w	r1, [r8]
 800f2bc:	482a      	ldr	r0, [pc, #168]	; (800f368 <_vfiprintf_r+0x220>)
 800f2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2c2:	2206      	movs	r2, #6
 800f2c4:	f108 0701 	add.w	r7, r8, #1
 800f2c8:	f7f0 ffaa 	bl	8000220 <memchr>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d037      	beq.n	800f340 <_vfiprintf_r+0x1f8>
 800f2d0:	4b26      	ldr	r3, [pc, #152]	; (800f36c <_vfiprintf_r+0x224>)
 800f2d2:	bb1b      	cbnz	r3, 800f31c <_vfiprintf_r+0x1d4>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	3307      	adds	r3, #7
 800f2d8:	f023 0307 	bic.w	r3, r3, #7
 800f2dc:	3308      	adds	r3, #8
 800f2de:	9303      	str	r3, [sp, #12]
 800f2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e2:	444b      	add	r3, r9
 800f2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e6:	e750      	b.n	800f18a <_vfiprintf_r+0x42>
 800f2e8:	fb05 3202 	mla	r2, r5, r2, r3
 800f2ec:	2001      	movs	r0, #1
 800f2ee:	4688      	mov	r8, r1
 800f2f0:	e78a      	b.n	800f208 <_vfiprintf_r+0xc0>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	f108 0801 	add.w	r8, r8, #1
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	250a      	movs	r5, #10
 800f2fe:	4640      	mov	r0, r8
 800f300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f304:	3a30      	subs	r2, #48	; 0x30
 800f306:	2a09      	cmp	r2, #9
 800f308:	d903      	bls.n	800f312 <_vfiprintf_r+0x1ca>
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d0c3      	beq.n	800f296 <_vfiprintf_r+0x14e>
 800f30e:	9105      	str	r1, [sp, #20]
 800f310:	e7c1      	b.n	800f296 <_vfiprintf_r+0x14e>
 800f312:	fb05 2101 	mla	r1, r5, r1, r2
 800f316:	2301      	movs	r3, #1
 800f318:	4680      	mov	r8, r0
 800f31a:	e7f0      	b.n	800f2fe <_vfiprintf_r+0x1b6>
 800f31c:	ab03      	add	r3, sp, #12
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	4622      	mov	r2, r4
 800f322:	4b13      	ldr	r3, [pc, #76]	; (800f370 <_vfiprintf_r+0x228>)
 800f324:	a904      	add	r1, sp, #16
 800f326:	4630      	mov	r0, r6
 800f328:	f3af 8000 	nop.w
 800f32c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f330:	4681      	mov	r9, r0
 800f332:	d1d5      	bne.n	800f2e0 <_vfiprintf_r+0x198>
 800f334:	89a3      	ldrh	r3, [r4, #12]
 800f336:	065b      	lsls	r3, r3, #25
 800f338:	f53f af7e 	bmi.w	800f238 <_vfiprintf_r+0xf0>
 800f33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f33e:	e77d      	b.n	800f23c <_vfiprintf_r+0xf4>
 800f340:	ab03      	add	r3, sp, #12
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	4622      	mov	r2, r4
 800f346:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <_vfiprintf_r+0x228>)
 800f348:	a904      	add	r1, sp, #16
 800f34a:	4630      	mov	r0, r6
 800f34c:	f000 f888 	bl	800f460 <_printf_i>
 800f350:	e7ec      	b.n	800f32c <_vfiprintf_r+0x1e4>
 800f352:	bf00      	nop
 800f354:	0800fcc8 	.word	0x0800fcc8
 800f358:	0800fd08 	.word	0x0800fd08
 800f35c:	0800fce8 	.word	0x0800fce8
 800f360:	0800fca8 	.word	0x0800fca8
 800f364:	0800fd0e 	.word	0x0800fd0e
 800f368:	0800fd12 	.word	0x0800fd12
 800f36c:	00000000 	.word	0x00000000
 800f370:	0800f123 	.word	0x0800f123

0800f374 <_printf_common>:
 800f374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	4691      	mov	r9, r2
 800f37a:	461f      	mov	r7, r3
 800f37c:	688a      	ldr	r2, [r1, #8]
 800f37e:	690b      	ldr	r3, [r1, #16]
 800f380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f384:	4293      	cmp	r3, r2
 800f386:	bfb8      	it	lt
 800f388:	4613      	movlt	r3, r2
 800f38a:	f8c9 3000 	str.w	r3, [r9]
 800f38e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f392:	4606      	mov	r6, r0
 800f394:	460c      	mov	r4, r1
 800f396:	b112      	cbz	r2, 800f39e <_printf_common+0x2a>
 800f398:	3301      	adds	r3, #1
 800f39a:	f8c9 3000 	str.w	r3, [r9]
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	0699      	lsls	r1, r3, #26
 800f3a2:	bf42      	ittt	mi
 800f3a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f3a8:	3302      	addmi	r3, #2
 800f3aa:	f8c9 3000 	strmi.w	r3, [r9]
 800f3ae:	6825      	ldr	r5, [r4, #0]
 800f3b0:	f015 0506 	ands.w	r5, r5, #6
 800f3b4:	d107      	bne.n	800f3c6 <_printf_common+0x52>
 800f3b6:	f104 0a19 	add.w	sl, r4, #25
 800f3ba:	68e3      	ldr	r3, [r4, #12]
 800f3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f3c0:	1a9b      	subs	r3, r3, r2
 800f3c2:	42ab      	cmp	r3, r5
 800f3c4:	dc28      	bgt.n	800f418 <_printf_common+0xa4>
 800f3c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f3ca:	6822      	ldr	r2, [r4, #0]
 800f3cc:	3300      	adds	r3, #0
 800f3ce:	bf18      	it	ne
 800f3d0:	2301      	movne	r3, #1
 800f3d2:	0692      	lsls	r2, r2, #26
 800f3d4:	d42d      	bmi.n	800f432 <_printf_common+0xbe>
 800f3d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3da:	4639      	mov	r1, r7
 800f3dc:	4630      	mov	r0, r6
 800f3de:	47c0      	blx	r8
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	d020      	beq.n	800f426 <_printf_common+0xb2>
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	68e5      	ldr	r5, [r4, #12]
 800f3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3ec:	f003 0306 	and.w	r3, r3, #6
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	bf08      	it	eq
 800f3f4:	1aad      	subeq	r5, r5, r2
 800f3f6:	68a3      	ldr	r3, [r4, #8]
 800f3f8:	6922      	ldr	r2, [r4, #16]
 800f3fa:	bf0c      	ite	eq
 800f3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f400:	2500      	movne	r5, #0
 800f402:	4293      	cmp	r3, r2
 800f404:	bfc4      	itt	gt
 800f406:	1a9b      	subgt	r3, r3, r2
 800f408:	18ed      	addgt	r5, r5, r3
 800f40a:	f04f 0900 	mov.w	r9, #0
 800f40e:	341a      	adds	r4, #26
 800f410:	454d      	cmp	r5, r9
 800f412:	d11a      	bne.n	800f44a <_printf_common+0xd6>
 800f414:	2000      	movs	r0, #0
 800f416:	e008      	b.n	800f42a <_printf_common+0xb6>
 800f418:	2301      	movs	r3, #1
 800f41a:	4652      	mov	r2, sl
 800f41c:	4639      	mov	r1, r7
 800f41e:	4630      	mov	r0, r6
 800f420:	47c0      	blx	r8
 800f422:	3001      	adds	r0, #1
 800f424:	d103      	bne.n	800f42e <_printf_common+0xba>
 800f426:	f04f 30ff 	mov.w	r0, #4294967295
 800f42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f42e:	3501      	adds	r5, #1
 800f430:	e7c3      	b.n	800f3ba <_printf_common+0x46>
 800f432:	18e1      	adds	r1, r4, r3
 800f434:	1c5a      	adds	r2, r3, #1
 800f436:	2030      	movs	r0, #48	; 0x30
 800f438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f43c:	4422      	add	r2, r4
 800f43e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f446:	3302      	adds	r3, #2
 800f448:	e7c5      	b.n	800f3d6 <_printf_common+0x62>
 800f44a:	2301      	movs	r3, #1
 800f44c:	4622      	mov	r2, r4
 800f44e:	4639      	mov	r1, r7
 800f450:	4630      	mov	r0, r6
 800f452:	47c0      	blx	r8
 800f454:	3001      	adds	r0, #1
 800f456:	d0e6      	beq.n	800f426 <_printf_common+0xb2>
 800f458:	f109 0901 	add.w	r9, r9, #1
 800f45c:	e7d8      	b.n	800f410 <_printf_common+0x9c>
	...

0800f460 <_printf_i>:
 800f460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f464:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f468:	460c      	mov	r4, r1
 800f46a:	7e09      	ldrb	r1, [r1, #24]
 800f46c:	b085      	sub	sp, #20
 800f46e:	296e      	cmp	r1, #110	; 0x6e
 800f470:	4617      	mov	r7, r2
 800f472:	4606      	mov	r6, r0
 800f474:	4698      	mov	r8, r3
 800f476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f478:	f000 80b3 	beq.w	800f5e2 <_printf_i+0x182>
 800f47c:	d822      	bhi.n	800f4c4 <_printf_i+0x64>
 800f47e:	2963      	cmp	r1, #99	; 0x63
 800f480:	d036      	beq.n	800f4f0 <_printf_i+0x90>
 800f482:	d80a      	bhi.n	800f49a <_printf_i+0x3a>
 800f484:	2900      	cmp	r1, #0
 800f486:	f000 80b9 	beq.w	800f5fc <_printf_i+0x19c>
 800f48a:	2958      	cmp	r1, #88	; 0x58
 800f48c:	f000 8083 	beq.w	800f596 <_printf_i+0x136>
 800f490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f494:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f498:	e032      	b.n	800f500 <_printf_i+0xa0>
 800f49a:	2964      	cmp	r1, #100	; 0x64
 800f49c:	d001      	beq.n	800f4a2 <_printf_i+0x42>
 800f49e:	2969      	cmp	r1, #105	; 0x69
 800f4a0:	d1f6      	bne.n	800f490 <_printf_i+0x30>
 800f4a2:	6820      	ldr	r0, [r4, #0]
 800f4a4:	6813      	ldr	r3, [r2, #0]
 800f4a6:	0605      	lsls	r5, r0, #24
 800f4a8:	f103 0104 	add.w	r1, r3, #4
 800f4ac:	d52a      	bpl.n	800f504 <_printf_i+0xa4>
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6011      	str	r1, [r2, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	da03      	bge.n	800f4be <_printf_i+0x5e>
 800f4b6:	222d      	movs	r2, #45	; 0x2d
 800f4b8:	425b      	negs	r3, r3
 800f4ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f4be:	486f      	ldr	r0, [pc, #444]	; (800f67c <_printf_i+0x21c>)
 800f4c0:	220a      	movs	r2, #10
 800f4c2:	e039      	b.n	800f538 <_printf_i+0xd8>
 800f4c4:	2973      	cmp	r1, #115	; 0x73
 800f4c6:	f000 809d 	beq.w	800f604 <_printf_i+0x1a4>
 800f4ca:	d808      	bhi.n	800f4de <_printf_i+0x7e>
 800f4cc:	296f      	cmp	r1, #111	; 0x6f
 800f4ce:	d020      	beq.n	800f512 <_printf_i+0xb2>
 800f4d0:	2970      	cmp	r1, #112	; 0x70
 800f4d2:	d1dd      	bne.n	800f490 <_printf_i+0x30>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	f043 0320 	orr.w	r3, r3, #32
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	e003      	b.n	800f4e6 <_printf_i+0x86>
 800f4de:	2975      	cmp	r1, #117	; 0x75
 800f4e0:	d017      	beq.n	800f512 <_printf_i+0xb2>
 800f4e2:	2978      	cmp	r1, #120	; 0x78
 800f4e4:	d1d4      	bne.n	800f490 <_printf_i+0x30>
 800f4e6:	2378      	movs	r3, #120	; 0x78
 800f4e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4ec:	4864      	ldr	r0, [pc, #400]	; (800f680 <_printf_i+0x220>)
 800f4ee:	e055      	b.n	800f59c <_printf_i+0x13c>
 800f4f0:	6813      	ldr	r3, [r2, #0]
 800f4f2:	1d19      	adds	r1, r3, #4
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	6011      	str	r1, [r2, #0]
 800f4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f500:	2301      	movs	r3, #1
 800f502:	e08c      	b.n	800f61e <_printf_i+0x1be>
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	6011      	str	r1, [r2, #0]
 800f508:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f50c:	bf18      	it	ne
 800f50e:	b21b      	sxthne	r3, r3
 800f510:	e7cf      	b.n	800f4b2 <_printf_i+0x52>
 800f512:	6813      	ldr	r3, [r2, #0]
 800f514:	6825      	ldr	r5, [r4, #0]
 800f516:	1d18      	adds	r0, r3, #4
 800f518:	6010      	str	r0, [r2, #0]
 800f51a:	0628      	lsls	r0, r5, #24
 800f51c:	d501      	bpl.n	800f522 <_printf_i+0xc2>
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	e002      	b.n	800f528 <_printf_i+0xc8>
 800f522:	0668      	lsls	r0, r5, #25
 800f524:	d5fb      	bpl.n	800f51e <_printf_i+0xbe>
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	4854      	ldr	r0, [pc, #336]	; (800f67c <_printf_i+0x21c>)
 800f52a:	296f      	cmp	r1, #111	; 0x6f
 800f52c:	bf14      	ite	ne
 800f52e:	220a      	movne	r2, #10
 800f530:	2208      	moveq	r2, #8
 800f532:	2100      	movs	r1, #0
 800f534:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f538:	6865      	ldr	r5, [r4, #4]
 800f53a:	60a5      	str	r5, [r4, #8]
 800f53c:	2d00      	cmp	r5, #0
 800f53e:	f2c0 8095 	blt.w	800f66c <_printf_i+0x20c>
 800f542:	6821      	ldr	r1, [r4, #0]
 800f544:	f021 0104 	bic.w	r1, r1, #4
 800f548:	6021      	str	r1, [r4, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d13d      	bne.n	800f5ca <_printf_i+0x16a>
 800f54e:	2d00      	cmp	r5, #0
 800f550:	f040 808e 	bne.w	800f670 <_printf_i+0x210>
 800f554:	4665      	mov	r5, ip
 800f556:	2a08      	cmp	r2, #8
 800f558:	d10b      	bne.n	800f572 <_printf_i+0x112>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	07db      	lsls	r3, r3, #31
 800f55e:	d508      	bpl.n	800f572 <_printf_i+0x112>
 800f560:	6923      	ldr	r3, [r4, #16]
 800f562:	6862      	ldr	r2, [r4, #4]
 800f564:	429a      	cmp	r2, r3
 800f566:	bfde      	ittt	le
 800f568:	2330      	movle	r3, #48	; 0x30
 800f56a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f56e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f572:	ebac 0305 	sub.w	r3, ip, r5
 800f576:	6123      	str	r3, [r4, #16]
 800f578:	f8cd 8000 	str.w	r8, [sp]
 800f57c:	463b      	mov	r3, r7
 800f57e:	aa03      	add	r2, sp, #12
 800f580:	4621      	mov	r1, r4
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff fef6 	bl	800f374 <_printf_common>
 800f588:	3001      	adds	r0, #1
 800f58a:	d14d      	bne.n	800f628 <_printf_i+0x1c8>
 800f58c:	f04f 30ff 	mov.w	r0, #4294967295
 800f590:	b005      	add	sp, #20
 800f592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f596:	4839      	ldr	r0, [pc, #228]	; (800f67c <_printf_i+0x21c>)
 800f598:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f59c:	6813      	ldr	r3, [r2, #0]
 800f59e:	6821      	ldr	r1, [r4, #0]
 800f5a0:	1d1d      	adds	r5, r3, #4
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6015      	str	r5, [r2, #0]
 800f5a6:	060a      	lsls	r2, r1, #24
 800f5a8:	d50b      	bpl.n	800f5c2 <_printf_i+0x162>
 800f5aa:	07ca      	lsls	r2, r1, #31
 800f5ac:	bf44      	itt	mi
 800f5ae:	f041 0120 	orrmi.w	r1, r1, #32
 800f5b2:	6021      	strmi	r1, [r4, #0]
 800f5b4:	b91b      	cbnz	r3, 800f5be <_printf_i+0x15e>
 800f5b6:	6822      	ldr	r2, [r4, #0]
 800f5b8:	f022 0220 	bic.w	r2, r2, #32
 800f5bc:	6022      	str	r2, [r4, #0]
 800f5be:	2210      	movs	r2, #16
 800f5c0:	e7b7      	b.n	800f532 <_printf_i+0xd2>
 800f5c2:	064d      	lsls	r5, r1, #25
 800f5c4:	bf48      	it	mi
 800f5c6:	b29b      	uxthmi	r3, r3
 800f5c8:	e7ef      	b.n	800f5aa <_printf_i+0x14a>
 800f5ca:	4665      	mov	r5, ip
 800f5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5d0:	fb02 3311 	mls	r3, r2, r1, r3
 800f5d4:	5cc3      	ldrb	r3, [r0, r3]
 800f5d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f5da:	460b      	mov	r3, r1
 800f5dc:	2900      	cmp	r1, #0
 800f5de:	d1f5      	bne.n	800f5cc <_printf_i+0x16c>
 800f5e0:	e7b9      	b.n	800f556 <_printf_i+0xf6>
 800f5e2:	6813      	ldr	r3, [r2, #0]
 800f5e4:	6825      	ldr	r5, [r4, #0]
 800f5e6:	6961      	ldr	r1, [r4, #20]
 800f5e8:	1d18      	adds	r0, r3, #4
 800f5ea:	6010      	str	r0, [r2, #0]
 800f5ec:	0628      	lsls	r0, r5, #24
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	d501      	bpl.n	800f5f6 <_printf_i+0x196>
 800f5f2:	6019      	str	r1, [r3, #0]
 800f5f4:	e002      	b.n	800f5fc <_printf_i+0x19c>
 800f5f6:	066a      	lsls	r2, r5, #25
 800f5f8:	d5fb      	bpl.n	800f5f2 <_printf_i+0x192>
 800f5fa:	8019      	strh	r1, [r3, #0]
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	6123      	str	r3, [r4, #16]
 800f600:	4665      	mov	r5, ip
 800f602:	e7b9      	b.n	800f578 <_printf_i+0x118>
 800f604:	6813      	ldr	r3, [r2, #0]
 800f606:	1d19      	adds	r1, r3, #4
 800f608:	6011      	str	r1, [r2, #0]
 800f60a:	681d      	ldr	r5, [r3, #0]
 800f60c:	6862      	ldr	r2, [r4, #4]
 800f60e:	2100      	movs	r1, #0
 800f610:	4628      	mov	r0, r5
 800f612:	f7f0 fe05 	bl	8000220 <memchr>
 800f616:	b108      	cbz	r0, 800f61c <_printf_i+0x1bc>
 800f618:	1b40      	subs	r0, r0, r5
 800f61a:	6060      	str	r0, [r4, #4]
 800f61c:	6863      	ldr	r3, [r4, #4]
 800f61e:	6123      	str	r3, [r4, #16]
 800f620:	2300      	movs	r3, #0
 800f622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f626:	e7a7      	b.n	800f578 <_printf_i+0x118>
 800f628:	6923      	ldr	r3, [r4, #16]
 800f62a:	462a      	mov	r2, r5
 800f62c:	4639      	mov	r1, r7
 800f62e:	4630      	mov	r0, r6
 800f630:	47c0      	blx	r8
 800f632:	3001      	adds	r0, #1
 800f634:	d0aa      	beq.n	800f58c <_printf_i+0x12c>
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	079b      	lsls	r3, r3, #30
 800f63a:	d413      	bmi.n	800f664 <_printf_i+0x204>
 800f63c:	68e0      	ldr	r0, [r4, #12]
 800f63e:	9b03      	ldr	r3, [sp, #12]
 800f640:	4298      	cmp	r0, r3
 800f642:	bfb8      	it	lt
 800f644:	4618      	movlt	r0, r3
 800f646:	e7a3      	b.n	800f590 <_printf_i+0x130>
 800f648:	2301      	movs	r3, #1
 800f64a:	464a      	mov	r2, r9
 800f64c:	4639      	mov	r1, r7
 800f64e:	4630      	mov	r0, r6
 800f650:	47c0      	blx	r8
 800f652:	3001      	adds	r0, #1
 800f654:	d09a      	beq.n	800f58c <_printf_i+0x12c>
 800f656:	3501      	adds	r5, #1
 800f658:	68e3      	ldr	r3, [r4, #12]
 800f65a:	9a03      	ldr	r2, [sp, #12]
 800f65c:	1a9b      	subs	r3, r3, r2
 800f65e:	42ab      	cmp	r3, r5
 800f660:	dcf2      	bgt.n	800f648 <_printf_i+0x1e8>
 800f662:	e7eb      	b.n	800f63c <_printf_i+0x1dc>
 800f664:	2500      	movs	r5, #0
 800f666:	f104 0919 	add.w	r9, r4, #25
 800f66a:	e7f5      	b.n	800f658 <_printf_i+0x1f8>
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1ac      	bne.n	800f5ca <_printf_i+0x16a>
 800f670:	7803      	ldrb	r3, [r0, #0]
 800f672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f676:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f67a:	e76c      	b.n	800f556 <_printf_i+0xf6>
 800f67c:	0800fd19 	.word	0x0800fd19
 800f680:	0800fd2a 	.word	0x0800fd2a

0800f684 <__sread>:
 800f684:	b510      	push	{r4, lr}
 800f686:	460c      	mov	r4, r1
 800f688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68c:	f000 fa46 	bl	800fb1c <_read_r>
 800f690:	2800      	cmp	r0, #0
 800f692:	bfab      	itete	ge
 800f694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f696:	89a3      	ldrhlt	r3, [r4, #12]
 800f698:	181b      	addge	r3, r3, r0
 800f69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f69e:	bfac      	ite	ge
 800f6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6a2:	81a3      	strhlt	r3, [r4, #12]
 800f6a4:	bd10      	pop	{r4, pc}

0800f6a6 <__swrite>:
 800f6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6aa:	461f      	mov	r7, r3
 800f6ac:	898b      	ldrh	r3, [r1, #12]
 800f6ae:	05db      	lsls	r3, r3, #23
 800f6b0:	4605      	mov	r5, r0
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	4616      	mov	r6, r2
 800f6b6:	d505      	bpl.n	800f6c4 <__swrite+0x1e>
 800f6b8:	2302      	movs	r3, #2
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c0:	f000 f9b6 	bl	800fa30 <_lseek_r>
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6ce:	81a3      	strh	r3, [r4, #12]
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	463b      	mov	r3, r7
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6da:	f000 b869 	b.w	800f7b0 <_write_r>

0800f6de <__sseek>:
 800f6de:	b510      	push	{r4, lr}
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e6:	f000 f9a3 	bl	800fa30 <_lseek_r>
 800f6ea:	1c43      	adds	r3, r0, #1
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	bf15      	itete	ne
 800f6f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6fa:	81a3      	strheq	r3, [r4, #12]
 800f6fc:	bf18      	it	ne
 800f6fe:	81a3      	strhne	r3, [r4, #12]
 800f700:	bd10      	pop	{r4, pc}

0800f702 <__sclose>:
 800f702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f706:	f000 b8d3 	b.w	800f8b0 <_close_r>
	...

0800f70c <__swbuf_r>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	460e      	mov	r6, r1
 800f710:	4614      	mov	r4, r2
 800f712:	4605      	mov	r5, r0
 800f714:	b118      	cbz	r0, 800f71e <__swbuf_r+0x12>
 800f716:	6983      	ldr	r3, [r0, #24]
 800f718:	b90b      	cbnz	r3, 800f71e <__swbuf_r+0x12>
 800f71a:	f7ff fc5f 	bl	800efdc <__sinit>
 800f71e:	4b21      	ldr	r3, [pc, #132]	; (800f7a4 <__swbuf_r+0x98>)
 800f720:	429c      	cmp	r4, r3
 800f722:	d12a      	bne.n	800f77a <__swbuf_r+0x6e>
 800f724:	686c      	ldr	r4, [r5, #4]
 800f726:	69a3      	ldr	r3, [r4, #24]
 800f728:	60a3      	str	r3, [r4, #8]
 800f72a:	89a3      	ldrh	r3, [r4, #12]
 800f72c:	071a      	lsls	r2, r3, #28
 800f72e:	d52e      	bpl.n	800f78e <__swbuf_r+0x82>
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	b363      	cbz	r3, 800f78e <__swbuf_r+0x82>
 800f734:	6923      	ldr	r3, [r4, #16]
 800f736:	6820      	ldr	r0, [r4, #0]
 800f738:	1ac0      	subs	r0, r0, r3
 800f73a:	6963      	ldr	r3, [r4, #20]
 800f73c:	b2f6      	uxtb	r6, r6
 800f73e:	4283      	cmp	r3, r0
 800f740:	4637      	mov	r7, r6
 800f742:	dc04      	bgt.n	800f74e <__swbuf_r+0x42>
 800f744:	4621      	mov	r1, r4
 800f746:	4628      	mov	r0, r5
 800f748:	f000 f948 	bl	800f9dc <_fflush_r>
 800f74c:	bb28      	cbnz	r0, 800f79a <__swbuf_r+0x8e>
 800f74e:	68a3      	ldr	r3, [r4, #8]
 800f750:	3b01      	subs	r3, #1
 800f752:	60a3      	str	r3, [r4, #8]
 800f754:	6823      	ldr	r3, [r4, #0]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	6022      	str	r2, [r4, #0]
 800f75a:	701e      	strb	r6, [r3, #0]
 800f75c:	6963      	ldr	r3, [r4, #20]
 800f75e:	3001      	adds	r0, #1
 800f760:	4283      	cmp	r3, r0
 800f762:	d004      	beq.n	800f76e <__swbuf_r+0x62>
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	07db      	lsls	r3, r3, #31
 800f768:	d519      	bpl.n	800f79e <__swbuf_r+0x92>
 800f76a:	2e0a      	cmp	r6, #10
 800f76c:	d117      	bne.n	800f79e <__swbuf_r+0x92>
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 f933 	bl	800f9dc <_fflush_r>
 800f776:	b190      	cbz	r0, 800f79e <__swbuf_r+0x92>
 800f778:	e00f      	b.n	800f79a <__swbuf_r+0x8e>
 800f77a:	4b0b      	ldr	r3, [pc, #44]	; (800f7a8 <__swbuf_r+0x9c>)
 800f77c:	429c      	cmp	r4, r3
 800f77e:	d101      	bne.n	800f784 <__swbuf_r+0x78>
 800f780:	68ac      	ldr	r4, [r5, #8]
 800f782:	e7d0      	b.n	800f726 <__swbuf_r+0x1a>
 800f784:	4b09      	ldr	r3, [pc, #36]	; (800f7ac <__swbuf_r+0xa0>)
 800f786:	429c      	cmp	r4, r3
 800f788:	bf08      	it	eq
 800f78a:	68ec      	ldreq	r4, [r5, #12]
 800f78c:	e7cb      	b.n	800f726 <__swbuf_r+0x1a>
 800f78e:	4621      	mov	r1, r4
 800f790:	4628      	mov	r0, r5
 800f792:	f000 f81f 	bl	800f7d4 <__swsetup_r>
 800f796:	2800      	cmp	r0, #0
 800f798:	d0cc      	beq.n	800f734 <__swbuf_r+0x28>
 800f79a:	f04f 37ff 	mov.w	r7, #4294967295
 800f79e:	4638      	mov	r0, r7
 800f7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	0800fcc8 	.word	0x0800fcc8
 800f7a8:	0800fce8 	.word	0x0800fce8
 800f7ac:	0800fca8 	.word	0x0800fca8

0800f7b0 <_write_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4c07      	ldr	r4, [pc, #28]	; (800f7d0 <_write_r+0x20>)
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	4608      	mov	r0, r1
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	6022      	str	r2, [r4, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	f7f2 fd45 	bl	800224e <_write>
 800f7c4:	1c43      	adds	r3, r0, #1
 800f7c6:	d102      	bne.n	800f7ce <_write_r+0x1e>
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	b103      	cbz	r3, 800f7ce <_write_r+0x1e>
 800f7cc:	602b      	str	r3, [r5, #0]
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
 800f7d0:	20005390 	.word	0x20005390

0800f7d4 <__swsetup_r>:
 800f7d4:	4b32      	ldr	r3, [pc, #200]	; (800f8a0 <__swsetup_r+0xcc>)
 800f7d6:	b570      	push	{r4, r5, r6, lr}
 800f7d8:	681d      	ldr	r5, [r3, #0]
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460c      	mov	r4, r1
 800f7de:	b125      	cbz	r5, 800f7ea <__swsetup_r+0x16>
 800f7e0:	69ab      	ldr	r3, [r5, #24]
 800f7e2:	b913      	cbnz	r3, 800f7ea <__swsetup_r+0x16>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	f7ff fbf9 	bl	800efdc <__sinit>
 800f7ea:	4b2e      	ldr	r3, [pc, #184]	; (800f8a4 <__swsetup_r+0xd0>)
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	d10f      	bne.n	800f810 <__swsetup_r+0x3c>
 800f7f0:	686c      	ldr	r4, [r5, #4]
 800f7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	0715      	lsls	r5, r2, #28
 800f7fa:	d42c      	bmi.n	800f856 <__swsetup_r+0x82>
 800f7fc:	06d0      	lsls	r0, r2, #27
 800f7fe:	d411      	bmi.n	800f824 <__swsetup_r+0x50>
 800f800:	2209      	movs	r2, #9
 800f802:	6032      	str	r2, [r6, #0]
 800f804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f808:	81a3      	strh	r3, [r4, #12]
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
 800f80e:	e03e      	b.n	800f88e <__swsetup_r+0xba>
 800f810:	4b25      	ldr	r3, [pc, #148]	; (800f8a8 <__swsetup_r+0xd4>)
 800f812:	429c      	cmp	r4, r3
 800f814:	d101      	bne.n	800f81a <__swsetup_r+0x46>
 800f816:	68ac      	ldr	r4, [r5, #8]
 800f818:	e7eb      	b.n	800f7f2 <__swsetup_r+0x1e>
 800f81a:	4b24      	ldr	r3, [pc, #144]	; (800f8ac <__swsetup_r+0xd8>)
 800f81c:	429c      	cmp	r4, r3
 800f81e:	bf08      	it	eq
 800f820:	68ec      	ldreq	r4, [r5, #12]
 800f822:	e7e6      	b.n	800f7f2 <__swsetup_r+0x1e>
 800f824:	0751      	lsls	r1, r2, #29
 800f826:	d512      	bpl.n	800f84e <__swsetup_r+0x7a>
 800f828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f82a:	b141      	cbz	r1, 800f83e <__swsetup_r+0x6a>
 800f82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f830:	4299      	cmp	r1, r3
 800f832:	d002      	beq.n	800f83a <__swsetup_r+0x66>
 800f834:	4630      	mov	r0, r6
 800f836:	f7ff fac1 	bl	800edbc <_free_r>
 800f83a:	2300      	movs	r3, #0
 800f83c:	6363      	str	r3, [r4, #52]	; 0x34
 800f83e:	89a3      	ldrh	r3, [r4, #12]
 800f840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f844:	81a3      	strh	r3, [r4, #12]
 800f846:	2300      	movs	r3, #0
 800f848:	6063      	str	r3, [r4, #4]
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	f043 0308 	orr.w	r3, r3, #8
 800f854:	81a3      	strh	r3, [r4, #12]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	b94b      	cbnz	r3, 800f86e <__swsetup_r+0x9a>
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f864:	d003      	beq.n	800f86e <__swsetup_r+0x9a>
 800f866:	4621      	mov	r1, r4
 800f868:	4630      	mov	r0, r6
 800f86a:	f000 f917 	bl	800fa9c <__smakebuf_r>
 800f86e:	89a2      	ldrh	r2, [r4, #12]
 800f870:	f012 0301 	ands.w	r3, r2, #1
 800f874:	d00c      	beq.n	800f890 <__swsetup_r+0xbc>
 800f876:	2300      	movs	r3, #0
 800f878:	60a3      	str	r3, [r4, #8]
 800f87a:	6963      	ldr	r3, [r4, #20]
 800f87c:	425b      	negs	r3, r3
 800f87e:	61a3      	str	r3, [r4, #24]
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	b953      	cbnz	r3, 800f89a <__swsetup_r+0xc6>
 800f884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f888:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f88c:	d1ba      	bne.n	800f804 <__swsetup_r+0x30>
 800f88e:	bd70      	pop	{r4, r5, r6, pc}
 800f890:	0792      	lsls	r2, r2, #30
 800f892:	bf58      	it	pl
 800f894:	6963      	ldrpl	r3, [r4, #20]
 800f896:	60a3      	str	r3, [r4, #8]
 800f898:	e7f2      	b.n	800f880 <__swsetup_r+0xac>
 800f89a:	2000      	movs	r0, #0
 800f89c:	e7f7      	b.n	800f88e <__swsetup_r+0xba>
 800f89e:	bf00      	nop
 800f8a0:	20000038 	.word	0x20000038
 800f8a4:	0800fcc8 	.word	0x0800fcc8
 800f8a8:	0800fce8 	.word	0x0800fce8
 800f8ac:	0800fca8 	.word	0x0800fca8

0800f8b0 <_close_r>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	4c06      	ldr	r4, [pc, #24]	; (800f8cc <_close_r+0x1c>)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	6023      	str	r3, [r4, #0]
 800f8bc:	f7f2 fce3 	bl	8002286 <_close>
 800f8c0:	1c43      	adds	r3, r0, #1
 800f8c2:	d102      	bne.n	800f8ca <_close_r+0x1a>
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	b103      	cbz	r3, 800f8ca <_close_r+0x1a>
 800f8c8:	602b      	str	r3, [r5, #0]
 800f8ca:	bd38      	pop	{r3, r4, r5, pc}
 800f8cc:	20005390 	.word	0x20005390

0800f8d0 <__sflush_r>:
 800f8d0:	898a      	ldrh	r2, [r1, #12]
 800f8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	0710      	lsls	r0, r2, #28
 800f8da:	460c      	mov	r4, r1
 800f8dc:	d458      	bmi.n	800f990 <__sflush_r+0xc0>
 800f8de:	684b      	ldr	r3, [r1, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dc05      	bgt.n	800f8f0 <__sflush_r+0x20>
 800f8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	dc02      	bgt.n	800f8f0 <__sflush_r+0x20>
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f2:	2e00      	cmp	r6, #0
 800f8f4:	d0f9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8fc:	682f      	ldr	r7, [r5, #0]
 800f8fe:	6a21      	ldr	r1, [r4, #32]
 800f900:	602b      	str	r3, [r5, #0]
 800f902:	d032      	beq.n	800f96a <__sflush_r+0x9a>
 800f904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	075a      	lsls	r2, r3, #29
 800f90a:	d505      	bpl.n	800f918 <__sflush_r+0x48>
 800f90c:	6863      	ldr	r3, [r4, #4]
 800f90e:	1ac0      	subs	r0, r0, r3
 800f910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f912:	b10b      	cbz	r3, 800f918 <__sflush_r+0x48>
 800f914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f916:	1ac0      	subs	r0, r0, r3
 800f918:	2300      	movs	r3, #0
 800f91a:	4602      	mov	r2, r0
 800f91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f91e:	6a21      	ldr	r1, [r4, #32]
 800f920:	4628      	mov	r0, r5
 800f922:	47b0      	blx	r6
 800f924:	1c43      	adds	r3, r0, #1
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	d106      	bne.n	800f938 <__sflush_r+0x68>
 800f92a:	6829      	ldr	r1, [r5, #0]
 800f92c:	291d      	cmp	r1, #29
 800f92e:	d848      	bhi.n	800f9c2 <__sflush_r+0xf2>
 800f930:	4a29      	ldr	r2, [pc, #164]	; (800f9d8 <__sflush_r+0x108>)
 800f932:	40ca      	lsrs	r2, r1
 800f934:	07d6      	lsls	r6, r2, #31
 800f936:	d544      	bpl.n	800f9c2 <__sflush_r+0xf2>
 800f938:	2200      	movs	r2, #0
 800f93a:	6062      	str	r2, [r4, #4]
 800f93c:	04d9      	lsls	r1, r3, #19
 800f93e:	6922      	ldr	r2, [r4, #16]
 800f940:	6022      	str	r2, [r4, #0]
 800f942:	d504      	bpl.n	800f94e <__sflush_r+0x7e>
 800f944:	1c42      	adds	r2, r0, #1
 800f946:	d101      	bne.n	800f94c <__sflush_r+0x7c>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b903      	cbnz	r3, 800f94e <__sflush_r+0x7e>
 800f94c:	6560      	str	r0, [r4, #84]	; 0x54
 800f94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f950:	602f      	str	r7, [r5, #0]
 800f952:	2900      	cmp	r1, #0
 800f954:	d0c9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f95a:	4299      	cmp	r1, r3
 800f95c:	d002      	beq.n	800f964 <__sflush_r+0x94>
 800f95e:	4628      	mov	r0, r5
 800f960:	f7ff fa2c 	bl	800edbc <_free_r>
 800f964:	2000      	movs	r0, #0
 800f966:	6360      	str	r0, [r4, #52]	; 0x34
 800f968:	e7c0      	b.n	800f8ec <__sflush_r+0x1c>
 800f96a:	2301      	movs	r3, #1
 800f96c:	4628      	mov	r0, r5
 800f96e:	47b0      	blx	r6
 800f970:	1c41      	adds	r1, r0, #1
 800f972:	d1c8      	bne.n	800f906 <__sflush_r+0x36>
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0c5      	beq.n	800f906 <__sflush_r+0x36>
 800f97a:	2b1d      	cmp	r3, #29
 800f97c:	d001      	beq.n	800f982 <__sflush_r+0xb2>
 800f97e:	2b16      	cmp	r3, #22
 800f980:	d101      	bne.n	800f986 <__sflush_r+0xb6>
 800f982:	602f      	str	r7, [r5, #0]
 800f984:	e7b1      	b.n	800f8ea <__sflush_r+0x1a>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	e7ad      	b.n	800f8ec <__sflush_r+0x1c>
 800f990:	690f      	ldr	r7, [r1, #16]
 800f992:	2f00      	cmp	r7, #0
 800f994:	d0a9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f996:	0793      	lsls	r3, r2, #30
 800f998:	680e      	ldr	r6, [r1, #0]
 800f99a:	bf08      	it	eq
 800f99c:	694b      	ldreq	r3, [r1, #20]
 800f99e:	600f      	str	r7, [r1, #0]
 800f9a0:	bf18      	it	ne
 800f9a2:	2300      	movne	r3, #0
 800f9a4:	eba6 0807 	sub.w	r8, r6, r7
 800f9a8:	608b      	str	r3, [r1, #8]
 800f9aa:	f1b8 0f00 	cmp.w	r8, #0
 800f9ae:	dd9c      	ble.n	800f8ea <__sflush_r+0x1a>
 800f9b0:	4643      	mov	r3, r8
 800f9b2:	463a      	mov	r2, r7
 800f9b4:	6a21      	ldr	r1, [r4, #32]
 800f9b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	47b0      	blx	r6
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	dc06      	bgt.n	800f9ce <__sflush_r+0xfe>
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9c6:	81a3      	strh	r3, [r4, #12]
 800f9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9cc:	e78e      	b.n	800f8ec <__sflush_r+0x1c>
 800f9ce:	4407      	add	r7, r0
 800f9d0:	eba8 0800 	sub.w	r8, r8, r0
 800f9d4:	e7e9      	b.n	800f9aa <__sflush_r+0xda>
 800f9d6:	bf00      	nop
 800f9d8:	20400001 	.word	0x20400001

0800f9dc <_fflush_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	690b      	ldr	r3, [r1, #16]
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	b1db      	cbz	r3, 800fa1e <_fflush_r+0x42>
 800f9e6:	b118      	cbz	r0, 800f9f0 <_fflush_r+0x14>
 800f9e8:	6983      	ldr	r3, [r0, #24]
 800f9ea:	b90b      	cbnz	r3, 800f9f0 <_fflush_r+0x14>
 800f9ec:	f7ff faf6 	bl	800efdc <__sinit>
 800f9f0:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <_fflush_r+0x48>)
 800f9f2:	429c      	cmp	r4, r3
 800f9f4:	d109      	bne.n	800fa0a <_fflush_r+0x2e>
 800f9f6:	686c      	ldr	r4, [r5, #4]
 800f9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fc:	b17b      	cbz	r3, 800fa1e <_fflush_r+0x42>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4628      	mov	r0, r5
 800fa02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa06:	f7ff bf63 	b.w	800f8d0 <__sflush_r>
 800fa0a:	4b07      	ldr	r3, [pc, #28]	; (800fa28 <_fflush_r+0x4c>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	d101      	bne.n	800fa14 <_fflush_r+0x38>
 800fa10:	68ac      	ldr	r4, [r5, #8]
 800fa12:	e7f1      	b.n	800f9f8 <_fflush_r+0x1c>
 800fa14:	4b05      	ldr	r3, [pc, #20]	; (800fa2c <_fflush_r+0x50>)
 800fa16:	429c      	cmp	r4, r3
 800fa18:	bf08      	it	eq
 800fa1a:	68ec      	ldreq	r4, [r5, #12]
 800fa1c:	e7ec      	b.n	800f9f8 <_fflush_r+0x1c>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	bd38      	pop	{r3, r4, r5, pc}
 800fa22:	bf00      	nop
 800fa24:	0800fcc8 	.word	0x0800fcc8
 800fa28:	0800fce8 	.word	0x0800fce8
 800fa2c:	0800fca8 	.word	0x0800fca8

0800fa30 <_lseek_r>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	4c07      	ldr	r4, [pc, #28]	; (800fa50 <_lseek_r+0x20>)
 800fa34:	4605      	mov	r5, r0
 800fa36:	4608      	mov	r0, r1
 800fa38:	4611      	mov	r1, r2
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	6022      	str	r2, [r4, #0]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	f7f2 fc48 	bl	80022d4 <_lseek>
 800fa44:	1c43      	adds	r3, r0, #1
 800fa46:	d102      	bne.n	800fa4e <_lseek_r+0x1e>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	b103      	cbz	r3, 800fa4e <_lseek_r+0x1e>
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	bd38      	pop	{r3, r4, r5, pc}
 800fa50:	20005390 	.word	0x20005390

0800fa54 <__swhatbuf_r>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	460e      	mov	r6, r1
 800fa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa5c:	2900      	cmp	r1, #0
 800fa5e:	b096      	sub	sp, #88	; 0x58
 800fa60:	4614      	mov	r4, r2
 800fa62:	461d      	mov	r5, r3
 800fa64:	da07      	bge.n	800fa76 <__swhatbuf_r+0x22>
 800fa66:	2300      	movs	r3, #0
 800fa68:	602b      	str	r3, [r5, #0]
 800fa6a:	89b3      	ldrh	r3, [r6, #12]
 800fa6c:	061a      	lsls	r2, r3, #24
 800fa6e:	d410      	bmi.n	800fa92 <__swhatbuf_r+0x3e>
 800fa70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa74:	e00e      	b.n	800fa94 <__swhatbuf_r+0x40>
 800fa76:	466a      	mov	r2, sp
 800fa78:	f000 f862 	bl	800fb40 <_fstat_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	dbf2      	blt.n	800fa66 <__swhatbuf_r+0x12>
 800fa80:	9a01      	ldr	r2, [sp, #4]
 800fa82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa8a:	425a      	negs	r2, r3
 800fa8c:	415a      	adcs	r2, r3
 800fa8e:	602a      	str	r2, [r5, #0]
 800fa90:	e7ee      	b.n	800fa70 <__swhatbuf_r+0x1c>
 800fa92:	2340      	movs	r3, #64	; 0x40
 800fa94:	2000      	movs	r0, #0
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	b016      	add	sp, #88	; 0x58
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}

0800fa9c <__smakebuf_r>:
 800fa9c:	898b      	ldrh	r3, [r1, #12]
 800fa9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faa0:	079d      	lsls	r5, r3, #30
 800faa2:	4606      	mov	r6, r0
 800faa4:	460c      	mov	r4, r1
 800faa6:	d507      	bpl.n	800fab8 <__smakebuf_r+0x1c>
 800faa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800faac:	6023      	str	r3, [r4, #0]
 800faae:	6123      	str	r3, [r4, #16]
 800fab0:	2301      	movs	r3, #1
 800fab2:	6163      	str	r3, [r4, #20]
 800fab4:	b002      	add	sp, #8
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
 800fab8:	ab01      	add	r3, sp, #4
 800faba:	466a      	mov	r2, sp
 800fabc:	f7ff ffca 	bl	800fa54 <__swhatbuf_r>
 800fac0:	9900      	ldr	r1, [sp, #0]
 800fac2:	4605      	mov	r5, r0
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7ff f9c7 	bl	800ee58 <_malloc_r>
 800faca:	b948      	cbnz	r0, 800fae0 <__smakebuf_r+0x44>
 800facc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fad0:	059a      	lsls	r2, r3, #22
 800fad2:	d4ef      	bmi.n	800fab4 <__smakebuf_r+0x18>
 800fad4:	f023 0303 	bic.w	r3, r3, #3
 800fad8:	f043 0302 	orr.w	r3, r3, #2
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	e7e3      	b.n	800faa8 <__smakebuf_r+0xc>
 800fae0:	4b0d      	ldr	r3, [pc, #52]	; (800fb18 <__smakebuf_r+0x7c>)
 800fae2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	6020      	str	r0, [r4, #0]
 800fae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	9b00      	ldr	r3, [sp, #0]
 800faf0:	6163      	str	r3, [r4, #20]
 800faf2:	9b01      	ldr	r3, [sp, #4]
 800faf4:	6120      	str	r0, [r4, #16]
 800faf6:	b15b      	cbz	r3, 800fb10 <__smakebuf_r+0x74>
 800faf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fafc:	4630      	mov	r0, r6
 800fafe:	f000 f831 	bl	800fb64 <_isatty_r>
 800fb02:	b128      	cbz	r0, 800fb10 <__smakebuf_r+0x74>
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	f023 0303 	bic.w	r3, r3, #3
 800fb0a:	f043 0301 	orr.w	r3, r3, #1
 800fb0e:	81a3      	strh	r3, [r4, #12]
 800fb10:	89a3      	ldrh	r3, [r4, #12]
 800fb12:	431d      	orrs	r5, r3
 800fb14:	81a5      	strh	r5, [r4, #12]
 800fb16:	e7cd      	b.n	800fab4 <__smakebuf_r+0x18>
 800fb18:	0800efa5 	.word	0x0800efa5

0800fb1c <_read_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4c07      	ldr	r4, [pc, #28]	; (800fb3c <_read_r+0x20>)
 800fb20:	4605      	mov	r5, r0
 800fb22:	4608      	mov	r0, r1
 800fb24:	4611      	mov	r1, r2
 800fb26:	2200      	movs	r2, #0
 800fb28:	6022      	str	r2, [r4, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f7f2 fb72 	bl	8002214 <_read>
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	d102      	bne.n	800fb3a <_read_r+0x1e>
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	b103      	cbz	r3, 800fb3a <_read_r+0x1e>
 800fb38:	602b      	str	r3, [r5, #0]
 800fb3a:	bd38      	pop	{r3, r4, r5, pc}
 800fb3c:	20005390 	.word	0x20005390

0800fb40 <_fstat_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4c07      	ldr	r4, [pc, #28]	; (800fb60 <_fstat_r+0x20>)
 800fb44:	2300      	movs	r3, #0
 800fb46:	4605      	mov	r5, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	f7f2 fba6 	bl	800229e <_fstat>
 800fb52:	1c43      	adds	r3, r0, #1
 800fb54:	d102      	bne.n	800fb5c <_fstat_r+0x1c>
 800fb56:	6823      	ldr	r3, [r4, #0]
 800fb58:	b103      	cbz	r3, 800fb5c <_fstat_r+0x1c>
 800fb5a:	602b      	str	r3, [r5, #0]
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	bf00      	nop
 800fb60:	20005390 	.word	0x20005390

0800fb64 <_isatty_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4c06      	ldr	r4, [pc, #24]	; (800fb80 <_isatty_r+0x1c>)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	4605      	mov	r5, r0
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	6023      	str	r3, [r4, #0]
 800fb70:	f7f2 fba5 	bl	80022be <_isatty>
 800fb74:	1c43      	adds	r3, r0, #1
 800fb76:	d102      	bne.n	800fb7e <_isatty_r+0x1a>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	b103      	cbz	r3, 800fb7e <_isatty_r+0x1a>
 800fb7c:	602b      	str	r3, [r5, #0]
 800fb7e:	bd38      	pop	{r3, r4, r5, pc}
 800fb80:	20005390 	.word	0x20005390

0800fb84 <_init>:
 800fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb86:	bf00      	nop
 800fb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb8a:	bc08      	pop	{r3}
 800fb8c:	469e      	mov	lr, r3
 800fb8e:	4770      	bx	lr

0800fb90 <_fini>:
 800fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb92:	bf00      	nop
 800fb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb96:	bc08      	pop	{r3}
 800fb98:	469e      	mov	lr, r3
 800fb9a:	4770      	bx	lr
